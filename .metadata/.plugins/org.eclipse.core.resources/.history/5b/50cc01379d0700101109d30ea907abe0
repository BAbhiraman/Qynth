/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 *SWO print tutorial: https://youtu.be/iR34qmfyZtU?si=ymslVCKYRUU1sUiR
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include <stdio.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679
#define TAU (2.0 * PI)
#define BUFFER_SIZE 48000 //Phil's lab used 128. 48000 working.
#define INT16_TO_FLOAT 1.0f/(32767.0f)
#define FLOAT_TO_INT16 32767.0f
#define FS 48000.0f; //see IOC see for 48 kHz inaccuracy WAS 48000

// DAC PARAMS
#define DACADDR 0x94
#define CS43L22_REG_ID                              0x01
#define CS43L22_REG_Power_Ctl_1                     0x02
#define CS43L22_REG_Power_Ctl_2                     0x04
#define CS43L22_REG_Clocking_Ctl                    0x05
#define CS43L22_REG_Interface_Ctl_1                 0x06
#define CS43L22_REG_Interface_Ctl_2                 0x07
#define CS43L22_REG_Passthrough_A_Select            0x08
#define CS43L22_REG_Passthrough_B_Select            0x09
#define CS43L22_REG_Analog_ZC_and_SR_Settings       0x0A
#define CS43L22_REG_Passthrough_Gang_Control        0x0C
#define CS43L22_REG_Playback_Ctl_1                  0x0D
#define CS43L22_REG_Misc_Ctl                        0x0E
#define CS43L22_REG_Playback_Ctl_2                  0x0F
#define CS43L22_REG_Passthrough_A_Vol               0x14
#define CS43L22_REG_Passthrough_B_Vol               0x15
#define CS43L22_REG_PCMA_Vol                        0x1A
#define CS43L22_REG_PCMB_Vol                        0x1B
#define CS43L22_REG_BEEP_Freq_On_Time               0x1C
#define CS43L22_REG_BEEP_Vol_Off_Time               0x1D
#define CS43L22_REG_BEEP_Tone_Cfg                   0x1E
#define CS43L22_REG_Tone_Ctl                        0x1F
#define CS43L22_REG_Master_A_Vol                    0x20
#define CS43L22_REG_Master_B_Vol                    0x21
#define CS43L22_REG_Headphone_A_Volume              0x22
#define CS43L22_REG_Headphone_B_Volume              0x23
#define CS43L22_REG_Speaker_A_Volume                0x24
#define CS43L22_REG_Speaker_B_Volume                0x25
#define CS43L22_REG_Channel_Mixer_Swap              0x26
#define CS43L22_REG_Limit_Ctl_1_Thresholds          0x27
#define CS43L22_REG_Limit_Ctl_2_Release_Rate        0x28
#define CS43L22_REG_Limiter_Attack_Rate             0x29
#define CS43L22_REG_Overflow_Clock_Status           0x2E
#define CS43L22_REG_Battery_Compensation            0x2F
#define CS43L22_REG_VP_Battery_Level                0x30
#define CS43L22_REG_Speaker_Status                  0x31
#define CS43L22_REG_Charge_Pump_Frequency           0x34

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

SPI_HandleTypeDef hspi1;

int8_t odeToJoy[] = {4,4,5,7,7,5,4,2,0,0,2,4,4,4,2,2};
uint8_t lenJoy = 16;

/* USER CODE BEGIN PV */
int16_t dacData[BUFFER_SIZE];

static volatile int16_t *outBufPtr = &dacData[0];
uint8_t dataReadyFlag = 0; // added this = 0
static volatile uint8_t writeFirstHalf = 1;
uint64_t ticks = 0; //number of samples output
double tglobal = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
	outBufPtr = &dacData[0];
	writeFirstHalf = 1;
	dataReadyFlag = 1;
	HAL_GPIO_TogglePin(GPIOD, LD4_Pin); //green
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
	outBufPtr = &dacData[BUFFER_SIZE / 2];
	dataReadyFlag = 1;
	writeFirstHalf = 0;
	HAL_GPIO_TogglePin(GPIOD, LD3_Pin); //orange
}

void processData(uint8_t firstHalf) {
	//navflag
	if (firstHalf) {
		HAL_GPIO_TogglePin(GPIOD, LD6_Pin); //blue
	}
	else {
		HAL_GPIO_TogglePin(GPIOD, LD5_Pin); //red
	}
	static float leftOut, rightOut;
	double t;
	double f;
	double phase;
	uint16_t M = BUFFER_SIZE/4;
	uint16_t quarter = M/4;
	uint8_t noteInd = ((uint8_t)(tglobal)) % lenJoy;
	printf("%u\r\n",noteInd);
	f = 440*pow(1.0594630943592952646,odeToJoy[noteInd]); // + 4*sinf(1.5*TAU*t);
	for (uint16_t n = 0; n < (BUFFER_SIZE / 2) - 1; n += 2) {
//		uint16_t i = n/2;
//		if (i < quarter) {
//			leftOut = 4.0*(float)i/(float)M;
//		}
//		else if ((i >= quarter) & (i < 3*quarter)) {
//			leftOut = 2.0 - 4.0*(float)i/(float)M;
//		}
//		else {
//			leftOut = -4.0 + 4.0*(float)i/(float)M;
//		}
		//t = (double)(n/2)/(double)FS;
		t = (ticks)/(double)FS;

		phase = TAU *f* t;
		//tglobal += 1.0/FS;
		leftOut = (float)sin(phase);

		rightOut = leftOut;
		dacData[n + (!writeFirstHalf)*BUFFER_SIZE/2] = (int16_t) (FLOAT_TO_INT16 * leftOut); //15k worked, 25k worked, 30k worked, 32767 worked, 32768 OVERFLOWs andcr
		dacData[n + 1 + (!writeFirstHalf)*BUFFER_SIZE/2] = (int16_t) (FLOAT_TO_INT16 * rightOut);
		ticks++;
//		if ((n <= 4) | (n > (BUFFER_SIZE/2) - 7)) {
//			int16_t datum = (int16_t) (FLOAT_TO_INT16 * leftOut);
//			printf("n %hu, ticks %u, out %d \r\n", n, ticks, datum);
//			printf("out %i\r\n", datum);
//		}
	}
	tglobal++;
//	printf("\r\n");
	dataReadyFlag = 0;

}

// CS43L22 Stereo DAC driver by https://github.com/deadsy/googoomuck/blob/master/drivers/cs43l22.h
enum {
	DAC_OUTPUT_OFF,		// must be 0
	DAC_OUTPUT_SPEAKER,
	DAC_OUTPUT_HEADPHONE,
	DAC_OUTPUT_BOTH,
	DAC_OUTPUT_AUTO,
	DAC_OUTPUT_MAX,		// must be last
};

struct cs4x_cfg {
	//struct i2c_drv *i2c;	// i2c bus
	uint8_t adr;		// device i2c bus address
	//int rst;		// gpio for reset pin
	int out;		// output device
};

struct cs4x_drv {
	struct cs4x_cfg cfg;
};

HAL_StatusTypeDef i2c_wr(uint8_t *buf, uint8_t Nbytes) {
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Transmit(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
	return rc;
}

HAL_StatusTypeDef i2c_rd(uint8_t *buf, uint8_t Nbytes) {
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Receive(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
	return rc;
}
// read a dac register
static int cs4x_rd(struct cs4x_drv *dac, uint8_t reg, uint8_t *val) {
	uint8_t buf[1] = { reg };
	int rc;
	rc = i2c_wr(buf, 1);
	if (rc != 0) {
		return rc;
	}
	rc = i2c_rd(buf, 1);
	if (rc != 0) {
		return rc;
	}
	*val = buf[0];
	return 0;
}

// write a dac register
static int cs4x_wr(struct cs4x_drv *dac, uint8_t reg, uint8_t val) {
	uint8_t buf[2] = { reg, val };
	return i2c_wr(buf, 2);
}

// read/modify/write a register
static int cs4x_rmw(struct cs4x_drv *dac, uint8_t reg, uint8_t mask,
		uint8_t val) {
	uint8_t x;
	int rc;
	rc = cs4x_rd(dac, reg, &x);
	if (rc != 0) {
		return rc;
	}
	x &= ~mask;
	x |= val & mask;
	return cs4x_wr(dac, reg, x);
}

// set bits in a register
static int cs4x_set(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
	return cs4x_rmw(dac, reg, bits, 0xff);
}

// clear bits in a register
static int cs4x_clr(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
	return cs4x_rmw(dac, reg, bits, 0);
}

//-----------------------------------------------------------------------------

// read and verify the device id
static int cs4x_id(struct cs4x_drv *dac) {
	uint8_t id;
	int rc;
	rc = cs4x_rd(dac, CS43L22_REG_ID, &id);
	if (rc != 0) {
		return rc;
	}
	if ((id & 0xf8) != 0xe0) {
		return -1;
	}
	return 0;
}

//-----------------------------------------------------------------------------

// set the output device
int cs4x_output(struct cs4x_drv *dac, unsigned int out) {
	const uint8_t ctrl[DAC_OUTPUT_MAX] = { 0xff, 0xfa, 0xaf, 0xaa, 0x05 };
	int rc;
	if (out >= DAC_OUTPUT_MAX) {
		out = DAC_OUTPUT_OFF;
	}
	rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, ctrl[out]);
	if (rc != 0) {
		return rc;
	}
	dac->cfg.out = out;
	return 0;
}

//-----------------------------------------------------------------------------
// volume controls
// Map 0..255 to the control value for a volume register.
// 0 is minium volume (or mute), 255 is maximum volume.

// set the master volume
int cs4x_master_volume(struct cs4x_drv *dac, uint8_t vol) {
	uint32_t x;
	int rc;
	x = (((281 - 52) << 16) / 255) * vol + (52 << 16);
	x >>= 16;
	x &= 255;
	rc = cs4x_wr(dac, CS43L22_REG_Master_A_Vol, x);
	rc |= cs4x_wr(dac, CS43L22_REG_Master_B_Vol, x);
	return rc;
}

// set the headphone volume
int cs4x_headphone_volume(struct cs4x_drv *dac, uint8_t vol) {
	uint32_t x;
	int rc;
	if (vol == 0) {
		x = 1;		// muted
	} else {
		x = (((257 - 52) << 16) / 255) * (vol - 1) + (52 << 16);
		x >>= 16;
		x &= 255;
	}
	rc = cs4x_wr(dac, CS43L22_REG_Headphone_A_Volume, x);
	rc |= cs4x_wr(dac, CS43L22_REG_Headphone_B_Volume, x);
	return rc;
}

// set the speaker volume
int cs4x_speaker_volume(struct cs4x_drv *dac, uint8_t vol) {
	uint32_t x;
	int rc;
	if (vol == 0) {
		x = 1;		// muted
	} else {
		x = (((257 - 64) << 16) / 255) * (vol - 1) + (64 << 16);
		x >>= 16;
		x &= 255;
	}
	rc = cs4x_wr(dac, CS43L22_REG_Speaker_A_Volume, x);
	rc |= cs4x_wr(dac, CS43L22_REG_Speaker_B_Volume, x);
	return rc;
}

// set the pcm volume
int cs4x_pcm_volume(struct cs4x_drv *dac, uint8_t vol) {
	uint32_t x;
	int rc;
	if (vol == 0) {
		x = 0x80;	// muted
	} else {
		x = (((281 - 25) << 16) / (255 - 1)) * (vol - 1) + (25 << 16);
		x >>= 16;
		x &= 255;
	}
	rc = cs4x_wr(dac, CS43L22_REG_PCMA_Vol, x);
	rc |= cs4x_wr(dac, CS43L22_REG_PCMB_Vol, x);
	return rc;
}

//-----------------------------------------------------------------------------
// mute on/off

static int cs4x_mute_on(struct cs4x_drv *dac) {
	int rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, 0xff);
	rc |= cs4x_headphone_volume(dac, 0);
	return rc;
}

static int cs4x_mute_off(struct cs4x_drv *dac) {
	int rc = cs4x_headphone_volume(dac, 0xff);
	rc |= cs4x_output(dac, dac->cfg.out);
	return rc;
}

//-----------------------------------------------------------------------------

int cs4x_init(struct cs4x_drv *dac, struct cs4x_cfg *cfg) {
	int rc;

	memset(dac, 0, sizeof(struct cs4x_drv));
	dac->cfg = *cfg;

	// 4.9 Recommended Power-Up Sequence (1,2)
	// reset the dac
	// DAC Reset is active low, so pull the pin high.
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_SET);

	rc = cs4x_id(dac);
	if (rc != 0) {
		printf("cs4x bad device id %d\r\n", rc);
		goto exit;
	}
	// 4.9 Recommended Power-Up Sequence (4)
	// 4.11 Required Initialization Settings
	rc |= cs4x_wr(dac, 0, 0x99);
	rc |= cs4x_wr(dac, 0x47, 0x80);
	rc |= cs4x_set(dac, 0x32, 1 << 7);
	rc |= cs4x_clr(dac, 0x32, 1 << 7);
	rc |= cs4x_wr(dac, 0, 0);

	// set the output to AUTO
	rc |= cs4x_output(dac, DAC_OUTPUT_AUTO);
	// Clock configuration: Auto detection
	rc |= cs4x_wr(dac, CS43L22_REG_Clocking_Ctl, 0x81);
	// Set the Slave Mode and the audio Standard
	rc |= cs4x_wr(dac, CS43L22_REG_Interface_Ctl_1, 0x04);

	// Set the Master volume
	rc |= cs4x_master_volume(dac, 169);

	// If the Speaker is enabled, set the Mono mode and volume attenuation level
	if (dac->cfg.out != DAC_OUTPUT_OFF
			&& dac->cfg.out != DAC_OUTPUT_HEADPHONE) {
		// Set the Speaker Mono mode
		rc |= cs4x_wr(dac, CS43L22_REG_Playback_Ctl_2, 0x06);
		rc |= cs4x_speaker_volume(dac, 0xff);
	}
	// Additional configuration for the CODEC. These configurations are done to reduce
	// the time needed for the Codec to power off. If these configurations are removed,
	// then a long delay should be added between powering off the Codec and switching
	// off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	// If this delay is not inserted, then the codec will not shut down properly and
	// it results in high noise after shut down.

	// Disable the analog soft ramp
	rc |= cs4x_rmw(dac, CS43L22_REG_Analog_ZC_and_SR_Settings, 0x0f, 0x00);
	// Disable the digital soft ramp
	rc |= cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x04);
	// Disable the limiter attack level
	rc |= cs4x_wr(dac, CS43L22_REG_Limit_Ctl_1_Thresholds, 0x00);
	// Adjust Bass and Treble levels
	rc |= cs4x_wr(dac, CS43L22_REG_Tone_Ctl, 0x0f);
	// Adjust PCM volume level
	rc |= cs4x_pcm_volume(dac, 241);

	exit: return rc;
}

//-----------------------------------------------------------------------------

int cs4x_start(struct cs4x_drv *dac) {
	// Enable the digital soft ramp
	int rc = cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x06);
	// Enable Output device
	rc |= cs4x_mute_off(dac);
	// Power on the Codec
	rc |= cs4x_wr(dac, CS43L22_REG_Power_Ctl_1, 0x9e);
	return rc;
}

int cs4x_stop(struct cs4x_drv *dac) {
	// Mute the output
	int rc = cs4x_mute_on(dac);
	// Disable the digital soft ramp
	rc |= cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x04);
	// Power down the DAC and the speaker (PMDAC and PMSPK bits)
	rc |= cs4x_wr(dac, CS43L22_REG_Power_Ctl_1, 0x9f);
	return rc;
}

int cs4x_pause(struct cs4x_drv *dac) {
	// Mute the output
	int rc = cs4x_mute_on(dac);
	// Put the Codec in Power save mode
	rc |= cs4x_wr(dac, CS43L22_REG_Power_Ctl_1, 0x01);
	return rc;
}

int cs4x_resume(struct cs4x_drv *dac) {
	// Unmute the output
	int rc = cs4x_mute_off(dac);
	// Power on the Codec
	rc |= cs4x_wr(dac, CS43L22_REG_Power_Ctl_1, 0x9e);
	return rc;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
	uint8_t buf[12];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_I2C1_Init();
  MX_I2S3_Init();
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
	// EXT DAC INTIIALIZATION
	struct cs4x_cfg cfgdac;
	cfgdac.adr = DACADDR;
	cfgdac.out = DAC_OUTPUT_HEADPHONE;
	struct cs4x_drv dac;
	int rc = cs4x_init(&dac, &cfgdac);
	printf("CS4X init returned %d\r\n", rc);
	rc = cs4x_start(&dac);
	printf("CS4X start returned %d\r\n", rc);

	HAL_Delay(1);

	HAL_StatusTypeDef res;
	// Dummy test signal that doesn't use DMA
//	int16_t signal[16384]; //was 46876
//	int nsamples = sizeof(signal) / sizeof(signal[0]);
//	int i = 0;
//	while (i < nsamples) {
//		double t = ((double) i / 2.0) / ((double) nsamples);
//		signal[i] = 32768 * sin(100.0 * TAU * t); // left
//		signal[i + 1] = signal[i]; // right
//		i += 2;
//	}


	// Attempt to transmit audio data to DAC
	processData();
	//outBufPtr = &dacData[BUFFER_SIZE / 2];
	//processData();
	res = HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) dacData, BUFFER_SIZE);
	//res = HAL_I2S_Transmit(&hi2s3, (uint16_t*) signal, nsamples,HAL_MAX_DELAY);
	if (res != HAL_OK) {
		printf("I2S - ERROR, res = %d!\r\n", res);
	}

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
//		HAL_Delay(500);
		//printf("In loop \r\n");
		// Attempt to transmit audio data to DAC
//		res = HAL_I2S_Transmit(&hi2s3, (uint16_t*) signal, nsamples,HAL_MAX_DELAY);
//		if (res != HAL_OK) {
//			printf("I2S - ERROR, res = %d!\r\n", res);
//			//break;
//		}

		if (dataReadyFlag) {
			processData();
			//printf("processing data \r\n");
		}

	}

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{

  /* USER CODE BEGIN I2S3_Init 0 */

  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
		ITM_SendChar(*ptr++);
	}
	return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("Error\r\n");
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
