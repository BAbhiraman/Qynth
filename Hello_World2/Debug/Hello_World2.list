
Hello_World2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c854  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  0800c9e8  0800c9e8  0000d9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d370  0800d370  0000f170  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d370  0800d370  0000e370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d378  0800d378  0000f170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d378  0800d378  0000e378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d37c  0800d37c  0000e37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800d380  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f170  2**0
                  CONTENTS
 10 .bss          000195c4  20000170  20000170  0000f170  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20019734  20019734  0000f170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f170  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b19  00000000  00000000  0000f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d88  00000000  00000000  00025cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00029a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4a  00000000  00000000  0002ae68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025476  00000000  00000000  0002bdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001adea  00000000  00000000  00051228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdc7d  00000000  00000000  0006c012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139c8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fe0  00000000  00000000  00139cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0013fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9cc 	.word	0x0800c9cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	0800c9cc 	.word	0x0800c9cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b988 	b.w	8000eb0 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	468e      	mov	lr, r1
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4688      	mov	r8, r1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d14a      	bne.n	8000c5e <__udivmoddi4+0xa6>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d962      	bls.n	8000c94 <__udivmoddi4+0xdc>
 8000bce:	fab2 f682 	clz	r6, r2
 8000bd2:	b14e      	cbz	r6, 8000be8 <__udivmoddi4+0x30>
 8000bd4:	f1c6 0320 	rsb	r3, r6, #32
 8000bd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000be0:	40b7      	lsls	r7, r6
 8000be2:	ea43 0808 	orr.w	r8, r3, r8
 8000be6:	40b4      	lsls	r4, r6
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf4:	0c23      	lsrs	r3, r4, #16
 8000bf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x62>
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c0c:	f080 80ea 	bcs.w	8000de4 <__udivmoddi4+0x22c>
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f240 80e7 	bls.w	8000de4 <__udivmoddi4+0x22c>
 8000c16:	3902      	subs	r1, #2
 8000c18:	443b      	add	r3, r7
 8000c1a:	1a9a      	subs	r2, r3, r2
 8000c1c:	b2a3      	uxth	r3, r4
 8000c1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c2e:	459c      	cmp	ip, r3
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0x8e>
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c38:	f080 80d6 	bcs.w	8000de8 <__udivmoddi4+0x230>
 8000c3c:	459c      	cmp	ip, r3
 8000c3e:	f240 80d3 	bls.w	8000de8 <__udivmoddi4+0x230>
 8000c42:	443b      	add	r3, r7
 8000c44:	3802      	subs	r0, #2
 8000c46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4a:	eba3 030c 	sub.w	r3, r3, ip
 8000c4e:	2100      	movs	r1, #0
 8000c50:	b11d      	cbz	r5, 8000c5a <__udivmoddi4+0xa2>
 8000c52:	40f3      	lsrs	r3, r6
 8000c54:	2200      	movs	r2, #0
 8000c56:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d905      	bls.n	8000c6e <__udivmoddi4+0xb6>
 8000c62:	b10d      	cbz	r5, 8000c68 <__udivmoddi4+0xb0>
 8000c64:	e9c5 0100 	strd	r0, r1, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	e7f5      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000c6e:	fab3 f183 	clz	r1, r3
 8000c72:	2900      	cmp	r1, #0
 8000c74:	d146      	bne.n	8000d04 <__udivmoddi4+0x14c>
 8000c76:	4573      	cmp	r3, lr
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xc8>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 8105 	bhi.w	8000e8a <__udivmoddi4+0x2d2>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	4690      	mov	r8, r2
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e5      	beq.n	8000c5a <__udivmoddi4+0xa2>
 8000c8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c92:	e7e2      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f000 8090 	beq.w	8000dba <__udivmoddi4+0x202>
 8000c9a:	fab2 f682 	clz	r6, r2
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	f040 80a4 	bne.w	8000dec <__udivmoddi4+0x234>
 8000ca4:	1a8a      	subs	r2, r1, r2
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	b280      	uxth	r0, r0
 8000cae:	b2bc      	uxth	r4, r7
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cb6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x11e>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x11c>
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	f200 80e0 	bhi.w	8000e94 <__udivmoddi4+0x2dc>
 8000cd4:	46c4      	mov	ip, r8
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cdc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce4:	fb02 f404 	mul.w	r4, r2, r4
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x144>
 8000cec:	18fb      	adds	r3, r7, r3
 8000cee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x142>
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	f200 80ca 	bhi.w	8000e8e <__udivmoddi4+0x2d6>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0x98>
 8000d04:	f1c1 0620 	rsb	r6, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d0e:	431f      	orrs	r7, r3
 8000d10:	fa0e f401 	lsl.w	r4, lr, r1
 8000d14:	fa20 f306 	lsr.w	r3, r0, r6
 8000d18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	fa1f fc87 	uxth.w	ip, r7
 8000d2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x1a0>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4a:	f080 809c 	bcs.w	8000e86 <__udivmoddi4+0x2ce>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f240 8099 	bls.w	8000e86 <__udivmoddi4+0x2ce>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	fa1f fe83 	uxth.w	lr, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d70:	45a4      	cmp	ip, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1ce>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7a:	f080 8082 	bcs.w	8000e82 <__udivmoddi4+0x2ca>
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d97f      	bls.n	8000e82 <__udivmoddi4+0x2ca>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	443c      	add	r4, r7
 8000d86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8a:	eba4 040c 	sub.w	r4, r4, ip
 8000d8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d92:	4564      	cmp	r4, ip
 8000d94:	4673      	mov	r3, lr
 8000d96:	46e1      	mov	r9, ip
 8000d98:	d362      	bcc.n	8000e60 <__udivmoddi4+0x2a8>
 8000d9a:	d05f      	beq.n	8000e5c <__udivmoddi4+0x2a4>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x1fe>
 8000d9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000da2:	eb64 0409 	sbc.w	r4, r4, r9
 8000da6:	fa04 f606 	lsl.w	r6, r4, r6
 8000daa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dae:	431e      	orrs	r6, r3
 8000db0:	40cc      	lsrs	r4, r1
 8000db2:	e9c5 6400 	strd	r6, r4, [r5]
 8000db6:	2100      	movs	r1, #0
 8000db8:	e74f      	b.n	8000c5a <__udivmoddi4+0xa2>
 8000dba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dbe:	0c01      	lsrs	r1, r0, #16
 8000dc0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc4:	b280      	uxth	r0, r0
 8000dc6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4638      	mov	r0, r7
 8000dce:	463c      	mov	r4, r7
 8000dd0:	46b8      	mov	r8, r7
 8000dd2:	46be      	mov	lr, r7
 8000dd4:	2620      	movs	r6, #32
 8000dd6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dda:	eba2 0208 	sub.w	r2, r2, r8
 8000dde:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de2:	e766      	b.n	8000cb2 <__udivmoddi4+0xfa>
 8000de4:	4601      	mov	r1, r0
 8000de6:	e718      	b.n	8000c1a <__udivmoddi4+0x62>
 8000de8:	4610      	mov	r0, r2
 8000dea:	e72c      	b.n	8000c46 <__udivmoddi4+0x8e>
 8000dec:	f1c6 0220 	rsb	r2, r6, #32
 8000df0:	fa2e f302 	lsr.w	r3, lr, r2
 8000df4:	40b7      	lsls	r7, r6
 8000df6:	40b1      	lsls	r1, r6
 8000df8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e00:	430a      	orrs	r2, r1
 8000e02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e06:	b2bc      	uxth	r4, r7
 8000e08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb08 f904 	mul.w	r9, r8, r4
 8000e16:	40b0      	lsls	r0, r6
 8000e18:	4589      	cmp	r9, r1
 8000e1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e1e:	b280      	uxth	r0, r0
 8000e20:	d93e      	bls.n	8000ea0 <__udivmoddi4+0x2e8>
 8000e22:	1879      	adds	r1, r7, r1
 8000e24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e28:	d201      	bcs.n	8000e2e <__udivmoddi4+0x276>
 8000e2a:	4589      	cmp	r9, r1
 8000e2c:	d81f      	bhi.n	8000e6e <__udivmoddi4+0x2b6>
 8000e2e:	eba1 0109 	sub.w	r1, r1, r9
 8000e32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e36:	fb09 f804 	mul.w	r8, r9, r4
 8000e3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	4542      	cmp	r2, r8
 8000e46:	d229      	bcs.n	8000e9c <__udivmoddi4+0x2e4>
 8000e48:	18ba      	adds	r2, r7, r2
 8000e4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e4e:	d2c4      	bcs.n	8000dda <__udivmoddi4+0x222>
 8000e50:	4542      	cmp	r2, r8
 8000e52:	d2c2      	bcs.n	8000dda <__udivmoddi4+0x222>
 8000e54:	f1a9 0102 	sub.w	r1, r9, #2
 8000e58:	443a      	add	r2, r7
 8000e5a:	e7be      	b.n	8000dda <__udivmoddi4+0x222>
 8000e5c:	45f0      	cmp	r8, lr
 8000e5e:	d29d      	bcs.n	8000d9c <__udivmoddi4+0x1e4>
 8000e60:	ebbe 0302 	subs.w	r3, lr, r2
 8000e64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e68:	3801      	subs	r0, #1
 8000e6a:	46e1      	mov	r9, ip
 8000e6c:	e796      	b.n	8000d9c <__udivmoddi4+0x1e4>
 8000e6e:	eba7 0909 	sub.w	r9, r7, r9
 8000e72:	4449      	add	r1, r9
 8000e74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7c:	fb09 f804 	mul.w	r8, r9, r4
 8000e80:	e7db      	b.n	8000e3a <__udivmoddi4+0x282>
 8000e82:	4673      	mov	r3, lr
 8000e84:	e77f      	b.n	8000d86 <__udivmoddi4+0x1ce>
 8000e86:	4650      	mov	r0, sl
 8000e88:	e766      	b.n	8000d58 <__udivmoddi4+0x1a0>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e6fd      	b.n	8000c8a <__udivmoddi4+0xd2>
 8000e8e:	443b      	add	r3, r7
 8000e90:	3a02      	subs	r2, #2
 8000e92:	e733      	b.n	8000cfc <__udivmoddi4+0x144>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	443b      	add	r3, r7
 8000e9a:	e71c      	b.n	8000cd6 <__udivmoddi4+0x11e>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	e79c      	b.n	8000dda <__udivmoddi4+0x222>
 8000ea0:	eba1 0109 	sub.w	r1, r1, r9
 8000ea4:	46c4      	mov	ip, r8
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fb09 f804 	mul.w	r8, r9, r4
 8000eae:	e7c4      	b.n	8000e3a <__udivmoddi4+0x282>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ebc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d013      	beq.n	8000ef4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ecc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ed4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00b      	beq.n	8000ef4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000edc:	e000      	b.n	8000ee0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ede:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ee0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f9      	beq.n	8000ede <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET); //green
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f12:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <HAL_I2S_TxHalfCpltCallback+0x40>)
 8000f14:	f002 f844 	bl	8002fa0 <HAL_GPIO_WritePin>
	outBufPtr = &dacData[0];
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_I2S_TxHalfCpltCallback+0x44>)
 8000f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f4c <HAL_I2S_TxHalfCpltCallback+0x48>)
 8000f1c:	601a      	str	r2, [r3, #0]
	writeFirstHalf = 1;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
	dataReadyFlag = 1;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <HAL_I2S_TxHalfCpltCallback+0x50>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <HAL_I2S_TxHalfCpltCallback+0x40>)
 8000f32:	f002 f835 	bl	8002fa0 <HAL_GPIO_WritePin>
	processData(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f83a 	bl	8000fb0 <processData>
	//processData(0);
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	200002e0 	.word	0x200002e0
 8000f50:	200179e1 	.word	0x200179e1
 8000f54:	200179e0 	.word	0x200179e0

08000f58 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f66:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <HAL_I2S_TxCpltCallback+0x40>)
 8000f68:	f002 f81a 	bl	8002fa0 <HAL_GPIO_WritePin>
	outBufPtr = &dacData[BUFFER_SIZE / 2];
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <HAL_I2S_TxCpltCallback+0x44>)
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa0 <HAL_I2S_TxCpltCallback+0x48>)
 8000f70:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_I2S_TxCpltCallback+0x4c>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
	writeFirstHalf = 0;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <HAL_I2S_TxCpltCallback+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET); //orange
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <HAL_I2S_TxCpltCallback+0x40>)
 8000f86:	f002 f80b 	bl	8002fa0 <HAL_GPIO_WritePin>
	processData(0);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f810 	bl	8000fb0 <processData>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	2000be60 	.word	0x2000be60
 8000fa4:	200179e0 	.word	0x200179e0
 8000fa8:	200179e1 	.word	0x200179e1
 8000fac:	00000000 	.word	0x00000000

08000fb0 <processData>:

void processData(uint8_t firstHalf) {
 8000fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fb4:	b08a      	sub	sp, #40	@ 0x28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
	//navflag
	if (firstHalf) {
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <processData+0x20>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET); //blue
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fc8:	487b      	ldr	r0, [pc, #492]	@ (80011b8 <processData+0x208>)
 8000fca:	f001 ffe9 	bl	8002fa0 <HAL_GPIO_WritePin>
 8000fce:	e005      	b.n	8000fdc <processData+0x2c>
	}
	else {
		HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET); //red
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd6:	4878      	ldr	r0, [pc, #480]	@ (80011b8 <processData+0x208>)
 8000fd8:	f001 ffe2 	bl	8002fa0 <HAL_GPIO_WritePin>
	static float leftOut, rightOut;
	static int16_t leftOutInt, rightOutInt;
	double t;
	double f;
	//double phase;
	uint16_t phase = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t M = BUFFER_SIZE/4;
 8000fe0:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000fe4:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t quarter = M/4;
 8000fe6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	843b      	strh	r3, [r7, #32]
	uint8_t noteInd = ((uint8_t)(loops/2)) % lenJoy;
 8000fec:	4b73      	ldr	r3, [pc, #460]	@ (80011bc <processData+0x20c>)
 8000fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	0842      	lsrs	r2, r0, #1
 8000ffc:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001000:	084b      	lsrs	r3, r1, #1
 8001002:	b2d3      	uxtb	r3, r2
 8001004:	4a6e      	ldr	r2, [pc, #440]	@ (80011c0 <processData+0x210>)
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	fbb3 f1f2 	udiv	r1, r3, r2
 800100c:	fb01 f202 	mul.w	r2, r1, r2
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	77fb      	strb	r3, [r7, #31]
	//printf("%u\r\n",noteInd);
	f = 440*pow(1.0594630943592952646,odeToJoy[noteInd]); // + 4*sinf(1.5*TAU*t);
 8001014:	7ffb      	ldrb	r3, [r7, #31]
 8001016:	4a6b      	ldr	r2, [pc, #428]	@ (80011c4 <processData+0x214>)
 8001018:	56d3      	ldrsb	r3, [r2, r3]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa7a 	bl	8000514 <__aeabi_i2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	ec43 2b11 	vmov	d1, r2, r3
 8001028:	ed9f 0b5d 	vldr	d0, [pc, #372]	@ 80011a0 <processData+0x1f0>
 800102c:	f00a fd70 	bl	800bb10 <pow>
 8001030:	ec51 0b10 	vmov	r0, r1, d0
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b63      	ldr	r3, [pc, #396]	@ (80011c8 <processData+0x218>)
 800103a:	f7ff fad5 	bl	80005e8 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	e9c7 2304 	strd	r2, r3, [r7, #16]
	//printf("%d \r\n", odeToJoy[noteInd]);
	for (uint16_t n = 0; n < (BUFFER_SIZE / 2) - 1; n += 2) {
 8001046:	2300      	movs	r3, #0
 8001048:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800104a:	e084      	b.n	8001156 <processData+0x1a6>
//		}
//		else {
//			leftOut = -4.0 + 4.0*(float)i/(float)M;
//		}
		//t = (double)(n/2)/(double)FS;
		f = 440*(1+1e-6*ticks);
 800104c:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <processData+0x21c>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fa91 	bl	800057c <__aeabi_ul2d>
 800105a:	a353      	add	r3, pc, #332	@ (adr r3, 80011a8 <processData+0x1f8>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fac2 	bl	80005e8 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b57      	ldr	r3, [pc, #348]	@ (80011d0 <processData+0x220>)
 8001072:	f7ff f903 	bl	800027c <__adddf3>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b51      	ldr	r3, [pc, #324]	@ (80011c8 <processData+0x218>)
 8001084:	f7ff fab0 	bl	80005e8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		t = (ticks)/(double)FS;
 8001090:	4b4e      	ldr	r3, [pc, #312]	@ (80011cc <processData+0x21c>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fa6f 	bl	800057c <__aeabi_ul2d>
 800109e:	a344      	add	r3, pc, #272	@ (adr r3, 80011b0 <processData+0x200>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fbca 	bl	800083c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2302 	strd	r2, r3, [r7, #8]

		phase = ((uint16_t)(LOOKUPSIZE *f* t)) % LOOKUPSIZE;
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <processData+0x224>)
 80010b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010ba:	f7ff fa95 	bl	80005e8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010ca:	f7ff fa8d 	bl	80005e8 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd37 	bl	8000b48 <__aeabi_d2uiz>
 80010da:	4603      	mov	r3, r0
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		//tglobal += 1.0/FS;
		//leftOut = (float)sin(phase);
		leftOutInt = sineLookupTable[phase];
 80010e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010e6:	4a3c      	ldr	r2, [pc, #240]	@ (80011d8 <processData+0x228>)
 80010e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <processData+0x22c>)
 80010f0:	801a      	strh	r2, [r3, #0]

		//rightOut = leftOut;
		dacData[n + (!firstHalf)*BUFFER_SIZE/2] = (int16_t) leftOutInt; //(10000 * leftOut); //15k worked, 25k worked, 30k worked, 32767 worked, 32768 OVERFLOWs andcr
 80010f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	2a00      	cmp	r2, #0
 80010f8:	d102      	bne.n	8001100 <processData+0x150>
 80010fa:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 80010fe:	e000      	b.n	8001102 <processData+0x152>
 8001100:	2200      	movs	r2, #0
 8001102:	4413      	add	r3, r2
 8001104:	4a35      	ldr	r2, [pc, #212]	@ (80011dc <processData+0x22c>)
 8001106:	f9b2 1000 	ldrsh.w	r1, [r2]
 800110a:	4a35      	ldr	r2, [pc, #212]	@ (80011e0 <processData+0x230>)
 800110c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		dacData[n + 1 + (!firstHalf)*BUFFER_SIZE/2] = (int16_t) rightOutInt; //(10000 * rightOut);
 8001110:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001112:	3301      	adds	r3, #1
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	2a00      	cmp	r2, #0
 8001118:	d102      	bne.n	8001120 <processData+0x170>
 800111a:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 800111e:	e000      	b.n	8001122 <processData+0x172>
 8001120:	2200      	movs	r2, #0
 8001122:	4413      	add	r3, r2
 8001124:	4a2f      	ldr	r2, [pc, #188]	@ (80011e4 <processData+0x234>)
 8001126:	f9b2 1000 	ldrsh.w	r1, [r2]
 800112a:	4a2d      	ldr	r2, [pc, #180]	@ (80011e0 <processData+0x230>)
 800112c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ticks++;
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <processData+0x21c>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f112 0801 	adds.w	r8, r2, #1
 800113a:	f143 0900 	adc.w	r9, r3, #0
 800113e:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <processData+0x21c>)
 8001140:	e9c3 8900 	strd	r8, r9, [r3]
//		printf("\nNote %d \r\n", odeToJoy[noteInd]);
		if ((n <= 4) | (n > (BUFFER_SIZE/2) - 7)) {
 8001144:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001146:	2b04      	cmp	r3, #4
 8001148:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800114a:	f645 52b9 	movw	r2, #23993	@ 0x5db9
 800114e:	4293      	cmp	r3, r2
	for (uint16_t n = 0; n < (BUFFER_SIZE / 2) - 1; n += 2) {
 8001150:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001152:	3302      	adds	r3, #2
 8001154:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001156:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001158:	f645 52be 	movw	r2, #23998	@ 0x5dbe
 800115c:	4293      	cmp	r3, r2
 800115e:	f67f af75 	bls.w	800104c <processData+0x9c>
//			HAL_Delay(1);
//			printf("out %i\r\n", datum);
//			HAL_Delay(1);
		}
	}
	loops++;
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <processData+0x20c>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	1c54      	adds	r4, r2, #1
 800116a:	f143 0500 	adc.w	r5, r3, #0
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <processData+0x20c>)
 8001170:	e9c3 4500 	strd	r4, r5, [r3]
//	printf("\r\n");
	dataReadyFlag = 0;
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <processData+0x238>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET); //blue
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <processData+0x208>)
 8001182:	f001 ff0d 	bl	8002fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET); //red
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800118c:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <processData+0x208>)
 800118e:	f001 ff07 	bl	8002fa0 <HAL_GPIO_WritePin>

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800119c:	f3af 8000 	nop.w
 80011a0:	92d97963 	.word	0x92d97963
 80011a4:	3ff0f38f 	.word	0x3ff0f38f
 80011a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80011ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40e77000 	.word	0x40e77000
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	200179f0 	.word	0x200179f0
 80011c0:	20000014 	.word	0x20000014
 80011c4:	20000004 	.word	0x20000004
 80011c8:	407b8000 	.word	0x407b8000
 80011cc:	200179e8 	.word	0x200179e8
 80011d0:	3ff00000 	.word	0x3ff00000
 80011d4:	40900000 	.word	0x40900000
 80011d8:	0800cad8 	.word	0x0800cad8
 80011dc:	200179f8 	.word	0x200179f8
 80011e0:	200002e0 	.word	0x200002e0
 80011e4:	200179fa 	.word	0x200179fa
 80011e8:	200179e0 	.word	0x200179e0

080011ec <i2c_wr>:

struct cs4x_drv {
	struct cs4x_cfg cfg;
};

HAL_StatusTypeDef i2c_wr(uint8_t *buf, uint8_t Nbytes) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Transmit(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	2194      	movs	r1, #148	@ 0x94
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <i2c_wr+0x30>)
 8001208:	f002 f828 	bl	800325c <HAL_I2C_Master_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
	return rc;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000018c 	.word	0x2000018c

08001220 <i2c_rd>:

HAL_StatusTypeDef i2c_rd(uint8_t *buf, uint8_t Nbytes) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Receive(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	b29b      	uxth	r3, r3
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	2194      	movs	r1, #148	@ 0x94
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <i2c_rd+0x30>)
 800123c:	f002 f90c 	bl	8003458 <HAL_I2C_Master_Receive>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
	return rc;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000018c 	.word	0x2000018c

08001254 <cs4x_rd>:
// read a dac register
static int cs4x_rd(struct cs4x_drv *dac, uint8_t reg, uint8_t *val) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[1] = { reg };
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	743b      	strb	r3, [r7, #16]
	int rc;
	rc = i2c_wr(buf, 1);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	2101      	movs	r1, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ffbd 	bl	80011ec <i2c_wr>
 8001272:	4603      	mov	r3, r0
 8001274:	617b      	str	r3, [r7, #20]
	if (rc != 0) {
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <cs4x_rd+0x2c>
		return rc;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	e010      	b.n	80012a2 <cs4x_rd+0x4e>
	}
	rc = i2c_rd(buf, 1);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffca 	bl	8001220 <i2c_rd>
 800128c:	4603      	mov	r3, r0
 800128e:	617b      	str	r3, [r7, #20]
	if (rc != 0) {
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <cs4x_rd+0x46>
		return rc;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	e003      	b.n	80012a2 <cs4x_rd+0x4e>
	}
	*val = buf[0];
 800129a:	7c3a      	ldrb	r2, [r7, #16]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	701a      	strb	r2, [r3, #0]
	return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <cs4x_wr>:

// write a dac register
static int cs4x_wr(struct cs4x_drv *dac, uint8_t reg, uint8_t val) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70fb      	strb	r3, [r7, #3]
 80012b6:	4613      	mov	r3, r2
 80012b8:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2] = { reg, val };
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	733b      	strb	r3, [r7, #12]
 80012be:	78bb      	ldrb	r3, [r7, #2]
 80012c0:	737b      	strb	r3, [r7, #13]
	return i2c_wr(buf, 2);
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2102      	movs	r1, #2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff8f 	bl	80011ec <i2c_wr>
 80012ce:	4603      	mov	r3, r0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <cs4x_rmw>:

// read/modify/write a register
static int cs4x_rmw(struct cs4x_drv *dac, uint8_t reg, uint8_t mask,
		uint8_t val) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	70fb      	strb	r3, [r7, #3]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70bb      	strb	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	707b      	strb	r3, [r7, #1]
	uint8_t x;
	int rc;
	rc = cs4x_rd(dac, reg, &x);
 80012f2:	f107 020b 	add.w	r2, r7, #11
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffaa 	bl	8001254 <cs4x_rd>
 8001300:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <cs4x_rmw+0x34>
		return rc;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	e018      	b.n	800133e <cs4x_rmw+0x66>
	}
	x &= ~mask;
 800130c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001310:	43db      	mvns	r3, r3
 8001312:	b25a      	sxtb	r2, r3
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	b25b      	sxtb	r3, r3
 8001318:	4013      	ands	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	72fb      	strb	r3, [r7, #11]
	x |= val & mask;
 8001320:	787a      	ldrb	r2, [r7, #1]
 8001322:	78bb      	ldrb	r3, [r7, #2]
 8001324:	4013      	ands	r3, r2
 8001326:	b2da      	uxtb	r2, r3
 8001328:	7afb      	ldrb	r3, [r7, #11]
 800132a:	4313      	orrs	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	72fb      	strb	r3, [r7, #11]
	return cs4x_wr(dac, reg, x);
 8001330:	7afa      	ldrb	r2, [r7, #11]
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffb7 	bl	80012aa <cs4x_wr>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <cs4x_set>:

// set bits in a register
static int cs4x_set(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	70fb      	strb	r3, [r7, #3]
 8001352:	4613      	mov	r3, r2
 8001354:	70bb      	strb	r3, [r7, #2]
	return cs4x_rmw(dac, reg, bits, 0xff);
 8001356:	78ba      	ldrb	r2, [r7, #2]
 8001358:	78f9      	ldrb	r1, [r7, #3]
 800135a:	23ff      	movs	r3, #255	@ 0xff
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffbb 	bl	80012d8 <cs4x_rmw>
 8001362:	4603      	mov	r3, r0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <cs4x_clr>:

// clear bits in a register
static int cs4x_clr(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
 8001378:	4613      	mov	r3, r2
 800137a:	70bb      	strb	r3, [r7, #2]
	return cs4x_rmw(dac, reg, bits, 0);
 800137c:	78ba      	ldrb	r2, [r7, #2]
 800137e:	78f9      	ldrb	r1, [r7, #3]
 8001380:	2300      	movs	r3, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa8 	bl	80012d8 <cs4x_rmw>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <cs4x_id>:

//-----------------------------------------------------------------------------

// read and verify the device id
static int cs4x_id(struct cs4x_drv *dac) {
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	uint8_t id;
	int rc;
	rc = cs4x_rd(dac, CS43L22_REG_ID, &id);
 800139a:	f107 030b 	add.w	r3, r7, #11
 800139e:	461a      	mov	r2, r3
 80013a0:	2101      	movs	r1, #1
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff56 	bl	8001254 <cs4x_rd>
 80013a8:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <cs4x_id+0x22>
		return rc;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	e008      	b.n	80013c6 <cs4x_id+0x34>
	}
	if ((id & 0xf8) != 0xe0) {
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80013ba:	2be0      	cmp	r3, #224	@ 0xe0
 80013bc:	d002      	beq.n	80013c4 <cs4x_id+0x32>
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e000      	b.n	80013c6 <cs4x_id+0x34>
	}
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <cs4x_output>:

//-----------------------------------------------------------------------------

// set the output device
int cs4x_output(struct cs4x_drv *dac, unsigned int out) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	const uint8_t ctrl[DAC_OUTPUT_MAX] = { 0xff, 0xfa, 0xaf, 0xaa, 0x05 };
 80013da:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <cs4x_output+0x54>)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e4:	6018      	str	r0, [r3, #0]
 80013e6:	3304      	adds	r3, #4
 80013e8:	7019      	strb	r1, [r3, #0]
	int rc;
	if (out >= DAC_OUTPUT_MAX) {
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d901      	bls.n	80013f4 <cs4x_output+0x24>
		out = DAC_OUTPUT_OFF;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, ctrl[out]);
 80013f4:	f107 020c 	add.w	r2, r7, #12
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	2104      	movs	r1, #4
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ff51 	bl	80012aa <cs4x_wr>
 8001408:	6178      	str	r0, [r7, #20]
	if (rc != 0) {
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <cs4x_output+0x44>
		return rc;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	e003      	b.n	800141c <cs4x_output+0x4c>
	}
	dac->cfg.out = out;
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
	return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0800c9e8 	.word	0x0800c9e8

08001428 <cs4x_master_volume>:
// volume controls
// Map 0..255 to the control value for a volume register.
// 0 is minium volume (or mute), 255 is maximum volume.

// set the master volume
int cs4x_master_volume(struct cs4x_drv *dac, uint8_t vol) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	x = (((281 - 52) << 16) / 255) * vol + (52 << 16);
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	f24e 52e5 	movw	r2, #58853	@ 0xe5e5
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	f503 1350 	add.w	r3, r3, #3407872	@ 0x340000
 8001442:	60fb      	str	r3, [r7, #12]
	x >>= 16;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
	x &= 255;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	60fb      	str	r3, [r7, #12]
	rc = cs4x_wr(dac, CS43L22_REG_Master_A_Vol, x);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	2120      	movs	r1, #32
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff26 	bl	80012aa <cs4x_wr>
 800145e:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Master_B_Vol, x);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	2121      	movs	r1, #33	@ 0x21
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff1e 	bl	80012aa <cs4x_wr>
 800146e:	4602      	mov	r2, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
 8001474:	60bb      	str	r3, [r7, #8]
	return rc;
 8001476:	68bb      	ldr	r3, [r7, #8]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <cs4x_headphone_volume>:

// set the headphone volume
int cs4x_headphone_volume(struct cs4x_drv *dac, uint8_t vol) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <cs4x_headphone_volume+0x18>
		x = 1;		// muted
 8001492:	2301      	movs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e00e      	b.n	80014b6 <cs4x_headphone_volume+0x36>
	} else {
		x = (((257 - 52) << 16) / 255) * (vol - 1) + (52 << 16);
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	3b01      	subs	r3, #1
 800149c:	f64c 52cd 	movw	r2, #52685	@ 0xcdcd
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	f503 1350 	add.w	r3, r3, #3407872	@ 0x340000
 80014a8:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	0c1b      	lsrs	r3, r3, #16
 80014ae:	60fb      	str	r3, [r7, #12]
		x &= 255;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Headphone_A_Volume, x);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	2122      	movs	r1, #34	@ 0x22
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fef3 	bl	80012aa <cs4x_wr>
 80014c4:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Headphone_B_Volume, x);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	2123      	movs	r1, #35	@ 0x23
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff feeb 	bl	80012aa <cs4x_wr>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	4313      	orrs	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
	return rc;
 80014dc:	68bb      	ldr	r3, [r7, #8]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <cs4x_speaker_volume>:

// set the speaker volume
int cs4x_speaker_volume(struct cs4x_drv *dac, uint8_t vol) {
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <cs4x_speaker_volume+0x18>
		x = 1;		// muted
 80014f8:	2301      	movs	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e00e      	b.n	800151c <cs4x_speaker_volume+0x36>
	} else {
		x = (((257 - 64) << 16) / 255) * (vol - 1) + (64 << 16);
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	3b01      	subs	r3, #1
 8001502:	f24c 12c1 	movw	r2, #49601	@ 0xc1c1
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800150e:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	0c1b      	lsrs	r3, r3, #16
 8001514:	60fb      	str	r3, [r7, #12]
		x &= 255;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Speaker_A_Volume, x);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	2124      	movs	r1, #36	@ 0x24
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fec0 	bl	80012aa <cs4x_wr>
 800152a:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Speaker_B_Volume, x);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	2125      	movs	r1, #37	@ 0x25
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff feb8 	bl	80012aa <cs4x_wr>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
 8001540:	60bb      	str	r3, [r7, #8]
	return rc;
 8001542:	68bb      	ldr	r3, [r7, #8]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <cs4x_pcm_volume>:

// set the pcm volume
int cs4x_pcm_volume(struct cs4x_drv *dac, uint8_t vol) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <cs4x_pcm_volume+0x18>
		x = 0x80;	// muted
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e010      	b.n	8001586 <cs4x_pcm_volume+0x3a>
	} else {
		x = (((281 - 25) << 16) / (255 - 1)) * (vol - 1) + (25 << 16);
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	4613      	mov	r3, r2
 800156a:	01db      	lsls	r3, r3, #7
 800156c:	4413      	add	r3, r2
 800156e:	01db      	lsls	r3, r3, #7
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f503 13c8 	add.w	r3, r3, #1638400	@ 0x190000
 8001578:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	60fb      	str	r3, [r7, #12]
		x &= 255;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_PCMA_Vol, x);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	211a      	movs	r1, #26
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fe8b 	bl	80012aa <cs4x_wr>
 8001594:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_PCMB_Vol, x);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	211b      	movs	r1, #27
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fe83 	bl	80012aa <cs4x_wr>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
	return rc;
 80015ac:	68bb      	ldr	r3, [r7, #8]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <cs4x_mute_off>:
	int rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, 0xff);
	rc |= cs4x_headphone_volume(dac, 0);
	return rc;
}

static int cs4x_mute_off(struct cs4x_drv *dac) {
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	int rc = cs4x_headphone_volume(dac, 0xff);
 80015be:	21ff      	movs	r1, #255	@ 0xff
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff5d 	bl	8001480 <cs4x_headphone_volume>
 80015c6:	60f8      	str	r0, [r7, #12]
	rc |= cs4x_output(dac, dac->cfg.out);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fefe 	bl	80013d0 <cs4x_output>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
	return rc;
 80015dc:	68fb      	ldr	r3, [r7, #12]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <cs4x_init>:

//-----------------------------------------------------------------------------

int cs4x_init(struct cs4x_drv *dac, struct cs4x_cfg *cfg) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	int rc;

	memset(dac, 0, sizeof(struct cs4x_drv));
 80015f2:	2208      	movs	r2, #8
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f009 fd08 	bl	800b00c <memset>
	dac->cfg = *cfg;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001604:	e883 0003 	stmia.w	r3, {r0, r1}

	// 4.9 Recommended Power-Up Sequence (1,2)
	// reset the dac
	// DAC Reset is active low, so pull the pin high.
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	2110      	movs	r1, #16
 800160c:	4856      	ldr	r0, [pc, #344]	@ (8001768 <cs4x_init+0x180>)
 800160e:	f001 fcc7 	bl	8002fa0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2110      	movs	r1, #16
 8001616:	4854      	ldr	r0, [pc, #336]	@ (8001768 <cs4x_init+0x180>)
 8001618:	f001 fcc2 	bl	8002fa0 <HAL_GPIO_WritePin>

	rc = cs4x_id(dac);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff feb8 	bl	8001392 <cs4x_id>
 8001622:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <cs4x_init+0x4c>
		printf("cs4x bad device id %d\r\n", rc);
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	484f      	ldr	r0, [pc, #316]	@ (800176c <cs4x_init+0x184>)
 800162e:	f009 fba5 	bl	800ad7c <iprintf>
		goto exit;
 8001632:	e094      	b.n	800175e <cs4x_init+0x176>
	}
	// 4.9 Recommended Power-Up Sequence (4)
	// 4.11 Required Initialization Settings
	rc |= cs4x_wr(dac, 0, 0x99);
 8001634:	2299      	movs	r2, #153	@ 0x99
 8001636:	2100      	movs	r1, #0
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fe36 	bl	80012aa <cs4x_wr>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_wr(dac, 0x47, 0x80);
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	2147      	movs	r1, #71	@ 0x47
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fe2d 	bl	80012aa <cs4x_wr>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_set(dac, 0x32, 1 << 7);
 8001658:	2280      	movs	r2, #128	@ 0x80
 800165a:	2132      	movs	r1, #50	@ 0x32
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fe72 	bl	8001346 <cs4x_set>
 8001662:	4602      	mov	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_clr(dac, 0x32, 1 << 7);
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	2132      	movs	r1, #50	@ 0x32
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fe7c 	bl	800136c <cs4x_clr>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_wr(dac, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fe12 	bl	80012aa <cs4x_wr>
 8001686:	4602      	mov	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]

	// set the output to AUTO
	rc |= cs4x_output(dac, DAC_OUTPUT_AUTO);
 800168e:	2104      	movs	r1, #4
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe9d 	bl	80013d0 <cs4x_output>
 8001696:	4602      	mov	r2, r0
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
	// Clock configuration: Auto detection
	rc |= cs4x_wr(dac, CS43L22_REG_Clocking_Ctl, 0x81);
 800169e:	2281      	movs	r2, #129	@ 0x81
 80016a0:	2105      	movs	r1, #5
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fe01 	bl	80012aa <cs4x_wr>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
	// Set the Slave Mode and the audio Standard
	rc |= cs4x_wr(dac, CS43L22_REG_Interface_Ctl_1, 0x04);
 80016b0:	2204      	movs	r2, #4
 80016b2:	2106      	movs	r1, #6
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fdf8 	bl	80012aa <cs4x_wr>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]

	// Set the Master volume
	rc |= cs4x_master_volume(dac, 169);
 80016c2:	21a9      	movs	r1, #169	@ 0xa9
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff feaf 	bl	8001428 <cs4x_master_volume>
 80016ca:	4602      	mov	r2, r0
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]

	// If the Speaker is enabled, set the Mono mode and volume attenuation level
	if (dac->cfg.out != DAC_OUTPUT_OFF
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d014      	beq.n	8001704 <cs4x_init+0x11c>
			&& dac->cfg.out != DAC_OUTPUT_HEADPHONE) {
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d010      	beq.n	8001704 <cs4x_init+0x11c>
		// Set the Speaker Mono mode
		rc |= cs4x_wr(dac, CS43L22_REG_Playback_Ctl_2, 0x06);
 80016e2:	2206      	movs	r2, #6
 80016e4:	210f      	movs	r1, #15
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fddf 	bl	80012aa <cs4x_wr>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
		rc |= cs4x_speaker_volume(dac, 0xff);
 80016f4:	21ff      	movs	r1, #255	@ 0xff
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fef5 	bl	80014e6 <cs4x_speaker_volume>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
	// off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	// If this delay is not inserted, then the codec will not shut down properly and
	// it results in high noise after shut down.

	// Disable the analog soft ramp
	rc |= cs4x_rmw(dac, CS43L22_REG_Analog_ZC_and_SR_Settings, 0x0f, 0x00);
 8001704:	2300      	movs	r3, #0
 8001706:	220f      	movs	r2, #15
 8001708:	210a      	movs	r1, #10
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fde4 	bl	80012d8 <cs4x_rmw>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
	// Disable the digital soft ramp
	rc |= cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x04);
 8001718:	2204      	movs	r2, #4
 800171a:	210e      	movs	r1, #14
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fdc4 	bl	80012aa <cs4x_wr>
 8001722:	4602      	mov	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
	// Disable the limiter attack level
	rc |= cs4x_wr(dac, CS43L22_REG_Limit_Ctl_1_Thresholds, 0x00);
 800172a:	2200      	movs	r2, #0
 800172c:	2127      	movs	r1, #39	@ 0x27
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fdbb 	bl	80012aa <cs4x_wr>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
	// Adjust Bass and Treble levels
	rc |= cs4x_wr(dac, CS43L22_REG_Tone_Ctl, 0x0f);
 800173c:	220f      	movs	r2, #15
 800173e:	211f      	movs	r1, #31
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fdb2 	bl	80012aa <cs4x_wr>
 8001746:	4602      	mov	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
	// Adjust PCM volume level
	rc |= cs4x_pcm_volume(dac, 241);
 800174e:	21f1      	movs	r1, #241	@ 0xf1
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fefb 	bl	800154c <cs4x_pcm_volume>
 8001756:	4602      	mov	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]

	exit: return rc;
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40020c00 	.word	0x40020c00
 800176c:	0800c9f0 	.word	0x0800c9f0

08001770 <cs4x_start>:

//-----------------------------------------------------------------------------

int cs4x_start(struct cs4x_drv *dac) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	// Enable the digital soft ramp
	int rc = cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x06);
 8001778:	2206      	movs	r2, #6
 800177a:	210e      	movs	r1, #14
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fd94 	bl	80012aa <cs4x_wr>
 8001782:	60f8      	str	r0, [r7, #12]
	// Enable Output device
	rc |= cs4x_mute_off(dac);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff16 	bl	80015b6 <cs4x_mute_off>
 800178a:	4602      	mov	r2, r0
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
	// Power on the Codec
	rc |= cs4x_wr(dac, CS43L22_REG_Power_Ctl_1, 0x9e);
 8001792:	229e      	movs	r2, #158	@ 0x9e
 8001794:	2102      	movs	r1, #2
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fd87 	bl	80012aa <cs4x_wr>
 800179c:	4602      	mov	r2, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
	return rc;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b6:	f000 fd3f 	bl	8002238 <HAL_Init>
	uint8_t buf[12];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f867 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f000 f981 	bl	8001ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c2:	f000 f95f 	bl	8001a84 <MX_DMA_Init>
  MX_I2C1_Init();
 80017c6:	f000 f8cb 	bl	8001960 <MX_I2C1_Init>
  MX_I2S3_Init();
 80017ca:	f000 f8f7 	bl	80019bc <MX_I2S3_Init>
  MX_SPI1_Init();
 80017ce:	f000 f923 	bl	8001a18 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80017d2:	f008 fd0f 	bl	800a1f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	// EXT DAC INTIIALIZATION
	struct cs4x_cfg cfgdac;
	cfgdac.adr = DACADDR;
 80017d6:	2394      	movs	r3, #148	@ 0x94
 80017d8:	733b      	strb	r3, [r7, #12]
	cfgdac.out = DAC_OUTPUT_HEADPHONE;
 80017da:	2302      	movs	r3, #2
 80017dc:	613b      	str	r3, [r7, #16]
	struct cs4x_drv dac;
	int rc = cs4x_init(&dac, &cfgdac);
 80017de:	f107 020c 	add.w	r2, r7, #12
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fefe 	bl	80015e8 <cs4x_init>
 80017ec:	6278      	str	r0, [r7, #36]	@ 0x24
	printf("CS4X init returned %d\r\n", rc);
 80017ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017f0:	481c      	ldr	r0, [pc, #112]	@ (8001864 <main+0xb4>)
 80017f2:	f009 fac3 	bl	800ad7c <iprintf>
	rc = cs4x_start(&dac);
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ffb9 	bl	8001770 <cs4x_start>
 80017fe:	6278      	str	r0, [r7, #36]	@ 0x24
	printf("CS4X start returned %d\r\n", rc);
 8001800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001802:	4819      	ldr	r0, [pc, #100]	@ (8001868 <main+0xb8>)
 8001804:	f009 faba 	bl	800ad7c <iprintf>

	HAL_Delay(1);
 8001808:	2001      	movs	r0, #1
 800180a:	f000 fd87 	bl	800231c <HAL_Delay>
//		i += 2;
//	}


	// Attempt to transmit audio data to DAC
	processData(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff fbce 	bl	8000fb0 <processData>
	printf("1\r\n");
 8001814:	4815      	ldr	r0, [pc, #84]	@ (800186c <main+0xbc>)
 8001816:	f009 fb19 	bl	800ae4c <puts>
	processData(0);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fbc8 	bl	8000fb0 <processData>
	printf("0\r\n");
 8001820:	4813      	ldr	r0, [pc, #76]	@ (8001870 <main+0xc0>)
 8001822:	f009 fb13 	bl	800ae4c <puts>
	//outBufPtr = &dacData[BUFFER_SIZE / 2];
	//processData();
	res = HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) dacData, BUFFER_SIZE);
 8001826:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800182a:	4912      	ldr	r1, [pc, #72]	@ (8001874 <main+0xc4>)
 800182c:	4812      	ldr	r0, [pc, #72]	@ (8001878 <main+0xc8>)
 800182e:	f002 fd0b 	bl	8004248 <HAL_I2S_Transmit_DMA>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	//res = HAL_I2S_Transmit(&hi2s3, (uint16_t*) signal, nsamples,HAL_MAX_DELAY);
	if (res != HAL_OK) {
 8001838:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <main+0x9c>
		printf("I2S - ERROR, res = %d!\r\n", res);
 8001840:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001844:	4619      	mov	r1, r3
 8001846:	480d      	ldr	r0, [pc, #52]	@ (800187c <main+0xcc>)
 8001848:	f009 fa98 	bl	800ad7c <iprintf>
	}
	printf("loops after first two processes: %ld\r\n", (long)loops);
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <main+0xd0>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	4613      	mov	r3, r2
 8001854:	4619      	mov	r1, r3
 8001856:	480b      	ldr	r0, [pc, #44]	@ (8001884 <main+0xd4>)
 8001858:	f009 fa90 	bl	800ad7c <iprintf>
//		if (res != HAL_OK) {
//			printf("I2S - ERROR, res = %d!\r\n", res);
//			//break;
//		}

		if (dataReadyFlag) {
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <main+0xd8>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	e7fc      	b.n	800185c <main+0xac>
 8001862:	bf00      	nop
 8001864:	0800ca08 	.word	0x0800ca08
 8001868:	0800ca20 	.word	0x0800ca20
 800186c:	0800ca3c 	.word	0x0800ca3c
 8001870:	0800ca40 	.word	0x0800ca40
 8001874:	200002e0 	.word	0x200002e0
 8001878:	200001e0 	.word	0x200001e0
 800187c:	0800ca44 	.word	0x0800ca44
 8001880:	200179f0 	.word	0x200179f0
 8001884:	0800ca60 	.word	0x0800ca60
 8001888:	200179e0 	.word	0x200179e0

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b094      	sub	sp, #80	@ 0x50
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	2230      	movs	r2, #48	@ 0x30
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f009 fbb6 	bl	800b00c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <SystemClock_Config+0xcc>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <SystemClock_Config+0xcc>)
 80018ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018be:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c0:	4b25      	ldr	r3, [pc, #148]	@ (8001958 <SystemClock_Config+0xcc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	4b22      	ldr	r3, [pc, #136]	@ (800195c <SystemClock_Config+0xd0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a21      	ldr	r2, [pc, #132]	@ (800195c <SystemClock_Config+0xd0>)
 80018d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <SystemClock_Config+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f2:	2302      	movs	r3, #2
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018fc:	2308      	movs	r3, #8
 80018fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001900:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001904:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001906:	2302      	movs	r3, #2
 8001908:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800190a:	2307      	movs	r3, #7
 800190c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190e:	f107 0320 	add.w	r3, r7, #32
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fb44 	bl	8005fa0 <HAL_RCC_OscConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800191e:	f000 f9f9 	bl	8001d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001922:	230f      	movs	r3, #15
 8001924:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001926:	2302      	movs	r3, #2
 8001928:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800192e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2105      	movs	r1, #5
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fda5 	bl	8006490 <HAL_RCC_ClockConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800194c:	f000 f9e2 	bl	8001d14 <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3750      	adds	r7, #80	@ 0x50
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000

08001960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <MX_I2C1_Init+0x50>)
 8001966:	4a13      	ldr	r2, [pc, #76]	@ (80019b4 <MX_I2C1_Init+0x54>)
 8001968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <MX_I2C1_Init+0x50>)
 800196c:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <MX_I2C1_Init+0x58>)
 800196e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_I2C1_Init+0x50>)
 800197e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001982:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001990:	4b07      	ldr	r3, [pc, #28]	@ (80019b0 <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800199c:	4804      	ldr	r0, [pc, #16]	@ (80019b0 <MX_I2C1_Init+0x50>)
 800199e:	f001 fb19 	bl	8002fd4 <HAL_I2C_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019a8:	f000 f9b4 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	2000018c 	.word	0x2000018c
 80019b4:	40005400 	.word	0x40005400
 80019b8:	000186a0 	.word	0x000186a0

080019bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019c2:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <MX_I2S3_Init+0x58>)
 80019c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019e4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80019e8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_I2S3_Init+0x54>)
 80019fe:	f002 fae3 	bl	8003fc8 <HAL_I2S_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001a08:	f000 f984 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200001e0 	.word	0x200001e0
 8001a14:	40003c00 	.word	0x40003c00

08001a18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a1e:	4a18      	ldr	r2, [pc, #96]	@ (8001a80 <MX_SPI1_Init+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a64:	220a      	movs	r2, #10
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <MX_SPI1_Init+0x64>)
 8001a6a:	f005 f85f 	bl	8006b2c <HAL_SPI_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a74:	f000 f94e 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000288 	.word	0x20000288
 8001a80:	40013000 	.word	0x40013000

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_DMA_Init+0x3c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac0 <MX_DMA_Init+0x3c>)
 8001a94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_DMA_Init+0x3c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2010      	movs	r0, #16
 8001aac:	f000 fd35 	bl	800251a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ab0:	2010      	movs	r0, #16
 8001ab2:	f000 fd4e 	bl	8002552 <HAL_NVIC_EnableIRQ>

}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	@ 0x30
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	4b79      	ldr	r3, [pc, #484]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a78      	ldr	r2, [pc, #480]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001ae4:	f043 0310 	orr.w	r3, r3, #16
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b76      	ldr	r3, [pc, #472]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a71      	ldr	r2, [pc, #452]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b6b      	ldr	r3, [pc, #428]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b68      	ldr	r3, [pc, #416]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b64      	ldr	r3, [pc, #400]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a63      	ldr	r2, [pc, #396]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b61      	ldr	r3, [pc, #388]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a55      	ldr	r2, [pc, #340]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b53      	ldr	r3, [pc, #332]	@ (8001cc4 <MX_GPIO_Init+0x200>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2108      	movs	r1, #8
 8001b86:	4850      	ldr	r0, [pc, #320]	@ (8001cc8 <MX_GPIO_Init+0x204>)
 8001b88:	f001 fa0a 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2101      	movs	r1, #1
 8001b90:	484e      	ldr	r0, [pc, #312]	@ (8001ccc <MX_GPIO_Init+0x208>)
 8001b92:	f001 fa05 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b96:	2200      	movs	r2, #0
 8001b98:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001b9c:	484c      	ldr	r0, [pc, #304]	@ (8001cd0 <MX_GPIO_Init+0x20c>)
 8001b9e:	f001 f9ff 	bl	8002fa0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4843      	ldr	r0, [pc, #268]	@ (8001cc8 <MX_GPIO_Init+0x204>)
 8001bba:	f001 f855 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	483d      	ldr	r0, [pc, #244]	@ (8001ccc <MX_GPIO_Init+0x208>)
 8001bd6:	f001 f847 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bda:	2308      	movs	r3, #8
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bea:	2305      	movs	r3, #5
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4835      	ldr	r0, [pc, #212]	@ (8001ccc <MX_GPIO_Init+0x208>)
 8001bf6:	f001 f837 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bfe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4831      	ldr	r0, [pc, #196]	@ (8001cd4 <MX_GPIO_Init+0x210>)
 8001c10:	f001 f82a 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c14:	2304      	movs	r3, #4
 8001c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	482c      	ldr	r0, [pc, #176]	@ (8001cd8 <MX_GPIO_Init+0x214>)
 8001c28:	f001 f81e 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4823      	ldr	r0, [pc, #140]	@ (8001cd8 <MX_GPIO_Init+0x214>)
 8001c4a:	f001 f80d 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001c4e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	481a      	ldr	r0, [pc, #104]	@ (8001cd0 <MX_GPIO_Init+0x20c>)
 8001c68:	f000 fffe 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4813      	ldr	r0, [pc, #76]	@ (8001cd0 <MX_GPIO_Init+0x20c>)
 8001c84:	f000 fff0 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <MX_GPIO_Init+0x20c>)
 8001c9c:	f000 ffe4 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ca4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4804      	ldr	r0, [pc, #16]	@ (8001cc8 <MX_GPIO_Init+0x204>)
 8001cb6:	f000 ffd7 	bl	8002c68 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001cba:	bf00      	nop
 8001cbc:	3730      	adds	r7, #48	@ 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400

08001cdc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	e009      	b.n	8001d02 <_write+0x26>
		ITM_SendChar(*ptr++);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f8dc 	bl	8000eb4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dbf1      	blt.n	8001cee <_write+0x12>
	}
	return len;
 8001d0a:	687b      	ldr	r3, [r7, #4]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("Error\r\n");
 8001d1c:	4801      	ldr	r0, [pc, #4]	@ (8001d24 <Error_Handler+0x10>)
 8001d1e:	f009 f895 	bl	800ae4c <puts>
 8001d22:	e7fb      	b.n	8001d1c <Error_Handler+0x8>
 8001d24:	0800ca88 	.word	0x0800ca88

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	4a0f      	ldr	r2, [pc, #60]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a08      	ldr	r2, [pc, #32]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d66:	2007      	movs	r0, #7
 8001d68:	f000 fbcc 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_I2C_MspInit+0x84>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d12c      	bne.n	8001df4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001db6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <HAL_I2C_MspInit+0x8c>)
 8001dd4:	f000 ff48 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	4a07      	ldr	r2, [pc, #28]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001de2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001de6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001df4:	bf00      	nop
 8001df6:	3728      	adds	r7, #40	@ 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400

08001e08 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	@ 0x38
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a4e      	ldr	r2, [pc, #312]	@ (8001f6c <HAL_I2S_MspInit+0x164>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	f040 8094 	bne.w	8001f62 <HAL_I2S_MspInit+0x15a>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 197;
 8001e3e:	23c5      	movs	r3, #197	@ 0xc5
 8001e40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f004 fd2c 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001e56:	f7ff ff5d 	bl	8001d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b44      	ldr	r3, [pc, #272]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a43      	ldr	r2, [pc, #268]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b3a      	ldr	r3, [pc, #232]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b36      	ldr	r3, [pc, #216]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a35      	ldr	r2, [pc, #212]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b33      	ldr	r3, [pc, #204]	@ (8001f70 <HAL_I2S_MspInit+0x168>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ebe:	2306      	movs	r3, #6
 8001ec0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	482a      	ldr	r0, [pc, #168]	@ (8001f74 <HAL_I2S_MspInit+0x16c>)
 8001eca:	f000 fecd 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001ece:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ee0:	2306      	movs	r3, #6
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4823      	ldr	r0, [pc, #140]	@ (8001f78 <HAL_I2S_MspInit+0x170>)
 8001eec:	f000 febc 	bl	8002c68 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001ef2:	4a23      	ldr	r2, [pc, #140]	@ (8001f80 <HAL_I2S_MspInit+0x178>)
 8001ef4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001efe:	2240      	movs	r2, #64	@ 0x40
 8001f00:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f0e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f18:	4b18      	ldr	r3, [pc, #96]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f1e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f26:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f2e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001f36:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f38:	f000 fb26 	bl	8002588 <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001f42:	f7ff fee7 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <HAL_I2S_MspInit+0x174>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2033      	movs	r0, #51	@ 0x33
 8001f58:	f000 fadf 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001f5c:	2033      	movs	r0, #51	@ 0x33
 8001f5e:	f000 faf8 	bl	8002552 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001f62:	bf00      	nop
 8001f64:	3738      	adds	r7, #56	@ 0x38
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40003c00 	.word	0x40003c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	20000228 	.word	0x20000228
 8001f80:	40026088 	.word	0x40026088

08001f84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	@ (8002008 <HAL_SPI_MspInit+0x84>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12b      	bne.n	8001ffe <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a17      	ldr	r2, [pc, #92]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a10      	ldr	r2, [pc, #64]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_SPI_MspInit+0x88>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fde:	23e0      	movs	r3, #224	@ 0xe0
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4805      	ldr	r0, [pc, #20]	@ (8002010 <HAL_SPI_MspInit+0x8c>)
 8001ffa:	f000 fe35 	bl	8002c68 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	@ 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40013000 	.word	0x40013000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <NMI_Handler+0x4>

0800201c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <MemManage_Handler+0x4>

0800202c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <BusFault_Handler+0x4>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <UsageFault_Handler+0x4>

0800203c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206a:	f000 f937 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <DMA1_Stream5_IRQHandler+0x10>)
 800207a:	f000 fb8b 	bl	8002794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000228 	.word	0x20000228

08002088 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800208c:	4802      	ldr	r0, [pc, #8]	@ (8002098 <SPI3_IRQHandler+0x10>)
 800208e:	f002 f97f 	bl	8004390 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200001e0 	.word	0x200001e0

0800209c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <OTG_FS_IRQHandler+0x10>)
 80020a2:	f002 fe6f 	bl	8004d84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20018ee4 	.word	0x20018ee4

080020b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e00a      	b.n	80020d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c2:	f3af 8000 	nop.w
 80020c6:	4601      	mov	r1, r0
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	60ba      	str	r2, [r7, #8]
 80020ce:	b2ca      	uxtb	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf0      	blt.n	80020c2 <_read+0x12>
  }

  return len;
 80020e0:	687b      	ldr	r3, [r7, #4]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002112:	605a      	str	r2, [r3, #4]
  return 0;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_isatty>:

int _isatty(int file)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	@ (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f008 ff90 	bl	800b0a8 <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20020000 	.word	0x20020000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	200179fc 	.word	0x200179fc
 80021bc:	20019738 	.word	0x20019738

080021c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <SystemInit+0x20>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <SystemInit+0x20>)
 80021cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800221c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021e8:	f7ff ffea 	bl	80021c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ee:	490d      	ldr	r1, [pc, #52]	@ (8002224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002204:	4c0a      	ldr	r4, [pc, #40]	@ (8002230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002212:	f008 ff4f 	bl	800b0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002216:	f7ff facb 	bl	80017b0 <main>
  bx  lr    
 800221a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800221c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8002228:	0800d380 	.word	0x0800d380
  ldr r2, =_sbss
 800222c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8002230:	20019734 	.word	0x20019734

08002234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC_IRQHandler>
	...

08002238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800223c:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <HAL_Init+0x40>)
 8002242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002246:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <HAL_Init+0x40>)
 800224e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002252:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <HAL_Init+0x40>)
 800225a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800225e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002260:	2003      	movs	r0, #3
 8002262:	f000 f94f 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f808 	bl	800227c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800226c:	f7ff fd5c 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023c00 	.word	0x40023c00

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002284:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <HAL_InitTick+0x54>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <HAL_InitTick+0x58>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f967 	bl	800256e <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f92f 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <HAL_InitTick+0x5c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000018 	.word	0x20000018
 80022d4:	20000020 	.word	0x20000020
 80022d8:	2000001c 	.word	0x2000001c

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000020 	.word	0x20000020
 8002300:	20017a00 	.word	0x20017a00

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20017a00 	.word	0x20017a00

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff ffee 	bl	8002304 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_Delay+0x44>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffde 	bl	8002304 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000020 	.word	0x20000020

08002364 <__NVIC_SetPriorityGrouping>:
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	@ (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	@ (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	@ (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	@ 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <SysTick_Config>:
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	f7ff ff8e 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff29 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff3e 	bl	80023ac <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff8e 	bl	8002458 <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff31 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff feb6 	bl	8002304 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e099      	b.n	80026d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c4:	e00f      	b.n	80025e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c6:	f7ff fe9d 	bl	8002304 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d908      	bls.n	80025e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2203      	movs	r2, #3
 80025de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e078      	b.n	80026d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e8      	bne.n	80025c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_DMA_Init+0x158>)
 8002600:	4013      	ands	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	2b04      	cmp	r3, #4
 800263e:	d107      	bne.n	8002650 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	4313      	orrs	r3, r2
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0307 	bic.w	r3, r3, #7
 8002666:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	2b04      	cmp	r3, #4
 8002678:	d117      	bne.n	80026aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fa6f 	bl	8002b70 <DMA_CheckFifoParam>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026a6:	2301      	movs	r3, #1
 80026a8:	e016      	b.n	80026d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa26 	bl	8002b04 <DMA_CalcBaseAndBitshift>
 80026b8:	4603      	mov	r3, r0
 80026ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	223f      	movs	r2, #63	@ 0x3f
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	f010803f 	.word	0xf010803f

080026e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
 80026f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_DMA_Start_IT+0x26>
 8002706:	2302      	movs	r3, #2
 8002708:	e040      	b.n	800278c <HAL_DMA_Start_IT+0xa8>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d12f      	bne.n	800277e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f9b8 	bl	8002aa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	223f      	movs	r2, #63	@ 0x3f
 800273e:	409a      	lsls	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0216 	orr.w	r2, r2, #22
 8002752:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0208 	orr.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e005      	b.n	800278a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002786:	2302      	movs	r3, #2
 8002788:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027a0:	4b8e      	ldr	r3, [pc, #568]	@ (80029dc <HAL_DMA_IRQHandler+0x248>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a8e      	ldr	r2, [pc, #568]	@ (80029e0 <HAL_DMA_IRQHandler+0x24c>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	2208      	movs	r2, #8
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01a      	beq.n	8002800 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0204 	bic.w	r2, r2, #4
 80027e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ec:	2208      	movs	r2, #8
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	2201      	movs	r2, #1
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	2201      	movs	r2, #1
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283a:	2204      	movs	r2, #4
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00b      	beq.n	800286c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002870:	2210      	movs	r2, #16
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d043      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03c      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	2210      	movs	r2, #16
 8002890:	409a      	lsls	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d108      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e01f      	b.n	8002904 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e016      	b.n	8002904 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0208 	bic.w	r2, r2, #8
 80028f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	2220      	movs	r2, #32
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 808f 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8087 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	2220      	movs	r2, #32
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b05      	cmp	r3, #5
 800293c:	d136      	bne.n	80029ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0216 	bic.w	r2, r2, #22
 800294c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800295c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <HAL_DMA_IRQHandler+0x1da>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002982:	223f      	movs	r2, #63	@ 0x3f
 8002984:	409a      	lsls	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d07e      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
        }
        return;
 80029aa:	e079      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01d      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d031      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e02c      	b.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
 80029da:	bf00      	nop
 80029dc:	20000018 	.word	0x20000018
 80029e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
 80029f4:	e01e      	b.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0210 	bic.w	r2, r2, #16
 8002a12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d032      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d307      	bcc.n	8002a7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f2      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x2cc>
 8002a7a:	e000      	b.n	8002a7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
 8002a9e:	e000      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aa0:	bf00      	nop
    }
  }
}
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d108      	bne.n	8002ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ae6:	e007      	b.n	8002af8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3b10      	subs	r3, #16
 8002b14:	4a14      	ldr	r2, [pc, #80]	@ (8002b68 <DMA_CalcBaseAndBitshift+0x64>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b1e:	4a13      	ldr	r2, [pc, #76]	@ (8002b6c <DMA_CalcBaseAndBitshift+0x68>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d909      	bls.n	8002b46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	1d1a      	adds	r2, r3, #4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b44:	e007      	b.n	8002b56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	aaaaaaab 	.word	0xaaaaaaab
 8002b6c:	0800d2f0 	.word	0x0800d2f0

08002b70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11f      	bne.n	8002bca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d856      	bhi.n	8002c3e <DMA_CheckFifoParam+0xce>
 8002b90:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <DMA_CheckFifoParam+0x28>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bbb 	.word	0x08002bbb
 8002ba0:	08002ba9 	.word	0x08002ba9
 8002ba4:	08002c3f 	.word	0x08002c3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d046      	beq.n	8002c42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb8:	e043      	b.n	8002c42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bc2:	d140      	bne.n	8002c46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e03d      	b.n	8002c46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bd2:	d121      	bne.n	8002c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d837      	bhi.n	8002c4a <DMA_CheckFifoParam+0xda>
 8002bda:	a201      	add	r2, pc, #4	@ (adr r2, 8002be0 <DMA_CheckFifoParam+0x70>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002bf7 	.word	0x08002bf7
 8002be8:	08002bf1 	.word	0x08002bf1
 8002bec:	08002c09 	.word	0x08002c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e030      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d025      	beq.n	8002c4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c06:	e022      	b.n	8002c4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c10:	d11f      	bne.n	8002c52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c16:	e01c      	b.n	8002c52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d903      	bls.n	8002c26 <DMA_CheckFifoParam+0xb6>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d003      	beq.n	8002c2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c24:	e018      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2a:	e015      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e00b      	b.n	8002c56 <DMA_CheckFifoParam+0xe6>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e00a      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e008      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e006      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e004      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
    }
  } 
  
  return status; 
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e16b      	b.n	8002f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 815a 	bne.w	8002f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d130      	bne.n	8002d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0201 	and.w	r2, r3, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d017      	beq.n	8002d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d123      	bne.n	8002dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	08da      	lsrs	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80b4 	beq.w	8002f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b60      	ldr	r3, [pc, #384]	@ (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f74 <HAL_GPIO_Init+0x30c>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002f78 <HAL_GPIO_Init+0x310>)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a52      	ldr	r2, [pc, #328]	@ (8002f7c <HAL_GPIO_Init+0x314>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a51      	ldr	r2, [pc, #324]	@ (8002f80 <HAL_GPIO_Init+0x318>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x222>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a50      	ldr	r2, [pc, #320]	@ (8002f84 <HAL_GPIO_Init+0x31c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x21e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	@ (8002f88 <HAL_GPIO_Init+0x320>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x21a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4e      	ldr	r2, [pc, #312]	@ (8002f8c <HAL_GPIO_Init+0x324>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x216>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4d      	ldr	r2, [pc, #308]	@ (8002f90 <HAL_GPIO_Init+0x328>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x212>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4c      	ldr	r2, [pc, #304]	@ (8002f94 <HAL_GPIO_Init+0x32c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x20e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4b      	ldr	r2, [pc, #300]	@ (8002f98 <HAL_GPIO_Init+0x330>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x20a>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00e      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e76:	2306      	movs	r3, #6
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea0:	4935      	ldr	r1, [pc, #212]	@ (8002f78 <HAL_GPIO_Init+0x310>)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eae:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ed2:	4a32      	ldr	r2, [pc, #200]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed8:	4b30      	ldr	r3, [pc, #192]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002efc:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f02:	4b26      	ldr	r3, [pc, #152]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f26:	4a1d      	ldr	r2, [pc, #116]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f50:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <HAL_GPIO_Init+0x334>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	f67f ae90 	bls.w	8002c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3724      	adds	r7, #36	@ 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020400 	.word	0x40020400
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40021400 	.word	0x40021400
 8002f94:	40021800 	.word	0x40021800
 8002f98:	40021c00 	.word	0x40021c00
 8002f9c:	40013c00 	.word	0x40013c00

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	619a      	str	r2, [r3, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e12b      	b.n	800323e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe febc 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	@ 0x24
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003038:	f003 fc22 	bl	8006880 <HAL_RCC_GetPCLK1Freq>
 800303c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4a81      	ldr	r2, [pc, #516]	@ (8003248 <HAL_I2C_Init+0x274>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d807      	bhi.n	8003058 <HAL_I2C_Init+0x84>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a80      	ldr	r2, [pc, #512]	@ (800324c <HAL_I2C_Init+0x278>)
 800304c:	4293      	cmp	r3, r2
 800304e:	bf94      	ite	ls
 8003050:	2301      	movls	r3, #1
 8003052:	2300      	movhi	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e006      	b.n	8003066 <HAL_I2C_Init+0x92>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a7d      	ldr	r2, [pc, #500]	@ (8003250 <HAL_I2C_Init+0x27c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	bf94      	ite	ls
 8003060:	2301      	movls	r3, #1
 8003062:	2300      	movhi	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0e7      	b.n	800323e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a78      	ldr	r2, [pc, #480]	@ (8003254 <HAL_I2C_Init+0x280>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0c9b      	lsrs	r3, r3, #18
 8003078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a6a      	ldr	r2, [pc, #424]	@ (8003248 <HAL_I2C_Init+0x274>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d802      	bhi.n	80030a8 <HAL_I2C_Init+0xd4>
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3301      	adds	r3, #1
 80030a6:	e009      	b.n	80030bc <HAL_I2C_Init+0xe8>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	4a69      	ldr	r2, [pc, #420]	@ (8003258 <HAL_I2C_Init+0x284>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	3301      	adds	r3, #1
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	495c      	ldr	r1, [pc, #368]	@ (8003248 <HAL_I2C_Init+0x274>)
 80030d8:	428b      	cmp	r3, r1
 80030da:	d819      	bhi.n	8003110 <HAL_I2C_Init+0x13c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e59      	subs	r1, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ea:	1c59      	adds	r1, r3, #1
 80030ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030f0:	400b      	ands	r3, r1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_I2C_Init+0x138>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e59      	subs	r1, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fbb1 f3f3 	udiv	r3, r1, r3
 8003104:	3301      	adds	r3, #1
 8003106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310a:	e051      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 800310c:	2304      	movs	r3, #4
 800310e:	e04f      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d111      	bne.n	800313c <HAL_I2C_Init+0x168>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf0c      	ite	eq
 8003134:	2301      	moveq	r3, #1
 8003136:	2300      	movne	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e012      	b.n	8003162 <HAL_I2C_Init+0x18e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1e58      	subs	r0, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	0099      	lsls	r1, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Init+0x196>
 8003166:	2301      	movs	r3, #1
 8003168:	e022      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10e      	bne.n	8003190 <HAL_I2C_Init+0x1bc>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1e58      	subs	r0, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	440b      	add	r3, r1
 8003180:	fbb0 f3f3 	udiv	r3, r0, r3
 8003184:	3301      	adds	r3, #1
 8003186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800318e:	e00f      	b.n	80031b0 <HAL_I2C_Init+0x1dc>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1e58      	subs	r0, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6859      	ldr	r1, [r3, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	0099      	lsls	r1, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	6809      	ldr	r1, [r1, #0]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6911      	ldr	r1, [r2, #16]
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	000186a0 	.word	0x000186a0
 800324c:	001e847f 	.word	0x001e847f
 8003250:	003d08ff 	.word	0x003d08ff
 8003254:	431bde83 	.word	0x431bde83
 8003258:	10624dd3 	.word	0x10624dd3

0800325c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	460b      	mov	r3, r1
 800326a:	817b      	strh	r3, [r7, #10]
 800326c:	4613      	mov	r3, r2
 800326e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003270:	f7ff f848 	bl	8002304 <HAL_GetTick>
 8003274:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b20      	cmp	r3, #32
 8003280:	f040 80e0 	bne.w	8003444 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	2319      	movs	r3, #25
 800328a:	2201      	movs	r2, #1
 800328c:	4970      	ldr	r1, [pc, #448]	@ (8003450 <HAL_I2C_Master_Transmit+0x1f4>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fc64 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800329a:	2302      	movs	r3, #2
 800329c:	e0d3      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_I2C_Master_Transmit+0x50>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0cc      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1ea>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d007      	beq.n	80032d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2221      	movs	r2, #33	@ 0x21
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2210      	movs	r2, #16
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	893a      	ldrh	r2, [r7, #8]
 8003302:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a50      	ldr	r2, [pc, #320]	@ (8003454 <HAL_I2C_Master_Transmit+0x1f8>)
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	6a3a      	ldr	r2, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 face 	bl	80038bc <I2C_MasterRequestWrite>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e08d      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003340:	e066      	b.n	8003410 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	6a39      	ldr	r1, [r7, #32]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fd22 	bl	8003d90 <I2C_WaitOnTXEFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	2b04      	cmp	r3, #4
 8003358:	d107      	bne.n	800336a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06b      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d11b      	bne.n	80033e4 <HAL_I2C_Master_Transmit+0x188>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d017      	beq.n	80033e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	6a39      	ldr	r1, [r7, #32]
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 fd19 	bl	8003e20 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00d      	beq.n	8003410 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d107      	bne.n	800340c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e01a      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d194      	bne.n	8003342 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	00100002 	.word	0x00100002
 8003454:	ffff0000 	.word	0xffff0000

08003458 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	@ 0x30
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	461a      	mov	r2, r3
 8003464:	460b      	mov	r3, r1
 8003466:	817b      	strh	r3, [r7, #10]
 8003468:	4613      	mov	r3, r2
 800346a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7fe ff4a 	bl	8002304 <HAL_GetTick>
 8003470:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	f040 8217 	bne.w	80038ae <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2319      	movs	r3, #25
 8003486:	2201      	movs	r2, #1
 8003488:	497c      	ldr	r1, [pc, #496]	@ (800367c <HAL_I2C_Master_Receive+0x224>)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fb66 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	e20a      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_I2C_Master_Receive+0x50>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e203      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d007      	beq.n	80034ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2222      	movs	r2, #34	@ 0x22
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2210      	movs	r2, #16
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	893a      	ldrh	r2, [r7, #8]
 80034fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a5c      	ldr	r2, [pc, #368]	@ (8003680 <HAL_I2C_Master_Receive+0x228>)
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fa52 	bl	80039c0 <I2C_MasterRequestRead>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1c4      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d113      	bne.n	8003556 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	623b      	str	r3, [r7, #32]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e198      	b.n	8003888 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	2b01      	cmp	r3, #1
 800355c:	d11b      	bne.n	8003596 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e178      	b.n	8003888 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	2b02      	cmp	r3, #2
 800359c:	d11b      	bne.n	80035d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	e158      	b.n	8003888 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035fc:	e144      	b.n	8003888 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	2b03      	cmp	r3, #3
 8003604:	f200 80f1 	bhi.w	80037ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	2b01      	cmp	r3, #1
 800360e:	d123      	bne.n	8003658 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003612:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fc4b 	bl	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e145      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003656:	e117      	b.n	8003888 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	2b02      	cmp	r3, #2
 800365e:	d14e      	bne.n	80036fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	2200      	movs	r2, #0
 8003668:	4906      	ldr	r1, [pc, #24]	@ (8003684 <HAL_I2C_Master_Receive+0x22c>)
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa76 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d008      	beq.n	8003688 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e11a      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
 800367a:	bf00      	nop
 800367c:	00100002 	.word	0x00100002
 8003680:	ffff0000 	.word	0xffff0000
 8003684:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036fc:	e0c4      	b.n	8003888 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	2200      	movs	r2, #0
 8003706:	496c      	ldr	r1, [pc, #432]	@ (80038b8 <HAL_I2C_Master_Receive+0x460>)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fa27 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0cb      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	2200      	movs	r2, #0
 8003762:	4955      	ldr	r1, [pc, #340]	@ (80038b8 <HAL_I2C_Master_Receive+0x460>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f9f9 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e09d      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037e8:	e04e      	b.n	8003888 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fb5e 	bl	8003eb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e058      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d124      	bne.n	8003888 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	2b03      	cmp	r3, #3
 8003844:	d107      	bne.n	8003856 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003854:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	f47f aeb6 	bne.w	80035fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	@ 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	00010004 	.word	0x00010004

080038bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	460b      	mov	r3, r1
 80038ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d006      	beq.n	80038e6 <I2C_MasterRequestWrite+0x2a>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d003      	beq.n	80038e6 <I2C_MasterRequestWrite+0x2a>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038e4:	d108      	bne.n	80038f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e00b      	b.n	8003910 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	2b12      	cmp	r3, #18
 80038fe:	d107      	bne.n	8003910 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800390e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f91d 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00d      	beq.n	8003944 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003936:	d103      	bne.n	8003940 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e035      	b.n	80039b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800394c:	d108      	bne.n	8003960 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800395c:	611a      	str	r2, [r3, #16]
 800395e:	e01b      	b.n	8003998 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003960:	897b      	ldrh	r3, [r7, #10]
 8003962:	11db      	asrs	r3, r3, #7
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 0306 	and.w	r3, r3, #6
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f063 030f 	orn	r3, r3, #15
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	490e      	ldr	r1, [pc, #56]	@ (80039b8 <I2C_MasterRequestWrite+0xfc>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f966 	bl	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e010      	b.n	80039b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4907      	ldr	r1, [pc, #28]	@ (80039bc <I2C_MasterRequestWrite+0x100>)
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 f956 	bl	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	00010008 	.word	0x00010008
 80039bc:	00010002 	.word	0x00010002

080039c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	460b      	mov	r3, r1
 80039ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d006      	beq.n	80039fa <I2C_MasterRequestRead+0x3a>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d003      	beq.n	80039fa <I2C_MasterRequestRead+0x3a>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039f8:	d108      	bne.n	8003a0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e00b      	b.n	8003a24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	2b11      	cmp	r3, #17
 8003a12:	d107      	bne.n	8003a24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f893 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4a:	d103      	bne.n	8003a54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e079      	b.n	8003b4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a60:	d108      	bne.n	8003a74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	611a      	str	r2, [r3, #16]
 8003a72:	e05f      	b.n	8003b34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	11db      	asrs	r3, r3, #7
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0306 	and.w	r3, r3, #6
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f063 030f 	orn	r3, r3, #15
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4930      	ldr	r1, [pc, #192]	@ (8003b54 <I2C_MasterRequestRead+0x194>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f8dc 	bl	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e054      	b.n	8003b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4929      	ldr	r1, [pc, #164]	@ (8003b58 <I2C_MasterRequestRead+0x198>)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f8cc 	bl	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e044      	b.n	8003b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f831 	bl	8003b5c <I2C_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00d      	beq.n	8003b1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0e:	d103      	bne.n	8003b18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e017      	b.n	8003b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b1c:	897b      	ldrh	r3, [r7, #10]
 8003b1e:	11db      	asrs	r3, r3, #7
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0306 	and.w	r3, r3, #6
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f063 030e 	orn	r3, r3, #14
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4907      	ldr	r1, [pc, #28]	@ (8003b58 <I2C_MasterRequestRead+0x198>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f888 	bl	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00010008 	.word	0x00010008
 8003b58:	00010002 	.word	0x00010002

08003b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b6c:	e048      	b.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d044      	beq.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fbc5 	bl	8002304 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d139      	bne.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d10d      	bne.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	e00c      	b.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d116      	bne.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	f043 0220 	orr.w	r2, r3, #32
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e023      	b.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d10d      	bne.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	43da      	mvns	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4013      	ands	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	e00c      	b.n	8003c40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d093      	beq.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5e:	e071      	b.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6e:	d123      	bne.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e067      	b.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d041      	beq.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc0:	f7fe fb20 	bl	8002304 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d136      	bne.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10c      	bne.n	8003cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e00b      	b.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	43da      	mvns	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e021      	b.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	0c1b      	lsrs	r3, r3, #16
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10c      	bne.n	8003d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	43da      	mvns	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e00b      	b.n	8003d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4013      	ands	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f af6d 	bne.w	8003c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9c:	e034      	b.n	8003e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f8e3 	bl	8003f6a <I2C_IsAcknowledgeFailed>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e034      	b.n	8003e18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d028      	beq.n	8003e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db6:	f7fe faa5 	bl	8002304 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d11d      	bne.n	8003e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d016      	beq.n	8003e08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e007      	b.n	8003e18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e12:	2b80      	cmp	r3, #128	@ 0x80
 8003e14:	d1c3      	bne.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2c:	e034      	b.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f89b 	bl	8003f6a <I2C_IsAcknowledgeFailed>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e034      	b.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d028      	beq.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe fa5d 	bl	8002304 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11d      	bne.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d016      	beq.n	8003e98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e007      	b.n	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d1c3      	bne.n	8003e2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ebc:	e049      	b.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d119      	bne.n	8003f00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0210 	mvn.w	r2, #16
 8003ed4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e030      	b.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f00:	f7fe fa00 	bl	8002304 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11d      	bne.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b40      	cmp	r3, #64	@ 0x40
 8003f22:	d016      	beq.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f043 0220 	orr.w	r2, r3, #32
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e007      	b.n	8003f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5c:	2b40      	cmp	r3, #64	@ 0x40
 8003f5e:	d1ae      	bne.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f80:	d11b      	bne.n	8003fba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f043 0204 	orr.w	r2, r3, #4
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e128      	b.n	800422c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a90      	ldr	r2, [pc, #576]	@ (8004234 <HAL_I2S_Init+0x26c>)
 8003ff2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fd ff07 	bl	8001e08 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004010:	f023 030f 	bic.w	r3, r3, #15
 8004014:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2202      	movs	r2, #2
 800401c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d060      	beq.n	80040e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800402e:	2310      	movs	r3, #16
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e001      	b.n	8004038 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004034:	2320      	movs	r3, #32
 8004036:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b20      	cmp	r3, #32
 800403e:	d802      	bhi.n	8004046 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004046:	2001      	movs	r0, #1
 8004048:	f002 fd10 	bl	8006a6c <HAL_RCCEx_GetPeriphCLKFreq>
 800404c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004056:	d125      	bne.n	80040a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	fbb2 f2f3 	udiv	r2, r2, r3
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	461a      	mov	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	3305      	adds	r3, #5
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e01f      	b.n	80040c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	fbb2 f2f3 	udiv	r2, r2, r3
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	461a      	mov	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	3305      	adds	r3, #5
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	e00e      	b.n	80040c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	461a      	mov	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	3305      	adds	r3, #5
 80040c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4a5c      	ldr	r2, [pc, #368]	@ (8004238 <HAL_I2S_Init+0x270>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	08db      	lsrs	r3, r3, #3
 80040cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e003      	b.n	80040f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80040e8:	2302      	movs	r3, #2
 80040ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d902      	bls.n	80040fc <HAL_I2S_Init+0x134>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2bff      	cmp	r3, #255	@ 0xff
 80040fa:	d907      	bls.n	800410c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e08f      	b.n	800422c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	ea42 0103 	orr.w	r1, r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	430a      	orrs	r2, r1
 800411e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800412a:	f023 030f 	bic.w	r3, r3, #15
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6851      	ldr	r1, [r2, #4]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6892      	ldr	r2, [r2, #8]
 8004136:	4311      	orrs	r1, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68d2      	ldr	r2, [r2, #12]
 800413c:	4311      	orrs	r1, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6992      	ldr	r2, [r2, #24]
 8004142:	430a      	orrs	r2, r1
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800414e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d161      	bne.n	800421c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a38      	ldr	r2, [pc, #224]	@ (800423c <HAL_I2S_Init+0x274>)
 800415c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a37      	ldr	r2, [pc, #220]	@ (8004240 <HAL_I2S_Init+0x278>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_I2S_Init+0x1a4>
 8004168:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <HAL_I2S_Init+0x27c>)
 800416a:	e001      	b.n	8004170 <HAL_I2S_Init+0x1a8>
 800416c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	4932      	ldr	r1, [pc, #200]	@ (8004240 <HAL_I2S_Init+0x278>)
 8004178:	428a      	cmp	r2, r1
 800417a:	d101      	bne.n	8004180 <HAL_I2S_Init+0x1b8>
 800417c:	4a31      	ldr	r2, [pc, #196]	@ (8004244 <HAL_I2S_Init+0x27c>)
 800417e:	e001      	b.n	8004184 <HAL_I2S_Init+0x1bc>
 8004180:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004184:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004188:	f023 030f 	bic.w	r3, r3, #15
 800418c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2b      	ldr	r2, [pc, #172]	@ (8004240 <HAL_I2S_Init+0x278>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_I2S_Init+0x1d4>
 8004198:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <HAL_I2S_Init+0x27c>)
 800419a:	e001      	b.n	80041a0 <HAL_I2S_Init+0x1d8>
 800419c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a0:	2202      	movs	r2, #2
 80041a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a25      	ldr	r2, [pc, #148]	@ (8004240 <HAL_I2S_Init+0x278>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d101      	bne.n	80041b2 <HAL_I2S_Init+0x1ea>
 80041ae:	4b25      	ldr	r3, [pc, #148]	@ (8004244 <HAL_I2S_Init+0x27c>)
 80041b0:	e001      	b.n	80041b6 <HAL_I2S_Init+0x1ee>
 80041b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c2:	d003      	beq.n	80041cc <HAL_I2S_Init+0x204>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80041cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	e001      	b.n	80041d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041e2:	4313      	orrs	r3, r2
 80041e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041ec:	4313      	orrs	r3, r2
 80041ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80041f6:	4313      	orrs	r3, r2
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	897b      	ldrh	r3, [r7, #10]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004204:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a0d      	ldr	r2, [pc, #52]	@ (8004240 <HAL_I2S_Init+0x278>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_I2S_Init+0x24c>
 8004210:	4b0c      	ldr	r3, [pc, #48]	@ (8004244 <HAL_I2S_Init+0x27c>)
 8004212:	e001      	b.n	8004218 <HAL_I2S_Init+0x250>
 8004214:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004218:	897a      	ldrh	r2, [r7, #10]
 800421a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	08004535 	.word	0x08004535
 8004238:	cccccccd 	.word	0xcccccccd
 800423c:	08004649 	.word	0x08004649
 8004240:	40003800 	.word	0x40003800
 8004244:	40003400 	.word	0x40003400

08004248 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_I2S_Transmit_DMA+0x1a>
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e08a      	b.n	800437c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d001      	beq.n	8004276 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8004272:	2302      	movs	r3, #2
 8004274:	e082      	b.n	800437c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_I2S_Transmit_DMA+0x3e>
 8004282:	2302      	movs	r3, #2
 8004284:	e07a      	b.n	800437c <HAL_I2S_Transmit_DMA+0x134>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2203      	movs	r2, #3
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d002      	beq.n	80042ba <HAL_I2S_Transmit_DMA+0x72>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b05      	cmp	r3, #5
 80042b8:	d10a      	bne.n	80042d0 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042ce:	e005      	b.n	80042dc <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	4a28      	ldr	r2, [pc, #160]	@ (8004384 <HAL_I2S_Transmit_DMA+0x13c>)
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e8:	4a27      	ldr	r2, [pc, #156]	@ (8004388 <HAL_I2S_Transmit_DMA+0x140>)
 80042ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	4a26      	ldr	r2, [pc, #152]	@ (800438c <HAL_I2S_Transmit_DMA+0x144>)
 80042f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80042fc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004304:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800430c:	f7fe f9ea 	bl	80026e4 <HAL_DMA_Start_IT>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00f      	beq.n	8004336 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431a:	f043 0208 	orr.w	r2, r3, #8
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e022      	b.n	800437c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0202 	orr.w	r2, r2, #2
 800435a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004366:	2b00      	cmp	r3, #0
 8004368:	d107      	bne.n	800437a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004378:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08004413 	.word	0x08004413
 8004388:	080043d1 	.word	0x080043d1
 800438c:	0800442f 	.word	0x0800442f

08004390 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10e      	bne.n	8004404 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0202 	bic.w	r2, r2, #2
 80043f4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7fc fda7 	bl	8000f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7fc fd6f 	bl	8000f04 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0203 	bic.w	r2, r2, #3
 800444a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004464:	f043 0208 	orr.w	r2, r3, #8
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff ffa5 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10e      	bne.n	80044ce <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fc fd45 	bl	8000f58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	b292      	uxth	r2, r2
 80044ea:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10e      	bne.n	800452c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800451c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff3e 	bl	80043a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b04      	cmp	r3, #4
 800454e:	d13a      	bne.n	80045c6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d109      	bne.n	800456e <I2S_IRQHandler+0x3a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d102      	bne.n	800456e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ffb4 	bl	80044d6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004574:	2b40      	cmp	r3, #64	@ 0x40
 8004576:	d126      	bne.n	80045c6 <I2S_IRQHandler+0x92>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b20      	cmp	r3, #32
 8004584:	d11f      	bne.n	80045c6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004594:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b8:	f043 0202 	orr.w	r2, r3, #2
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff fefb 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d136      	bne.n	8004640 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d109      	bne.n	80045f0 <I2S_IRQHandler+0xbc>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d102      	bne.n	80045f0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ff45 	bl	800447a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d122      	bne.n	8004640 <I2S_IRQHandler+0x10c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b20      	cmp	r3, #32
 8004606:	d11b      	bne.n	8004640 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004616:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f043 0204 	orr.w	r2, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff febe 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004640:	bf00      	nop
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a92      	ldr	r2, [pc, #584]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d101      	bne.n	8004666 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004662:	4b92      	ldr	r3, [pc, #584]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004664:	e001      	b.n	800466a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004666:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a8b      	ldr	r2, [pc, #556]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d101      	bne.n	8004684 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004680:	4b8a      	ldr	r3, [pc, #552]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004682:	e001      	b.n	8004688 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004684:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004694:	d004      	beq.n	80046a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f040 8099 	bne.w	80047d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d107      	bne.n	80046ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f925 	bl	8004904 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d107      	bne.n	80046d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9c8 	bl	8004a64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b40      	cmp	r3, #64	@ 0x40
 80046dc:	d13a      	bne.n	8004754 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d035      	beq.n	8004754 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a6e      	ldr	r2, [pc, #440]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80046f2:	4b6e      	ldr	r3, [pc, #440]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046f4:	e001      	b.n	80046fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80046f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4969      	ldr	r1, [pc, #420]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004702:	428b      	cmp	r3, r1
 8004704:	d101      	bne.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004706:	4b69      	ldr	r3, [pc, #420]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004708:	e001      	b.n	800470e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800470a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800470e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004712:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004722:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	f043 0202 	orr.w	r2, r3, #2
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fe34 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b08      	cmp	r3, #8
 800475c:	f040 80c3 	bne.w	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80bd 	beq.w	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800477a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a49      	ldr	r2, [pc, #292]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004786:	4b49      	ldr	r3, [pc, #292]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004788:	e001      	b.n	800478e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800478a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4944      	ldr	r1, [pc, #272]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004796:	428b      	cmp	r3, r1
 8004798:	d101      	bne.n	800479e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800479a:	4b44      	ldr	r3, [pc, #272]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800479c:	e001      	b.n	80047a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800479e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80047a8:	2300      	movs	r3, #0
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c2:	f043 0204 	orr.w	r2, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fdf6 	bl	80043bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047d0:	e089      	b.n	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d107      	bne.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8be 	bl	8004968 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8fd 	bl	8004a00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480c:	2b40      	cmp	r3, #64	@ 0x40
 800480e:	d12f      	bne.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02a      	beq.n	8004870 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004828:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1e      	ldr	r2, [pc, #120]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004834:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004836:	e001      	b.n	800483c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004838:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4919      	ldr	r1, [pc, #100]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004844:	428b      	cmp	r3, r1
 8004846:	d101      	bne.n	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004848:	4b18      	ldr	r3, [pc, #96]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800484a:	e001      	b.n	8004850 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800484c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004850:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004854:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	f043 0202 	orr.w	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fda6 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b08      	cmp	r3, #8
 8004878:	d136      	bne.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d031      	beq.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a07      	ldr	r2, [pc, #28]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800488e:	4b07      	ldr	r3, [pc, #28]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004890:	e001      	b.n	8004896 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4902      	ldr	r1, [pc, #8]	@ (80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800489e:	428b      	cmp	r3, r1
 80048a0:	d106      	bne.n	80048b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80048a2:	4b02      	ldr	r3, [pc, #8]	@ (80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048a4:	e006      	b.n	80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80048a6:	bf00      	nop
 80048a8:	40003800 	.word	0x40003800
 80048ac:	40003400 	.word	0x40003400
 80048b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048b8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fd6c 	bl	80043bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048e4:	e000      	b.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048e6:	bf00      	nop
}
 80048e8:	bf00      	nop
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	1c99      	adds	r1, r3, #2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6251      	str	r1, [r2, #36]	@ 0x24
 8004916:	881a      	ldrh	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d113      	bne.n	800495e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004944:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ffc9 	bl	80048f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	1c99      	adds	r1, r3, #2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6251      	str	r1, [r2, #36]	@ 0x24
 800497a:	8819      	ldrh	r1, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <I2SEx_TxISR_I2SExt+0x90>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <I2SEx_TxISR_I2SExt+0x22>
 8004986:	4b1d      	ldr	r3, [pc, #116]	@ (80049fc <I2SEx_TxISR_I2SExt+0x94>)
 8004988:	e001      	b.n	800498e <I2SEx_TxISR_I2SExt+0x26>
 800498a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800498e:	460a      	mov	r2, r1
 8004990:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d121      	bne.n	80049ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <I2SEx_TxISR_I2SExt+0x90>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <I2SEx_TxISR_I2SExt+0x50>
 80049b4:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <I2SEx_TxISR_I2SExt+0x94>)
 80049b6:	e001      	b.n	80049bc <I2SEx_TxISR_I2SExt+0x54>
 80049b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	490d      	ldr	r1, [pc, #52]	@ (80049f8 <I2SEx_TxISR_I2SExt+0x90>)
 80049c4:	428b      	cmp	r3, r1
 80049c6:	d101      	bne.n	80049cc <I2SEx_TxISR_I2SExt+0x64>
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <I2SEx_TxISR_I2SExt+0x94>)
 80049ca:	e001      	b.n	80049d0 <I2SEx_TxISR_I2SExt+0x68>
 80049cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff81 	bl	80048f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40003800 	.word	0x40003800
 80049fc:	40003400 	.word	0x40003400

08004a00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68d8      	ldr	r0, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	1c99      	adds	r1, r3, #2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a18:	b282      	uxth	r2, r0
 8004a1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d113      	bne.n	8004a5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff4a 	bl	80048f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a20      	ldr	r2, [pc, #128]	@ (8004af4 <I2SEx_RxISR_I2SExt+0x90>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <I2SEx_RxISR_I2SExt+0x16>
 8004a76:	4b20      	ldr	r3, [pc, #128]	@ (8004af8 <I2SEx_RxISR_I2SExt+0x94>)
 8004a78:	e001      	b.n	8004a7e <I2SEx_RxISR_I2SExt+0x1a>
 8004a7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a7e:	68d8      	ldr	r0, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	1c99      	adds	r1, r3, #2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a8a:	b282      	uxth	r2, r0
 8004a8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d121      	bne.n	8004aea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a12      	ldr	r2, [pc, #72]	@ (8004af4 <I2SEx_RxISR_I2SExt+0x90>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <I2SEx_RxISR_I2SExt+0x50>
 8004ab0:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <I2SEx_RxISR_I2SExt+0x94>)
 8004ab2:	e001      	b.n	8004ab8 <I2SEx_RxISR_I2SExt+0x54>
 8004ab4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	490d      	ldr	r1, [pc, #52]	@ (8004af4 <I2SEx_RxISR_I2SExt+0x90>)
 8004ac0:	428b      	cmp	r3, r1
 8004ac2:	d101      	bne.n	8004ac8 <I2SEx_RxISR_I2SExt+0x64>
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <I2SEx_RxISR_I2SExt+0x94>)
 8004ac6:	e001      	b.n	8004acc <I2SEx_RxISR_I2SExt+0x68>
 8004ac8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004acc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ad0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ff03 	bl	80048f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40003800 	.word	0x40003800
 8004af8:	40003400 	.word	0x40003400

08004afc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e101      	b.n	8004d12 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f005 fd43 	bl	800a5b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2203      	movs	r2, #3
 8004b32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b3c:	d102      	bne.n	8004b44 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f002 f990 	bl	8006e6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7c1a      	ldrb	r2, [r3, #16]
 8004b56:	f88d 2000 	strb.w	r2, [sp]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b5e:	f002 f86e 	bl	8006c3e <USB_CoreInit>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0ce      	b.n	8004d12 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f002 f988 	bl	8006e90 <USB_SetCurrentMode>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e0bf      	b.n	8004d12 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
 8004b96:	e04a      	b.n	8004c2e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3315      	adds	r3, #21
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	3314      	adds	r3, #20
 8004bbc:	7bfa      	ldrb	r2, [r7, #15]
 8004bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bc0:	7bfa      	ldrb	r2, [r7, #15]
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	b298      	uxth	r0, r3
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	332e      	adds	r3, #46	@ 0x2e
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bd8:	7bfa      	ldrb	r2, [r7, #15]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3318      	adds	r3, #24
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	331c      	adds	r3, #28
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3320      	adds	r3, #32
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3324      	adds	r3, #36	@ 0x24
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	791b      	ldrb	r3, [r3, #4]
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3af      	bcc.n	8004b98 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	73fb      	strb	r3, [r7, #15]
 8004c3c:	e044      	b.n	8004cc8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004c66:	7bfa      	ldrb	r2, [r7, #15]
 8004c68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	791b      	ldrb	r3, [r3, #4]
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3b5      	bcc.n	8004c3e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	7c1a      	ldrb	r2, [r3, #16]
 8004cda:	f88d 2000 	strb.w	r2, [sp]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce2:	f002 f921 	bl	8006f28 <USB_DevInit>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e00c      	b.n	8004d12 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f003 f96b 	bl	8007fe6 <USB_DevDisconnect>

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_PCD_Start+0x1c>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e022      	b.n	8004d7c <HAL_PCD_Start+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f002 f872 	bl	8006e4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f003 f919 	bl	8007fa4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d84:	b590      	push	{r4, r7, lr}
 8004d86:	b08d      	sub	sp, #52	@ 0x34
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f003 f9d7 	bl	800814e <USB_GetMode>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 848c 	bne.w	80056c0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f003 f93b 	bl	8008028 <USB_ReadInterrupts>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8482 	beq.w	80056be <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f003 f928 	bl	8008028 <USB_ReadInterrupts>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d107      	bne.n	8004df2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f002 0202 	and.w	r2, r2, #2
 8004df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f003 f916 	bl	8008028 <USB_ReadInterrupts>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d161      	bne.n	8004eca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699a      	ldr	r2, [r3, #24]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0210 	bic.w	r2, r2, #16
 8004e14:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	3304      	adds	r3, #4
 8004e34:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004e3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e40:	d124      	bne.n	8004e8c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d035      	beq.n	8004eba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6a38      	ldr	r0, [r7, #32]
 8004e62:	f002 ff4d 	bl	8007d00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e72:	441a      	add	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e84:	441a      	add	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	615a      	str	r2, [r3, #20]
 8004e8a:	e016      	b.n	8004eba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004e92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e96:	d110      	bne.n	8004eba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6a38      	ldr	r0, [r7, #32]
 8004ea4:	f002 ff2c 	bl	8007d00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	695a      	ldr	r2, [r3, #20]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb4:	441a      	add	r2, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0210 	orr.w	r2, r2, #16
 8004ec8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f003 f8aa 	bl	8008028 <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ede:	f040 80a7 	bne.w	8005030 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f003 f8af 	bl	800804e <USB_ReadDevAllOutEpInterrupt>
 8004ef0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004ef2:	e099      	b.n	8005028 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 808e 	beq.w	800501c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f003 f8d3 	bl	80080b6 <USB_ReadDevOutEPInterrupt>
 8004f10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00c      	beq.n	8004f36 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fea3 	bl	8005c7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00c      	beq.n	8004f5a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2308      	movs	r3, #8
 8004f50:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 ff79 	bl	8005e4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f70:	461a      	mov	r2, r3
 8004f72:	2310      	movs	r3, #16
 8004f74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d030      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f88:	2b80      	cmp	r3, #128	@ 0x80
 8004f8a:	d109      	bne.n	8004fa0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f9e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	78db      	ldrb	r3, [r3, #3]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d108      	bne.n	8004fd0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f005 fc06 	bl	800a7dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2302      	movs	r3, #2
 8004fe0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2320      	movs	r3, #32
 8004ffc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	461a      	mov	r2, r3
 8005016:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800501a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	3301      	adds	r3, #1
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	f47f af62 	bne.w	8004ef4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f002 fff7 	bl	8008028 <USB_ReadInterrupts>
 800503a:	4603      	mov	r3, r0
 800503c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005040:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005044:	f040 80db 	bne.w	80051fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f003 f818 	bl	8008082 <USB_ReadDevAllInEpInterrupt>
 8005052:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005058:	e0cd      	b.n	80051f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80c2 	beq.w	80051ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	4611      	mov	r1, r2
 8005070:	4618      	mov	r0, r3
 8005072:	f003 f83e 	bl	80080f2 <USB_ReadDevInEPInterrupt>
 8005076:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d057      	beq.n	8005132 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	2201      	movs	r2, #1
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	43db      	mvns	r3, r3
 800509c:	69f9      	ldr	r1, [r7, #28]
 800509e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050a2:	4013      	ands	r3, r2
 80050a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b2:	461a      	mov	r2, r3
 80050b4:	2301      	movs	r3, #1
 80050b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	799b      	ldrb	r3, [r3, #6]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d132      	bne.n	8005126 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	4613      	mov	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	3320      	adds	r3, #32
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4403      	add	r3, r0
 80050e0:	331c      	adds	r3, #28
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4419      	add	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ea:	4613      	mov	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4403      	add	r3, r0
 80050f4:	3320      	adds	r3, #32
 80050f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d113      	bne.n	8005126 <HAL_PCD_IRQHandler+0x3a2>
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	3324      	adds	r3, #36	@ 0x24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d108      	bne.n	8005126 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800511e:	461a      	mov	r2, r3
 8005120:	2101      	movs	r1, #1
 8005122:	f003 f845 	bl	80081b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	b2db      	uxtb	r3, r3
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f005 fad0 	bl	800a6d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005148:	461a      	mov	r2, r3
 800514a:	2308      	movs	r3, #8
 800514c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005164:	461a      	mov	r2, r3
 8005166:	2310      	movs	r3, #16
 8005168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	2340      	movs	r3, #64	@ 0x40
 8005184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d023      	beq.n	80051d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005192:	6a38      	ldr	r0, [r7, #32]
 8005194:	f002 f82c 	bl	80071f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	3310      	adds	r3, #16
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	4413      	add	r3, r2
 80051a8:	3304      	adds	r3, #4
 80051aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	78db      	ldrb	r3, [r3, #3]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d108      	bne.n	80051c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2200      	movs	r2, #0
 80051b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f005 fb1d 	bl	800a800 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d2:	461a      	mov	r2, r3
 80051d4:	2302      	movs	r3, #2
 80051d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fcbd 	bl	8005b64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	3301      	adds	r3, #1
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f af2e 	bne.w	800505a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f002 ff10 	bl	8008028 <USB_ReadInterrupts>
 8005208:	4603      	mov	r3, r0
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005212:	d122      	bne.n	800525a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800522e:	2b01      	cmp	r3, #1
 8005230:	d108      	bne.n	8005244 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800523a:	2100      	movs	r1, #0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fea3 	bl	8005f88 <HAL_PCDEx_LPM_Callback>
 8005242:	e002      	b.n	800524a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f005 fabb 	bl	800a7c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f002 fee2 	bl	8008028 <USB_ReadInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800526a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800526e:	d112      	bne.n	8005296 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d102      	bne.n	8005286 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f005 fa77 	bl	800a774 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005294:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f002 fec4 	bl	8008028 <USB_ReadInterrupts>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	f040 80b7 	bne.w	800541c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2110      	movs	r1, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 ff91 	bl	80071f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052d2:	e046      	b.n	8005362 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005302:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005306:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005314:	461a      	mov	r2, r3
 8005316:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800531a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005336:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800533a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005356:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800535a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535e:	3301      	adds	r3, #1
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	791b      	ldrb	r3, [r3, #4]
 8005366:	461a      	mov	r2, r3
 8005368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536a:	4293      	cmp	r3, r2
 800536c:	d3b2      	bcc.n	80052d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800537c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005380:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	7bdb      	ldrb	r3, [r3, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800539a:	f043 030b 	orr.w	r3, r3, #11
 800539e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053b0:	f043 030b 	orr.w	r3, r3, #11
 80053b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80053b6:	e015      	b.n	80053e4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80053ca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80053ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053de:	f043 030b 	orr.w	r3, r3, #11
 80053e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80053f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005406:	461a      	mov	r2, r3
 8005408:	f002 fed2 	bl	80081b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800541a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f002 fe01 	bl	8008028 <USB_ReadInterrupts>
 8005426:	4603      	mov	r3, r0
 8005428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005430:	d123      	bne.n	800547a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f002 fe97 	bl	800816a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f001 ff4e 	bl	80072e2 <USB_GetDevSpeed>
 8005446:	4603      	mov	r3, r0
 8005448:	461a      	mov	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681c      	ldr	r4, [r3, #0]
 8005452:	f001 fa09 	bl	8006868 <HAL_RCC_GetHCLKFreq>
 8005456:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800545c:	461a      	mov	r2, r3
 800545e:	4620      	mov	r0, r4
 8005460:	f001 fc52 	bl	8006d08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f005 f95c 	bl	800a722 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005478:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f002 fdd2 	bl	8008028 <USB_ReadInterrupts>
 8005484:	4603      	mov	r3, r0
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d10a      	bne.n	80054a4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f005 f939 	bl	800a706 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f002 0208 	and.w	r2, r2, #8
 80054a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f002 fdbd 	bl	8008028 <USB_ReadInterrupts>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b4:	2b80      	cmp	r3, #128	@ 0x80
 80054b6:	d123      	bne.n	8005500 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054c4:	2301      	movs	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c8:	e014      	b.n	80054f4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb0a 	bl	8005b02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	3301      	adds	r3, #1
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d3e4      	bcc.n	80054ca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f002 fd8f 	bl	8008028 <USB_ReadInterrupts>
 800550a:	4603      	mov	r3, r0
 800550c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005514:	d13c      	bne.n	8005590 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005516:	2301      	movs	r3, #1
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
 800551a:	e02b      	b.n	8005574 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	3318      	adds	r3, #24
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d115      	bne.n	800556e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005542:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005544:	2b00      	cmp	r3, #0
 8005546:	da12      	bge.n	800556e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3317      	adds	r3, #23
 8005558:	2201      	movs	r2, #1
 800555a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005564:	b2db      	uxtb	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 faca 	bl	8005b02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	3301      	adds	r3, #1
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	791b      	ldrb	r3, [r3, #4]
 8005578:	461a      	mov	r2, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	4293      	cmp	r3, r2
 800557e:	d3cd      	bcc.n	800551c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800558e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f002 fd47 	bl	8008028 <USB_ReadInterrupts>
 800559a:	4603      	mov	r3, r0
 800559c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055a4:	d156      	bne.n	8005654 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055a6:	2301      	movs	r3, #1
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055aa:	e045      	b.n	8005638 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d12e      	bne.n	8005632 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da2b      	bge.n	8005632 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80055e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d121      	bne.n	8005632 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f2:	4613      	mov	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800562a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800562e:	6053      	str	r3, [r2, #4]
            break;
 8005630:	e008      	b.n	8005644 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	3301      	adds	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	791b      	ldrb	r3, [r3, #4]
 800563c:	461a      	mov	r2, r3
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	4293      	cmp	r3, r2
 8005642:	d3b3      	bcc.n	80055ac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f002 fce5 	bl	8008028 <USB_ReadInterrupts>
 800565e:	4603      	mov	r3, r0
 8005660:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005668:	d10a      	bne.n	8005680 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f005 f8da 	bl	800a824 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800567e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f002 fccf 	bl	8008028 <USB_ReadInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d115      	bne.n	80056c0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f005 f8ca 	bl	800a840 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	e000      	b.n	80056c0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80056be:	bf00      	nop
    }
  }
}
 80056c0:	3734      	adds	r7, #52	@ 0x34
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd90      	pop	{r4, r7, pc}

080056c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_PCD_SetAddress+0x1a>
 80056dc:	2302      	movs	r3, #2
 80056de:	e012      	b.n	8005706 <HAL_PCD_SetAddress+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f002 fc2e 	bl	8007f58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	4608      	mov	r0, r1
 8005718:	4611      	mov	r1, r2
 800571a:	461a      	mov	r2, r3
 800571c:	4603      	mov	r3, r0
 800571e:	70fb      	strb	r3, [r7, #3]
 8005720:	460b      	mov	r3, r1
 8005722:	803b      	strh	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800572c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da0f      	bge.n	8005754 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	3310      	adds	r3, #16
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	705a      	strb	r2, [r3, #1]
 8005752:	e00f      	b.n	8005774 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f003 020f 	and.w	r2, r3, #15
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4413      	add	r3, r2
 800576a:	3304      	adds	r3, #4
 800576c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	b2da      	uxtb	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005780:	883b      	ldrh	r3, [r7, #0]
 8005782:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	78ba      	ldrb	r2, [r7, #2]
 800578e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057a2:	78bb      	ldrb	r3, [r7, #2]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d102      	bne.n	80057ae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_PCD_EP_Open+0xae>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e00e      	b.n	80057da <HAL_PCD_EP_Open+0xcc>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 fdae 	bl	800732c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80057d8:	7afb      	ldrb	r3, [r7, #11]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da0f      	bge.n	8005816 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	f003 020f 	and.w	r2, r3, #15
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	3310      	adds	r3, #16
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	4413      	add	r3, r2
 800580a:	3304      	adds	r3, #4
 800580c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2201      	movs	r2, #1
 8005812:	705a      	strb	r2, [r3, #1]
 8005814:	e00f      	b.n	8005836 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	4413      	add	r3, r2
 800582c:	3304      	adds	r3, #4
 800582e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_PCD_EP_Close+0x6e>
 800584c:	2302      	movs	r3, #2
 800584e:	e00e      	b.n	800586e <HAL_PCD_EP_Close+0x8c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	4618      	mov	r0, r3
 8005860:	f001 fdec 	bl	800743c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b086      	sub	sp, #24
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	460b      	mov	r3, r1
 8005884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	3304      	adds	r3, #4
 800589e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058b8:	7afb      	ldrb	r3, [r7, #11]
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	799b      	ldrb	r3, [r3, #6]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	799b      	ldrb	r3, [r3, #6]
 80058da:	461a      	mov	r2, r3
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	f001 fe89 	bl	80075f4 <USB_EPStartXfer>

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800590e:	681b      	ldr	r3, [r3, #0]
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	607a      	str	r2, [r7, #4]
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	460b      	mov	r3, r1
 800592a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800592c:	7afb      	ldrb	r3, [r7, #11]
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	3310      	adds	r3, #16
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	3304      	adds	r3, #4
 8005942:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2200      	movs	r2, #0
 8005954:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2201      	movs	r2, #1
 800595a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800595c:	7afb      	ldrb	r3, [r7, #11]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	b2da      	uxtb	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	799b      	ldrb	r3, [r3, #6]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d102      	bne.n	8005976 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	799b      	ldrb	r3, [r3, #6]
 800597e:	461a      	mov	r2, r3
 8005980:	6979      	ldr	r1, [r7, #20]
 8005982:	f001 fe37 	bl	80075f4 <USB_EPStartXfer>

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	7912      	ldrb	r2, [r2, #4]
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d901      	bls.n	80059ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e04f      	b.n	8005a4e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da0f      	bge.n	80059d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	f003 020f 	and.w	r2, r3, #15
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	3310      	adds	r3, #16
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	3304      	adds	r3, #4
 80059cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	705a      	strb	r2, [r3, #1]
 80059d4:	e00d      	b.n	80059f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059d6:	78fa      	ldrb	r2, [r7, #3]
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	3304      	adds	r3, #4
 80059ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2201      	movs	r2, #1
 80059f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_PCD_EP_SetStall+0x82>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e01d      	b.n	8005a4e <HAL_PCD_EP_SetStall+0xbe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f002 f9c5 	bl	8007db0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	7999      	ldrb	r1, [r3, #6]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f002 fbb6 	bl	80081b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	7912      	ldrb	r2, [r2, #4]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d901      	bls.n	8005a74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e042      	b.n	8005afa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	da0f      	bge.n	8005a9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 020f 	and.w	r2, r3, #15
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	3310      	adds	r3, #16
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	705a      	strb	r2, [r3, #1]
 8005a9a:	e00f      	b.n	8005abc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	f003 020f 	and.w	r2, r3, #15
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_PCD_EP_ClrStall+0x86>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e00e      	b.n	8005afa <HAL_PCD_EP_ClrStall+0xa4>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68f9      	ldr	r1, [r7, #12]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f002 f9ce 	bl	8007e8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	da0c      	bge.n	8005b30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	3310      	adds	r3, #16
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e00c      	b.n	8005b4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	4413      	add	r3, r2
 8005b46:	3304      	adds	r3, #4
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 ffed 	bl	8007b30 <USB_EPStopXfer>
 8005b56:	4603      	mov	r3, r0
 8005b58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	3310      	adds	r3, #16
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4413      	add	r3, r2
 8005b88:	3304      	adds	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	695a      	ldr	r2, [r3, #20]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d901      	bls.n	8005b9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e06b      	b.n	8005c74 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d902      	bls.n	8005bb8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	3303      	adds	r3, #3
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bc0:	e02a      	b.n	8005c18 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d902      	bls.n	8005bde <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	3303      	adds	r3, #3
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	68d9      	ldr	r1, [r3, #12]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f002 f842 	bl	8007c84 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	441a      	add	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	695a      	ldr	r2, [r3, #20]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	441a      	add	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d809      	bhi.n	8005c42 <PCD_WriteEmptyTxFifo+0xde>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d203      	bcs.n	8005c42 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1bf      	bne.n	8005bc2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d811      	bhi.n	8005c72 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	2201      	movs	r2, #1
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	6939      	ldr	r1, [r7, #16]
 8005c6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c6e:	4013      	ands	r3, r2
 8005c70:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	333c      	adds	r3, #60	@ 0x3c
 8005c94:	3304      	adds	r3, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	799b      	ldrb	r3, [r3, #6]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d17b      	bne.n	8005daa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d015      	beq.n	8005ce8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4a61      	ldr	r2, [pc, #388]	@ (8005e44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	f240 80b9 	bls.w	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80b3 	beq.w	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce4:	6093      	str	r3, [r2, #8]
 8005ce6:	e0a7      	b.n	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2320      	movs	r3, #32
 8005d02:	6093      	str	r3, [r2, #8]
 8005d04:	e098      	b.n	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8093 	bne.w	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4a4b      	ldr	r2, [pc, #300]	@ (8005e44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d90f      	bls.n	8005d3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d36:	6093      	str	r3, [r2, #8]
 8005d38:	e07e      	b.n	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	0159      	lsls	r1, r3, #5
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	440b      	add	r3, r1
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d114      	bne.n	8005d9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d109      	bne.n	8005d8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d84:	461a      	mov	r2, r3
 8005d86:	2101      	movs	r1, #1
 8005d88:	f002 fa12 	bl	80081b0 <USB_EP0_OutStart>
 8005d8c:	e006      	b.n	8005d9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	441a      	add	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f004 fc7a 	bl	800a69c <HAL_PCD_DataOutStageCallback>
 8005da8:	e046      	b.n	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4a26      	ldr	r2, [pc, #152]	@ (8005e48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d124      	bne.n	8005dfc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dce:	6093      	str	r3, [r2, #8]
 8005dd0:	e032      	b.n	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2320      	movs	r3, #32
 8005dec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f004 fc51 	bl	800a69c <HAL_PCD_DataOutStageCallback>
 8005dfa:	e01d      	b.n	8005e38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d114      	bne.n	8005e2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d108      	bne.n	8005e2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e24:	461a      	mov	r2, r3
 8005e26:	2100      	movs	r1, #0
 8005e28:	f002 f9c2 	bl	80081b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f004 fc32 	bl	800a69c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	4f54300a 	.word	0x4f54300a
 8005e48:	4f54310a 	.word	0x4f54310a

08005e4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	333c      	adds	r3, #60	@ 0x3c
 8005e64:	3304      	adds	r3, #4
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a15      	ldr	r2, [pc, #84]	@ (8005ed4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d90e      	bls.n	8005ea0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f004 fbe9 	bl	800a678 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed4 <PCD_EP_OutSetupPacket_int+0x88>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d90c      	bls.n	8005ec8 <PCD_EP_OutSetupPacket_int+0x7c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	799b      	ldrb	r3, [r3, #6]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d108      	bne.n	8005ec8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	f002 f974 	bl	80081b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	4f54300a 	.word	0x4f54300a

08005ed8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ef6:	883b      	ldrh	r3, [r7, #0]
 8005ef8:	0419      	lsls	r1, r3, #16
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f04:	e028      	b.n	8005f58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	0c1b      	lsrs	r3, r3, #16
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4413      	add	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	e00d      	b.n	8005f36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	3340      	adds	r3, #64	@ 0x40
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	3301      	adds	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3ec      	bcc.n	8005f1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f40:	883b      	ldrh	r3, [r7, #0]
 8005f42:	0418      	lsls	r0, r3, #16
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6819      	ldr	r1, [r3, #0]
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	4302      	orrs	r2, r0
 8005f50:	3340      	adds	r3, #64	@ 0x40
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	887a      	ldrh	r2, [r7, #2]
 8005f78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e267      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d075      	beq.n	80060aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fbe:	4b88      	ldr	r3, [pc, #544]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d00c      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fca:	4b85      	ldr	r3, [pc, #532]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d112      	bne.n	8005ffc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fd6:	4b82      	ldr	r3, [pc, #520]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fe2:	d10b      	bne.n	8005ffc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d05b      	beq.n	80060a8 <HAL_RCC_OscConfig+0x108>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d157      	bne.n	80060a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e242      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006004:	d106      	bne.n	8006014 <HAL_RCC_OscConfig+0x74>
 8006006:	4b76      	ldr	r3, [pc, #472]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a75      	ldr	r2, [pc, #468]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e01d      	b.n	8006050 <HAL_RCC_OscConfig+0xb0>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800601c:	d10c      	bne.n	8006038 <HAL_RCC_OscConfig+0x98>
 800601e:	4b70      	ldr	r3, [pc, #448]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a6f      	ldr	r2, [pc, #444]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	4b6d      	ldr	r3, [pc, #436]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a6c      	ldr	r2, [pc, #432]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	e00b      	b.n	8006050 <HAL_RCC_OscConfig+0xb0>
 8006038:	4b69      	ldr	r3, [pc, #420]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a68      	ldr	r2, [pc, #416]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800603e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	4b66      	ldr	r3, [pc, #408]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a65      	ldr	r2, [pc, #404]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800604a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800604e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d013      	beq.n	8006080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006058:	f7fc f954 	bl	8002304 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006060:	f7fc f950 	bl	8002304 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	@ 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e207      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006072:	4b5b      	ldr	r3, [pc, #364]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d0f0      	beq.n	8006060 <HAL_RCC_OscConfig+0xc0>
 800607e:	e014      	b.n	80060aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006080:	f7fc f940 	bl	8002304 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006088:	f7fc f93c 	bl	8002304 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b64      	cmp	r3, #100	@ 0x64
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e1f3      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800609a:	4b51      	ldr	r3, [pc, #324]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f0      	bne.n	8006088 <HAL_RCC_OscConfig+0xe8>
 80060a6:	e000      	b.n	80060aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d063      	beq.n	800617e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060b6:	4b4a      	ldr	r3, [pc, #296]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 030c 	and.w	r3, r3, #12
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00b      	beq.n	80060da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060c2:	4b47      	ldr	r3, [pc, #284]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d11c      	bne.n	8006108 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ce:	4b44      	ldr	r3, [pc, #272]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d116      	bne.n	8006108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060da:	4b41      	ldr	r3, [pc, #260]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_RCC_OscConfig+0x152>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d001      	beq.n	80060f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e1c7      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f2:	4b3b      	ldr	r3, [pc, #236]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4937      	ldr	r1, [pc, #220]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006106:	e03a      	b.n	800617e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d020      	beq.n	8006152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006110:	4b34      	ldr	r3, [pc, #208]	@ (80061e4 <HAL_RCC_OscConfig+0x244>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006116:	f7fc f8f5 	bl	8002304 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800611e:	f7fc f8f1 	bl	8002304 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e1a8      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006130:	4b2b      	ldr	r3, [pc, #172]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613c:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4925      	ldr	r1, [pc, #148]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 800614c:	4313      	orrs	r3, r2
 800614e:	600b      	str	r3, [r1, #0]
 8006150:	e015      	b.n	800617e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006152:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <HAL_RCC_OscConfig+0x244>)
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006158:	f7fc f8d4 	bl	8002304 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006160:	f7fc f8d0 	bl	8002304 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e187      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006172:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f0      	bne.n	8006160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d036      	beq.n	80061f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d016      	beq.n	80061c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006192:	4b15      	ldr	r3, [pc, #84]	@ (80061e8 <HAL_RCC_OscConfig+0x248>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006198:	f7fc f8b4 	bl	8002304 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a0:	f7fc f8b0 	bl	8002304 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e167      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <HAL_RCC_OscConfig+0x240>)
 80061b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x200>
 80061be:	e01b      	b.n	80061f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c0:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <HAL_RCC_OscConfig+0x248>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061c6:	f7fc f89d 	bl	8002304 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061cc:	e00e      	b.n	80061ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ce:	f7fc f899 	bl	8002304 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d907      	bls.n	80061ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e150      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
 80061e0:	40023800 	.word	0x40023800
 80061e4:	42470000 	.word	0x42470000
 80061e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ec:	4b88      	ldr	r3, [pc, #544]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80061ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1ea      	bne.n	80061ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8097 	beq.w	8006334 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800620a:	4b81      	ldr	r3, [pc, #516]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	4b7d      	ldr	r3, [pc, #500]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	4a7c      	ldr	r2, [pc, #496]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006224:	6413      	str	r3, [r2, #64]	@ 0x40
 8006226:	4b7a      	ldr	r3, [pc, #488]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006236:	4b77      	ldr	r3, [pc, #476]	@ (8006414 <HAL_RCC_OscConfig+0x474>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623e:	2b00      	cmp	r3, #0
 8006240:	d118      	bne.n	8006274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006242:	4b74      	ldr	r3, [pc, #464]	@ (8006414 <HAL_RCC_OscConfig+0x474>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a73      	ldr	r2, [pc, #460]	@ (8006414 <HAL_RCC_OscConfig+0x474>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800624e:	f7fc f859 	bl	8002304 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006256:	f7fc f855 	bl	8002304 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e10c      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006268:	4b6a      	ldr	r3, [pc, #424]	@ (8006414 <HAL_RCC_OscConfig+0x474>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x2ea>
 800627c:	4b64      	ldr	r3, [pc, #400]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006280:	4a63      	ldr	r2, [pc, #396]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	@ 0x70
 8006288:	e01c      	b.n	80062c4 <HAL_RCC_OscConfig+0x324>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b05      	cmp	r3, #5
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x30c>
 8006292:	4b5f      	ldr	r3, [pc, #380]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006296:	4a5e      	ldr	r2, [pc, #376]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006298:	f043 0304 	orr.w	r3, r3, #4
 800629c:	6713      	str	r3, [r2, #112]	@ 0x70
 800629e:	4b5c      	ldr	r3, [pc, #368]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a2:	4a5b      	ldr	r2, [pc, #364]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062aa:	e00b      	b.n	80062c4 <HAL_RCC_OscConfig+0x324>
 80062ac:	4b58      	ldr	r3, [pc, #352]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b0:	4a57      	ldr	r2, [pc, #348]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b8:	4b55      	ldr	r3, [pc, #340]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062bc:	4a54      	ldr	r2, [pc, #336]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80062be:	f023 0304 	bic.w	r3, r3, #4
 80062c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062cc:	f7fc f81a 	bl	8002304 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d2:	e00a      	b.n	80062ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fc f816 	bl	8002304 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e0cb      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ea:	4b49      	ldr	r3, [pc, #292]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ee      	beq.n	80062d4 <HAL_RCC_OscConfig+0x334>
 80062f6:	e014      	b.n	8006322 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f8:	f7fc f804 	bl	8002304 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fc f800 	bl	8002304 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e0b5      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006316:	4b3e      	ldr	r3, [pc, #248]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ee      	bne.n	8006300 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d105      	bne.n	8006334 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006328:	4b39      	ldr	r3, [pc, #228]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	4a38      	ldr	r2, [pc, #224]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 800632e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006332:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80a1 	beq.w	8006480 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800633e:	4b34      	ldr	r3, [pc, #208]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
 8006346:	2b08      	cmp	r3, #8
 8006348:	d05c      	beq.n	8006404 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d141      	bne.n	80063d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006352:	4b31      	ldr	r3, [pc, #196]	@ (8006418 <HAL_RCC_OscConfig+0x478>)
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006358:	f7fb ffd4 	bl	8002304 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006360:	f7fb ffd0 	bl	8002304 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e087      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006372:	4b27      	ldr	r3, [pc, #156]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69da      	ldr	r2, [r3, #28]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638c:	019b      	lsls	r3, r3, #6
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	085b      	lsrs	r3, r3, #1
 8006396:	3b01      	subs	r3, #1
 8006398:	041b      	lsls	r3, r3, #16
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	061b      	lsls	r3, r3, #24
 80063a2:	491b      	ldr	r1, [pc, #108]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006418 <HAL_RCC_OscConfig+0x478>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ae:	f7fb ffa9 	bl	8002304 <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b4:	e008      	b.n	80063c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b6:	f7fb ffa5 	bl	8002304 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e05c      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c8:	4b11      	ldr	r3, [pc, #68]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0f0      	beq.n	80063b6 <HAL_RCC_OscConfig+0x416>
 80063d4:	e054      	b.n	8006480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063d6:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <HAL_RCC_OscConfig+0x478>)
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063dc:	f7fb ff92 	bl	8002304 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e4:	f7fb ff8e 	bl	8002304 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e045      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f6:	4b06      	ldr	r3, [pc, #24]	@ (8006410 <HAL_RCC_OscConfig+0x470>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1f0      	bne.n	80063e4 <HAL_RCC_OscConfig+0x444>
 8006402:	e03d      	b.n	8006480 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d107      	bne.n	800641c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e038      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
 8006410:	40023800 	.word	0x40023800
 8006414:	40007000 	.word	0x40007000
 8006418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800641c:	4b1b      	ldr	r3, [pc, #108]	@ (800648c <HAL_RCC_OscConfig+0x4ec>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d028      	beq.n	800647c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006434:	429a      	cmp	r2, r3
 8006436:	d121      	bne.n	800647c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006442:	429a      	cmp	r2, r3
 8006444:	d11a      	bne.n	800647c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800644c:	4013      	ands	r3, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006454:	4293      	cmp	r3, r2
 8006456:	d111      	bne.n	800647c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	3b01      	subs	r3, #1
 8006466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d107      	bne.n	800647c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006478:	429a      	cmp	r2, r3
 800647a:	d001      	beq.n	8006480 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40023800 	.word	0x40023800

08006490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0cc      	b.n	800663e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a4:	4b68      	ldr	r3, [pc, #416]	@ (8006648 <HAL_RCC_ClockConfig+0x1b8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d90c      	bls.n	80064cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b65      	ldr	r3, [pc, #404]	@ (8006648 <HAL_RCC_ClockConfig+0x1b8>)
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ba:	4b63      	ldr	r3, [pc, #396]	@ (8006648 <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d001      	beq.n	80064cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0b8      	b.n	800663e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d020      	beq.n	800651a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064e4:	4b59      	ldr	r3, [pc, #356]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	4a58      	ldr	r2, [pc, #352]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80064ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064fc:	4b53      	ldr	r3, [pc, #332]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a52      	ldr	r2, [pc, #328]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006508:	4b50      	ldr	r3, [pc, #320]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	494d      	ldr	r1, [pc, #308]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d044      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d107      	bne.n	800653e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800652e:	4b47      	ldr	r3, [pc, #284]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d119      	bne.n	800656e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e07f      	b.n	800663e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d003      	beq.n	800654e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800654a:	2b03      	cmp	r3, #3
 800654c:	d107      	bne.n	800655e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654e:	4b3f      	ldr	r3, [pc, #252]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e06f      	b.n	800663e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655e:	4b3b      	ldr	r3, [pc, #236]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e067      	b.n	800663e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800656e:	4b37      	ldr	r3, [pc, #220]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f023 0203 	bic.w	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4934      	ldr	r1, [pc, #208]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	4313      	orrs	r3, r2
 800657e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006580:	f7fb fec0 	bl	8002304 <HAL_GetTick>
 8006584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006586:	e00a      	b.n	800659e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006588:	f7fb febc 	bl	8002304 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e04f      	b.n	800663e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659e:	4b2b      	ldr	r3, [pc, #172]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 020c 	and.w	r2, r3, #12
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d1eb      	bne.n	8006588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065b0:	4b25      	ldr	r3, [pc, #148]	@ (8006648 <HAL_RCC_ClockConfig+0x1b8>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d20c      	bcs.n	80065d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065be:	4b22      	ldr	r3, [pc, #136]	@ (8006648 <HAL_RCC_ClockConfig+0x1b8>)
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c6:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <HAL_RCC_ClockConfig+0x1b8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d001      	beq.n	80065d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e032      	b.n	800663e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0304 	and.w	r3, r3, #4
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d008      	beq.n	80065f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065e4:	4b19      	ldr	r3, [pc, #100]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	4916      	ldr	r1, [pc, #88]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006602:	4b12      	ldr	r3, [pc, #72]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	490e      	ldr	r1, [pc, #56]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006616:	f000 f821 	bl	800665c <HAL_RCC_GetSysClockFreq>
 800661a:	4602      	mov	r2, r0
 800661c:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	091b      	lsrs	r3, r3, #4
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	490a      	ldr	r1, [pc, #40]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 8006628:	5ccb      	ldrb	r3, [r1, r3]
 800662a:	fa22 f303 	lsr.w	r3, r2, r3
 800662e:	4a09      	ldr	r2, [pc, #36]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006632:	4b09      	ldr	r3, [pc, #36]	@ (8006658 <HAL_RCC_ClockConfig+0x1c8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7fb fe20 	bl	800227c <HAL_InitTick>

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	40023c00 	.word	0x40023c00
 800664c:	40023800 	.word	0x40023800
 8006650:	0800d2d8 	.word	0x0800d2d8
 8006654:	20000018 	.word	0x20000018
 8006658:	2000001c 	.word	0x2000001c

0800665c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800665c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006660:	b094      	sub	sp, #80	@ 0x50
 8006662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006674:	4b79      	ldr	r3, [pc, #484]	@ (800685c <HAL_RCC_GetSysClockFreq+0x200>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 030c 	and.w	r3, r3, #12
 800667c:	2b08      	cmp	r3, #8
 800667e:	d00d      	beq.n	800669c <HAL_RCC_GetSysClockFreq+0x40>
 8006680:	2b08      	cmp	r3, #8
 8006682:	f200 80e1 	bhi.w	8006848 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <HAL_RCC_GetSysClockFreq+0x34>
 800668a:	2b04      	cmp	r3, #4
 800668c:	d003      	beq.n	8006696 <HAL_RCC_GetSysClockFreq+0x3a>
 800668e:	e0db      	b.n	8006848 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006690:	4b73      	ldr	r3, [pc, #460]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x204>)
 8006692:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006694:	e0db      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006696:	4b73      	ldr	r3, [pc, #460]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x208>)
 8006698:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800669a:	e0d8      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800669c:	4b6f      	ldr	r3, [pc, #444]	@ (800685c <HAL_RCC_GetSysClockFreq+0x200>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066a6:	4b6d      	ldr	r3, [pc, #436]	@ (800685c <HAL_RCC_GetSysClockFreq+0x200>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d063      	beq.n	800677a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b2:	4b6a      	ldr	r3, [pc, #424]	@ (800685c <HAL_RCC_GetSysClockFreq+0x200>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	2200      	movs	r2, #0
 80066ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c6:	2300      	movs	r3, #0
 80066c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066ce:	4622      	mov	r2, r4
 80066d0:	462b      	mov	r3, r5
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f04f 0100 	mov.w	r1, #0
 80066da:	0159      	lsls	r1, r3, #5
 80066dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066e0:	0150      	lsls	r0, r2, #5
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4621      	mov	r1, r4
 80066e8:	1a51      	subs	r1, r2, r1
 80066ea:	6139      	str	r1, [r7, #16]
 80066ec:	4629      	mov	r1, r5
 80066ee:	eb63 0301 	sbc.w	r3, r3, r1
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006700:	4659      	mov	r1, fp
 8006702:	018b      	lsls	r3, r1, #6
 8006704:	4651      	mov	r1, sl
 8006706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800670a:	4651      	mov	r1, sl
 800670c:	018a      	lsls	r2, r1, #6
 800670e:	4651      	mov	r1, sl
 8006710:	ebb2 0801 	subs.w	r8, r2, r1
 8006714:	4659      	mov	r1, fp
 8006716:	eb63 0901 	sbc.w	r9, r3, r1
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800672a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800672e:	4690      	mov	r8, r2
 8006730:	4699      	mov	r9, r3
 8006732:	4623      	mov	r3, r4
 8006734:	eb18 0303 	adds.w	r3, r8, r3
 8006738:	60bb      	str	r3, [r7, #8]
 800673a:	462b      	mov	r3, r5
 800673c:	eb49 0303 	adc.w	r3, r9, r3
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800674e:	4629      	mov	r1, r5
 8006750:	024b      	lsls	r3, r1, #9
 8006752:	4621      	mov	r1, r4
 8006754:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006758:	4621      	mov	r1, r4
 800675a:	024a      	lsls	r2, r1, #9
 800675c:	4610      	mov	r0, r2
 800675e:	4619      	mov	r1, r3
 8006760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006762:	2200      	movs	r2, #0
 8006764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006768:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800676c:	f7fa fa0c 	bl	8000b88 <__aeabi_uldivmod>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4613      	mov	r3, r2
 8006776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006778:	e058      	b.n	800682c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800677a:	4b38      	ldr	r3, [pc, #224]	@ (800685c <HAL_RCC_GetSysClockFreq+0x200>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	099b      	lsrs	r3, r3, #6
 8006780:	2200      	movs	r2, #0
 8006782:	4618      	mov	r0, r3
 8006784:	4611      	mov	r1, r2
 8006786:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800678a:	623b      	str	r3, [r7, #32]
 800678c:	2300      	movs	r3, #0
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006790:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	f04f 0000 	mov.w	r0, #0
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	0159      	lsls	r1, r3, #5
 80067a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067a6:	0150      	lsls	r0, r2, #5
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4641      	mov	r1, r8
 80067ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80067b2:	4649      	mov	r1, r9
 80067b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067cc:	ebb2 040a 	subs.w	r4, r2, sl
 80067d0:	eb63 050b 	sbc.w	r5, r3, fp
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	00eb      	lsls	r3, r5, #3
 80067de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e2:	00e2      	lsls	r2, r4, #3
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	4643      	mov	r3, r8
 80067ea:	18e3      	adds	r3, r4, r3
 80067ec:	603b      	str	r3, [r7, #0]
 80067ee:	464b      	mov	r3, r9
 80067f0:	eb45 0303 	adc.w	r3, r5, r3
 80067f4:	607b      	str	r3, [r7, #4]
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006802:	4629      	mov	r1, r5
 8006804:	028b      	lsls	r3, r1, #10
 8006806:	4621      	mov	r1, r4
 8006808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800680c:	4621      	mov	r1, r4
 800680e:	028a      	lsls	r2, r1, #10
 8006810:	4610      	mov	r0, r2
 8006812:	4619      	mov	r1, r3
 8006814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006816:	2200      	movs	r2, #0
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	61fa      	str	r2, [r7, #28]
 800681c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006820:	f7fa f9b2 	bl	8000b88 <__aeabi_uldivmod>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4613      	mov	r3, r2
 800682a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800682c:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <HAL_RCC_GetSysClockFreq+0x200>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	0c1b      	lsrs	r3, r3, #16
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	3301      	adds	r3, #1
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800683c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800683e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006846:	e002      	b.n	800684e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x204>)
 800684a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800684c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800684e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006850:	4618      	mov	r0, r3
 8006852:	3750      	adds	r7, #80	@ 0x50
 8006854:	46bd      	mov	sp, r7
 8006856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685a:	bf00      	nop
 800685c:	40023800 	.word	0x40023800
 8006860:	00f42400 	.word	0x00f42400
 8006864:	007a1200 	.word	0x007a1200

08006868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800686c:	4b03      	ldr	r3, [pc, #12]	@ (800687c <HAL_RCC_GetHCLKFreq+0x14>)
 800686e:	681b      	ldr	r3, [r3, #0]
}
 8006870:	4618      	mov	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	20000018 	.word	0x20000018

08006880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006884:	f7ff fff0 	bl	8006868 <HAL_RCC_GetHCLKFreq>
 8006888:	4602      	mov	r2, r0
 800688a:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	0a9b      	lsrs	r3, r3, #10
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	4903      	ldr	r1, [pc, #12]	@ (80068a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006896:	5ccb      	ldrb	r3, [r1, r3]
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800689c:	4618      	mov	r0, r3
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40023800 	.word	0x40023800
 80068a4:	0800d2e8 	.word	0x0800d2e8

080068a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d105      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d035      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068d0:	4b62      	ldr	r3, [pc, #392]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068d6:	f7fb fd15 	bl	8002304 <HAL_GetTick>
 80068da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068dc:	e008      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068de:	f7fb fd11 	bl	8002304 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e0b0      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f0      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	019a      	lsls	r2, r3, #6
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	071b      	lsls	r3, r3, #28
 8006908:	4955      	ldr	r1, [pc, #340]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006910:	4b52      	ldr	r3, [pc, #328]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006916:	f7fb fcf5 	bl	8002304 <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800691c:	e008      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800691e:	f7fb fcf1 	bl	8002304 <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d901      	bls.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e090      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006930:	4b4b      	ldr	r3, [pc, #300]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0f0      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8083 	beq.w	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	4b44      	ldr	r3, [pc, #272]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	4a43      	ldr	r2, [pc, #268]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006958:	6413      	str	r3, [r2, #64]	@ 0x40
 800695a:	4b41      	ldr	r3, [pc, #260]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006966:	4b3f      	ldr	r3, [pc, #252]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a3e      	ldr	r2, [pc, #248]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800696c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006970:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006972:	f7fb fcc7 	bl	8002304 <HAL_GetTick>
 8006976:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006978:	e008      	b.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697a:	f7fb fcc3 	bl	8002304 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d901      	bls.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e062      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800698c:	4b35      	ldr	r3, [pc, #212]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006998:	4b31      	ldr	r3, [pc, #196]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d02f      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d028      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069c0:	4b29      	ldr	r3, [pc, #164]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069c6:	4b28      	ldr	r3, [pc, #160]	@ (8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80069cc:	4a24      	ldr	r2, [pc, #144]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069d2:	4b23      	ldr	r3, [pc, #140]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d114      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069de:	f7fb fc91 	bl	8002304 <HAL_GetTick>
 80069e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069e4:	e00a      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e6:	f7fb fc8d 	bl	8002304 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d901      	bls.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e02a      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069fc:	4b18      	ldr	r3, [pc, #96]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ee      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a14:	d10d      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a16:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a2a:	490d      	ldr	r1, [pc, #52]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	608b      	str	r3, [r1, #8]
 8006a30:	e005      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a32:	4b0b      	ldr	r3, [pc, #44]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4a0a      	ldr	r2, [pc, #40]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a38:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a3c:	6093      	str	r3, [r2, #8]
 8006a3e:	4b08      	ldr	r3, [pc, #32]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a4a:	4905      	ldr	r1, [pc, #20]	@ (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	42470068 	.word	0x42470068
 8006a60:	40023800 	.word	0x40023800
 8006a64:	40007000 	.word	0x40007000
 8006a68:	42470e40 	.word	0x42470e40

08006a6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d13f      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006a8a:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a92:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d006      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006aa0:	d12f      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006aa4:	617b      	str	r3, [r7, #20]
          break;
 8006aa6:	e02f      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ab4:	d108      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ab6:	4b19      	ldr	r3, [pc, #100]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006abe:	4a19      	ldr	r2, [pc, #100]	@ (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	e007      	b.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ac8:	4b14      	ldr	r3, [pc, #80]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ad0:	4a15      	ldr	r2, [pc, #84]	@ (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006ad8:	4b10      	ldr	r3, [pc, #64]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ade:	099b      	lsrs	r3, r3, #6
 8006ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006aec:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006af2:	0f1b      	lsrs	r3, r3, #28
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afe:	617b      	str	r3, [r7, #20]
          break;
 8006b00:	e002      	b.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
          break;
 8006b06:	bf00      	nop
        }
      }
      break;
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006b0a:	bf00      	nop
    }
  }
  return frequency;
 8006b0c:	697b      	ldr	r3, [r7, #20]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	00bb8000 	.word	0x00bb8000
 8006b24:	007a1200 	.word	0x007a1200
 8006b28:	00f42400 	.word	0x00f42400

08006b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e07b      	b.n	8006c36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d108      	bne.n	8006b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b4e:	d009      	beq.n	8006b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	61da      	str	r2, [r3, #28]
 8006b56:	e005      	b.n	8006b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fb fa00 	bl	8001f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be8:	ea42 0103 	orr.w	r1, r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	0c1b      	lsrs	r3, r3, #16
 8006c02:	f003 0104 	and.w	r1, r3, #4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	f003 0210 	and.w	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c3e:	b084      	sub	sp, #16
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	f107 001c 	add.w	r0, r7, #28
 8006c4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c50:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d123      	bne.n	8006ca0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d105      	bne.n	8006c94 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fae9 	bl	800826c <USB_CoreReset>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73fb      	strb	r3, [r7, #15]
 8006c9e:	e01b      	b.n	8006cd8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fadd 	bl	800826c <USB_CoreReset>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cb6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cca:	e005      	b.n	8006cd8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cd8:	7fbb      	ldrb	r3, [r7, #30]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d10b      	bne.n	8006cf6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f043 0206 	orr.w	r2, r3, #6
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d02:	b004      	add	sp, #16
 8006d04:	4770      	bx	lr
	...

08006d08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d165      	bne.n	8006de8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a41      	ldr	r2, [pc, #260]	@ (8006e24 <USB_SetTurnaroundTime+0x11c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d906      	bls.n	8006d32 <USB_SetTurnaroundTime+0x2a>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4a40      	ldr	r2, [pc, #256]	@ (8006e28 <USB_SetTurnaroundTime+0x120>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d202      	bcs.n	8006d32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d2c:	230f      	movs	r3, #15
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e062      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4a3c      	ldr	r2, [pc, #240]	@ (8006e28 <USB_SetTurnaroundTime+0x120>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d306      	bcc.n	8006d48 <USB_SetTurnaroundTime+0x40>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8006e2c <USB_SetTurnaroundTime+0x124>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d202      	bcs.n	8006d48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d42:	230e      	movs	r3, #14
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e057      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a38      	ldr	r2, [pc, #224]	@ (8006e2c <USB_SetTurnaroundTime+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d306      	bcc.n	8006d5e <USB_SetTurnaroundTime+0x56>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a37      	ldr	r2, [pc, #220]	@ (8006e30 <USB_SetTurnaroundTime+0x128>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d202      	bcs.n	8006d5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d58:	230d      	movs	r3, #13
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e04c      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a33      	ldr	r2, [pc, #204]	@ (8006e30 <USB_SetTurnaroundTime+0x128>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d306      	bcc.n	8006d74 <USB_SetTurnaroundTime+0x6c>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4a32      	ldr	r2, [pc, #200]	@ (8006e34 <USB_SetTurnaroundTime+0x12c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d802      	bhi.n	8006d74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d6e:	230c      	movs	r3, #12
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e041      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a2f      	ldr	r2, [pc, #188]	@ (8006e34 <USB_SetTurnaroundTime+0x12c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d906      	bls.n	8006d8a <USB_SetTurnaroundTime+0x82>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8006e38 <USB_SetTurnaroundTime+0x130>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d802      	bhi.n	8006d8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d84:	230b      	movs	r3, #11
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e036      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006e38 <USB_SetTurnaroundTime+0x130>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d906      	bls.n	8006da0 <USB_SetTurnaroundTime+0x98>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4a29      	ldr	r2, [pc, #164]	@ (8006e3c <USB_SetTurnaroundTime+0x134>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d802      	bhi.n	8006da0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d9a:	230a      	movs	r3, #10
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e02b      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a26      	ldr	r2, [pc, #152]	@ (8006e3c <USB_SetTurnaroundTime+0x134>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d906      	bls.n	8006db6 <USB_SetTurnaroundTime+0xae>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4a25      	ldr	r2, [pc, #148]	@ (8006e40 <USB_SetTurnaroundTime+0x138>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d202      	bcs.n	8006db6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006db0:	2309      	movs	r3, #9
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e020      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a21      	ldr	r2, [pc, #132]	@ (8006e40 <USB_SetTurnaroundTime+0x138>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d306      	bcc.n	8006dcc <USB_SetTurnaroundTime+0xc4>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	4a20      	ldr	r2, [pc, #128]	@ (8006e44 <USB_SetTurnaroundTime+0x13c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d802      	bhi.n	8006dcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e015      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <USB_SetTurnaroundTime+0x13c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d906      	bls.n	8006de2 <USB_SetTurnaroundTime+0xda>
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e48 <USB_SetTurnaroundTime+0x140>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d202      	bcs.n	8006de2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ddc:	2307      	movs	r3, #7
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e00a      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006de2:	2306      	movs	r3, #6
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	e007      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006dee:	2309      	movs	r3, #9
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	e001      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006df4:	2309      	movs	r3, #9
 8006df6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006e10:	431a      	orrs	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	00d8acbf 	.word	0x00d8acbf
 8006e28:	00e4e1c0 	.word	0x00e4e1c0
 8006e2c:	00f42400 	.word	0x00f42400
 8006e30:	01067380 	.word	0x01067380
 8006e34:	011a499f 	.word	0x011a499f
 8006e38:	01312cff 	.word	0x01312cff
 8006e3c:	014ca43f 	.word	0x014ca43f
 8006e40:	016e3600 	.word	0x016e3600
 8006e44:	01a6ab1f 	.word	0x01a6ab1f
 8006e48:	01e84800 	.word	0x01e84800

08006e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f043 0201 	orr.w	r2, r3, #1
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f023 0201 	bic.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d115      	bne.n	8006ede <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ebe:	200a      	movs	r0, #10
 8006ec0:	f7fb fa2c 	bl	800231c <HAL_Delay>
      ms += 10U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	330a      	adds	r3, #10
 8006ec8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f93f 	bl	800814e <USB_GetMode>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d01e      	beq.n	8006f14 <USB_SetCurrentMode+0x84>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006eda:	d9f0      	bls.n	8006ebe <USB_SetCurrentMode+0x2e>
 8006edc:	e01a      	b.n	8006f14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d115      	bne.n	8006f10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ef0:	200a      	movs	r0, #10
 8006ef2:	f7fb fa13 	bl	800231c <HAL_Delay>
      ms += 10U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	330a      	adds	r3, #10
 8006efa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f926 	bl	800814e <USB_GetMode>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <USB_SetCurrentMode+0x84>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f0c:	d9f0      	bls.n	8006ef0 <USB_SetCurrentMode+0x60>
 8006f0e:	e001      	b.n	8006f14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e005      	b.n	8006f20 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f18:	d101      	bne.n	8006f1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f28:	b084      	sub	sp, #16
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b086      	sub	sp, #24
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	e009      	b.n	8006f5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	3340      	adds	r3, #64	@ 0x40
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b0e      	cmp	r3, #14
 8006f60:	d9f2      	bls.n	8006f48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d11c      	bne.n	8006fa4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f78:	f043 0302 	orr.w	r3, r3, #2
 8006f7c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fa2:	e00b      	b.n	8006fbc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d10d      	bne.n	8006fec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fd8:	2100      	movs	r1, #0
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f968 	bl	80072b0 <USB_SetDevSpeed>
 8006fe0:	e008      	b.n	8006ff4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f963 	bl	80072b0 <USB_SetDevSpeed>
 8006fea:	e003      	b.n	8006ff4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fec:	2103      	movs	r1, #3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f95e 	bl	80072b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ff4:	2110      	movs	r1, #16
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f8fa 	bl	80071f0 <USB_FlushTxFifo>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f924 	bl	8007254 <USB_FlushRxFifo>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800701c:	461a      	mov	r2, r3
 800701e:	2300      	movs	r3, #0
 8007020:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007028:	461a      	mov	r2, r3
 800702a:	2300      	movs	r3, #0
 800702c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007034:	461a      	mov	r2, r3
 8007036:	2300      	movs	r3, #0
 8007038:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e043      	b.n	80070c8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007052:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007056:	d118      	bne.n	800708a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706a:	461a      	mov	r2, r3
 800706c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	e013      	b.n	800709c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007080:	461a      	mov	r2, r3
 8007082:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	e008      	b.n	800709c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007096:	461a      	mov	r2, r3
 8007098:	2300      	movs	r3, #0
 800709a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a8:	461a      	mov	r2, r3
 80070aa:	2300      	movs	r3, #0
 80070ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ba:	461a      	mov	r2, r3
 80070bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3301      	adds	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070cc:	461a      	mov	r2, r3
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d3b5      	bcc.n	8007040 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d4:	2300      	movs	r3, #0
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	e043      	b.n	8007162 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070f0:	d118      	bne.n	8007124 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007104:	461a      	mov	r2, r3
 8007106:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800710a:	6013      	str	r3, [r2, #0]
 800710c:	e013      	b.n	8007136 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711a:	461a      	mov	r2, r3
 800711c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e008      	b.n	8007136 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007130:	461a      	mov	r2, r3
 8007132:	2300      	movs	r3, #0
 8007134:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007142:	461a      	mov	r2, r3
 8007144:	2300      	movs	r3, #0
 8007146:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007154:	461a      	mov	r2, r3
 8007156:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800715a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	3301      	adds	r3, #1
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007166:	461a      	mov	r2, r3
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	4293      	cmp	r3, r2
 800716c:	d3b5      	bcc.n	80070da <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800717c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007180:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800718e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007190:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f043 0210 	orr.w	r2, r3, #16
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699a      	ldr	r2, [r3, #24]
 80071a8:	4b10      	ldr	r3, [pc, #64]	@ (80071ec <USB_DevInit+0x2c4>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	f043 0208 	orr.w	r2, r3, #8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d107      	bne.n	80071dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071d4:	f043 0304 	orr.w	r3, r3, #4
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071e8:	b004      	add	sp, #16
 80071ea:	4770      	bx	lr
 80071ec:	803c3800 	.word	0x803c3800

080071f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800720a:	d901      	bls.n	8007210 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e01b      	b.n	8007248 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	daf2      	bge.n	80071fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	019b      	lsls	r3, r3, #6
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007234:	d901      	bls.n	800723a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e006      	b.n	8007248 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b20      	cmp	r3, #32
 8007244:	d0f0      	beq.n	8007228 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800726c:	d901      	bls.n	8007272 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e018      	b.n	80072a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	daf2      	bge.n	8007260 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2210      	movs	r2, #16
 8007282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007290:	d901      	bls.n	8007296 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e006      	b.n	80072a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d0f0      	beq.n	8007284 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072d0:	4313      	orrs	r3, r2
 80072d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b087      	sub	sp, #28
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 0306 	and.w	r3, r3, #6
 80072fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d102      	bne.n	8007308 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
 8007306:	e00a      	b.n	800731e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d002      	beq.n	8007314 <USB_GetDevSpeed+0x32>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b06      	cmp	r3, #6
 8007312:	d102      	bne.n	800731a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007314:	2302      	movs	r3, #2
 8007316:	75fb      	strb	r3, [r7, #23]
 8007318:	e001      	b.n	800731e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800731a:	230f      	movs	r3, #15
 800731c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800731e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007320:	4618      	mov	r0, r3
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d13a      	bne.n	80073be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734e:	69da      	ldr	r2, [r3, #28]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	2101      	movs	r1, #1
 800735a:	fa01 f303 	lsl.w	r3, r1, r3
 800735e:	b29b      	uxth	r3, r3
 8007360:	68f9      	ldr	r1, [r7, #12]
 8007362:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007366:	4313      	orrs	r3, r2
 8007368:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d155      	bne.n	800742c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	791b      	ldrb	r3, [r3, #4]
 800739a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800739c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	059b      	lsls	r3, r3, #22
 80073a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073a4:	4313      	orrs	r3, r2
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	e036      	b.n	800742c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	2101      	movs	r1, #1
 80073d0:	fa01 f303 	lsl.w	r3, r1, r3
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073dc:	4313      	orrs	r3, r2
 80073de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d11a      	bne.n	800742c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	791b      	ldrb	r3, [r3, #4]
 8007410:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007412:	430b      	orrs	r3, r1
 8007414:	4313      	orrs	r3, r2
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	440a      	add	r2, r1
 800741e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d161      	bne.n	800751c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800746a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800746e:	d11f      	bne.n	80074b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800748a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800748e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	f003 030f 	and.w	r3, r3, #15
 80074c0:	2101      	movs	r1, #1
 80074c2:	fa01 f303 	lsl.w	r3, r1, r3
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	43db      	mvns	r3, r3
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074d0:	4013      	ands	r3, r2
 80074d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074da:	69da      	ldr	r2, [r3, #28]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	2101      	movs	r1, #1
 80074e6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	43db      	mvns	r3, r3
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074f4:	4013      	ands	r3, r2
 80074f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	0159      	lsls	r1, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	440b      	add	r3, r1
 800750e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007512:	4619      	mov	r1, r3
 8007514:	4b35      	ldr	r3, [pc, #212]	@ (80075ec <USB_DeactivateEndpoint+0x1b0>)
 8007516:	4013      	ands	r3, r2
 8007518:	600b      	str	r3, [r1, #0]
 800751a:	e060      	b.n	80075de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800752e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007532:	d11f      	bne.n	8007574 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800754e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007552:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	440a      	add	r2, r1
 800756a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800756e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007572:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800757a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	2101      	movs	r1, #1
 8007586:	fa01 f303 	lsl.w	r3, r1, r3
 800758a:	041b      	lsls	r3, r3, #16
 800758c:	43db      	mvns	r3, r3
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007594:	4013      	ands	r3, r2
 8007596:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 030f 	and.w	r3, r3, #15
 80075a8:	2101      	movs	r1, #1
 80075aa:	fa01 f303 	lsl.w	r3, r1, r3
 80075ae:	041b      	lsls	r3, r3, #16
 80075b0:	43db      	mvns	r3, r3
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075b8:	4013      	ands	r3, r2
 80075ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	0159      	lsls	r1, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	440b      	add	r3, r1
 80075d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d6:	4619      	mov	r1, r3
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <USB_DeactivateEndpoint+0x1b4>)
 80075da:	4013      	ands	r3, r2
 80075dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	ec337800 	.word	0xec337800
 80075f0:	eff37800 	.word	0xeff37800

080075f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	@ 0x28
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b01      	cmp	r3, #1
 8007612:	f040 817f 	bne.w	8007914 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d132      	bne.n	8007684 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	69fa      	ldr	r2, [r7, #28]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007638:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800763c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	440a      	add	r2, r1
 8007658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800765c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007660:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767c:	0cdb      	lsrs	r3, r3, #19
 800767e:	04db      	lsls	r3, r3, #19
 8007680:	6113      	str	r3, [r2, #16]
 8007682:	e097      	b.n	80077b4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800769e:	0cdb      	lsrs	r3, r3, #19
 80076a0:	04db      	lsls	r3, r3, #19
 80076a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80076c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80076c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d11a      	bne.n	8007704 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d903      	bls.n	80076e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007700:	6113      	str	r3, [r2, #16]
 8007702:	e044      	b.n	800778e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4413      	add	r3, r2
 800770e:	1e5a      	subs	r2, r3, #1
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	8afb      	ldrh	r3, [r7, #22]
 800772a:	04d9      	lsls	r1, r3, #19
 800772c:	4ba4      	ldr	r3, [pc, #656]	@ (80079c0 <USB_EPStartXfer+0x3cc>)
 800772e:	400b      	ands	r3, r1
 8007730:	69b9      	ldr	r1, [r7, #24]
 8007732:	0148      	lsls	r0, r1, #5
 8007734:	69f9      	ldr	r1, [r7, #28]
 8007736:	4401      	add	r1, r0
 8007738:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800773c:	4313      	orrs	r3, r2
 800773e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	791b      	ldrb	r3, [r3, #4]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d122      	bne.n	800778e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007762:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007766:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	8afb      	ldrh	r3, [r7, #22]
 8007778:	075b      	lsls	r3, r3, #29
 800777a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800777e:	69b9      	ldr	r1, [r7, #24]
 8007780:	0148      	lsls	r0, r1, #5
 8007782:	69f9      	ldr	r1, [r7, #28]
 8007784:	4401      	add	r1, r0
 8007786:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800778a:	4313      	orrs	r3, r2
 800778c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	015a      	lsls	r2, r3, #5
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	4413      	add	r3, r2
 8007796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a4:	69b9      	ldr	r1, [r7, #24]
 80077a6:	0148      	lsls	r0, r1, #5
 80077a8:	69f9      	ldr	r1, [r7, #28]
 80077aa:	4401      	add	r1, r0
 80077ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80077b0:	4313      	orrs	r3, r2
 80077b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d14b      	bne.n	8007852 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ce:	461a      	mov	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	791b      	ldrb	r3, [r3, #4]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d128      	bne.n	8007830 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d110      	bne.n	8007810 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007808:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e00f      	b.n	8007830 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800782a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800782e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e166      	b.n	8007b20 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800786c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007870:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	791b      	ldrb	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d015      	beq.n	80078a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 814e 	beq.w	8007b20 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800788a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	2101      	movs	r1, #1
 8007896:	fa01 f303 	lsl.w	r3, r1, r3
 800789a:	69f9      	ldr	r1, [r7, #28]
 800789c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078a0:	4313      	orrs	r3, r2
 80078a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80078a4:	e13c      	b.n	8007b20 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d110      	bne.n	80078d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	e00f      	b.n	80078f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	68d9      	ldr	r1, [r3, #12]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	b298      	uxth	r0, r3
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4603      	mov	r3, r0
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f9b9 	bl	8007c84 <USB_WritePacket>
 8007912:	e105      	b.n	8007b20 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	0151      	lsls	r1, r2, #5
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	440a      	add	r2, r1
 800792a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800792e:	0cdb      	lsrs	r3, r3, #19
 8007930:	04db      	lsls	r3, r3, #19
 8007932:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800794e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007952:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007956:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d132      	bne.n	80079c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800798c:	69b9      	ldr	r1, [r7, #24]
 800798e:	0148      	lsls	r0, r1, #5
 8007990:	69f9      	ldr	r1, [r7, #28]
 8007992:	4401      	add	r1, r0
 8007994:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007998:	4313      	orrs	r3, r2
 800799a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079ba:	6113      	str	r3, [r2, #16]
 80079bc:	e062      	b.n	8007a84 <USB_EPStartXfer+0x490>
 80079be:	bf00      	nop
 80079c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d123      	bne.n	8007a14 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e2:	69b9      	ldr	r1, [r7, #24]
 80079e4:	0148      	lsls	r0, r1, #5
 80079e6:	69f9      	ldr	r1, [r7, #28]
 80079e8:	4401      	add	r1, r0
 80079ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079ee:	4313      	orrs	r3, r2
 80079f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a10:	6113      	str	r3, [r2, #16]
 8007a12:	e037      	b.n	8007a84 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	691a      	ldr	r2, [r3, #16]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	1e5a      	subs	r2, r3, #1
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a28:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	8afa      	ldrh	r2, [r7, #22]
 8007a30:	fb03 f202 	mul.w	r2, r3, r2
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a44:	691a      	ldr	r2, [r3, #16]
 8007a46:	8afb      	ldrh	r3, [r7, #22]
 8007a48:	04d9      	lsls	r1, r3, #19
 8007a4a:	4b38      	ldr	r3, [pc, #224]	@ (8007b2c <USB_EPStartXfer+0x538>)
 8007a4c:	400b      	ands	r3, r1
 8007a4e:	69b9      	ldr	r1, [r7, #24]
 8007a50:	0148      	lsls	r0, r1, #5
 8007a52:	69f9      	ldr	r1, [r7, #28]
 8007a54:	4401      	add	r1, r0
 8007a56:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a74:	69b9      	ldr	r1, [r7, #24]
 8007a76:	0148      	lsls	r0, r1, #5
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	4401      	add	r1, r0
 8007a7c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a80:	4313      	orrs	r3, r2
 8007a82:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d10d      	bne.n	8007aa6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	68d9      	ldr	r1, [r3, #12]
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	791b      	ldrb	r3, [r3, #4]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d128      	bne.n	8007b00 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d110      	bne.n	8007ae0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ad8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	e00f      	b.n	8007b00 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007afe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b1a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3720      	adds	r7, #32
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	1ff80000 	.word	0x1ff80000

08007b30 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	785b      	ldrb	r3, [r3, #1]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d14a      	bne.n	8007be4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b66:	f040 8086 	bne.w	8007c76 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	7812      	ldrb	r2, [r2, #0]
 8007b7e:	0151      	lsls	r1, r2, #5
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	440a      	add	r2, r1
 8007b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b8c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	7812      	ldrb	r2, [r2, #0]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d902      	bls.n	8007bc8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bc6:	e056      	b.n	8007c76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	015a      	lsls	r2, r3, #5
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007be0:	d0e7      	beq.n	8007bb2 <USB_EPStopXfer+0x82>
 8007be2:	e048      	b.n	8007c76 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bfc:	d13b      	bne.n	8007c76 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	7812      	ldrb	r2, [r2, #0]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c20:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	7812      	ldrb	r2, [r2, #0]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d902      	bls.n	8007c5c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
          break;
 8007c5a:	e00c      	b.n	8007c76 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c74:	d0e7      	beq.n	8007c46 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b089      	sub	sp, #36	@ 0x24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	461a      	mov	r2, r3
 8007c92:	460b      	mov	r3, r1
 8007c94:	71fb      	strb	r3, [r7, #7]
 8007c96:	4613      	mov	r3, r2
 8007c98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ca2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d123      	bne.n	8007cf2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007caa:	88bb      	ldrh	r3, [r7, #4]
 8007cac:	3303      	adds	r3, #3
 8007cae:	089b      	lsrs	r3, r3, #2
 8007cb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e018      	b.n	8007cea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	031a      	lsls	r2, r3, #12
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d3e2      	bcc.n	8007cb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3724      	adds	r7, #36	@ 0x24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b08b      	sub	sp, #44	@ 0x2c
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	089b      	lsrs	r3, r3, #2
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	623b      	str	r3, [r7, #32]
 8007d2a:	e014      	b.n	8007d56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d36:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	3301      	adds	r3, #1
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	3301      	adds	r3, #1
 8007d48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	3301      	adds	r3, #1
 8007d54:	623b      	str	r3, [r7, #32]
 8007d56:	6a3a      	ldr	r2, [r7, #32]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d3e6      	bcc.n	8007d2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d5e:	8bfb      	ldrh	r3, [r7, #30]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01e      	beq.n	8007da2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f107 0310 	add.w	r3, r7, #16
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	fa22 f303 	lsr.w	r3, r2, r3
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d88:	701a      	strb	r2, [r3, #0]
      i++;
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	3301      	adds	r3, #1
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007d96:	8bfb      	ldrh	r3, [r7, #30]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d9c:	8bfb      	ldrh	r3, [r7, #30]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1ea      	bne.n	8007d78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	372c      	adds	r7, #44	@ 0x2c
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d12c      	bne.n	8007e26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	db12      	blt.n	8007e04 <USB_EPSetStall+0x54>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00f      	beq.n	8007e04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	e02b      	b.n	8007e7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	db12      	blt.n	8007e5e <USB_EPSetStall+0xae>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00f      	beq.n	8007e5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	0151      	lsls	r1, r2, #5
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	440a      	add	r2, r1
 8007e54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d128      	bne.n	8007efa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ec2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ec6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	791b      	ldrb	r3, [r3, #4]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d003      	beq.n	8007ed8 <USB_EPClearStall+0x4c>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d138      	bne.n	8007f4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	0151      	lsls	r1, r2, #5
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	440a      	add	r2, r1
 8007eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ef6:	6013      	str	r3, [r2, #0]
 8007ef8:	e027      	b.n	8007f4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	0151      	lsls	r1, r2, #5
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	440a      	add	r2, r1
 8007f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	791b      	ldrb	r3, [r3, #4]
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d003      	beq.n	8007f2a <USB_EPClearStall+0x9e>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	791b      	ldrb	r3, [r3, #4]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d10f      	bne.n	8007f4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	0151      	lsls	r1, r2, #5
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	440a      	add	r2, r1
 8007f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f76:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007f7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	011b      	lsls	r3, r3, #4
 8007f88:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f92:	4313      	orrs	r3, r2
 8007f94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007fbe:	f023 0303 	bic.w	r3, r3, #3
 8007fc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fd2:	f023 0302 	bic.w	r3, r3, #2
 8007fd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008000:	f023 0303 	bic.w	r3, r3, #3
 8008004:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008014:	f043 0302 	orr.w	r3, r3, #2
 8008018:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4013      	ands	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008040:	68fb      	ldr	r3, [r7, #12]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	4013      	ands	r3, r2
 8008070:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	0c1b      	lsrs	r3, r3, #16
}
 8008076:	4618      	mov	r0, r3
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	4013      	ands	r3, r2
 80080a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	b29b      	uxth	r3, r3
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	4013      	ands	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080e4:	68bb      	ldr	r3, [r7, #8]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b087      	sub	sp, #28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	460b      	mov	r3, r1
 80080fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008114:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008116:	78fb      	ldrb	r3, [r7, #3]
 8008118:	f003 030f 	and.w	r3, r3, #15
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	fa22 f303 	lsr.w	r3, r2, r3
 8008122:	01db      	lsls	r3, r3, #7
 8008124:	b2db      	uxtb	r3, r3
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4013      	ands	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008140:	68bb      	ldr	r3, [r7, #8]
}
 8008142:	4618      	mov	r0, r3
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	f003 0301 	and.w	r3, r3, #1
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008184:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008188:	f023 0307 	bic.w	r3, r3, #7
 800818c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800819c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	460b      	mov	r3, r1
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	333c      	adds	r3, #60	@ 0x3c
 80081c6:	3304      	adds	r3, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4a26      	ldr	r2, [pc, #152]	@ (8008268 <USB_EP0_OutStart+0xb8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d90a      	bls.n	80081ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081e4:	d101      	bne.n	80081ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	e037      	b.n	800825a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f0:	461a      	mov	r2, r3
 80081f2:	2300      	movs	r3, #0
 80081f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008204:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008218:	f043 0318 	orr.w	r3, r3, #24
 800821c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800822c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008230:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d10f      	bne.n	8008258 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823e:	461a      	mov	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008252:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008256:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	4f54300a 	.word	0x4f54300a

0800826c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008284:	d901      	bls.n	800828a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e01b      	b.n	80082c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	daf2      	bge.n	8008278 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f043 0201 	orr.w	r2, r3, #1
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082ae:	d901      	bls.n	80082b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e006      	b.n	80082c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d0f0      	beq.n	80082a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80082e0:	f002 fc46 	bl	800ab70 <USBD_static_malloc>
 80082e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d109      	bne.n	8008300 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	32b0      	adds	r2, #176	@ 0xb0
 80082f6:	2100      	movs	r1, #0
 80082f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082fc:	2302      	movs	r3, #2
 80082fe:	e0d4      	b.n	80084aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008300:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008304:	2100      	movs	r1, #0
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f002 fe80 	bl	800b00c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32b0      	adds	r2, #176	@ 0xb0
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	32b0      	adds	r2, #176	@ 0xb0
 8008326:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	7c1b      	ldrb	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d138      	bne.n	80083aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008338:	4b5e      	ldr	r3, [pc, #376]	@ (80084b4 <USBD_CDC_Init+0x1e4>)
 800833a:	7819      	ldrb	r1, [r3, #0]
 800833c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008340:	2202      	movs	r2, #2
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f002 faf1 	bl	800a92a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008348:	4b5a      	ldr	r3, [pc, #360]	@ (80084b4 <USBD_CDC_Init+0x1e4>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f003 020f 	and.w	r2, r3, #15
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	3324      	adds	r3, #36	@ 0x24
 800835e:	2201      	movs	r2, #1
 8008360:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008362:	4b55      	ldr	r3, [pc, #340]	@ (80084b8 <USBD_CDC_Init+0x1e8>)
 8008364:	7819      	ldrb	r1, [r3, #0]
 8008366:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800836a:	2202      	movs	r2, #2
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f002 fadc 	bl	800a92a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008372:	4b51      	ldr	r3, [pc, #324]	@ (80084b8 <USBD_CDC_Init+0x1e8>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	f003 020f 	and.w	r2, r3, #15
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	440b      	add	r3, r1
 8008386:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800838a:	2201      	movs	r2, #1
 800838c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800838e:	4b4b      	ldr	r3, [pc, #300]	@ (80084bc <USBD_CDC_Init+0x1ec>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	f003 020f 	and.w	r2, r3, #15
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	3326      	adds	r3, #38	@ 0x26
 80083a4:	2210      	movs	r2, #16
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	e035      	b.n	8008416 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083aa:	4b42      	ldr	r3, [pc, #264]	@ (80084b4 <USBD_CDC_Init+0x1e4>)
 80083ac:	7819      	ldrb	r1, [r3, #0]
 80083ae:	2340      	movs	r3, #64	@ 0x40
 80083b0:	2202      	movs	r2, #2
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f002 fab9 	bl	800a92a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083b8:	4b3e      	ldr	r3, [pc, #248]	@ (80084b4 <USBD_CDC_Init+0x1e4>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 020f 	and.w	r2, r3, #15
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	3324      	adds	r3, #36	@ 0x24
 80083ce:	2201      	movs	r2, #1
 80083d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083d2:	4b39      	ldr	r3, [pc, #228]	@ (80084b8 <USBD_CDC_Init+0x1e8>)
 80083d4:	7819      	ldrb	r1, [r3, #0]
 80083d6:	2340      	movs	r3, #64	@ 0x40
 80083d8:	2202      	movs	r2, #2
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f002 faa5 	bl	800a92a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083e0:	4b35      	ldr	r3, [pc, #212]	@ (80084b8 <USBD_CDC_Init+0x1e8>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	f003 020f 	and.w	r2, r3, #15
 80083e8:	6879      	ldr	r1, [r7, #4]
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	440b      	add	r3, r1
 80083f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083f8:	2201      	movs	r2, #1
 80083fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083fc:	4b2f      	ldr	r3, [pc, #188]	@ (80084bc <USBD_CDC_Init+0x1ec>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	f003 020f 	and.w	r2, r3, #15
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	3326      	adds	r3, #38	@ 0x26
 8008412:	2210      	movs	r2, #16
 8008414:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008416:	4b29      	ldr	r3, [pc, #164]	@ (80084bc <USBD_CDC_Init+0x1ec>)
 8008418:	7819      	ldrb	r1, [r3, #0]
 800841a:	2308      	movs	r3, #8
 800841c:	2203      	movs	r2, #3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f002 fa83 	bl	800a92a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008424:	4b25      	ldr	r3, [pc, #148]	@ (80084bc <USBD_CDC_Init+0x1ec>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f003 020f 	and.w	r2, r3, #15
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	3324      	adds	r3, #36	@ 0x24
 800843a:	2201      	movs	r2, #1
 800843c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	33b0      	adds	r3, #176	@ 0xb0
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008474:	2302      	movs	r3, #2
 8008476:	e018      	b.n	80084aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7c1b      	ldrb	r3, [r3, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008480:	4b0d      	ldr	r3, [pc, #52]	@ (80084b8 <USBD_CDC_Init+0x1e8>)
 8008482:	7819      	ldrb	r1, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800848a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f002 fb3a 	bl	800ab08 <USBD_LL_PrepareReceive>
 8008494:	e008      	b.n	80084a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008496:	4b08      	ldr	r3, [pc, #32]	@ (80084b8 <USBD_CDC_Init+0x1e8>)
 8008498:	7819      	ldrb	r1, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084a0:	2340      	movs	r3, #64	@ 0x40
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f002 fb30 	bl	800ab08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200000ab 	.word	0x200000ab
 80084b8:	200000ac 	.word	0x200000ac
 80084bc:	200000ad 	.word	0x200000ad

080084c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084cc:	4b3a      	ldr	r3, [pc, #232]	@ (80085b8 <USBD_CDC_DeInit+0xf8>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f002 fa4f 	bl	800a976 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084d8:	4b37      	ldr	r3, [pc, #220]	@ (80085b8 <USBD_CDC_DeInit+0xf8>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f003 020f 	and.w	r2, r3, #15
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	3324      	adds	r3, #36	@ 0x24
 80084ee:	2200      	movs	r2, #0
 80084f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80084f2:	4b32      	ldr	r3, [pc, #200]	@ (80085bc <USBD_CDC_DeInit+0xfc>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f002 fa3c 	bl	800a976 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084fe:	4b2f      	ldr	r3, [pc, #188]	@ (80085bc <USBD_CDC_DeInit+0xfc>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 020f 	and.w	r2, r3, #15
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	4613      	mov	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008516:	2200      	movs	r2, #0
 8008518:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800851a:	4b29      	ldr	r3, [pc, #164]	@ (80085c0 <USBD_CDC_DeInit+0x100>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f002 fa28 	bl	800a976 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008526:	4b26      	ldr	r3, [pc, #152]	@ (80085c0 <USBD_CDC_DeInit+0x100>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 020f 	and.w	r2, r3, #15
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	3324      	adds	r3, #36	@ 0x24
 800853c:	2200      	movs	r2, #0
 800853e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008540:	4b1f      	ldr	r3, [pc, #124]	@ (80085c0 <USBD_CDC_DeInit+0x100>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f003 020f 	and.w	r2, r3, #15
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	3326      	adds	r3, #38	@ 0x26
 8008556:	2200      	movs	r2, #0
 8008558:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	32b0      	adds	r2, #176	@ 0xb0
 8008564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01f      	beq.n	80085ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	33b0      	adds	r3, #176	@ 0xb0
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	32b0      	adds	r2, #176	@ 0xb0
 800858a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858e:	4618      	mov	r0, r3
 8008590:	f002 fafc 	bl	800ab8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	32b0      	adds	r2, #176	@ 0xb0
 800859e:	2100      	movs	r1, #0
 80085a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200000ab 	.word	0x200000ab
 80085bc:	200000ac 	.word	0x200000ac
 80085c0:	200000ad 	.word	0x200000ad

080085c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	32b0      	adds	r2, #176	@ 0xb0
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e0bf      	b.n	8008774 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d050      	beq.n	80086a2 <USBD_CDC_Setup+0xde>
 8008600:	2b20      	cmp	r3, #32
 8008602:	f040 80af 	bne.w	8008764 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	88db      	ldrh	r3, [r3, #6]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d03a      	beq.n	8008684 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	b25b      	sxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	da1b      	bge.n	8008650 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	33b0      	adds	r3, #176	@ 0xb0
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800862e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	88d2      	ldrh	r2, [r2, #6]
 8008634:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	88db      	ldrh	r3, [r3, #6]
 800863a:	2b07      	cmp	r3, #7
 800863c:	bf28      	it	cs
 800863e:	2307      	movcs	r3, #7
 8008640:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	89fa      	ldrh	r2, [r7, #14]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fd53 	bl	800a0f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800864e:	e090      	b.n	8008772 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	785a      	ldrb	r2, [r3, #1]
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	88db      	ldrh	r3, [r3, #6]
 800865e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008660:	d803      	bhi.n	800866a <USBD_CDC_Setup+0xa6>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	88db      	ldrh	r3, [r3, #6]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	e000      	b.n	800866c <USBD_CDC_Setup+0xa8>
 800866a:	2240      	movs	r2, #64	@ 0x40
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008672:	6939      	ldr	r1, [r7, #16]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800867a:	461a      	mov	r2, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 fd65 	bl	800a14c <USBD_CtlPrepareRx>
      break;
 8008682:	e076      	b.n	8008772 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	33b0      	adds	r3, #176	@ 0xb0
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	7850      	ldrb	r0, [r2, #1]
 800869a:	2200      	movs	r2, #0
 800869c:	6839      	ldr	r1, [r7, #0]
 800869e:	4798      	blx	r3
      break;
 80086a0:	e067      	b.n	8008772 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	2b0b      	cmp	r3, #11
 80086a8:	d851      	bhi.n	800874e <USBD_CDC_Setup+0x18a>
 80086aa:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <USBD_CDC_Setup+0xec>)
 80086ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b0:	080086e1 	.word	0x080086e1
 80086b4:	0800875d 	.word	0x0800875d
 80086b8:	0800874f 	.word	0x0800874f
 80086bc:	0800874f 	.word	0x0800874f
 80086c0:	0800874f 	.word	0x0800874f
 80086c4:	0800874f 	.word	0x0800874f
 80086c8:	0800874f 	.word	0x0800874f
 80086cc:	0800874f 	.word	0x0800874f
 80086d0:	0800874f 	.word	0x0800874f
 80086d4:	0800874f 	.word	0x0800874f
 80086d8:	0800870b 	.word	0x0800870b
 80086dc:	08008735 	.word	0x08008735
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d107      	bne.n	80086fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086ec:	f107 030a 	add.w	r3, r7, #10
 80086f0:	2202      	movs	r2, #2
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 fcfd 	bl	800a0f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086fa:	e032      	b.n	8008762 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fc7b 	bl	8009ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	75fb      	strb	r3, [r7, #23]
          break;
 8008708:	e02b      	b.n	8008762 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b03      	cmp	r3, #3
 8008714:	d107      	bne.n	8008726 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008716:	f107 030d 	add.w	r3, r7, #13
 800871a:	2201      	movs	r2, #1
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 fce8 	bl	800a0f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008724:	e01d      	b.n	8008762 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f001 fc66 	bl	8009ffa <USBD_CtlError>
            ret = USBD_FAIL;
 800872e:	2303      	movs	r3, #3
 8008730:	75fb      	strb	r3, [r7, #23]
          break;
 8008732:	e016      	b.n	8008762 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b03      	cmp	r3, #3
 800873e:	d00f      	beq.n	8008760 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 fc59 	bl	8009ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8008748:	2303      	movs	r3, #3
 800874a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800874c:	e008      	b.n	8008760 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f001 fc52 	bl	8009ffa <USBD_CtlError>
          ret = USBD_FAIL;
 8008756:	2303      	movs	r3, #3
 8008758:	75fb      	strb	r3, [r7, #23]
          break;
 800875a:	e002      	b.n	8008762 <USBD_CDC_Setup+0x19e>
          break;
 800875c:	bf00      	nop
 800875e:	e008      	b.n	8008772 <USBD_CDC_Setup+0x1ae>
          break;
 8008760:	bf00      	nop
      }
      break;
 8008762:	e006      	b.n	8008772 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fc47 	bl	8009ffa <USBD_CtlError>
      ret = USBD_FAIL;
 800876c:	2303      	movs	r3, #3
 800876e:	75fb      	strb	r3, [r7, #23]
      break;
 8008770:	bf00      	nop
  }

  return (uint8_t)ret;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800878e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	32b0      	adds	r2, #176	@ 0xb0
 800879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e065      	b.n	8008872 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	32b0      	adds	r2, #176	@ 0xb0
 80087b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	3318      	adds	r3, #24
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d02f      	beq.n	8008830 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087d0:	78fb      	ldrb	r3, [r7, #3]
 80087d2:	f003 020f 	and.w	r2, r3, #15
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	3318      	adds	r3, #24
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	78fb      	ldrb	r3, [r7, #3]
 80087e8:	f003 010f 	and.w	r1, r3, #15
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	460b      	mov	r3, r1
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	440b      	add	r3, r1
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4403      	add	r3, r0
 80087f8:	331c      	adds	r3, #28
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008806:	2b00      	cmp	r3, #0
 8008808:	d112      	bne.n	8008830 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	f003 020f 	and.w	r2, r3, #15
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3318      	adds	r3, #24
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008822:	78f9      	ldrb	r1, [r7, #3]
 8008824:	2300      	movs	r3, #0
 8008826:	2200      	movs	r2, #0
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f002 f94c 	bl	800aac6 <USBD_LL_Transmit>
 800882e:	e01f      	b.n	8008870 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2200      	movs	r2, #0
 8008834:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	33b0      	adds	r3, #176	@ 0xb0
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d010      	beq.n	8008870 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	33b0      	adds	r3, #176	@ 0xb0
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	32b0      	adds	r2, #176	@ 0xb0
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	32b0      	adds	r2, #176	@ 0xb0
 80088a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e01a      	b.n	80088e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088ac:	78fb      	ldrb	r3, [r7, #3]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f002 f94a 	bl	800ab4a <USBD_LL_GetRxDataSize>
 80088b6:	4602      	mov	r2, r0
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	33b0      	adds	r3, #176	@ 0xb0
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80088dc:	4611      	mov	r1, r2
 80088de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	32b0      	adds	r2, #176	@ 0xb0
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008908:	2303      	movs	r3, #3
 800890a:	e024      	b.n	8008956 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	33b0      	adds	r3, #176	@ 0xb0
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d019      	beq.n	8008954 <USBD_CDC_EP0_RxReady+0x6a>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008926:	2bff      	cmp	r3, #255	@ 0xff
 8008928:	d014      	beq.n	8008954 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	33b0      	adds	r3, #176	@ 0xb0
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008942:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800894a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	22ff      	movs	r2, #255	@ 0xff
 8008950:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
	...

08008960 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008968:	2182      	movs	r1, #130	@ 0x82
 800896a:	4818      	ldr	r0, [pc, #96]	@ (80089cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800896c:	f000 fd0f 	bl	800938e <USBD_GetEpDesc>
 8008970:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008972:	2101      	movs	r1, #1
 8008974:	4815      	ldr	r0, [pc, #84]	@ (80089cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008976:	f000 fd0a 	bl	800938e <USBD_GetEpDesc>
 800897a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800897c:	2181      	movs	r1, #129	@ 0x81
 800897e:	4813      	ldr	r0, [pc, #76]	@ (80089cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008980:	f000 fd05 	bl	800938e <USBD_GetEpDesc>
 8008984:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2210      	movs	r2, #16
 8008990:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d006      	beq.n	80089a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	2200      	movs	r2, #0
 800899c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089a0:	711a      	strb	r2, [r3, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d006      	beq.n	80089ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089b4:	711a      	strb	r2, [r3, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2243      	movs	r2, #67	@ 0x43
 80089be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089c0:	4b02      	ldr	r3, [pc, #8]	@ (80089cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20000068 	.word	0x20000068

080089d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089d8:	2182      	movs	r1, #130	@ 0x82
 80089da:	4818      	ldr	r0, [pc, #96]	@ (8008a3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089dc:	f000 fcd7 	bl	800938e <USBD_GetEpDesc>
 80089e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089e2:	2101      	movs	r1, #1
 80089e4:	4815      	ldr	r0, [pc, #84]	@ (8008a3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089e6:	f000 fcd2 	bl	800938e <USBD_GetEpDesc>
 80089ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089ec:	2181      	movs	r1, #129	@ 0x81
 80089ee:	4813      	ldr	r0, [pc, #76]	@ (8008a3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089f0:	f000 fccd 	bl	800938e <USBD_GetEpDesc>
 80089f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2210      	movs	r2, #16
 8008a00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d006      	beq.n	8008a16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	711a      	strb	r2, [r3, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f042 0202 	orr.w	r2, r2, #2
 8008a14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d006      	beq.n	8008a2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	711a      	strb	r2, [r3, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f042 0202 	orr.w	r2, r2, #2
 8008a28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2243      	movs	r2, #67	@ 0x43
 8008a2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a30:	4b02      	ldr	r3, [pc, #8]	@ (8008a3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000068 	.word	0x20000068

08008a40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a48:	2182      	movs	r1, #130	@ 0x82
 8008a4a:	4818      	ldr	r0, [pc, #96]	@ (8008aac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a4c:	f000 fc9f 	bl	800938e <USBD_GetEpDesc>
 8008a50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a52:	2101      	movs	r1, #1
 8008a54:	4815      	ldr	r0, [pc, #84]	@ (8008aac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a56:	f000 fc9a 	bl	800938e <USBD_GetEpDesc>
 8008a5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a5c:	2181      	movs	r1, #129	@ 0x81
 8008a5e:	4813      	ldr	r0, [pc, #76]	@ (8008aac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a60:	f000 fc95 	bl	800938e <USBD_GetEpDesc>
 8008a64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2210      	movs	r2, #16
 8008a70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d006      	beq.n	8008a86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a80:	711a      	strb	r2, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d006      	beq.n	8008a9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a94:	711a      	strb	r2, [r3, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2243      	movs	r2, #67	@ 0x43
 8008a9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008aa0:	4b02      	ldr	r3, [pc, #8]	@ (8008aac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20000068 	.word	0x20000068

08008ab0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	220a      	movs	r2, #10
 8008abc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008abe:	4b03      	ldr	r3, [pc, #12]	@ (8008acc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000024 	.word	0x20000024

08008ad0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d101      	bne.n	8008ae4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e009      	b.n	8008af8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	33b0      	adds	r3, #176	@ 0xb0
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	32b0      	adds	r2, #176	@ 0xb0
 8008b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e008      	b.n	8008b3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	371c      	adds	r7, #28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	32b0      	adds	r2, #176	@ 0xb0
 8008b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e004      	b.n	8008b76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	32b0      	adds	r2, #176	@ 0xb0
 8008b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	32b0      	adds	r2, #176	@ 0xb0
 8008ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e018      	b.n	8008be4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7c1b      	ldrb	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10a      	bne.n	8008bd0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bba:	4b0c      	ldr	r3, [pc, #48]	@ (8008bec <USBD_CDC_ReceivePacket+0x68>)
 8008bbc:	7819      	ldrb	r1, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 ff9d 	bl	800ab08 <USBD_LL_PrepareReceive>
 8008bce:	e008      	b.n	8008be2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bd0:	4b06      	ldr	r3, [pc, #24]	@ (8008bec <USBD_CDC_ReceivePacket+0x68>)
 8008bd2:	7819      	ldrb	r1, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bda:	2340      	movs	r3, #64	@ 0x40
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 ff93 	bl	800ab08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	200000ac 	.word	0x200000ac

08008bf0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e01f      	b.n	8008c48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	79fa      	ldrb	r2, [r7, #7]
 8008c3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f001 fe0d 	bl	800a85c <USBD_LL_Init>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e025      	b.n	8008cb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	32ae      	adds	r2, #174	@ 0xae
 8008c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00f      	beq.n	8008ca4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	32ae      	adds	r2, #174	@ 0xae
 8008c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c94:	f107 020e 	add.w	r2, r7, #14
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 fe15 	bl	800a8f4 <USBD_LL_Start>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	4611      	mov	r1, r2
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	4798      	blx	r3
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 f90c 	bl	8009f86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d8a:	f003 031f 	and.w	r3, r3, #31
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d01a      	beq.n	8008dc8 <USBD_LL_SetupStage+0x72>
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d822      	bhi.n	8008ddc <USBD_LL_SetupStage+0x86>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <USBD_LL_SetupStage+0x4a>
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d00a      	beq.n	8008db4 <USBD_LL_SetupStage+0x5e>
 8008d9e:	e01d      	b.n	8008ddc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fb63 	bl	8009474 <USBD_StdDevReq>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]
      break;
 8008db2:	e020      	b.n	8008df6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fbcb 	bl	8009558 <USBD_StdItfReq>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc6:	e016      	b.n	8008df6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fc2d 	bl	8009630 <USBD_StdEPReq>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dda:	e00c      	b.n	8008df6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008de2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 fde2 	bl	800a9b4 <USBD_LL_StallEP>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
      break;
 8008df4:	bf00      	nop
  }

  return ret;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e12:	7afb      	ldrb	r3, [r7, #11]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d16e      	bne.n	8008ef6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	f040 8098 	bne.w	8008f5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d913      	bls.n	8008e60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	1ad2      	subs	r2, r2, r3
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	bf28      	it	cs
 8008e52:	4613      	movcs	r3, r2
 8008e54:	461a      	mov	r2, r3
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f001 f994 	bl	800a186 <USBD_CtlContinueRx>
 8008e5e:	e07d      	b.n	8008f5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e66:	f003 031f 	and.w	r3, r3, #31
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d014      	beq.n	8008e98 <USBD_LL_DataOutStage+0x98>
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d81d      	bhi.n	8008eae <USBD_LL_DataOutStage+0xae>
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <USBD_LL_DataOutStage+0x7c>
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d003      	beq.n	8008e82 <USBD_LL_DataOutStage+0x82>
 8008e7a:	e018      	b.n	8008eae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e80:	e018      	b.n	8008eb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fa64 	bl	800935a <USBD_CoreFindIF>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75bb      	strb	r3, [r7, #22]
            break;
 8008e96:	e00d      	b.n	8008eb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 fa66 	bl	8009374 <USBD_CoreFindEP>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	75bb      	strb	r3, [r7, #22]
            break;
 8008eac:	e002      	b.n	8008eb4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	75bb      	strb	r3, [r7, #22]
            break;
 8008eb2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008eb4:	7dbb      	ldrb	r3, [r7, #22]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d119      	bne.n	8008eee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d113      	bne.n	8008eee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ec6:	7dba      	ldrb	r2, [r7, #22]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	32ae      	adds	r2, #174	@ 0xae
 8008ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ed6:	7dba      	ldrb	r2, [r7, #22]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ede:	7dba      	ldrb	r2, [r7, #22]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	32ae      	adds	r2, #174	@ 0xae
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f001 f95a 	bl	800a1a8 <USBD_CtlSendStatus>
 8008ef4:	e032      	b.n	8008f5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ef6:	7afb      	ldrb	r3, [r7, #11]
 8008ef8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	4619      	mov	r1, r3
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 fa37 	bl	8009374 <USBD_CoreFindEP>
 8008f06:	4603      	mov	r3, r0
 8008f08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f0a:	7dbb      	ldrb	r3, [r7, #22]
 8008f0c:	2bff      	cmp	r3, #255	@ 0xff
 8008f0e:	d025      	beq.n	8008f5c <USBD_LL_DataOutStage+0x15c>
 8008f10:	7dbb      	ldrb	r3, [r7, #22]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d122      	bne.n	8008f5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d117      	bne.n	8008f52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f22:	7dba      	ldrb	r2, [r7, #22]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	32ae      	adds	r2, #174	@ 0xae
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00f      	beq.n	8008f52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f32:	7dba      	ldrb	r2, [r7, #22]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f3a:	7dba      	ldrb	r2, [r7, #22]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	32ae      	adds	r2, #174	@ 0xae
 8008f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	7afa      	ldrb	r2, [r7, #11]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	4798      	blx	r3
 8008f4e:	4603      	mov	r3, r0
 8008f50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	e000      	b.n	8008f5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b086      	sub	sp, #24
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d16f      	bne.n	800905a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3314      	adds	r3, #20
 8008f7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d15a      	bne.n	8009040 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	689a      	ldr	r2, [r3, #8]
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d914      	bls.n	8008fc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	689a      	ldr	r2, [r3, #8]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f001 f8bc 	bl	800a12a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f001 fda5 	bl	800ab08 <USBD_LL_PrepareReceive>
 8008fbe:	e03f      	b.n	8009040 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d11c      	bne.n	8009006 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d316      	bcc.n	8009006 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d20f      	bcs.n	8009006 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2100      	movs	r1, #0
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f001 f89d 	bl	800a12a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f001 fd82 	bl	800ab08 <USBD_LL_PrepareReceive>
 8009004:	e01c      	b.n	8009040 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b03      	cmp	r3, #3
 8009010:	d10f      	bne.n	8009032 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d009      	beq.n	8009032 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009032:	2180      	movs	r1, #128	@ 0x80
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f001 fcbd 	bl	800a9b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f001 f8c7 	bl	800a1ce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d03a      	beq.n	80090c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff fe42 	bl	8008cd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009058:	e032      	b.n	80090c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800905a:	7afb      	ldrb	r3, [r7, #11]
 800905c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f985 	bl	8009374 <USBD_CoreFindEP>
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	2bff      	cmp	r3, #255	@ 0xff
 8009072:	d025      	beq.n	80090c0 <USBD_LL_DataInStage+0x15a>
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d122      	bne.n	80090c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b03      	cmp	r3, #3
 8009084:	d11c      	bne.n	80090c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009086:	7dfa      	ldrb	r2, [r7, #23]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	32ae      	adds	r2, #174	@ 0xae
 800908c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d014      	beq.n	80090c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009096:	7dfa      	ldrb	r2, [r7, #23]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800909e:	7dfa      	ldrb	r2, [r7, #23]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	32ae      	adds	r2, #174	@ 0xae
 80090a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	7afa      	ldrb	r2, [r7, #11]
 80090ac:	4611      	mov	r1, r2
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	4798      	blx	r3
 80090b2:	4603      	mov	r3, r0
 80090b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090b6:	7dbb      	ldrb	r3, [r7, #22]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090bc:	7dbb      	ldrb	r3, [r7, #22]
 80090be:	e000      	b.n	80090c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b084      	sub	sp, #16
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d014      	beq.n	8009130 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00e      	beq.n	8009130 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6852      	ldr	r2, [r2, #4]
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	4611      	mov	r1, r2
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009130:	2340      	movs	r3, #64	@ 0x40
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fbf7 	bl	800a92a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2240      	movs	r2, #64	@ 0x40
 8009148:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800914c:	2340      	movs	r3, #64	@ 0x40
 800914e:	2200      	movs	r2, #0
 8009150:	2180      	movs	r1, #128	@ 0x80
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f001 fbe9 	bl	800a92a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2240      	movs	r2, #64	@ 0x40
 8009162:	621a      	str	r2, [r3, #32]

  return ret;
 8009164:	7bfb      	ldrb	r3, [r7, #15]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d006      	beq.n	80091b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2204      	movs	r2, #4
 80091b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	d106      	bne.n	80091e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b03      	cmp	r3, #3
 8009208:	d110      	bne.n	800922c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	460b      	mov	r3, r1
 8009240:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	32ae      	adds	r2, #174	@ 0xae
 800924c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009254:	2303      	movs	r3, #3
 8009256:	e01c      	b.n	8009292 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b03      	cmp	r3, #3
 8009262:	d115      	bne.n	8009290 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	32ae      	adds	r2, #174	@ 0xae
 800926e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00b      	beq.n	8009290 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	32ae      	adds	r2, #174	@ 0xae
 8009282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	4611      	mov	r1, r2
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b082      	sub	sp, #8
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	32ae      	adds	r2, #174	@ 0xae
 80092b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e01c      	b.n	80092f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d115      	bne.n	80092f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	32ae      	adds	r2, #174	@ 0xae
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	32ae      	adds	r2, #174	@ 0xae
 80092e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ec:	78fa      	ldrb	r2, [r7, #3]
 80092ee:	4611      	mov	r1, r2
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00e      	beq.n	8009350 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6852      	ldr	r2, [r2, #4]
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	4611      	mov	r1, r2
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800934c:	2303      	movs	r3, #3
 800934e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009350:	7bfb      	ldrb	r3, [r7, #15]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009366:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009380:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b086      	sub	sp, #24
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	885b      	ldrh	r3, [r3, #2]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	7812      	ldrb	r2, [r2, #0]
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d91f      	bls.n	80093f4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093ba:	e013      	b.n	80093e4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093bc:	f107 030a 	add.w	r3, r7, #10
 80093c0:	4619      	mov	r1, r3
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f000 f81b 	bl	80093fe <USBD_GetNextDesc>
 80093c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d108      	bne.n	80093e4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	789b      	ldrb	r3, [r3, #2]
 80093da:	78fa      	ldrb	r2, [r7, #3]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d008      	beq.n	80093f2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093e0:	2300      	movs	r3, #0
 80093e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	885b      	ldrh	r3, [r3, #2]
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	897b      	ldrh	r3, [r7, #10]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d8e5      	bhi.n	80093bc <USBD_GetEpDesc+0x2e>
 80093f0:	e000      	b.n	80093f4 <USBD_GetEpDesc+0x66>
          break;
 80093f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093f4:	693b      	ldr	r3, [r7, #16]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093fe:	b480      	push	{r7}
 8009400:	b085      	sub	sp, #20
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	7812      	ldrb	r2, [r2, #0]
 8009414:	4413      	add	r3, r2
 8009416:	b29a      	uxth	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4413      	add	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009428:	68fb      	ldr	r3, [r7, #12]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009436:	b480      	push	{r7}
 8009438:	b087      	sub	sp, #28
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	3301      	adds	r3, #1
 800944c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009454:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	b21a      	sxth	r2, r3
 800945c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009460:	4313      	orrs	r3, r2
 8009462:	b21b      	sxth	r3, r3
 8009464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009466:	89fb      	ldrh	r3, [r7, #14]
}
 8009468:	4618      	mov	r0, r3
 800946a:	371c      	adds	r7, #28
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800948a:	2b40      	cmp	r3, #64	@ 0x40
 800948c:	d005      	beq.n	800949a <USBD_StdDevReq+0x26>
 800948e:	2b40      	cmp	r3, #64	@ 0x40
 8009490:	d857      	bhi.n	8009542 <USBD_StdDevReq+0xce>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00f      	beq.n	80094b6 <USBD_StdDevReq+0x42>
 8009496:	2b20      	cmp	r3, #32
 8009498:	d153      	bne.n	8009542 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	32ae      	adds	r2, #174	@ 0xae
 80094a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]
      break;
 80094b4:	e04a      	b.n	800954c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	2b09      	cmp	r3, #9
 80094bc:	d83b      	bhi.n	8009536 <USBD_StdDevReq+0xc2>
 80094be:	a201      	add	r2, pc, #4	@ (adr r2, 80094c4 <USBD_StdDevReq+0x50>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	08009519 	.word	0x08009519
 80094c8:	0800952d 	.word	0x0800952d
 80094cc:	08009537 	.word	0x08009537
 80094d0:	08009523 	.word	0x08009523
 80094d4:	08009537 	.word	0x08009537
 80094d8:	080094f7 	.word	0x080094f7
 80094dc:	080094ed 	.word	0x080094ed
 80094e0:	08009537 	.word	0x08009537
 80094e4:	0800950f 	.word	0x0800950f
 80094e8:	08009501 	.word	0x08009501
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fa3c 	bl	800996c <USBD_GetDescriptor>
          break;
 80094f4:	e024      	b.n	8009540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fba1 	bl	8009c40 <USBD_SetAddress>
          break;
 80094fe:	e01f      	b.n	8009540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fbe0 	bl	8009cc8 <USBD_SetConfig>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
          break;
 800950c:	e018      	b.n	8009540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fc83 	bl	8009e1c <USBD_GetConfig>
          break;
 8009516:	e013      	b.n	8009540 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009518:	6839      	ldr	r1, [r7, #0]
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fcb4 	bl	8009e88 <USBD_GetStatus>
          break;
 8009520:	e00e      	b.n	8009540 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fce3 	bl	8009ef0 <USBD_SetFeature>
          break;
 800952a:	e009      	b.n	8009540 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fd07 	bl	8009f42 <USBD_ClrFeature>
          break;
 8009534:	e004      	b.n	8009540 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fd5e 	bl	8009ffa <USBD_CtlError>
          break;
 800953e:	bf00      	nop
      }
      break;
 8009540:	e004      	b.n	800954c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fd58 	bl	8009ffa <USBD_CtlError>
      break;
 800954a:	bf00      	nop
  }

  return ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop

08009558 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800956e:	2b40      	cmp	r3, #64	@ 0x40
 8009570:	d005      	beq.n	800957e <USBD_StdItfReq+0x26>
 8009572:	2b40      	cmp	r3, #64	@ 0x40
 8009574:	d852      	bhi.n	800961c <USBD_StdItfReq+0xc4>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <USBD_StdItfReq+0x26>
 800957a:	2b20      	cmp	r3, #32
 800957c:	d14e      	bne.n	800961c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	2b02      	cmp	r3, #2
 800958a:	d840      	bhi.n	800960e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	889b      	ldrh	r3, [r3, #4]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b01      	cmp	r3, #1
 8009594:	d836      	bhi.n	8009604 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	889b      	ldrh	r3, [r3, #4]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7ff fedb 	bl	800935a <USBD_CoreFindIF>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	2bff      	cmp	r3, #255	@ 0xff
 80095ac:	d01d      	beq.n	80095ea <USBD_StdItfReq+0x92>
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d11a      	bne.n	80095ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095b4:	7bba      	ldrb	r2, [r7, #14]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32ae      	adds	r2, #174	@ 0xae
 80095ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00f      	beq.n	80095e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095c4:	7bba      	ldrb	r2, [r7, #14]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095cc:	7bba      	ldrb	r2, [r7, #14]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	32ae      	adds	r2, #174	@ 0xae
 80095d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	4798      	blx	r3
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095e2:	e004      	b.n	80095ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095e4:	2303      	movs	r3, #3
 80095e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095e8:	e001      	b.n	80095ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095ea:	2303      	movs	r3, #3
 80095ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	88db      	ldrh	r3, [r3, #6]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d110      	bne.n	8009618 <USBD_StdItfReq+0xc0>
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10d      	bne.n	8009618 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fdd3 	bl	800a1a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009602:	e009      	b.n	8009618 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fcf7 	bl	8009ffa <USBD_CtlError>
          break;
 800960c:	e004      	b.n	8009618 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fcf2 	bl	8009ffa <USBD_CtlError>
          break;
 8009616:	e000      	b.n	800961a <USBD_StdItfReq+0xc2>
          break;
 8009618:	bf00      	nop
      }
      break;
 800961a:	e004      	b.n	8009626 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fceb 	bl	8009ffa <USBD_CtlError>
      break;
 8009624:	bf00      	nop
  }

  return ret;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	889b      	ldrh	r3, [r3, #4]
 8009642:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800964c:	2b40      	cmp	r3, #64	@ 0x40
 800964e:	d007      	beq.n	8009660 <USBD_StdEPReq+0x30>
 8009650:	2b40      	cmp	r3, #64	@ 0x40
 8009652:	f200 817f 	bhi.w	8009954 <USBD_StdEPReq+0x324>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d02a      	beq.n	80096b0 <USBD_StdEPReq+0x80>
 800965a:	2b20      	cmp	r3, #32
 800965c:	f040 817a 	bne.w	8009954 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff fe85 	bl	8009374 <USBD_CoreFindEP>
 800966a:	4603      	mov	r3, r0
 800966c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800966e:	7b7b      	ldrb	r3, [r7, #13]
 8009670:	2bff      	cmp	r3, #255	@ 0xff
 8009672:	f000 8174 	beq.w	800995e <USBD_StdEPReq+0x32e>
 8009676:	7b7b      	ldrb	r3, [r7, #13]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f040 8170 	bne.w	800995e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800967e:	7b7a      	ldrb	r2, [r7, #13]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009686:	7b7a      	ldrb	r2, [r7, #13]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	32ae      	adds	r2, #174	@ 0xae
 800968c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 8163 	beq.w	800995e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009698:	7b7a      	ldrb	r2, [r7, #13]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	32ae      	adds	r2, #174	@ 0xae
 800969e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	4798      	blx	r3
 80096aa:	4603      	mov	r3, r0
 80096ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096ae:	e156      	b.n	800995e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d008      	beq.n	80096ca <USBD_StdEPReq+0x9a>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	f300 8145 	bgt.w	8009948 <USBD_StdEPReq+0x318>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 809b 	beq.w	80097fa <USBD_StdEPReq+0x1ca>
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d03c      	beq.n	8009742 <USBD_StdEPReq+0x112>
 80096c8:	e13e      	b.n	8009948 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d002      	beq.n	80096dc <USBD_StdEPReq+0xac>
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d016      	beq.n	8009708 <USBD_StdEPReq+0xd8>
 80096da:	e02c      	b.n	8009736 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00d      	beq.n	80096fe <USBD_StdEPReq+0xce>
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	2b80      	cmp	r3, #128	@ 0x80
 80096e6:	d00a      	beq.n	80096fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 f961 	bl	800a9b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096f2:	2180      	movs	r1, #128	@ 0x80
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 f95d 	bl	800a9b4 <USBD_LL_StallEP>
 80096fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096fc:	e020      	b.n	8009740 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc7a 	bl	8009ffa <USBD_CtlError>
              break;
 8009706:	e01b      	b.n	8009740 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	885b      	ldrh	r3, [r3, #2]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10e      	bne.n	800972e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00b      	beq.n	800972e <USBD_StdEPReq+0xfe>
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	2b80      	cmp	r3, #128	@ 0x80
 800971a:	d008      	beq.n	800972e <USBD_StdEPReq+0xfe>
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	88db      	ldrh	r3, [r3, #6]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d104      	bne.n	800972e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 f943 	bl	800a9b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fd3a 	bl	800a1a8 <USBD_CtlSendStatus>

              break;
 8009734:	e004      	b.n	8009740 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fc5e 	bl	8009ffa <USBD_CtlError>
              break;
 800973e:	bf00      	nop
          }
          break;
 8009740:	e107      	b.n	8009952 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b02      	cmp	r3, #2
 800974c:	d002      	beq.n	8009754 <USBD_StdEPReq+0x124>
 800974e:	2b03      	cmp	r3, #3
 8009750:	d016      	beq.n	8009780 <USBD_StdEPReq+0x150>
 8009752:	e04b      	b.n	80097ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00d      	beq.n	8009776 <USBD_StdEPReq+0x146>
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b80      	cmp	r3, #128	@ 0x80
 800975e:	d00a      	beq.n	8009776 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	4619      	mov	r1, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 f925 	bl	800a9b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800976a:	2180      	movs	r1, #128	@ 0x80
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f001 f921 	bl	800a9b4 <USBD_LL_StallEP>
 8009772:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009774:	e040      	b.n	80097f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fc3e 	bl	8009ffa <USBD_CtlError>
              break;
 800977e:	e03b      	b.n	80097f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d136      	bne.n	80097f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 f92b 	bl	800a9f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fd03 	bl	800a1a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fde4 	bl	8009374 <USBD_CoreFindEP>
 80097ac:	4603      	mov	r3, r0
 80097ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097b0:	7b7b      	ldrb	r3, [r7, #13]
 80097b2:	2bff      	cmp	r3, #255	@ 0xff
 80097b4:	d01f      	beq.n	80097f6 <USBD_StdEPReq+0x1c6>
 80097b6:	7b7b      	ldrb	r3, [r7, #13]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d11c      	bne.n	80097f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097bc:	7b7a      	ldrb	r2, [r7, #13]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097c4:	7b7a      	ldrb	r2, [r7, #13]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32ae      	adds	r2, #174	@ 0xae
 80097ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d010      	beq.n	80097f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097d4:	7b7a      	ldrb	r2, [r7, #13]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	32ae      	adds	r2, #174	@ 0xae
 80097da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097ea:	e004      	b.n	80097f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fc03 	bl	8009ffa <USBD_CtlError>
              break;
 80097f4:	e000      	b.n	80097f8 <USBD_StdEPReq+0x1c8>
              break;
 80097f6:	bf00      	nop
          }
          break;
 80097f8:	e0ab      	b.n	8009952 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d002      	beq.n	800980c <USBD_StdEPReq+0x1dc>
 8009806:	2b03      	cmp	r3, #3
 8009808:	d032      	beq.n	8009870 <USBD_StdEPReq+0x240>
 800980a:	e097      	b.n	800993c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d007      	beq.n	8009822 <USBD_StdEPReq+0x1f2>
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	2b80      	cmp	r3, #128	@ 0x80
 8009816:	d004      	beq.n	8009822 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fbed 	bl	8009ffa <USBD_CtlError>
                break;
 8009820:	e091      	b.n	8009946 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	da0b      	bge.n	8009842 <USBD_StdEPReq+0x212>
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	3310      	adds	r3, #16
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	3304      	adds	r3, #4
 8009840:	e00b      	b.n	800985a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	4413      	add	r3, r2
 8009858:	3304      	adds	r3, #4
 800985a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2202      	movs	r2, #2
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fc43 	bl	800a0f4 <USBD_CtlSendData>
              break;
 800986e:	e06a      	b.n	8009946 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	da11      	bge.n	800989c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	f003 020f 	and.w	r2, r3, #15
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	3324      	adds	r3, #36	@ 0x24
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d117      	bne.n	80098c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fbb0 	bl	8009ffa <USBD_CtlError>
                  break;
 800989a:	e054      	b.n	8009946 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	f003 020f 	and.w	r2, r3, #15
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fb9d 	bl	8009ffa <USBD_CtlError>
                  break;
 80098c0:	e041      	b.n	8009946 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	da0b      	bge.n	80098e2 <USBD_StdEPReq+0x2b2>
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
 80098cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	3310      	adds	r3, #16
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	3304      	adds	r3, #4
 80098e0:	e00b      	b.n	80098fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	4413      	add	r3, r2
 80098f8:	3304      	adds	r3, #4
 80098fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <USBD_StdEPReq+0x2d8>
 8009902:	7bbb      	ldrb	r3, [r7, #14]
 8009904:	2b80      	cmp	r3, #128	@ 0x80
 8009906:	d103      	bne.n	8009910 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e00e      	b.n	800992e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f88b 	bl	800aa30 <USBD_LL_IsStallEP>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d003      	beq.n	8009928 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	2201      	movs	r2, #1
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	e002      	b.n	800992e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2202      	movs	r2, #2
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 fbdd 	bl	800a0f4 <USBD_CtlSendData>
              break;
 800993a:	e004      	b.n	8009946 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fb5b 	bl	8009ffa <USBD_CtlError>
              break;
 8009944:	bf00      	nop
          }
          break;
 8009946:	e004      	b.n	8009952 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fb55 	bl	8009ffa <USBD_CtlError>
          break;
 8009950:	bf00      	nop
      }
      break;
 8009952:	e005      	b.n	8009960 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fb4f 	bl	8009ffa <USBD_CtlError>
      break;
 800995c:	e000      	b.n	8009960 <USBD_StdEPReq+0x330>
      break;
 800995e:	bf00      	nop
  }

  return ret;
 8009960:	7bfb      	ldrb	r3, [r7, #15]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	885b      	ldrh	r3, [r3, #2]
 8009986:	0a1b      	lsrs	r3, r3, #8
 8009988:	b29b      	uxth	r3, r3
 800998a:	3b01      	subs	r3, #1
 800998c:	2b06      	cmp	r3, #6
 800998e:	f200 8128 	bhi.w	8009be2 <USBD_GetDescriptor+0x276>
 8009992:	a201      	add	r2, pc, #4	@ (adr r2, 8009998 <USBD_GetDescriptor+0x2c>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099b5 	.word	0x080099b5
 800999c:	080099cd 	.word	0x080099cd
 80099a0:	08009a0d 	.word	0x08009a0d
 80099a4:	08009be3 	.word	0x08009be3
 80099a8:	08009be3 	.word	0x08009be3
 80099ac:	08009b83 	.word	0x08009b83
 80099b0:	08009baf 	.word	0x08009baf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	7c12      	ldrb	r2, [r2, #16]
 80099c0:	f107 0108 	add.w	r1, r7, #8
 80099c4:	4610      	mov	r0, r2
 80099c6:	4798      	blx	r3
 80099c8:	60f8      	str	r0, [r7, #12]
      break;
 80099ca:	e112      	b.n	8009bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	7c1b      	ldrb	r3, [r3, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10d      	bne.n	80099f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099dc:	f107 0208 	add.w	r2, r7, #8
 80099e0:	4610      	mov	r0, r2
 80099e2:	4798      	blx	r3
 80099e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	2202      	movs	r2, #2
 80099ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099ee:	e100      	b.n	8009bf2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f8:	f107 0208 	add.w	r2, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3301      	adds	r3, #1
 8009a06:	2202      	movs	r2, #2
 8009a08:	701a      	strb	r2, [r3, #0]
      break;
 8009a0a:	e0f2      	b.n	8009bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	885b      	ldrh	r3, [r3, #2]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b05      	cmp	r3, #5
 8009a14:	f200 80ac 	bhi.w	8009b70 <USBD_GetDescriptor+0x204>
 8009a18:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <USBD_GetDescriptor+0xb4>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009a39 	.word	0x08009a39
 8009a24:	08009a6d 	.word	0x08009a6d
 8009a28:	08009aa1 	.word	0x08009aa1
 8009a2c:	08009ad5 	.word	0x08009ad5
 8009a30:	08009b09 	.word	0x08009b09
 8009a34:	08009b3d 	.word	0x08009b3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
 8009a50:	f107 0108 	add.w	r1, r7, #8
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5a:	e091      	b.n	8009b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 facb 	bl	8009ffa <USBD_CtlError>
            err++;
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	3301      	adds	r3, #1
 8009a68:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6a:	e089      	b.n	8009b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a8e:	e077      	b.n	8009b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fab1 	bl	8009ffa <USBD_CtlError>
            err++;
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a9e:	e06f      	b.n	8009b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac2:	e05d      	b.n	8009b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa97 	bl	8009ffa <USBD_CtlError>
            err++;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad2:	e055      	b.n	8009b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e043      	b.n	8009b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa7d 	bl	8009ffa <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e03b      	b.n	8009b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b1a:	695b      	ldr	r3, [r3, #20]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	7c12      	ldrb	r2, [r2, #16]
 8009b20:	f107 0108 	add.w	r1, r7, #8
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2a:	e029      	b.n	8009b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa63 	bl	8009ffa <USBD_CtlError>
            err++;
 8009b34:	7afb      	ldrb	r3, [r7, #11]
 8009b36:	3301      	adds	r3, #1
 8009b38:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3a:	e021      	b.n	8009b80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	7c12      	ldrb	r2, [r2, #16]
 8009b54:	f107 0108 	add.w	r1, r7, #8
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4798      	blx	r3
 8009b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5e:	e00f      	b.n	8009b80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa49 	bl	8009ffa <USBD_CtlError>
            err++;
 8009b68:	7afb      	ldrb	r3, [r7, #11]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6e:	e007      	b.n	8009b80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa41 	bl	8009ffa <USBD_CtlError>
          err++;
 8009b78:	7afb      	ldrb	r3, [r7, #11]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b7e:	bf00      	nop
      }
      break;
 8009b80:	e037      	b.n	8009bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	7c1b      	ldrb	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d109      	bne.n	8009b9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b92:	f107 0208 	add.w	r2, r7, #8
 8009b96:	4610      	mov	r0, r2
 8009b98:	4798      	blx	r3
 8009b9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b9c:	e029      	b.n	8009bf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fa2a 	bl	8009ffa <USBD_CtlError>
        err++;
 8009ba6:	7afb      	ldrb	r3, [r7, #11]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	72fb      	strb	r3, [r7, #11]
      break;
 8009bac:	e021      	b.n	8009bf2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	7c1b      	ldrb	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10d      	bne.n	8009bd2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bbe:	f107 0208 	add.w	r2, r7, #8
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4798      	blx	r3
 8009bc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	2207      	movs	r2, #7
 8009bce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bd0:	e00f      	b.n	8009bf2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fa10 	bl	8009ffa <USBD_CtlError>
        err++;
 8009bda:	7afb      	ldrb	r3, [r7, #11]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	72fb      	strb	r3, [r7, #11]
      break;
 8009be0:	e007      	b.n	8009bf2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fa08 	bl	8009ffa <USBD_CtlError>
      err++;
 8009bea:	7afb      	ldrb	r3, [r7, #11]
 8009bec:	3301      	adds	r3, #1
 8009bee:	72fb      	strb	r3, [r7, #11]
      break;
 8009bf0:	bf00      	nop
  }

  if (err != 0U)
 8009bf2:	7afb      	ldrb	r3, [r7, #11]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d11e      	bne.n	8009c36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	88db      	ldrh	r3, [r3, #6]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d016      	beq.n	8009c2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c00:	893b      	ldrh	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00e      	beq.n	8009c24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	88da      	ldrh	r2, [r3, #6]
 8009c0a:	893b      	ldrh	r3, [r7, #8]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bf28      	it	cs
 8009c10:	4613      	movcs	r3, r2
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c16:	893b      	ldrh	r3, [r7, #8]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fa69 	bl	800a0f4 <USBD_CtlSendData>
 8009c22:	e009      	b.n	8009c38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f9e7 	bl	8009ffa <USBD_CtlError>
 8009c2c:	e004      	b.n	8009c38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 faba 	bl	800a1a8 <USBD_CtlSendStatus>
 8009c34:	e000      	b.n	8009c38 <USBD_GetDescriptor+0x2cc>
    return;
 8009c36:	bf00      	nop
  }
}
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop

08009c40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	889b      	ldrh	r3, [r3, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d131      	bne.n	8009cb6 <USBD_SetAddress+0x76>
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	88db      	ldrh	r3, [r3, #6]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d12d      	bne.n	8009cb6 <USBD_SetAddress+0x76>
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	885b      	ldrh	r3, [r3, #2]
 8009c5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c60:	d829      	bhi.n	8009cb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	885b      	ldrh	r3, [r3, #2]
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d104      	bne.n	8009c84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f9bc 	bl	8009ffa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c82:	e01d      	b.n	8009cc0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	7bfa      	ldrb	r2, [r7, #15]
 8009c88:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fef9 	bl	800aa88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fa86 	bl	800a1a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009caa:	e009      	b.n	8009cc0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb4:	e004      	b.n	8009cc0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f99e 	bl	8009ffa <USBD_CtlError>
  }
}
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	885b      	ldrh	r3, [r3, #2]
 8009cda:	b2da      	uxtb	r2, r3
 8009cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009cde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d905      	bls.n	8009cf4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 f985 	bl	8009ffa <USBD_CtlError>
    return USBD_FAIL;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e08c      	b.n	8009e0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d002      	beq.n	8009d06 <USBD_SetConfig+0x3e>
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d029      	beq.n	8009d58 <USBD_SetConfig+0x90>
 8009d04:	e075      	b.n	8009df2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d06:	4b44      	ldr	r3, [pc, #272]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d020      	beq.n	8009d50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d0e:	4b42      	ldr	r3, [pc, #264]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d18:	4b3f      	ldr	r3, [pc, #252]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fe ffe3 	bl	8008cea <USBD_SetClassConfig>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d008      	beq.n	8009d40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 f962 	bl	8009ffa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2202      	movs	r2, #2
 8009d3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d3e:	e065      	b.n	8009e0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fa31 	bl	800a1a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2203      	movs	r2, #3
 8009d4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d4e:	e05d      	b.n	8009e0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fa29 	bl	800a1a8 <USBD_CtlSendStatus>
      break;
 8009d56:	e059      	b.n	8009e0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d58:	4b2f      	ldr	r3, [pc, #188]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d112      	bne.n	8009d86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d68:	4b2b      	ldr	r3, [pc, #172]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d72:	4b29      	ldr	r3, [pc, #164]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7fe ffd2 	bl	8008d22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa12 	bl	800a1a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d84:	e042      	b.n	8009e0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d86:	4b24      	ldr	r3, [pc, #144]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d02a      	beq.n	8009dea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fe ffc0 	bl	8008d22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009da2:	4b1d      	ldr	r3, [pc, #116]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dac:	4b1a      	ldr	r3, [pc, #104]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7fe ff99 	bl	8008cea <USBD_SetClassConfig>
 8009db8:	4603      	mov	r3, r0
 8009dba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00f      	beq.n	8009de2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f918 	bl	8009ffa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7fe ffa5 	bl	8008d22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009de0:	e014      	b.n	8009e0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f9e0 	bl	800a1a8 <USBD_CtlSendStatus>
      break;
 8009de8:	e010      	b.n	8009e0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f9dc 	bl	800a1a8 <USBD_CtlSendStatus>
      break;
 8009df0:	e00c      	b.n	8009e0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f900 	bl	8009ffa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dfa:	4b07      	ldr	r3, [pc, #28]	@ (8009e18 <USBD_SetConfig+0x150>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7fe ff8e 	bl	8008d22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0a:	bf00      	nop
  }

  return ret;
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	20017a04 	.word	0x20017a04

08009e1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	88db      	ldrh	r3, [r3, #6]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d004      	beq.n	8009e38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f8e2 	bl	8009ffa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e36:	e023      	b.n	8009e80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	dc02      	bgt.n	8009e4a <USBD_GetConfig+0x2e>
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dc03      	bgt.n	8009e50 <USBD_GetConfig+0x34>
 8009e48:	e015      	b.n	8009e76 <USBD_GetConfig+0x5a>
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d00b      	beq.n	8009e66 <USBD_GetConfig+0x4a>
 8009e4e:	e012      	b.n	8009e76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3308      	adds	r3, #8
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f948 	bl	800a0f4 <USBD_CtlSendData>
        break;
 8009e64:	e00c      	b.n	8009e80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f940 	bl	800a0f4 <USBD_CtlSendData>
        break;
 8009e74:	e004      	b.n	8009e80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f8be 	bl	8009ffa <USBD_CtlError>
        break;
 8009e7e:	bf00      	nop
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d81e      	bhi.n	8009ede <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	88db      	ldrh	r3, [r3, #6]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d004      	beq.n	8009eb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f8a5 	bl	8009ffa <USBD_CtlError>
        break;
 8009eb0:	e01a      	b.n	8009ee8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d005      	beq.n	8009ece <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f043 0202 	orr.w	r2, r3, #2
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	330c      	adds	r3, #12
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f90c 	bl	800a0f4 <USBD_CtlSendData>
      break;
 8009edc:	e004      	b.n	8009ee8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f88a 	bl	8009ffa <USBD_CtlError>
      break;
 8009ee6:	bf00      	nop
  }
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d107      	bne.n	8009f12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f94c 	bl	800a1a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f10:	e013      	b.n	8009f3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	885b      	ldrh	r3, [r3, #2]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d10b      	bne.n	8009f32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	889b      	ldrh	r3, [r3, #4]
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f93c 	bl	800a1a8 <USBD_CtlSendStatus>
}
 8009f30:	e003      	b.n	8009f3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f860 	bl	8009ffa <USBD_CtlError>
}
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d80b      	bhi.n	8009f72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	885b      	ldrh	r3, [r3, #2]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d10c      	bne.n	8009f7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f91c 	bl	800a1a8 <USBD_CtlSendStatus>
      }
      break;
 8009f70:	e004      	b.n	8009f7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f840 	bl	8009ffa <USBD_CtlError>
      break;
 8009f7a:	e000      	b.n	8009f7e <USBD_ClrFeature+0x3c>
      break;
 8009f7c:	bf00      	nop
  }
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	781a      	ldrb	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	781a      	ldrb	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fa40 	bl	8009436 <SWAPBYTE>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	461a      	mov	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f7ff fa33 	bl	8009436 <SWAPBYTE>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f7ff fa26 	bl	8009436 <SWAPBYTE>
 8009fea:	4603      	mov	r3, r0
 8009fec:	461a      	mov	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	80da      	strh	r2, [r3, #6]
}
 8009ff2:	bf00      	nop
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a004:	2180      	movs	r1, #128	@ 0x80
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fcd4 	bl	800a9b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a00c:	2100      	movs	r1, #0
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fcd0 	bl	800a9b4 <USBD_LL_StallEP>
}
 800a014:	bf00      	nop
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d042      	beq.n	800a0b8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a036:	6938      	ldr	r0, [r7, #16]
 800a038:	f000 f842 	bl	800a0c0 <USBD_GetLen>
 800a03c:	4603      	mov	r3, r0
 800a03e:	3301      	adds	r3, #1
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a046:	d808      	bhi.n	800a05a <USBD_GetString+0x3e>
 800a048:	6938      	ldr	r0, [r7, #16]
 800a04a:	f000 f839 	bl	800a0c0 <USBD_GetLen>
 800a04e:	4603      	mov	r3, r0
 800a050:	3301      	adds	r3, #1
 800a052:	b29b      	uxth	r3, r3
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	e001      	b.n	800a05e <USBD_GetString+0x42>
 800a05a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	4413      	add	r3, r2
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	3301      	adds	r3, #1
 800a072:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	4413      	add	r3, r2
 800a07a:	2203      	movs	r2, #3
 800a07c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
 800a080:	3301      	adds	r3, #1
 800a082:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a084:	e013      	b.n	800a0ae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	4413      	add	r3, r2
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	7812      	ldrb	r2, [r2, #0]
 800a090:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3301      	adds	r3, #1
 800a096:	613b      	str	r3, [r7, #16]
    idx++;
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	3301      	adds	r3, #1
 800a09c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d1e7      	bne.n	800a086 <USBD_GetString+0x6a>
 800a0b6:	e000      	b.n	800a0ba <USBD_GetString+0x9e>
    return;
 800a0b8:	bf00      	nop
  }
}
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0d0:	e005      	b.n	800a0de <USBD_GetLen+0x1e>
  {
    len++;
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1f5      	bne.n	800a0d2 <USBD_GetLen+0x12>
  }

  return len;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2202      	movs	r2, #2
 800a104:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	2100      	movs	r1, #0
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fcd3 	bl	800aac6 <USBD_LL_Transmit>

  return USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	2100      	movs	r1, #0
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 fcc2 	bl	800aac6 <USBD_LL_Transmit>

  return USBD_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2203      	movs	r2, #3
 800a15c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	2100      	movs	r1, #0
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f000 fcc6 	bl	800ab08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	60b9      	str	r1, [r7, #8]
 800a190:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	2100      	movs	r1, #0
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 fcb5 	bl	800ab08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2204      	movs	r2, #4
 800a1b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	2100      	movs	r1, #0
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fc81 	bl	800aac6 <USBD_LL_Transmit>

  return USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2205      	movs	r2, #5
 800a1da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fc8f 	bl	800ab08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	4912      	ldr	r1, [pc, #72]	@ (800a244 <MX_USB_DEVICE_Init+0x50>)
 800a1fc:	4812      	ldr	r0, [pc, #72]	@ (800a248 <MX_USB_DEVICE_Init+0x54>)
 800a1fe:	f7fe fcf7 	bl	8008bf0 <USBD_Init>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a208:	f7f7 fd84 	bl	8001d14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a20c:	490f      	ldr	r1, [pc, #60]	@ (800a24c <MX_USB_DEVICE_Init+0x58>)
 800a20e:	480e      	ldr	r0, [pc, #56]	@ (800a248 <MX_USB_DEVICE_Init+0x54>)
 800a210:	f7fe fd1e 	bl	8008c50 <USBD_RegisterClass>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a21a:	f7f7 fd7b 	bl	8001d14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a21e:	490c      	ldr	r1, [pc, #48]	@ (800a250 <MX_USB_DEVICE_Init+0x5c>)
 800a220:	4809      	ldr	r0, [pc, #36]	@ (800a248 <MX_USB_DEVICE_Init+0x54>)
 800a222:	f7fe fc55 	bl	8008ad0 <USBD_CDC_RegisterInterface>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a22c:	f7f7 fd72 	bl	8001d14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a230:	4805      	ldr	r0, [pc, #20]	@ (800a248 <MX_USB_DEVICE_Init+0x54>)
 800a232:	f7fe fd43 	bl	8008cbc <USBD_Start>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a23c:	f7f7 fd6a 	bl	8001d14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a240:	bf00      	nop
 800a242:	bd80      	pop	{r7, pc}
 800a244:	200000c4 	.word	0x200000c4
 800a248:	20017a08 	.word	0x20017a08
 800a24c:	20000030 	.word	0x20000030
 800a250:	200000b0 	.word	0x200000b0

0800a254 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a258:	2200      	movs	r2, #0
 800a25a:	4905      	ldr	r1, [pc, #20]	@ (800a270 <CDC_Init_FS+0x1c>)
 800a25c:	4805      	ldr	r0, [pc, #20]	@ (800a274 <CDC_Init_FS+0x20>)
 800a25e:	f7fe fc51 	bl	8008b04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a262:	4905      	ldr	r1, [pc, #20]	@ (800a278 <CDC_Init_FS+0x24>)
 800a264:	4803      	ldr	r0, [pc, #12]	@ (800a274 <CDC_Init_FS+0x20>)
 800a266:	f7fe fc6f 	bl	8008b48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a26a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	200184e4 	.word	0x200184e4
 800a274:	20017a08 	.word	0x20017a08
 800a278:	20017ce4 	.word	0x20017ce4

0800a27c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a280:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a282:	4618      	mov	r0, r3
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	4603      	mov	r3, r0
 800a294:	6039      	str	r1, [r7, #0]
 800a296:	71fb      	strb	r3, [r7, #7]
 800a298:	4613      	mov	r3, r2
 800a29a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	2b23      	cmp	r3, #35	@ 0x23
 800a2a0:	d84a      	bhi.n	800a338 <CDC_Control_FS+0xac>
 800a2a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a8 <CDC_Control_FS+0x1c>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a339 	.word	0x0800a339
 800a2ac:	0800a339 	.word	0x0800a339
 800a2b0:	0800a339 	.word	0x0800a339
 800a2b4:	0800a339 	.word	0x0800a339
 800a2b8:	0800a339 	.word	0x0800a339
 800a2bc:	0800a339 	.word	0x0800a339
 800a2c0:	0800a339 	.word	0x0800a339
 800a2c4:	0800a339 	.word	0x0800a339
 800a2c8:	0800a339 	.word	0x0800a339
 800a2cc:	0800a339 	.word	0x0800a339
 800a2d0:	0800a339 	.word	0x0800a339
 800a2d4:	0800a339 	.word	0x0800a339
 800a2d8:	0800a339 	.word	0x0800a339
 800a2dc:	0800a339 	.word	0x0800a339
 800a2e0:	0800a339 	.word	0x0800a339
 800a2e4:	0800a339 	.word	0x0800a339
 800a2e8:	0800a339 	.word	0x0800a339
 800a2ec:	0800a339 	.word	0x0800a339
 800a2f0:	0800a339 	.word	0x0800a339
 800a2f4:	0800a339 	.word	0x0800a339
 800a2f8:	0800a339 	.word	0x0800a339
 800a2fc:	0800a339 	.word	0x0800a339
 800a300:	0800a339 	.word	0x0800a339
 800a304:	0800a339 	.word	0x0800a339
 800a308:	0800a339 	.word	0x0800a339
 800a30c:	0800a339 	.word	0x0800a339
 800a310:	0800a339 	.word	0x0800a339
 800a314:	0800a339 	.word	0x0800a339
 800a318:	0800a339 	.word	0x0800a339
 800a31c:	0800a339 	.word	0x0800a339
 800a320:	0800a339 	.word	0x0800a339
 800a324:	0800a339 	.word	0x0800a339
 800a328:	0800a339 	.word	0x0800a339
 800a32c:	0800a339 	.word	0x0800a339
 800a330:	0800a339 	.word	0x0800a339
 800a334:	0800a339 	.word	0x0800a339
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a338:	bf00      	nop
  }

  return (USBD_OK);
 800a33a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a352:	6879      	ldr	r1, [r7, #4]
 800a354:	4805      	ldr	r0, [pc, #20]	@ (800a36c <CDC_Receive_FS+0x24>)
 800a356:	f7fe fbf7 	bl	8008b48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a35a:	4804      	ldr	r0, [pc, #16]	@ (800a36c <CDC_Receive_FS+0x24>)
 800a35c:	f7fe fc12 	bl	8008b84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a360:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20017a08 	.word	0x20017a08

0800a370 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	4613      	mov	r3, r2
 800a37c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a386:	4618      	mov	r0, r3
 800a388:	371c      	adds	r7, #28
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
	...

0800a394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2212      	movs	r2, #18
 800a3a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3a6:	4b03      	ldr	r3, [pc, #12]	@ (800a3b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	200000e0 	.word	0x200000e0

0800a3b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2204      	movs	r2, #4
 800a3c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3ca:	4b03      	ldr	r3, [pc, #12]	@ (800a3d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	200000f4 	.word	0x200000f4

0800a3dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	6039      	str	r1, [r7, #0]
 800a3e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3e8:	79fb      	ldrb	r3, [r7, #7]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4907      	ldr	r1, [pc, #28]	@ (800a410 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3f2:	4808      	ldr	r0, [pc, #32]	@ (800a414 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3f4:	f7ff fe12 	bl	800a01c <USBD_GetString>
 800a3f8:	e004      	b.n	800a404 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	4904      	ldr	r1, [pc, #16]	@ (800a410 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3fe:	4805      	ldr	r0, [pc, #20]	@ (800a414 <USBD_FS_ProductStrDescriptor+0x38>)
 800a400:	f7ff fe0c 	bl	800a01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a404:	4b02      	ldr	r3, [pc, #8]	@ (800a410 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20018ce4 	.word	0x20018ce4
 800a414:	0800ca90 	.word	0x0800ca90

0800a418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	4904      	ldr	r1, [pc, #16]	@ (800a438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a428:	4804      	ldr	r0, [pc, #16]	@ (800a43c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a42a:	f7ff fdf7 	bl	800a01c <USBD_GetString>
  return USBD_StrDesc;
 800a42e:	4b02      	ldr	r3, [pc, #8]	@ (800a438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20018ce4 	.word	0x20018ce4
 800a43c:	0800caa8 	.word	0x0800caa8

0800a440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	6039      	str	r1, [r7, #0]
 800a44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	221a      	movs	r2, #26
 800a450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a452:	f000 f843 	bl	800a4dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a456:	4b02      	ldr	r3, [pc, #8]	@ (800a460 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	200000f8 	.word	0x200000f8

0800a464 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	6039      	str	r1, [r7, #0]
 800a46e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d105      	bne.n	800a482 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	4907      	ldr	r1, [pc, #28]	@ (800a498 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a47a:	4808      	ldr	r0, [pc, #32]	@ (800a49c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a47c:	f7ff fdce 	bl	800a01c <USBD_GetString>
 800a480:	e004      	b.n	800a48c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	4904      	ldr	r1, [pc, #16]	@ (800a498 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a486:	4805      	ldr	r0, [pc, #20]	@ (800a49c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a488:	f7ff fdc8 	bl	800a01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a48c:	4b02      	ldr	r3, [pc, #8]	@ (800a498 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	20018ce4 	.word	0x20018ce4
 800a49c:	0800cabc 	.word	0x0800cabc

0800a4a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	6039      	str	r1, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d105      	bne.n	800a4be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4907      	ldr	r1, [pc, #28]	@ (800a4d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4b6:	4808      	ldr	r0, [pc, #32]	@ (800a4d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4b8:	f7ff fdb0 	bl	800a01c <USBD_GetString>
 800a4bc:	e004      	b.n	800a4c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4be:	683a      	ldr	r2, [r7, #0]
 800a4c0:	4904      	ldr	r1, [pc, #16]	@ (800a4d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4c2:	4805      	ldr	r0, [pc, #20]	@ (800a4d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4c4:	f7ff fdaa 	bl	800a01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4c8:	4b02      	ldr	r3, [pc, #8]	@ (800a4d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20018ce4 	.word	0x20018ce4
 800a4d8:	0800cac8 	.word	0x0800cac8

0800a4dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800a520 <Get_SerialNum+0x44>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a524 <Get_SerialNum+0x48>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a528 <Get_SerialNum+0x4c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d009      	beq.n	800a516 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a502:	2208      	movs	r2, #8
 800a504:	4909      	ldr	r1, [pc, #36]	@ (800a52c <Get_SerialNum+0x50>)
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 f814 	bl	800a534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a50c:	2204      	movs	r2, #4
 800a50e:	4908      	ldr	r1, [pc, #32]	@ (800a530 <Get_SerialNum+0x54>)
 800a510:	68b8      	ldr	r0, [r7, #8]
 800a512:	f000 f80f 	bl	800a534 <IntToUnicode>
  }
}
 800a516:	bf00      	nop
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	1fff7a10 	.word	0x1fff7a10
 800a524:	1fff7a14 	.word	0x1fff7a14
 800a528:	1fff7a18 	.word	0x1fff7a18
 800a52c:	200000fa 	.word	0x200000fa
 800a530:	2000010a 	.word	0x2000010a

0800a534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a546:	2300      	movs	r3, #0
 800a548:	75fb      	strb	r3, [r7, #23]
 800a54a:	e027      	b.n	800a59c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	0f1b      	lsrs	r3, r3, #28
 800a550:	2b09      	cmp	r3, #9
 800a552:	d80b      	bhi.n	800a56c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	0f1b      	lsrs	r3, r3, #28
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	4619      	mov	r1, r3
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	440b      	add	r3, r1
 800a564:	3230      	adds	r2, #48	@ 0x30
 800a566:	b2d2      	uxtb	r2, r2
 800a568:	701a      	strb	r2, [r3, #0]
 800a56a:	e00a      	b.n	800a582 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	0f1b      	lsrs	r3, r3, #28
 800a570:	b2da      	uxtb	r2, r3
 800a572:	7dfb      	ldrb	r3, [r7, #23]
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	4619      	mov	r1, r3
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	440b      	add	r3, r1
 800a57c:	3237      	adds	r2, #55	@ 0x37
 800a57e:	b2d2      	uxtb	r2, r2
 800a580:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	011b      	lsls	r3, r3, #4
 800a586:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	3301      	adds	r3, #1
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	4413      	add	r3, r2
 800a592:	2200      	movs	r2, #0
 800a594:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	3301      	adds	r3, #1
 800a59a:	75fb      	strb	r3, [r7, #23]
 800a59c:	7dfa      	ldrb	r2, [r7, #23]
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d3d3      	bcc.n	800a54c <IntToUnicode+0x18>
  }
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
	...

0800a5b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08a      	sub	sp, #40	@ 0x28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5bc:	f107 0314 	add.w	r3, r7, #20
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	609a      	str	r2, [r3, #8]
 800a5c8:	60da      	str	r2, [r3, #12]
 800a5ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5d4:	d147      	bne.n	800a666 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	613b      	str	r3, [r7, #16]
 800a5da:	4b25      	ldr	r3, [pc, #148]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5de:	4a24      	ldr	r2, [pc, #144]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a5e0:	f043 0301 	orr.w	r3, r3, #1
 800a5e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5e6:	4b22      	ldr	r3, [pc, #136]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ea:	f003 0301 	and.w	r3, r3, #1
 800a5ee:	613b      	str	r3, [r7, #16]
 800a5f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a600:	f107 0314 	add.w	r3, r7, #20
 800a604:	4619      	mov	r1, r3
 800a606:	481b      	ldr	r0, [pc, #108]	@ (800a674 <HAL_PCD_MspInit+0xc0>)
 800a608:	f7f8 fb2e 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a60c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a612:	2302      	movs	r3, #2
 800a614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a616:	2300      	movs	r3, #0
 800a618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a61a:	2300      	movs	r3, #0
 800a61c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a61e:	230a      	movs	r3, #10
 800a620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a622:	f107 0314 	add.w	r3, r7, #20
 800a626:	4619      	mov	r1, r3
 800a628:	4812      	ldr	r0, [pc, #72]	@ (800a674 <HAL_PCD_MspInit+0xc0>)
 800a62a:	f7f8 fb1d 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a62e:	4b10      	ldr	r3, [pc, #64]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a632:	4a0f      	ldr	r2, [pc, #60]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a638:	6353      	str	r3, [r2, #52]	@ 0x34
 800a63a:	2300      	movs	r3, #0
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	4b0c      	ldr	r3, [pc, #48]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a642:	4a0b      	ldr	r2, [pc, #44]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a648:	6453      	str	r3, [r2, #68]	@ 0x44
 800a64a:	4b09      	ldr	r3, [pc, #36]	@ (800a670 <HAL_PCD_MspInit+0xbc>)
 800a64c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a64e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a656:	2200      	movs	r2, #0
 800a658:	2100      	movs	r1, #0
 800a65a:	2043      	movs	r0, #67	@ 0x43
 800a65c:	f7f7 ff5d 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a660:	2043      	movs	r0, #67	@ 0x43
 800a662:	f7f7 ff76 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a666:	bf00      	nop
 800a668:	3728      	adds	r7, #40	@ 0x28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	40023800 	.word	0x40023800
 800a674:	40020000 	.word	0x40020000

0800a678 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a68c:	4619      	mov	r1, r3
 800a68e:	4610      	mov	r0, r2
 800a690:	f7fe fb61 	bl	8008d56 <USBD_LL_SetupStage>
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	6879      	ldr	r1, [r7, #4]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	00db      	lsls	r3, r3, #3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	78fb      	ldrb	r3, [r7, #3]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f7fe fb9b 	bl	8008e00 <USBD_LL_DataOutStage>
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a6e4:	78fa      	ldrb	r2, [r7, #3]
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	3320      	adds	r3, #32
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	78fb      	ldrb	r3, [r7, #3]
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	f7fe fc34 	bl	8008f66 <USBD_LL_DataInStage>
}
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b082      	sub	sp, #8
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe fd6e 	bl	80091f6 <USBD_LL_SOF>
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a72a:	2301      	movs	r3, #1
 800a72c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	79db      	ldrb	r3, [r3, #7]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
 800a73a:	e008      	b.n	800a74e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	79db      	ldrb	r3, [r3, #7]
 800a740:	2b02      	cmp	r3, #2
 800a742:	d102      	bne.n	800a74a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a744:	2301      	movs	r3, #1
 800a746:	73fb      	strb	r3, [r7, #15]
 800a748:	e001      	b.n	800a74e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a74a:	f7f7 fae3 	bl	8001d14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a754:	7bfa      	ldrb	r2, [r7, #15]
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fe fd08 	bl	800916e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a764:	4618      	mov	r0, r3
 800a766:	f7fe fcb0 	bl	80090ca <USBD_LL_Reset>
}
 800a76a:	bf00      	nop
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
	...

0800a774 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fd03 	bl	800918e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	6812      	ldr	r2, [r2, #0]
 800a796:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a79a:	f043 0301 	orr.w	r3, r3, #1
 800a79e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7adb      	ldrb	r3, [r3, #11]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d005      	beq.n	800a7b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7a8:	4b04      	ldr	r3, [pc, #16]	@ (800a7bc <HAL_PCD_SuspendCallback+0x48>)
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	4a03      	ldr	r2, [pc, #12]	@ (800a7bc <HAL_PCD_SuspendCallback+0x48>)
 800a7ae:	f043 0306 	orr.w	r3, r3, #6
 800a7b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	e000ed00 	.word	0xe000ed00

0800a7c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fcf9 	bl	80091c6 <USBD_LL_Resume>
}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fd51 	bl	800929a <USBD_LL_IsoOUTIncomplete>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a812:	78fa      	ldrb	r2, [r7, #3]
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fd0d 	bl	8009236 <USBD_LL_IsoINIncomplete>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fd63 	bl	80092fe <USBD_LL_DevConnected>
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fd60 	bl	8009314 <USBD_LL_DevDisconnected>
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d13c      	bne.n	800a8e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a86c:	4a20      	ldr	r2, [pc, #128]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a1e      	ldr	r2, [pc, #120]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a878:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a87c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a87e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a882:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a884:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a886:	2204      	movs	r2, #4
 800a888:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a88a:	4b19      	ldr	r3, [pc, #100]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a88c:	2202      	movs	r2, #2
 800a88e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a890:	4b17      	ldr	r3, [pc, #92]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a892:	2200      	movs	r2, #0
 800a894:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a896:	4b16      	ldr	r3, [pc, #88]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a898:	2202      	movs	r2, #2
 800a89a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a89c:	4b14      	ldr	r3, [pc, #80]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a8a2:	4b13      	ldr	r3, [pc, #76]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8a8:	4b11      	ldr	r3, [pc, #68]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a8ae:	4b10      	ldr	r3, [pc, #64]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8ba:	480d      	ldr	r0, [pc, #52]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8bc:	f7fa f91e 	bl	8004afc <HAL_PCD_Init>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d001      	beq.n	800a8ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8c6:	f7f7 fa25 	bl	8001d14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8ca:	2180      	movs	r1, #128	@ 0x80
 800a8cc:	4808      	ldr	r0, [pc, #32]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8ce:	f7fb fb4a 	bl	8005f66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8d2:	2240      	movs	r2, #64	@ 0x40
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	4806      	ldr	r0, [pc, #24]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8d8:	f7fb fafe 	bl	8005ed8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8dc:	2280      	movs	r2, #128	@ 0x80
 800a8de:	2101      	movs	r1, #1
 800a8e0:	4803      	ldr	r0, [pc, #12]	@ (800a8f0 <USBD_LL_Init+0x94>)
 800a8e2:	f7fb faf9 	bl	8005ed8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	20018ee4 	.word	0x20018ee4

0800a8f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fa fa05 	bl	8004d1a <HAL_PCD_Start>
 800a910:	4603      	mov	r3, r0
 800a912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a914:	7bfb      	ldrb	r3, [r7, #15]
 800a916:	4618      	mov	r0, r3
 800a918:	f000 f942 	bl	800aba0 <USBD_Get_USB_Status>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a920:	7bbb      	ldrb	r3, [r7, #14]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	4608      	mov	r0, r1
 800a934:	4611      	mov	r1, r2
 800a936:	461a      	mov	r2, r3
 800a938:	4603      	mov	r3, r0
 800a93a:	70fb      	strb	r3, [r7, #3]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70bb      	strb	r3, [r7, #2]
 800a940:	4613      	mov	r3, r2
 800a942:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a948:	2300      	movs	r3, #0
 800a94a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a952:	78bb      	ldrb	r3, [r7, #2]
 800a954:	883a      	ldrh	r2, [r7, #0]
 800a956:	78f9      	ldrb	r1, [r7, #3]
 800a958:	f7fa fed9 	bl	800570e <HAL_PCD_EP_Open>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	4618      	mov	r0, r3
 800a964:	f000 f91c 	bl	800aba0 <USBD_Get_USB_Status>
 800a968:	4603      	mov	r3, r0
 800a96a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	460b      	mov	r3, r1
 800a980:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a990:	78fa      	ldrb	r2, [r7, #3]
 800a992:	4611      	mov	r1, r2
 800a994:	4618      	mov	r0, r3
 800a996:	f7fa ff24 	bl	80057e2 <HAL_PCD_EP_Close>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 f8fd 	bl	800aba0 <USBD_Get_USB_Status>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9ce:	78fa      	ldrb	r2, [r7, #3]
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fa ffdc 	bl	8005990 <HAL_PCD_EP_SetStall>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 f8de 	bl	800aba0 <USBD_Get_USB_Status>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa0c:	78fa      	ldrb	r2, [r7, #3]
 800aa0e:	4611      	mov	r1, r2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fb f820 	bl	8005a56 <HAL_PCD_EP_ClrStall>
 800aa16:	4603      	mov	r3, r0
 800aa18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 f8bf 	bl	800aba0 <USBD_Get_USB_Status>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	da0b      	bge.n	800aa64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa4c:	78fb      	ldrb	r3, [r7, #3]
 800aa4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa52:	68f9      	ldr	r1, [r7, #12]
 800aa54:	4613      	mov	r3, r2
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	440b      	add	r3, r1
 800aa5e:	3316      	adds	r3, #22
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	e00b      	b.n	800aa7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa6a:	68f9      	ldr	r1, [r7, #12]
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	00db      	lsls	r3, r3, #3
 800aa70:	4413      	add	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	440b      	add	r3, r1
 800aa76:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aa7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaa2:	78fa      	ldrb	r2, [r7, #3]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fa fe0d 	bl	80056c6 <HAL_PCD_SetAddress>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 f874 	bl	800aba0 <USBD_Get_USB_Status>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b086      	sub	sp, #24
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
 800aad2:	460b      	mov	r3, r1
 800aad4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aae4:	7af9      	ldrb	r1, [r7, #11]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	f7fa ff17 	bl	800591c <HAL_PCD_EP_Transmit>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 f853 	bl	800aba0 <USBD_Get_USB_Status>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aafe:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	607a      	str	r2, [r7, #4]
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	460b      	mov	r3, r1
 800ab16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ab26:	7af9      	ldrb	r1, [r7, #11]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	f7fa fea3 	bl	8005876 <HAL_PCD_EP_Receive>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 f832 	bl	800aba0 <USBD_Get_USB_Status>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab40:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab5c:	78fa      	ldrb	r2, [r7, #3]
 800ab5e:	4611      	mov	r1, r2
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fa fec3 	bl	80058ec <HAL_PCD_EP_GetRxCount>
 800ab66:	4603      	mov	r3, r0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab78:	4b03      	ldr	r3, [pc, #12]	@ (800ab88 <USBD_static_malloc+0x18>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	200193c8 	.word	0x200193c8

0800ab8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]

}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	4603      	mov	r3, r0
 800aba8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d817      	bhi.n	800abe4 <USBD_Get_USB_Status+0x44>
 800abb4:	a201      	add	r2, pc, #4	@ (adr r2, 800abbc <USBD_Get_USB_Status+0x1c>)
 800abb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abba:	bf00      	nop
 800abbc:	0800abcd 	.word	0x0800abcd
 800abc0:	0800abd3 	.word	0x0800abd3
 800abc4:	0800abd9 	.word	0x0800abd9
 800abc8:	0800abdf 	.word	0x0800abdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	73fb      	strb	r3, [r7, #15]
    break;
 800abd0:	e00b      	b.n	800abea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abd2:	2303      	movs	r3, #3
 800abd4:	73fb      	strb	r3, [r7, #15]
    break;
 800abd6:	e008      	b.n	800abea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abd8:	2301      	movs	r3, #1
 800abda:	73fb      	strb	r3, [r7, #15]
    break;
 800abdc:	e005      	b.n	800abea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abde:	2303      	movs	r3, #3
 800abe0:	73fb      	strb	r3, [r7, #15]
    break;
 800abe2:	e002      	b.n	800abea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abe4:	2303      	movs	r3, #3
 800abe6:	73fb      	strb	r3, [r7, #15]
    break;
 800abe8:	bf00      	nop
  }
  return usb_status;
 800abea:	7bfb      	ldrb	r3, [r7, #15]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <std>:
 800abf8:	2300      	movs	r3, #0
 800abfa:	b510      	push	{r4, lr}
 800abfc:	4604      	mov	r4, r0
 800abfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ac02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac06:	6083      	str	r3, [r0, #8]
 800ac08:	8181      	strh	r1, [r0, #12]
 800ac0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac0c:	81c2      	strh	r2, [r0, #14]
 800ac0e:	6183      	str	r3, [r0, #24]
 800ac10:	4619      	mov	r1, r3
 800ac12:	2208      	movs	r2, #8
 800ac14:	305c      	adds	r0, #92	@ 0x5c
 800ac16:	f000 f9f9 	bl	800b00c <memset>
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac50 <std+0x58>)
 800ac1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac54 <std+0x5c>)
 800ac20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac22:	4b0d      	ldr	r3, [pc, #52]	@ (800ac58 <std+0x60>)
 800ac24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac26:	4b0d      	ldr	r3, [pc, #52]	@ (800ac5c <std+0x64>)
 800ac28:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac60 <std+0x68>)
 800ac2c:	6224      	str	r4, [r4, #32]
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d006      	beq.n	800ac40 <std+0x48>
 800ac32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac36:	4294      	cmp	r4, r2
 800ac38:	d002      	beq.n	800ac40 <std+0x48>
 800ac3a:	33d0      	adds	r3, #208	@ 0xd0
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	d105      	bne.n	800ac4c <std+0x54>
 800ac40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac48:	f000 ba58 	b.w	800b0fc <__retarget_lock_init_recursive>
 800ac4c:	bd10      	pop	{r4, pc}
 800ac4e:	bf00      	nop
 800ac50:	0800ae5d 	.word	0x0800ae5d
 800ac54:	0800ae7f 	.word	0x0800ae7f
 800ac58:	0800aeb7 	.word	0x0800aeb7
 800ac5c:	0800aedb 	.word	0x0800aedb
 800ac60:	200195e8 	.word	0x200195e8

0800ac64 <stdio_exit_handler>:
 800ac64:	4a02      	ldr	r2, [pc, #8]	@ (800ac70 <stdio_exit_handler+0xc>)
 800ac66:	4903      	ldr	r1, [pc, #12]	@ (800ac74 <stdio_exit_handler+0x10>)
 800ac68:	4803      	ldr	r0, [pc, #12]	@ (800ac78 <stdio_exit_handler+0x14>)
 800ac6a:	f000 b869 	b.w	800ad40 <_fwalk_sglue>
 800ac6e:	bf00      	nop
 800ac70:	20000114 	.word	0x20000114
 800ac74:	0800b999 	.word	0x0800b999
 800ac78:	20000124 	.word	0x20000124

0800ac7c <cleanup_stdio>:
 800ac7c:	6841      	ldr	r1, [r0, #4]
 800ac7e:	4b0c      	ldr	r3, [pc, #48]	@ (800acb0 <cleanup_stdio+0x34>)
 800ac80:	4299      	cmp	r1, r3
 800ac82:	b510      	push	{r4, lr}
 800ac84:	4604      	mov	r4, r0
 800ac86:	d001      	beq.n	800ac8c <cleanup_stdio+0x10>
 800ac88:	f000 fe86 	bl	800b998 <_fflush_r>
 800ac8c:	68a1      	ldr	r1, [r4, #8]
 800ac8e:	4b09      	ldr	r3, [pc, #36]	@ (800acb4 <cleanup_stdio+0x38>)
 800ac90:	4299      	cmp	r1, r3
 800ac92:	d002      	beq.n	800ac9a <cleanup_stdio+0x1e>
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 fe7f 	bl	800b998 <_fflush_r>
 800ac9a:	68e1      	ldr	r1, [r4, #12]
 800ac9c:	4b06      	ldr	r3, [pc, #24]	@ (800acb8 <cleanup_stdio+0x3c>)
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	d004      	beq.n	800acac <cleanup_stdio+0x30>
 800aca2:	4620      	mov	r0, r4
 800aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca8:	f000 be76 	b.w	800b998 <_fflush_r>
 800acac:	bd10      	pop	{r4, pc}
 800acae:	bf00      	nop
 800acb0:	200195e8 	.word	0x200195e8
 800acb4:	20019650 	.word	0x20019650
 800acb8:	200196b8 	.word	0x200196b8

0800acbc <global_stdio_init.part.0>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	4b0b      	ldr	r3, [pc, #44]	@ (800acec <global_stdio_init.part.0+0x30>)
 800acc0:	4c0b      	ldr	r4, [pc, #44]	@ (800acf0 <global_stdio_init.part.0+0x34>)
 800acc2:	4a0c      	ldr	r2, [pc, #48]	@ (800acf4 <global_stdio_init.part.0+0x38>)
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	4620      	mov	r0, r4
 800acc8:	2200      	movs	r2, #0
 800acca:	2104      	movs	r1, #4
 800accc:	f7ff ff94 	bl	800abf8 <std>
 800acd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800acd4:	2201      	movs	r2, #1
 800acd6:	2109      	movs	r1, #9
 800acd8:	f7ff ff8e 	bl	800abf8 <std>
 800acdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ace0:	2202      	movs	r2, #2
 800ace2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace6:	2112      	movs	r1, #18
 800ace8:	f7ff bf86 	b.w	800abf8 <std>
 800acec:	20019720 	.word	0x20019720
 800acf0:	200195e8 	.word	0x200195e8
 800acf4:	0800ac65 	.word	0x0800ac65

0800acf8 <__sfp_lock_acquire>:
 800acf8:	4801      	ldr	r0, [pc, #4]	@ (800ad00 <__sfp_lock_acquire+0x8>)
 800acfa:	f000 ba00 	b.w	800b0fe <__retarget_lock_acquire_recursive>
 800acfe:	bf00      	nop
 800ad00:	20019729 	.word	0x20019729

0800ad04 <__sfp_lock_release>:
 800ad04:	4801      	ldr	r0, [pc, #4]	@ (800ad0c <__sfp_lock_release+0x8>)
 800ad06:	f000 b9fb 	b.w	800b100 <__retarget_lock_release_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20019729 	.word	0x20019729

0800ad10 <__sinit>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	f7ff fff0 	bl	800acf8 <__sfp_lock_acquire>
 800ad18:	6a23      	ldr	r3, [r4, #32]
 800ad1a:	b11b      	cbz	r3, 800ad24 <__sinit+0x14>
 800ad1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad20:	f7ff bff0 	b.w	800ad04 <__sfp_lock_release>
 800ad24:	4b04      	ldr	r3, [pc, #16]	@ (800ad38 <__sinit+0x28>)
 800ad26:	6223      	str	r3, [r4, #32]
 800ad28:	4b04      	ldr	r3, [pc, #16]	@ (800ad3c <__sinit+0x2c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1f5      	bne.n	800ad1c <__sinit+0xc>
 800ad30:	f7ff ffc4 	bl	800acbc <global_stdio_init.part.0>
 800ad34:	e7f2      	b.n	800ad1c <__sinit+0xc>
 800ad36:	bf00      	nop
 800ad38:	0800ac7d 	.word	0x0800ac7d
 800ad3c:	20019720 	.word	0x20019720

0800ad40 <_fwalk_sglue>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	4607      	mov	r7, r0
 800ad46:	4688      	mov	r8, r1
 800ad48:	4614      	mov	r4, r2
 800ad4a:	2600      	movs	r6, #0
 800ad4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad50:	f1b9 0901 	subs.w	r9, r9, #1
 800ad54:	d505      	bpl.n	800ad62 <_fwalk_sglue+0x22>
 800ad56:	6824      	ldr	r4, [r4, #0]
 800ad58:	2c00      	cmp	r4, #0
 800ad5a:	d1f7      	bne.n	800ad4c <_fwalk_sglue+0xc>
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad62:	89ab      	ldrh	r3, [r5, #12]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d907      	bls.n	800ad78 <_fwalk_sglue+0x38>
 800ad68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	d003      	beq.n	800ad78 <_fwalk_sglue+0x38>
 800ad70:	4629      	mov	r1, r5
 800ad72:	4638      	mov	r0, r7
 800ad74:	47c0      	blx	r8
 800ad76:	4306      	orrs	r6, r0
 800ad78:	3568      	adds	r5, #104	@ 0x68
 800ad7a:	e7e9      	b.n	800ad50 <_fwalk_sglue+0x10>

0800ad7c <iprintf>:
 800ad7c:	b40f      	push	{r0, r1, r2, r3}
 800ad7e:	b507      	push	{r0, r1, r2, lr}
 800ad80:	4906      	ldr	r1, [pc, #24]	@ (800ad9c <iprintf+0x20>)
 800ad82:	ab04      	add	r3, sp, #16
 800ad84:	6808      	ldr	r0, [r1, #0]
 800ad86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad8a:	6881      	ldr	r1, [r0, #8]
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	f000 fadb 	bl	800b348 <_vfiprintf_r>
 800ad92:	b003      	add	sp, #12
 800ad94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad98:	b004      	add	sp, #16
 800ad9a:	4770      	bx	lr
 800ad9c:	20000120 	.word	0x20000120

0800ada0 <_puts_r>:
 800ada0:	6a03      	ldr	r3, [r0, #32]
 800ada2:	b570      	push	{r4, r5, r6, lr}
 800ada4:	6884      	ldr	r4, [r0, #8]
 800ada6:	4605      	mov	r5, r0
 800ada8:	460e      	mov	r6, r1
 800adaa:	b90b      	cbnz	r3, 800adb0 <_puts_r+0x10>
 800adac:	f7ff ffb0 	bl	800ad10 <__sinit>
 800adb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adb2:	07db      	lsls	r3, r3, #31
 800adb4:	d405      	bmi.n	800adc2 <_puts_r+0x22>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	0598      	lsls	r0, r3, #22
 800adba:	d402      	bmi.n	800adc2 <_puts_r+0x22>
 800adbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adbe:	f000 f99e 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	0719      	lsls	r1, r3, #28
 800adc6:	d502      	bpl.n	800adce <_puts_r+0x2e>
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d135      	bne.n	800ae3a <_puts_r+0x9a>
 800adce:	4621      	mov	r1, r4
 800add0:	4628      	mov	r0, r5
 800add2:	f000 f8c5 	bl	800af60 <__swsetup_r>
 800add6:	b380      	cbz	r0, 800ae3a <_puts_r+0x9a>
 800add8:	f04f 35ff 	mov.w	r5, #4294967295
 800addc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adde:	07da      	lsls	r2, r3, #31
 800ade0:	d405      	bmi.n	800adee <_puts_r+0x4e>
 800ade2:	89a3      	ldrh	r3, [r4, #12]
 800ade4:	059b      	lsls	r3, r3, #22
 800ade6:	d402      	bmi.n	800adee <_puts_r+0x4e>
 800ade8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adea:	f000 f989 	bl	800b100 <__retarget_lock_release_recursive>
 800adee:	4628      	mov	r0, r5
 800adf0:	bd70      	pop	{r4, r5, r6, pc}
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	da04      	bge.n	800ae00 <_puts_r+0x60>
 800adf6:	69a2      	ldr	r2, [r4, #24]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	dc17      	bgt.n	800ae2c <_puts_r+0x8c>
 800adfc:	290a      	cmp	r1, #10
 800adfe:	d015      	beq.n	800ae2c <_puts_r+0x8c>
 800ae00:	6823      	ldr	r3, [r4, #0]
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	6022      	str	r2, [r4, #0]
 800ae06:	7019      	strb	r1, [r3, #0]
 800ae08:	68a3      	ldr	r3, [r4, #8]
 800ae0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	60a3      	str	r3, [r4, #8]
 800ae12:	2900      	cmp	r1, #0
 800ae14:	d1ed      	bne.n	800adf2 <_puts_r+0x52>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	da11      	bge.n	800ae3e <_puts_r+0x9e>
 800ae1a:	4622      	mov	r2, r4
 800ae1c:	210a      	movs	r1, #10
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f000 f85f 	bl	800aee2 <__swbuf_r>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d0d7      	beq.n	800add8 <_puts_r+0x38>
 800ae28:	250a      	movs	r5, #10
 800ae2a:	e7d7      	b.n	800addc <_puts_r+0x3c>
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 f857 	bl	800aee2 <__swbuf_r>
 800ae34:	3001      	adds	r0, #1
 800ae36:	d1e7      	bne.n	800ae08 <_puts_r+0x68>
 800ae38:	e7ce      	b.n	800add8 <_puts_r+0x38>
 800ae3a:	3e01      	subs	r6, #1
 800ae3c:	e7e4      	b.n	800ae08 <_puts_r+0x68>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	6022      	str	r2, [r4, #0]
 800ae44:	220a      	movs	r2, #10
 800ae46:	701a      	strb	r2, [r3, #0]
 800ae48:	e7ee      	b.n	800ae28 <_puts_r+0x88>
	...

0800ae4c <puts>:
 800ae4c:	4b02      	ldr	r3, [pc, #8]	@ (800ae58 <puts+0xc>)
 800ae4e:	4601      	mov	r1, r0
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	f7ff bfa5 	b.w	800ada0 <_puts_r>
 800ae56:	bf00      	nop
 800ae58:	20000120 	.word	0x20000120

0800ae5c <__sread>:
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae64:	f000 f8fc 	bl	800b060 <_read_r>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	bfab      	itete	ge
 800ae6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae70:	181b      	addge	r3, r3, r0
 800ae72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae76:	bfac      	ite	ge
 800ae78:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae7a:	81a3      	strhlt	r3, [r4, #12]
 800ae7c:	bd10      	pop	{r4, pc}

0800ae7e <__swrite>:
 800ae7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae82:	461f      	mov	r7, r3
 800ae84:	898b      	ldrh	r3, [r1, #12]
 800ae86:	05db      	lsls	r3, r3, #23
 800ae88:	4605      	mov	r5, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	4616      	mov	r6, r2
 800ae8e:	d505      	bpl.n	800ae9c <__swrite+0x1e>
 800ae90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae94:	2302      	movs	r3, #2
 800ae96:	2200      	movs	r2, #0
 800ae98:	f000 f8d0 	bl	800b03c <_lseek_r>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aea6:	81a3      	strh	r3, [r4, #12]
 800aea8:	4632      	mov	r2, r6
 800aeaa:	463b      	mov	r3, r7
 800aeac:	4628      	mov	r0, r5
 800aeae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb2:	f000 b8e7 	b.w	800b084 <_write_r>

0800aeb6 <__sseek>:
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	460c      	mov	r4, r1
 800aeba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aebe:	f000 f8bd 	bl	800b03c <_lseek_r>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	bf15      	itete	ne
 800aec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aeca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aed2:	81a3      	strheq	r3, [r4, #12]
 800aed4:	bf18      	it	ne
 800aed6:	81a3      	strhne	r3, [r4, #12]
 800aed8:	bd10      	pop	{r4, pc}

0800aeda <__sclose>:
 800aeda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aede:	f000 b89d 	b.w	800b01c <_close_r>

0800aee2 <__swbuf_r>:
 800aee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee4:	460e      	mov	r6, r1
 800aee6:	4614      	mov	r4, r2
 800aee8:	4605      	mov	r5, r0
 800aeea:	b118      	cbz	r0, 800aef4 <__swbuf_r+0x12>
 800aeec:	6a03      	ldr	r3, [r0, #32]
 800aeee:	b90b      	cbnz	r3, 800aef4 <__swbuf_r+0x12>
 800aef0:	f7ff ff0e 	bl	800ad10 <__sinit>
 800aef4:	69a3      	ldr	r3, [r4, #24]
 800aef6:	60a3      	str	r3, [r4, #8]
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	071a      	lsls	r2, r3, #28
 800aefc:	d501      	bpl.n	800af02 <__swbuf_r+0x20>
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	b943      	cbnz	r3, 800af14 <__swbuf_r+0x32>
 800af02:	4621      	mov	r1, r4
 800af04:	4628      	mov	r0, r5
 800af06:	f000 f82b 	bl	800af60 <__swsetup_r>
 800af0a:	b118      	cbz	r0, 800af14 <__swbuf_r+0x32>
 800af0c:	f04f 37ff 	mov.w	r7, #4294967295
 800af10:	4638      	mov	r0, r7
 800af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	6922      	ldr	r2, [r4, #16]
 800af18:	1a98      	subs	r0, r3, r2
 800af1a:	6963      	ldr	r3, [r4, #20]
 800af1c:	b2f6      	uxtb	r6, r6
 800af1e:	4283      	cmp	r3, r0
 800af20:	4637      	mov	r7, r6
 800af22:	dc05      	bgt.n	800af30 <__swbuf_r+0x4e>
 800af24:	4621      	mov	r1, r4
 800af26:	4628      	mov	r0, r5
 800af28:	f000 fd36 	bl	800b998 <_fflush_r>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d1ed      	bne.n	800af0c <__swbuf_r+0x2a>
 800af30:	68a3      	ldr	r3, [r4, #8]
 800af32:	3b01      	subs	r3, #1
 800af34:	60a3      	str	r3, [r4, #8]
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	6022      	str	r2, [r4, #0]
 800af3c:	701e      	strb	r6, [r3, #0]
 800af3e:	6962      	ldr	r2, [r4, #20]
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	429a      	cmp	r2, r3
 800af44:	d004      	beq.n	800af50 <__swbuf_r+0x6e>
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	07db      	lsls	r3, r3, #31
 800af4a:	d5e1      	bpl.n	800af10 <__swbuf_r+0x2e>
 800af4c:	2e0a      	cmp	r6, #10
 800af4e:	d1df      	bne.n	800af10 <__swbuf_r+0x2e>
 800af50:	4621      	mov	r1, r4
 800af52:	4628      	mov	r0, r5
 800af54:	f000 fd20 	bl	800b998 <_fflush_r>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d0d9      	beq.n	800af10 <__swbuf_r+0x2e>
 800af5c:	e7d6      	b.n	800af0c <__swbuf_r+0x2a>
	...

0800af60 <__swsetup_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4b29      	ldr	r3, [pc, #164]	@ (800b008 <__swsetup_r+0xa8>)
 800af64:	4605      	mov	r5, r0
 800af66:	6818      	ldr	r0, [r3, #0]
 800af68:	460c      	mov	r4, r1
 800af6a:	b118      	cbz	r0, 800af74 <__swsetup_r+0x14>
 800af6c:	6a03      	ldr	r3, [r0, #32]
 800af6e:	b90b      	cbnz	r3, 800af74 <__swsetup_r+0x14>
 800af70:	f7ff fece 	bl	800ad10 <__sinit>
 800af74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af78:	0719      	lsls	r1, r3, #28
 800af7a:	d422      	bmi.n	800afc2 <__swsetup_r+0x62>
 800af7c:	06da      	lsls	r2, r3, #27
 800af7e:	d407      	bmi.n	800af90 <__swsetup_r+0x30>
 800af80:	2209      	movs	r2, #9
 800af82:	602a      	str	r2, [r5, #0]
 800af84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	f04f 30ff 	mov.w	r0, #4294967295
 800af8e:	e033      	b.n	800aff8 <__swsetup_r+0x98>
 800af90:	0758      	lsls	r0, r3, #29
 800af92:	d512      	bpl.n	800afba <__swsetup_r+0x5a>
 800af94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af96:	b141      	cbz	r1, 800afaa <__swsetup_r+0x4a>
 800af98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af9c:	4299      	cmp	r1, r3
 800af9e:	d002      	beq.n	800afa6 <__swsetup_r+0x46>
 800afa0:	4628      	mov	r0, r5
 800afa2:	f000 f8af 	bl	800b104 <_free_r>
 800afa6:	2300      	movs	r3, #0
 800afa8:	6363      	str	r3, [r4, #52]	@ 0x34
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	2300      	movs	r3, #0
 800afb4:	6063      	str	r3, [r4, #4]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	f043 0308 	orr.w	r3, r3, #8
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	b94b      	cbnz	r3, 800afda <__swsetup_r+0x7a>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afd0:	d003      	beq.n	800afda <__swsetup_r+0x7a>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	f000 fd2d 	bl	800ba34 <__smakebuf_r>
 800afda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afde:	f013 0201 	ands.w	r2, r3, #1
 800afe2:	d00a      	beq.n	800affa <__swsetup_r+0x9a>
 800afe4:	2200      	movs	r2, #0
 800afe6:	60a2      	str	r2, [r4, #8]
 800afe8:	6962      	ldr	r2, [r4, #20]
 800afea:	4252      	negs	r2, r2
 800afec:	61a2      	str	r2, [r4, #24]
 800afee:	6922      	ldr	r2, [r4, #16]
 800aff0:	b942      	cbnz	r2, 800b004 <__swsetup_r+0xa4>
 800aff2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aff6:	d1c5      	bne.n	800af84 <__swsetup_r+0x24>
 800aff8:	bd38      	pop	{r3, r4, r5, pc}
 800affa:	0799      	lsls	r1, r3, #30
 800affc:	bf58      	it	pl
 800affe:	6962      	ldrpl	r2, [r4, #20]
 800b000:	60a2      	str	r2, [r4, #8]
 800b002:	e7f4      	b.n	800afee <__swsetup_r+0x8e>
 800b004:	2000      	movs	r0, #0
 800b006:	e7f7      	b.n	800aff8 <__swsetup_r+0x98>
 800b008:	20000120 	.word	0x20000120

0800b00c <memset>:
 800b00c:	4402      	add	r2, r0
 800b00e:	4603      	mov	r3, r0
 800b010:	4293      	cmp	r3, r2
 800b012:	d100      	bne.n	800b016 <memset+0xa>
 800b014:	4770      	bx	lr
 800b016:	f803 1b01 	strb.w	r1, [r3], #1
 800b01a:	e7f9      	b.n	800b010 <memset+0x4>

0800b01c <_close_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d06      	ldr	r5, [pc, #24]	@ (800b038 <_close_r+0x1c>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f7 f85f 	bl	80020ea <_close>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_close_r+0x1a>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_close_r+0x1a>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	20019724 	.word	0x20019724

0800b03c <_lseek_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	4d07      	ldr	r5, [pc, #28]	@ (800b05c <_lseek_r+0x20>)
 800b040:	4604      	mov	r4, r0
 800b042:	4608      	mov	r0, r1
 800b044:	4611      	mov	r1, r2
 800b046:	2200      	movs	r2, #0
 800b048:	602a      	str	r2, [r5, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	f7f7 f874 	bl	8002138 <_lseek>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_lseek_r+0x1e>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	b103      	cbz	r3, 800b05a <_lseek_r+0x1e>
 800b058:	6023      	str	r3, [r4, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	20019724 	.word	0x20019724

0800b060 <_read_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	4d07      	ldr	r5, [pc, #28]	@ (800b080 <_read_r+0x20>)
 800b064:	4604      	mov	r4, r0
 800b066:	4608      	mov	r0, r1
 800b068:	4611      	mov	r1, r2
 800b06a:	2200      	movs	r2, #0
 800b06c:	602a      	str	r2, [r5, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	f7f7 f81e 	bl	80020b0 <_read>
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	d102      	bne.n	800b07e <_read_r+0x1e>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	b103      	cbz	r3, 800b07e <_read_r+0x1e>
 800b07c:	6023      	str	r3, [r4, #0]
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
 800b080:	20019724 	.word	0x20019724

0800b084 <_write_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d07      	ldr	r5, [pc, #28]	@ (800b0a4 <_write_r+0x20>)
 800b088:	4604      	mov	r4, r0
 800b08a:	4608      	mov	r0, r1
 800b08c:	4611      	mov	r1, r2
 800b08e:	2200      	movs	r2, #0
 800b090:	602a      	str	r2, [r5, #0]
 800b092:	461a      	mov	r2, r3
 800b094:	f7f6 fe22 	bl	8001cdc <_write>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_write_r+0x1e>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_write_r+0x1e>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	20019724 	.word	0x20019724

0800b0a8 <__errno>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	@ (800b0b0 <__errno+0x8>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	20000120 	.word	0x20000120

0800b0b4 <__libc_init_array>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	4d0d      	ldr	r5, [pc, #52]	@ (800b0ec <__libc_init_array+0x38>)
 800b0b8:	4c0d      	ldr	r4, [pc, #52]	@ (800b0f0 <__libc_init_array+0x3c>)
 800b0ba:	1b64      	subs	r4, r4, r5
 800b0bc:	10a4      	asrs	r4, r4, #2
 800b0be:	2600      	movs	r6, #0
 800b0c0:	42a6      	cmp	r6, r4
 800b0c2:	d109      	bne.n	800b0d8 <__libc_init_array+0x24>
 800b0c4:	4d0b      	ldr	r5, [pc, #44]	@ (800b0f4 <__libc_init_array+0x40>)
 800b0c6:	4c0c      	ldr	r4, [pc, #48]	@ (800b0f8 <__libc_init_array+0x44>)
 800b0c8:	f001 fc80 	bl	800c9cc <_init>
 800b0cc:	1b64      	subs	r4, r4, r5
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	2600      	movs	r6, #0
 800b0d2:	42a6      	cmp	r6, r4
 800b0d4:	d105      	bne.n	800b0e2 <__libc_init_array+0x2e>
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0dc:	4798      	blx	r3
 800b0de:	3601      	adds	r6, #1
 800b0e0:	e7ee      	b.n	800b0c0 <__libc_init_array+0xc>
 800b0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0e6:	4798      	blx	r3
 800b0e8:	3601      	adds	r6, #1
 800b0ea:	e7f2      	b.n	800b0d2 <__libc_init_array+0x1e>
 800b0ec:	0800d378 	.word	0x0800d378
 800b0f0:	0800d378 	.word	0x0800d378
 800b0f4:	0800d378 	.word	0x0800d378
 800b0f8:	0800d37c 	.word	0x0800d37c

0800b0fc <__retarget_lock_init_recursive>:
 800b0fc:	4770      	bx	lr

0800b0fe <__retarget_lock_acquire_recursive>:
 800b0fe:	4770      	bx	lr

0800b100 <__retarget_lock_release_recursive>:
 800b100:	4770      	bx	lr
	...

0800b104 <_free_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4605      	mov	r5, r0
 800b108:	2900      	cmp	r1, #0
 800b10a:	d041      	beq.n	800b190 <_free_r+0x8c>
 800b10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b110:	1f0c      	subs	r4, r1, #4
 800b112:	2b00      	cmp	r3, #0
 800b114:	bfb8      	it	lt
 800b116:	18e4      	addlt	r4, r4, r3
 800b118:	f000 f8e0 	bl	800b2dc <__malloc_lock>
 800b11c:	4a1d      	ldr	r2, [pc, #116]	@ (800b194 <_free_r+0x90>)
 800b11e:	6813      	ldr	r3, [r2, #0]
 800b120:	b933      	cbnz	r3, 800b130 <_free_r+0x2c>
 800b122:	6063      	str	r3, [r4, #4]
 800b124:	6014      	str	r4, [r2, #0]
 800b126:	4628      	mov	r0, r5
 800b128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b12c:	f000 b8dc 	b.w	800b2e8 <__malloc_unlock>
 800b130:	42a3      	cmp	r3, r4
 800b132:	d908      	bls.n	800b146 <_free_r+0x42>
 800b134:	6820      	ldr	r0, [r4, #0]
 800b136:	1821      	adds	r1, r4, r0
 800b138:	428b      	cmp	r3, r1
 800b13a:	bf01      	itttt	eq
 800b13c:	6819      	ldreq	r1, [r3, #0]
 800b13e:	685b      	ldreq	r3, [r3, #4]
 800b140:	1809      	addeq	r1, r1, r0
 800b142:	6021      	streq	r1, [r4, #0]
 800b144:	e7ed      	b.n	800b122 <_free_r+0x1e>
 800b146:	461a      	mov	r2, r3
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	b10b      	cbz	r3, 800b150 <_free_r+0x4c>
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	d9fa      	bls.n	800b146 <_free_r+0x42>
 800b150:	6811      	ldr	r1, [r2, #0]
 800b152:	1850      	adds	r0, r2, r1
 800b154:	42a0      	cmp	r0, r4
 800b156:	d10b      	bne.n	800b170 <_free_r+0x6c>
 800b158:	6820      	ldr	r0, [r4, #0]
 800b15a:	4401      	add	r1, r0
 800b15c:	1850      	adds	r0, r2, r1
 800b15e:	4283      	cmp	r3, r0
 800b160:	6011      	str	r1, [r2, #0]
 800b162:	d1e0      	bne.n	800b126 <_free_r+0x22>
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	6053      	str	r3, [r2, #4]
 800b16a:	4408      	add	r0, r1
 800b16c:	6010      	str	r0, [r2, #0]
 800b16e:	e7da      	b.n	800b126 <_free_r+0x22>
 800b170:	d902      	bls.n	800b178 <_free_r+0x74>
 800b172:	230c      	movs	r3, #12
 800b174:	602b      	str	r3, [r5, #0]
 800b176:	e7d6      	b.n	800b126 <_free_r+0x22>
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	1821      	adds	r1, r4, r0
 800b17c:	428b      	cmp	r3, r1
 800b17e:	bf04      	itt	eq
 800b180:	6819      	ldreq	r1, [r3, #0]
 800b182:	685b      	ldreq	r3, [r3, #4]
 800b184:	6063      	str	r3, [r4, #4]
 800b186:	bf04      	itt	eq
 800b188:	1809      	addeq	r1, r1, r0
 800b18a:	6021      	streq	r1, [r4, #0]
 800b18c:	6054      	str	r4, [r2, #4]
 800b18e:	e7ca      	b.n	800b126 <_free_r+0x22>
 800b190:	bd38      	pop	{r3, r4, r5, pc}
 800b192:	bf00      	nop
 800b194:	20019730 	.word	0x20019730

0800b198 <sbrk_aligned>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	4e0f      	ldr	r6, [pc, #60]	@ (800b1d8 <sbrk_aligned+0x40>)
 800b19c:	460c      	mov	r4, r1
 800b19e:	6831      	ldr	r1, [r6, #0]
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	b911      	cbnz	r1, 800b1aa <sbrk_aligned+0x12>
 800b1a4:	f000 fca4 	bl	800baf0 <_sbrk_r>
 800b1a8:	6030      	str	r0, [r6, #0]
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	f000 fc9f 	bl	800baf0 <_sbrk_r>
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	d103      	bne.n	800b1be <sbrk_aligned+0x26>
 800b1b6:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
 800b1be:	1cc4      	adds	r4, r0, #3
 800b1c0:	f024 0403 	bic.w	r4, r4, #3
 800b1c4:	42a0      	cmp	r0, r4
 800b1c6:	d0f8      	beq.n	800b1ba <sbrk_aligned+0x22>
 800b1c8:	1a21      	subs	r1, r4, r0
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f000 fc90 	bl	800baf0 <_sbrk_r>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d1f2      	bne.n	800b1ba <sbrk_aligned+0x22>
 800b1d4:	e7ef      	b.n	800b1b6 <sbrk_aligned+0x1e>
 800b1d6:	bf00      	nop
 800b1d8:	2001972c 	.word	0x2001972c

0800b1dc <_malloc_r>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	1ccd      	adds	r5, r1, #3
 800b1e2:	f025 0503 	bic.w	r5, r5, #3
 800b1e6:	3508      	adds	r5, #8
 800b1e8:	2d0c      	cmp	r5, #12
 800b1ea:	bf38      	it	cc
 800b1ec:	250c      	movcc	r5, #12
 800b1ee:	2d00      	cmp	r5, #0
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	db01      	blt.n	800b1f8 <_malloc_r+0x1c>
 800b1f4:	42a9      	cmp	r1, r5
 800b1f6:	d904      	bls.n	800b202 <_malloc_r+0x26>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	6033      	str	r3, [r6, #0]
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2d8 <_malloc_r+0xfc>
 800b206:	f000 f869 	bl	800b2dc <__malloc_lock>
 800b20a:	f8d8 3000 	ldr.w	r3, [r8]
 800b20e:	461c      	mov	r4, r3
 800b210:	bb44      	cbnz	r4, 800b264 <_malloc_r+0x88>
 800b212:	4629      	mov	r1, r5
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ffbf 	bl	800b198 <sbrk_aligned>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	4604      	mov	r4, r0
 800b21e:	d158      	bne.n	800b2d2 <_malloc_r+0xf6>
 800b220:	f8d8 4000 	ldr.w	r4, [r8]
 800b224:	4627      	mov	r7, r4
 800b226:	2f00      	cmp	r7, #0
 800b228:	d143      	bne.n	800b2b2 <_malloc_r+0xd6>
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d04b      	beq.n	800b2c6 <_malloc_r+0xea>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	4639      	mov	r1, r7
 800b232:	4630      	mov	r0, r6
 800b234:	eb04 0903 	add.w	r9, r4, r3
 800b238:	f000 fc5a 	bl	800baf0 <_sbrk_r>
 800b23c:	4581      	cmp	r9, r0
 800b23e:	d142      	bne.n	800b2c6 <_malloc_r+0xea>
 800b240:	6821      	ldr	r1, [r4, #0]
 800b242:	1a6d      	subs	r5, r5, r1
 800b244:	4629      	mov	r1, r5
 800b246:	4630      	mov	r0, r6
 800b248:	f7ff ffa6 	bl	800b198 <sbrk_aligned>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d03a      	beq.n	800b2c6 <_malloc_r+0xea>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	442b      	add	r3, r5
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	f8d8 3000 	ldr.w	r3, [r8]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	bb62      	cbnz	r2, 800b2b8 <_malloc_r+0xdc>
 800b25e:	f8c8 7000 	str.w	r7, [r8]
 800b262:	e00f      	b.n	800b284 <_malloc_r+0xa8>
 800b264:	6822      	ldr	r2, [r4, #0]
 800b266:	1b52      	subs	r2, r2, r5
 800b268:	d420      	bmi.n	800b2ac <_malloc_r+0xd0>
 800b26a:	2a0b      	cmp	r2, #11
 800b26c:	d917      	bls.n	800b29e <_malloc_r+0xc2>
 800b26e:	1961      	adds	r1, r4, r5
 800b270:	42a3      	cmp	r3, r4
 800b272:	6025      	str	r5, [r4, #0]
 800b274:	bf18      	it	ne
 800b276:	6059      	strne	r1, [r3, #4]
 800b278:	6863      	ldr	r3, [r4, #4]
 800b27a:	bf08      	it	eq
 800b27c:	f8c8 1000 	streq.w	r1, [r8]
 800b280:	5162      	str	r2, [r4, r5]
 800b282:	604b      	str	r3, [r1, #4]
 800b284:	4630      	mov	r0, r6
 800b286:	f000 f82f 	bl	800b2e8 <__malloc_unlock>
 800b28a:	f104 000b 	add.w	r0, r4, #11
 800b28e:	1d23      	adds	r3, r4, #4
 800b290:	f020 0007 	bic.w	r0, r0, #7
 800b294:	1ac2      	subs	r2, r0, r3
 800b296:	bf1c      	itt	ne
 800b298:	1a1b      	subne	r3, r3, r0
 800b29a:	50a3      	strne	r3, [r4, r2]
 800b29c:	e7af      	b.n	800b1fe <_malloc_r+0x22>
 800b29e:	6862      	ldr	r2, [r4, #4]
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	bf0c      	ite	eq
 800b2a4:	f8c8 2000 	streq.w	r2, [r8]
 800b2a8:	605a      	strne	r2, [r3, #4]
 800b2aa:	e7eb      	b.n	800b284 <_malloc_r+0xa8>
 800b2ac:	4623      	mov	r3, r4
 800b2ae:	6864      	ldr	r4, [r4, #4]
 800b2b0:	e7ae      	b.n	800b210 <_malloc_r+0x34>
 800b2b2:	463c      	mov	r4, r7
 800b2b4:	687f      	ldr	r7, [r7, #4]
 800b2b6:	e7b6      	b.n	800b226 <_malloc_r+0x4a>
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d1fb      	bne.n	800b2b8 <_malloc_r+0xdc>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	6053      	str	r3, [r2, #4]
 800b2c4:	e7de      	b.n	800b284 <_malloc_r+0xa8>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	6033      	str	r3, [r6, #0]
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f000 f80c 	bl	800b2e8 <__malloc_unlock>
 800b2d0:	e794      	b.n	800b1fc <_malloc_r+0x20>
 800b2d2:	6005      	str	r5, [r0, #0]
 800b2d4:	e7d6      	b.n	800b284 <_malloc_r+0xa8>
 800b2d6:	bf00      	nop
 800b2d8:	20019730 	.word	0x20019730

0800b2dc <__malloc_lock>:
 800b2dc:	4801      	ldr	r0, [pc, #4]	@ (800b2e4 <__malloc_lock+0x8>)
 800b2de:	f7ff bf0e 	b.w	800b0fe <__retarget_lock_acquire_recursive>
 800b2e2:	bf00      	nop
 800b2e4:	20019728 	.word	0x20019728

0800b2e8 <__malloc_unlock>:
 800b2e8:	4801      	ldr	r0, [pc, #4]	@ (800b2f0 <__malloc_unlock+0x8>)
 800b2ea:	f7ff bf09 	b.w	800b100 <__retarget_lock_release_recursive>
 800b2ee:	bf00      	nop
 800b2f0:	20019728 	.word	0x20019728

0800b2f4 <__sfputc_r>:
 800b2f4:	6893      	ldr	r3, [r2, #8]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	b410      	push	{r4}
 800b2fc:	6093      	str	r3, [r2, #8]
 800b2fe:	da08      	bge.n	800b312 <__sfputc_r+0x1e>
 800b300:	6994      	ldr	r4, [r2, #24]
 800b302:	42a3      	cmp	r3, r4
 800b304:	db01      	blt.n	800b30a <__sfputc_r+0x16>
 800b306:	290a      	cmp	r1, #10
 800b308:	d103      	bne.n	800b312 <__sfputc_r+0x1e>
 800b30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b30e:	f7ff bde8 	b.w	800aee2 <__swbuf_r>
 800b312:	6813      	ldr	r3, [r2, #0]
 800b314:	1c58      	adds	r0, r3, #1
 800b316:	6010      	str	r0, [r2, #0]
 800b318:	7019      	strb	r1, [r3, #0]
 800b31a:	4608      	mov	r0, r1
 800b31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <__sfputs_r>:
 800b322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b324:	4606      	mov	r6, r0
 800b326:	460f      	mov	r7, r1
 800b328:	4614      	mov	r4, r2
 800b32a:	18d5      	adds	r5, r2, r3
 800b32c:	42ac      	cmp	r4, r5
 800b32e:	d101      	bne.n	800b334 <__sfputs_r+0x12>
 800b330:	2000      	movs	r0, #0
 800b332:	e007      	b.n	800b344 <__sfputs_r+0x22>
 800b334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b338:	463a      	mov	r2, r7
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff ffda 	bl	800b2f4 <__sfputc_r>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d1f3      	bne.n	800b32c <__sfputs_r+0xa>
 800b344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b348 <_vfiprintf_r>:
 800b348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	460d      	mov	r5, r1
 800b34e:	b09d      	sub	sp, #116	@ 0x74
 800b350:	4614      	mov	r4, r2
 800b352:	4698      	mov	r8, r3
 800b354:	4606      	mov	r6, r0
 800b356:	b118      	cbz	r0, 800b360 <_vfiprintf_r+0x18>
 800b358:	6a03      	ldr	r3, [r0, #32]
 800b35a:	b90b      	cbnz	r3, 800b360 <_vfiprintf_r+0x18>
 800b35c:	f7ff fcd8 	bl	800ad10 <__sinit>
 800b360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b362:	07d9      	lsls	r1, r3, #31
 800b364:	d405      	bmi.n	800b372 <_vfiprintf_r+0x2a>
 800b366:	89ab      	ldrh	r3, [r5, #12]
 800b368:	059a      	lsls	r2, r3, #22
 800b36a:	d402      	bmi.n	800b372 <_vfiprintf_r+0x2a>
 800b36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b36e:	f7ff fec6 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	071b      	lsls	r3, r3, #28
 800b376:	d501      	bpl.n	800b37c <_vfiprintf_r+0x34>
 800b378:	692b      	ldr	r3, [r5, #16]
 800b37a:	b99b      	cbnz	r3, 800b3a4 <_vfiprintf_r+0x5c>
 800b37c:	4629      	mov	r1, r5
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff fdee 	bl	800af60 <__swsetup_r>
 800b384:	b170      	cbz	r0, 800b3a4 <_vfiprintf_r+0x5c>
 800b386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b388:	07dc      	lsls	r4, r3, #31
 800b38a:	d504      	bpl.n	800b396 <_vfiprintf_r+0x4e>
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295
 800b390:	b01d      	add	sp, #116	@ 0x74
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b396:	89ab      	ldrh	r3, [r5, #12]
 800b398:	0598      	lsls	r0, r3, #22
 800b39a:	d4f7      	bmi.n	800b38c <_vfiprintf_r+0x44>
 800b39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b39e:	f7ff feaf 	bl	800b100 <__retarget_lock_release_recursive>
 800b3a2:	e7f3      	b.n	800b38c <_vfiprintf_r+0x44>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3a8:	2320      	movs	r3, #32
 800b3aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3b2:	2330      	movs	r3, #48	@ 0x30
 800b3b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b564 <_vfiprintf_r+0x21c>
 800b3b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3bc:	f04f 0901 	mov.w	r9, #1
 800b3c0:	4623      	mov	r3, r4
 800b3c2:	469a      	mov	sl, r3
 800b3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3c8:	b10a      	cbz	r2, 800b3ce <_vfiprintf_r+0x86>
 800b3ca:	2a25      	cmp	r2, #37	@ 0x25
 800b3cc:	d1f9      	bne.n	800b3c2 <_vfiprintf_r+0x7a>
 800b3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b3d2:	d00b      	beq.n	800b3ec <_vfiprintf_r+0xa4>
 800b3d4:	465b      	mov	r3, fp
 800b3d6:	4622      	mov	r2, r4
 800b3d8:	4629      	mov	r1, r5
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f7ff ffa1 	bl	800b322 <__sfputs_r>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	f000 80a7 	beq.w	800b534 <_vfiprintf_r+0x1ec>
 800b3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3e8:	445a      	add	r2, fp
 800b3ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 809f 	beq.w	800b534 <_vfiprintf_r+0x1ec>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b400:	f10a 0a01 	add.w	sl, sl, #1
 800b404:	9304      	str	r3, [sp, #16]
 800b406:	9307      	str	r3, [sp, #28]
 800b408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b40c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b40e:	4654      	mov	r4, sl
 800b410:	2205      	movs	r2, #5
 800b412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b416:	4853      	ldr	r0, [pc, #332]	@ (800b564 <_vfiprintf_r+0x21c>)
 800b418:	f7f4 feda 	bl	80001d0 <memchr>
 800b41c:	9a04      	ldr	r2, [sp, #16]
 800b41e:	b9d8      	cbnz	r0, 800b458 <_vfiprintf_r+0x110>
 800b420:	06d1      	lsls	r1, r2, #27
 800b422:	bf44      	itt	mi
 800b424:	2320      	movmi	r3, #32
 800b426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b42a:	0713      	lsls	r3, r2, #28
 800b42c:	bf44      	itt	mi
 800b42e:	232b      	movmi	r3, #43	@ 0x2b
 800b430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b434:	f89a 3000 	ldrb.w	r3, [sl]
 800b438:	2b2a      	cmp	r3, #42	@ 0x2a
 800b43a:	d015      	beq.n	800b468 <_vfiprintf_r+0x120>
 800b43c:	9a07      	ldr	r2, [sp, #28]
 800b43e:	4654      	mov	r4, sl
 800b440:	2000      	movs	r0, #0
 800b442:	f04f 0c0a 	mov.w	ip, #10
 800b446:	4621      	mov	r1, r4
 800b448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b44c:	3b30      	subs	r3, #48	@ 0x30
 800b44e:	2b09      	cmp	r3, #9
 800b450:	d94b      	bls.n	800b4ea <_vfiprintf_r+0x1a2>
 800b452:	b1b0      	cbz	r0, 800b482 <_vfiprintf_r+0x13a>
 800b454:	9207      	str	r2, [sp, #28]
 800b456:	e014      	b.n	800b482 <_vfiprintf_r+0x13a>
 800b458:	eba0 0308 	sub.w	r3, r0, r8
 800b45c:	fa09 f303 	lsl.w	r3, r9, r3
 800b460:	4313      	orrs	r3, r2
 800b462:	9304      	str	r3, [sp, #16]
 800b464:	46a2      	mov	sl, r4
 800b466:	e7d2      	b.n	800b40e <_vfiprintf_r+0xc6>
 800b468:	9b03      	ldr	r3, [sp, #12]
 800b46a:	1d19      	adds	r1, r3, #4
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	9103      	str	r1, [sp, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	bfbb      	ittet	lt
 800b474:	425b      	neglt	r3, r3
 800b476:	f042 0202 	orrlt.w	r2, r2, #2
 800b47a:	9307      	strge	r3, [sp, #28]
 800b47c:	9307      	strlt	r3, [sp, #28]
 800b47e:	bfb8      	it	lt
 800b480:	9204      	strlt	r2, [sp, #16]
 800b482:	7823      	ldrb	r3, [r4, #0]
 800b484:	2b2e      	cmp	r3, #46	@ 0x2e
 800b486:	d10a      	bne.n	800b49e <_vfiprintf_r+0x156>
 800b488:	7863      	ldrb	r3, [r4, #1]
 800b48a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b48c:	d132      	bne.n	800b4f4 <_vfiprintf_r+0x1ac>
 800b48e:	9b03      	ldr	r3, [sp, #12]
 800b490:	1d1a      	adds	r2, r3, #4
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	9203      	str	r2, [sp, #12]
 800b496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b49a:	3402      	adds	r4, #2
 800b49c:	9305      	str	r3, [sp, #20]
 800b49e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b574 <_vfiprintf_r+0x22c>
 800b4a2:	7821      	ldrb	r1, [r4, #0]
 800b4a4:	2203      	movs	r2, #3
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	f7f4 fe92 	bl	80001d0 <memchr>
 800b4ac:	b138      	cbz	r0, 800b4be <_vfiprintf_r+0x176>
 800b4ae:	9b04      	ldr	r3, [sp, #16]
 800b4b0:	eba0 000a 	sub.w	r0, r0, sl
 800b4b4:	2240      	movs	r2, #64	@ 0x40
 800b4b6:	4082      	lsls	r2, r0
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	3401      	adds	r4, #1
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c2:	4829      	ldr	r0, [pc, #164]	@ (800b568 <_vfiprintf_r+0x220>)
 800b4c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4c8:	2206      	movs	r2, #6
 800b4ca:	f7f4 fe81 	bl	80001d0 <memchr>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d03f      	beq.n	800b552 <_vfiprintf_r+0x20a>
 800b4d2:	4b26      	ldr	r3, [pc, #152]	@ (800b56c <_vfiprintf_r+0x224>)
 800b4d4:	bb1b      	cbnz	r3, 800b51e <_vfiprintf_r+0x1d6>
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	3307      	adds	r3, #7
 800b4da:	f023 0307 	bic.w	r3, r3, #7
 800b4de:	3308      	adds	r3, #8
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e4:	443b      	add	r3, r7
 800b4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4e8:	e76a      	b.n	800b3c0 <_vfiprintf_r+0x78>
 800b4ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	2001      	movs	r0, #1
 800b4f2:	e7a8      	b.n	800b446 <_vfiprintf_r+0xfe>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	3401      	adds	r4, #1
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	f04f 0c0a 	mov.w	ip, #10
 800b500:	4620      	mov	r0, r4
 800b502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b506:	3a30      	subs	r2, #48	@ 0x30
 800b508:	2a09      	cmp	r2, #9
 800b50a:	d903      	bls.n	800b514 <_vfiprintf_r+0x1cc>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0c6      	beq.n	800b49e <_vfiprintf_r+0x156>
 800b510:	9105      	str	r1, [sp, #20]
 800b512:	e7c4      	b.n	800b49e <_vfiprintf_r+0x156>
 800b514:	fb0c 2101 	mla	r1, ip, r1, r2
 800b518:	4604      	mov	r4, r0
 800b51a:	2301      	movs	r3, #1
 800b51c:	e7f0      	b.n	800b500 <_vfiprintf_r+0x1b8>
 800b51e:	ab03      	add	r3, sp, #12
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	462a      	mov	r2, r5
 800b524:	4b12      	ldr	r3, [pc, #72]	@ (800b570 <_vfiprintf_r+0x228>)
 800b526:	a904      	add	r1, sp, #16
 800b528:	4630      	mov	r0, r6
 800b52a:	f3af 8000 	nop.w
 800b52e:	4607      	mov	r7, r0
 800b530:	1c78      	adds	r0, r7, #1
 800b532:	d1d6      	bne.n	800b4e2 <_vfiprintf_r+0x19a>
 800b534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b536:	07d9      	lsls	r1, r3, #31
 800b538:	d405      	bmi.n	800b546 <_vfiprintf_r+0x1fe>
 800b53a:	89ab      	ldrh	r3, [r5, #12]
 800b53c:	059a      	lsls	r2, r3, #22
 800b53e:	d402      	bmi.n	800b546 <_vfiprintf_r+0x1fe>
 800b540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b542:	f7ff fddd 	bl	800b100 <__retarget_lock_release_recursive>
 800b546:	89ab      	ldrh	r3, [r5, #12]
 800b548:	065b      	lsls	r3, r3, #25
 800b54a:	f53f af1f 	bmi.w	800b38c <_vfiprintf_r+0x44>
 800b54e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b550:	e71e      	b.n	800b390 <_vfiprintf_r+0x48>
 800b552:	ab03      	add	r3, sp, #12
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	462a      	mov	r2, r5
 800b558:	4b05      	ldr	r3, [pc, #20]	@ (800b570 <_vfiprintf_r+0x228>)
 800b55a:	a904      	add	r1, sp, #16
 800b55c:	4630      	mov	r0, r6
 800b55e:	f000 f879 	bl	800b654 <_printf_i>
 800b562:	e7e4      	b.n	800b52e <_vfiprintf_r+0x1e6>
 800b564:	0800d2f8 	.word	0x0800d2f8
 800b568:	0800d302 	.word	0x0800d302
 800b56c:	00000000 	.word	0x00000000
 800b570:	0800b323 	.word	0x0800b323
 800b574:	0800d2fe 	.word	0x0800d2fe

0800b578 <_printf_common>:
 800b578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b57c:	4616      	mov	r6, r2
 800b57e:	4698      	mov	r8, r3
 800b580:	688a      	ldr	r2, [r1, #8]
 800b582:	690b      	ldr	r3, [r1, #16]
 800b584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b588:	4293      	cmp	r3, r2
 800b58a:	bfb8      	it	lt
 800b58c:	4613      	movlt	r3, r2
 800b58e:	6033      	str	r3, [r6, #0]
 800b590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b594:	4607      	mov	r7, r0
 800b596:	460c      	mov	r4, r1
 800b598:	b10a      	cbz	r2, 800b59e <_printf_common+0x26>
 800b59a:	3301      	adds	r3, #1
 800b59c:	6033      	str	r3, [r6, #0]
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	0699      	lsls	r1, r3, #26
 800b5a2:	bf42      	ittt	mi
 800b5a4:	6833      	ldrmi	r3, [r6, #0]
 800b5a6:	3302      	addmi	r3, #2
 800b5a8:	6033      	strmi	r3, [r6, #0]
 800b5aa:	6825      	ldr	r5, [r4, #0]
 800b5ac:	f015 0506 	ands.w	r5, r5, #6
 800b5b0:	d106      	bne.n	800b5c0 <_printf_common+0x48>
 800b5b2:	f104 0a19 	add.w	sl, r4, #25
 800b5b6:	68e3      	ldr	r3, [r4, #12]
 800b5b8:	6832      	ldr	r2, [r6, #0]
 800b5ba:	1a9b      	subs	r3, r3, r2
 800b5bc:	42ab      	cmp	r3, r5
 800b5be:	dc26      	bgt.n	800b60e <_printf_common+0x96>
 800b5c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5c4:	6822      	ldr	r2, [r4, #0]
 800b5c6:	3b00      	subs	r3, #0
 800b5c8:	bf18      	it	ne
 800b5ca:	2301      	movne	r3, #1
 800b5cc:	0692      	lsls	r2, r2, #26
 800b5ce:	d42b      	bmi.n	800b628 <_printf_common+0xb0>
 800b5d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c8      	blx	r9
 800b5da:	3001      	adds	r0, #1
 800b5dc:	d01e      	beq.n	800b61c <_printf_common+0xa4>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	6922      	ldr	r2, [r4, #16]
 800b5e2:	f003 0306 	and.w	r3, r3, #6
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	bf02      	ittt	eq
 800b5ea:	68e5      	ldreq	r5, [r4, #12]
 800b5ec:	6833      	ldreq	r3, [r6, #0]
 800b5ee:	1aed      	subeq	r5, r5, r3
 800b5f0:	68a3      	ldr	r3, [r4, #8]
 800b5f2:	bf0c      	ite	eq
 800b5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5f8:	2500      	movne	r5, #0
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	bfc4      	itt	gt
 800b5fe:	1a9b      	subgt	r3, r3, r2
 800b600:	18ed      	addgt	r5, r5, r3
 800b602:	2600      	movs	r6, #0
 800b604:	341a      	adds	r4, #26
 800b606:	42b5      	cmp	r5, r6
 800b608:	d11a      	bne.n	800b640 <_printf_common+0xc8>
 800b60a:	2000      	movs	r0, #0
 800b60c:	e008      	b.n	800b620 <_printf_common+0xa8>
 800b60e:	2301      	movs	r3, #1
 800b610:	4652      	mov	r2, sl
 800b612:	4641      	mov	r1, r8
 800b614:	4638      	mov	r0, r7
 800b616:	47c8      	blx	r9
 800b618:	3001      	adds	r0, #1
 800b61a:	d103      	bne.n	800b624 <_printf_common+0xac>
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295
 800b620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b624:	3501      	adds	r5, #1
 800b626:	e7c6      	b.n	800b5b6 <_printf_common+0x3e>
 800b628:	18e1      	adds	r1, r4, r3
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	2030      	movs	r0, #48	@ 0x30
 800b62e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b632:	4422      	add	r2, r4
 800b634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b63c:	3302      	adds	r3, #2
 800b63e:	e7c7      	b.n	800b5d0 <_printf_common+0x58>
 800b640:	2301      	movs	r3, #1
 800b642:	4622      	mov	r2, r4
 800b644:	4641      	mov	r1, r8
 800b646:	4638      	mov	r0, r7
 800b648:	47c8      	blx	r9
 800b64a:	3001      	adds	r0, #1
 800b64c:	d0e6      	beq.n	800b61c <_printf_common+0xa4>
 800b64e:	3601      	adds	r6, #1
 800b650:	e7d9      	b.n	800b606 <_printf_common+0x8e>
	...

0800b654 <_printf_i>:
 800b654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	7e0f      	ldrb	r7, [r1, #24]
 800b65a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b65c:	2f78      	cmp	r7, #120	@ 0x78
 800b65e:	4691      	mov	r9, r2
 800b660:	4680      	mov	r8, r0
 800b662:	460c      	mov	r4, r1
 800b664:	469a      	mov	sl, r3
 800b666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b66a:	d807      	bhi.n	800b67c <_printf_i+0x28>
 800b66c:	2f62      	cmp	r7, #98	@ 0x62
 800b66e:	d80a      	bhi.n	800b686 <_printf_i+0x32>
 800b670:	2f00      	cmp	r7, #0
 800b672:	f000 80d1 	beq.w	800b818 <_printf_i+0x1c4>
 800b676:	2f58      	cmp	r7, #88	@ 0x58
 800b678:	f000 80b8 	beq.w	800b7ec <_printf_i+0x198>
 800b67c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b684:	e03a      	b.n	800b6fc <_printf_i+0xa8>
 800b686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b68a:	2b15      	cmp	r3, #21
 800b68c:	d8f6      	bhi.n	800b67c <_printf_i+0x28>
 800b68e:	a101      	add	r1, pc, #4	@ (adr r1, 800b694 <_printf_i+0x40>)
 800b690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b694:	0800b6ed 	.word	0x0800b6ed
 800b698:	0800b701 	.word	0x0800b701
 800b69c:	0800b67d 	.word	0x0800b67d
 800b6a0:	0800b67d 	.word	0x0800b67d
 800b6a4:	0800b67d 	.word	0x0800b67d
 800b6a8:	0800b67d 	.word	0x0800b67d
 800b6ac:	0800b701 	.word	0x0800b701
 800b6b0:	0800b67d 	.word	0x0800b67d
 800b6b4:	0800b67d 	.word	0x0800b67d
 800b6b8:	0800b67d 	.word	0x0800b67d
 800b6bc:	0800b67d 	.word	0x0800b67d
 800b6c0:	0800b7ff 	.word	0x0800b7ff
 800b6c4:	0800b72b 	.word	0x0800b72b
 800b6c8:	0800b7b9 	.word	0x0800b7b9
 800b6cc:	0800b67d 	.word	0x0800b67d
 800b6d0:	0800b67d 	.word	0x0800b67d
 800b6d4:	0800b821 	.word	0x0800b821
 800b6d8:	0800b67d 	.word	0x0800b67d
 800b6dc:	0800b72b 	.word	0x0800b72b
 800b6e0:	0800b67d 	.word	0x0800b67d
 800b6e4:	0800b67d 	.word	0x0800b67d
 800b6e8:	0800b7c1 	.word	0x0800b7c1
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6032      	str	r2, [r6, #0]
 800b6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e09c      	b.n	800b83a <_printf_i+0x1e6>
 800b700:	6833      	ldr	r3, [r6, #0]
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	1d19      	adds	r1, r3, #4
 800b706:	6031      	str	r1, [r6, #0]
 800b708:	0606      	lsls	r6, r0, #24
 800b70a:	d501      	bpl.n	800b710 <_printf_i+0xbc>
 800b70c:	681d      	ldr	r5, [r3, #0]
 800b70e:	e003      	b.n	800b718 <_printf_i+0xc4>
 800b710:	0645      	lsls	r5, r0, #25
 800b712:	d5fb      	bpl.n	800b70c <_printf_i+0xb8>
 800b714:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b718:	2d00      	cmp	r5, #0
 800b71a:	da03      	bge.n	800b724 <_printf_i+0xd0>
 800b71c:	232d      	movs	r3, #45	@ 0x2d
 800b71e:	426d      	negs	r5, r5
 800b720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b724:	4858      	ldr	r0, [pc, #352]	@ (800b888 <_printf_i+0x234>)
 800b726:	230a      	movs	r3, #10
 800b728:	e011      	b.n	800b74e <_printf_i+0xfa>
 800b72a:	6821      	ldr	r1, [r4, #0]
 800b72c:	6833      	ldr	r3, [r6, #0]
 800b72e:	0608      	lsls	r0, r1, #24
 800b730:	f853 5b04 	ldr.w	r5, [r3], #4
 800b734:	d402      	bmi.n	800b73c <_printf_i+0xe8>
 800b736:	0649      	lsls	r1, r1, #25
 800b738:	bf48      	it	mi
 800b73a:	b2ad      	uxthmi	r5, r5
 800b73c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b73e:	4852      	ldr	r0, [pc, #328]	@ (800b888 <_printf_i+0x234>)
 800b740:	6033      	str	r3, [r6, #0]
 800b742:	bf14      	ite	ne
 800b744:	230a      	movne	r3, #10
 800b746:	2308      	moveq	r3, #8
 800b748:	2100      	movs	r1, #0
 800b74a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b74e:	6866      	ldr	r6, [r4, #4]
 800b750:	60a6      	str	r6, [r4, #8]
 800b752:	2e00      	cmp	r6, #0
 800b754:	db05      	blt.n	800b762 <_printf_i+0x10e>
 800b756:	6821      	ldr	r1, [r4, #0]
 800b758:	432e      	orrs	r6, r5
 800b75a:	f021 0104 	bic.w	r1, r1, #4
 800b75e:	6021      	str	r1, [r4, #0]
 800b760:	d04b      	beq.n	800b7fa <_printf_i+0x1a6>
 800b762:	4616      	mov	r6, r2
 800b764:	fbb5 f1f3 	udiv	r1, r5, r3
 800b768:	fb03 5711 	mls	r7, r3, r1, r5
 800b76c:	5dc7      	ldrb	r7, [r0, r7]
 800b76e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b772:	462f      	mov	r7, r5
 800b774:	42bb      	cmp	r3, r7
 800b776:	460d      	mov	r5, r1
 800b778:	d9f4      	bls.n	800b764 <_printf_i+0x110>
 800b77a:	2b08      	cmp	r3, #8
 800b77c:	d10b      	bne.n	800b796 <_printf_i+0x142>
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	07df      	lsls	r7, r3, #31
 800b782:	d508      	bpl.n	800b796 <_printf_i+0x142>
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	6861      	ldr	r1, [r4, #4]
 800b788:	4299      	cmp	r1, r3
 800b78a:	bfde      	ittt	le
 800b78c:	2330      	movle	r3, #48	@ 0x30
 800b78e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b792:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b796:	1b92      	subs	r2, r2, r6
 800b798:	6122      	str	r2, [r4, #16]
 800b79a:	f8cd a000 	str.w	sl, [sp]
 800b79e:	464b      	mov	r3, r9
 800b7a0:	aa03      	add	r2, sp, #12
 800b7a2:	4621      	mov	r1, r4
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	f7ff fee7 	bl	800b578 <_printf_common>
 800b7aa:	3001      	adds	r0, #1
 800b7ac:	d14a      	bne.n	800b844 <_printf_i+0x1f0>
 800b7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b2:	b004      	add	sp, #16
 800b7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b8:	6823      	ldr	r3, [r4, #0]
 800b7ba:	f043 0320 	orr.w	r3, r3, #32
 800b7be:	6023      	str	r3, [r4, #0]
 800b7c0:	4832      	ldr	r0, [pc, #200]	@ (800b88c <_printf_i+0x238>)
 800b7c2:	2778      	movs	r7, #120	@ 0x78
 800b7c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	6831      	ldr	r1, [r6, #0]
 800b7cc:	061f      	lsls	r7, r3, #24
 800b7ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7d2:	d402      	bmi.n	800b7da <_printf_i+0x186>
 800b7d4:	065f      	lsls	r7, r3, #25
 800b7d6:	bf48      	it	mi
 800b7d8:	b2ad      	uxthmi	r5, r5
 800b7da:	6031      	str	r1, [r6, #0]
 800b7dc:	07d9      	lsls	r1, r3, #31
 800b7de:	bf44      	itt	mi
 800b7e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b7e4:	6023      	strmi	r3, [r4, #0]
 800b7e6:	b11d      	cbz	r5, 800b7f0 <_printf_i+0x19c>
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	e7ad      	b.n	800b748 <_printf_i+0xf4>
 800b7ec:	4826      	ldr	r0, [pc, #152]	@ (800b888 <_printf_i+0x234>)
 800b7ee:	e7e9      	b.n	800b7c4 <_printf_i+0x170>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	f023 0320 	bic.w	r3, r3, #32
 800b7f6:	6023      	str	r3, [r4, #0]
 800b7f8:	e7f6      	b.n	800b7e8 <_printf_i+0x194>
 800b7fa:	4616      	mov	r6, r2
 800b7fc:	e7bd      	b.n	800b77a <_printf_i+0x126>
 800b7fe:	6833      	ldr	r3, [r6, #0]
 800b800:	6825      	ldr	r5, [r4, #0]
 800b802:	6961      	ldr	r1, [r4, #20]
 800b804:	1d18      	adds	r0, r3, #4
 800b806:	6030      	str	r0, [r6, #0]
 800b808:	062e      	lsls	r6, r5, #24
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	d501      	bpl.n	800b812 <_printf_i+0x1be>
 800b80e:	6019      	str	r1, [r3, #0]
 800b810:	e002      	b.n	800b818 <_printf_i+0x1c4>
 800b812:	0668      	lsls	r0, r5, #25
 800b814:	d5fb      	bpl.n	800b80e <_printf_i+0x1ba>
 800b816:	8019      	strh	r1, [r3, #0]
 800b818:	2300      	movs	r3, #0
 800b81a:	6123      	str	r3, [r4, #16]
 800b81c:	4616      	mov	r6, r2
 800b81e:	e7bc      	b.n	800b79a <_printf_i+0x146>
 800b820:	6833      	ldr	r3, [r6, #0]
 800b822:	1d1a      	adds	r2, r3, #4
 800b824:	6032      	str	r2, [r6, #0]
 800b826:	681e      	ldr	r6, [r3, #0]
 800b828:	6862      	ldr	r2, [r4, #4]
 800b82a:	2100      	movs	r1, #0
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7f4 fccf 	bl	80001d0 <memchr>
 800b832:	b108      	cbz	r0, 800b838 <_printf_i+0x1e4>
 800b834:	1b80      	subs	r0, r0, r6
 800b836:	6060      	str	r0, [r4, #4]
 800b838:	6863      	ldr	r3, [r4, #4]
 800b83a:	6123      	str	r3, [r4, #16]
 800b83c:	2300      	movs	r3, #0
 800b83e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b842:	e7aa      	b.n	800b79a <_printf_i+0x146>
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	4632      	mov	r2, r6
 800b848:	4649      	mov	r1, r9
 800b84a:	4640      	mov	r0, r8
 800b84c:	47d0      	blx	sl
 800b84e:	3001      	adds	r0, #1
 800b850:	d0ad      	beq.n	800b7ae <_printf_i+0x15a>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	079b      	lsls	r3, r3, #30
 800b856:	d413      	bmi.n	800b880 <_printf_i+0x22c>
 800b858:	68e0      	ldr	r0, [r4, #12]
 800b85a:	9b03      	ldr	r3, [sp, #12]
 800b85c:	4298      	cmp	r0, r3
 800b85e:	bfb8      	it	lt
 800b860:	4618      	movlt	r0, r3
 800b862:	e7a6      	b.n	800b7b2 <_printf_i+0x15e>
 800b864:	2301      	movs	r3, #1
 800b866:	4632      	mov	r2, r6
 800b868:	4649      	mov	r1, r9
 800b86a:	4640      	mov	r0, r8
 800b86c:	47d0      	blx	sl
 800b86e:	3001      	adds	r0, #1
 800b870:	d09d      	beq.n	800b7ae <_printf_i+0x15a>
 800b872:	3501      	adds	r5, #1
 800b874:	68e3      	ldr	r3, [r4, #12]
 800b876:	9903      	ldr	r1, [sp, #12]
 800b878:	1a5b      	subs	r3, r3, r1
 800b87a:	42ab      	cmp	r3, r5
 800b87c:	dcf2      	bgt.n	800b864 <_printf_i+0x210>
 800b87e:	e7eb      	b.n	800b858 <_printf_i+0x204>
 800b880:	2500      	movs	r5, #0
 800b882:	f104 0619 	add.w	r6, r4, #25
 800b886:	e7f5      	b.n	800b874 <_printf_i+0x220>
 800b888:	0800d309 	.word	0x0800d309
 800b88c:	0800d31a 	.word	0x0800d31a

0800b890 <__sflush_r>:
 800b890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b898:	0716      	lsls	r6, r2, #28
 800b89a:	4605      	mov	r5, r0
 800b89c:	460c      	mov	r4, r1
 800b89e:	d454      	bmi.n	800b94a <__sflush_r+0xba>
 800b8a0:	684b      	ldr	r3, [r1, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dc02      	bgt.n	800b8ac <__sflush_r+0x1c>
 800b8a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	dd48      	ble.n	800b93e <__sflush_r+0xae>
 800b8ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8ae:	2e00      	cmp	r6, #0
 800b8b0:	d045      	beq.n	800b93e <__sflush_r+0xae>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8b8:	682f      	ldr	r7, [r5, #0]
 800b8ba:	6a21      	ldr	r1, [r4, #32]
 800b8bc:	602b      	str	r3, [r5, #0]
 800b8be:	d030      	beq.n	800b922 <__sflush_r+0x92>
 800b8c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	0759      	lsls	r1, r3, #29
 800b8c6:	d505      	bpl.n	800b8d4 <__sflush_r+0x44>
 800b8c8:	6863      	ldr	r3, [r4, #4]
 800b8ca:	1ad2      	subs	r2, r2, r3
 800b8cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8ce:	b10b      	cbz	r3, 800b8d4 <__sflush_r+0x44>
 800b8d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8d2:	1ad2      	subs	r2, r2, r3
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8d8:	6a21      	ldr	r1, [r4, #32]
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47b0      	blx	r6
 800b8de:	1c43      	adds	r3, r0, #1
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	d106      	bne.n	800b8f2 <__sflush_r+0x62>
 800b8e4:	6829      	ldr	r1, [r5, #0]
 800b8e6:	291d      	cmp	r1, #29
 800b8e8:	d82b      	bhi.n	800b942 <__sflush_r+0xb2>
 800b8ea:	4a2a      	ldr	r2, [pc, #168]	@ (800b994 <__sflush_r+0x104>)
 800b8ec:	40ca      	lsrs	r2, r1
 800b8ee:	07d6      	lsls	r6, r2, #31
 800b8f0:	d527      	bpl.n	800b942 <__sflush_r+0xb2>
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	6062      	str	r2, [r4, #4]
 800b8f6:	04d9      	lsls	r1, r3, #19
 800b8f8:	6922      	ldr	r2, [r4, #16]
 800b8fa:	6022      	str	r2, [r4, #0]
 800b8fc:	d504      	bpl.n	800b908 <__sflush_r+0x78>
 800b8fe:	1c42      	adds	r2, r0, #1
 800b900:	d101      	bne.n	800b906 <__sflush_r+0x76>
 800b902:	682b      	ldr	r3, [r5, #0]
 800b904:	b903      	cbnz	r3, 800b908 <__sflush_r+0x78>
 800b906:	6560      	str	r0, [r4, #84]	@ 0x54
 800b908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b90a:	602f      	str	r7, [r5, #0]
 800b90c:	b1b9      	cbz	r1, 800b93e <__sflush_r+0xae>
 800b90e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b912:	4299      	cmp	r1, r3
 800b914:	d002      	beq.n	800b91c <__sflush_r+0x8c>
 800b916:	4628      	mov	r0, r5
 800b918:	f7ff fbf4 	bl	800b104 <_free_r>
 800b91c:	2300      	movs	r3, #0
 800b91e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b920:	e00d      	b.n	800b93e <__sflush_r+0xae>
 800b922:	2301      	movs	r3, #1
 800b924:	4628      	mov	r0, r5
 800b926:	47b0      	blx	r6
 800b928:	4602      	mov	r2, r0
 800b92a:	1c50      	adds	r0, r2, #1
 800b92c:	d1c9      	bne.n	800b8c2 <__sflush_r+0x32>
 800b92e:	682b      	ldr	r3, [r5, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0c6      	beq.n	800b8c2 <__sflush_r+0x32>
 800b934:	2b1d      	cmp	r3, #29
 800b936:	d001      	beq.n	800b93c <__sflush_r+0xac>
 800b938:	2b16      	cmp	r3, #22
 800b93a:	d11e      	bne.n	800b97a <__sflush_r+0xea>
 800b93c:	602f      	str	r7, [r5, #0]
 800b93e:	2000      	movs	r0, #0
 800b940:	e022      	b.n	800b988 <__sflush_r+0xf8>
 800b942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b946:	b21b      	sxth	r3, r3
 800b948:	e01b      	b.n	800b982 <__sflush_r+0xf2>
 800b94a:	690f      	ldr	r7, [r1, #16]
 800b94c:	2f00      	cmp	r7, #0
 800b94e:	d0f6      	beq.n	800b93e <__sflush_r+0xae>
 800b950:	0793      	lsls	r3, r2, #30
 800b952:	680e      	ldr	r6, [r1, #0]
 800b954:	bf08      	it	eq
 800b956:	694b      	ldreq	r3, [r1, #20]
 800b958:	600f      	str	r7, [r1, #0]
 800b95a:	bf18      	it	ne
 800b95c:	2300      	movne	r3, #0
 800b95e:	eba6 0807 	sub.w	r8, r6, r7
 800b962:	608b      	str	r3, [r1, #8]
 800b964:	f1b8 0f00 	cmp.w	r8, #0
 800b968:	dde9      	ble.n	800b93e <__sflush_r+0xae>
 800b96a:	6a21      	ldr	r1, [r4, #32]
 800b96c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b96e:	4643      	mov	r3, r8
 800b970:	463a      	mov	r2, r7
 800b972:	4628      	mov	r0, r5
 800b974:	47b0      	blx	r6
 800b976:	2800      	cmp	r0, #0
 800b978:	dc08      	bgt.n	800b98c <__sflush_r+0xfc>
 800b97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b97e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b982:	81a3      	strh	r3, [r4, #12]
 800b984:	f04f 30ff 	mov.w	r0, #4294967295
 800b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b98c:	4407      	add	r7, r0
 800b98e:	eba8 0800 	sub.w	r8, r8, r0
 800b992:	e7e7      	b.n	800b964 <__sflush_r+0xd4>
 800b994:	20400001 	.word	0x20400001

0800b998 <_fflush_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	690b      	ldr	r3, [r1, #16]
 800b99c:	4605      	mov	r5, r0
 800b99e:	460c      	mov	r4, r1
 800b9a0:	b913      	cbnz	r3, 800b9a8 <_fflush_r+0x10>
 800b9a2:	2500      	movs	r5, #0
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	bd38      	pop	{r3, r4, r5, pc}
 800b9a8:	b118      	cbz	r0, 800b9b2 <_fflush_r+0x1a>
 800b9aa:	6a03      	ldr	r3, [r0, #32]
 800b9ac:	b90b      	cbnz	r3, 800b9b2 <_fflush_r+0x1a>
 800b9ae:	f7ff f9af 	bl	800ad10 <__sinit>
 800b9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d0f3      	beq.n	800b9a2 <_fflush_r+0xa>
 800b9ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9bc:	07d0      	lsls	r0, r2, #31
 800b9be:	d404      	bmi.n	800b9ca <_fflush_r+0x32>
 800b9c0:	0599      	lsls	r1, r3, #22
 800b9c2:	d402      	bmi.n	800b9ca <_fflush_r+0x32>
 800b9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9c6:	f7ff fb9a 	bl	800b0fe <__retarget_lock_acquire_recursive>
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	f7ff ff5f 	bl	800b890 <__sflush_r>
 800b9d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9d4:	07da      	lsls	r2, r3, #31
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	d4e4      	bmi.n	800b9a4 <_fflush_r+0xc>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	059b      	lsls	r3, r3, #22
 800b9de:	d4e1      	bmi.n	800b9a4 <_fflush_r+0xc>
 800b9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9e2:	f7ff fb8d 	bl	800b100 <__retarget_lock_release_recursive>
 800b9e6:	e7dd      	b.n	800b9a4 <_fflush_r+0xc>

0800b9e8 <__swhatbuf_r>:
 800b9e8:	b570      	push	{r4, r5, r6, lr}
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f0:	2900      	cmp	r1, #0
 800b9f2:	b096      	sub	sp, #88	@ 0x58
 800b9f4:	4615      	mov	r5, r2
 800b9f6:	461e      	mov	r6, r3
 800b9f8:	da0d      	bge.n	800ba16 <__swhatbuf_r+0x2e>
 800b9fa:	89a3      	ldrh	r3, [r4, #12]
 800b9fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba00:	f04f 0100 	mov.w	r1, #0
 800ba04:	bf14      	ite	ne
 800ba06:	2340      	movne	r3, #64	@ 0x40
 800ba08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	6031      	str	r1, [r6, #0]
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	b016      	add	sp, #88	@ 0x58
 800ba14:	bd70      	pop	{r4, r5, r6, pc}
 800ba16:	466a      	mov	r2, sp
 800ba18:	f000 f848 	bl	800baac <_fstat_r>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	dbec      	blt.n	800b9fa <__swhatbuf_r+0x12>
 800ba20:	9901      	ldr	r1, [sp, #4]
 800ba22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba2a:	4259      	negs	r1, r3
 800ba2c:	4159      	adcs	r1, r3
 800ba2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba32:	e7eb      	b.n	800ba0c <__swhatbuf_r+0x24>

0800ba34 <__smakebuf_r>:
 800ba34:	898b      	ldrh	r3, [r1, #12]
 800ba36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba38:	079d      	lsls	r5, r3, #30
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	d507      	bpl.n	800ba50 <__smakebuf_r+0x1c>
 800ba40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	2301      	movs	r3, #1
 800ba4a:	6163      	str	r3, [r4, #20]
 800ba4c:	b003      	add	sp, #12
 800ba4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba50:	ab01      	add	r3, sp, #4
 800ba52:	466a      	mov	r2, sp
 800ba54:	f7ff ffc8 	bl	800b9e8 <__swhatbuf_r>
 800ba58:	9f00      	ldr	r7, [sp, #0]
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f7ff fbbc 	bl	800b1dc <_malloc_r>
 800ba64:	b948      	cbnz	r0, 800ba7a <__smakebuf_r+0x46>
 800ba66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba6a:	059a      	lsls	r2, r3, #22
 800ba6c:	d4ee      	bmi.n	800ba4c <__smakebuf_r+0x18>
 800ba6e:	f023 0303 	bic.w	r3, r3, #3
 800ba72:	f043 0302 	orr.w	r3, r3, #2
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	e7e2      	b.n	800ba40 <__smakebuf_r+0xc>
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	6020      	str	r0, [r4, #0]
 800ba7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba82:	81a3      	strh	r3, [r4, #12]
 800ba84:	9b01      	ldr	r3, [sp, #4]
 800ba86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba8a:	b15b      	cbz	r3, 800baa4 <__smakebuf_r+0x70>
 800ba8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba90:	4630      	mov	r0, r6
 800ba92:	f000 f81d 	bl	800bad0 <_isatty_r>
 800ba96:	b128      	cbz	r0, 800baa4 <__smakebuf_r+0x70>
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	f023 0303 	bic.w	r3, r3, #3
 800ba9e:	f043 0301 	orr.w	r3, r3, #1
 800baa2:	81a3      	strh	r3, [r4, #12]
 800baa4:	89a3      	ldrh	r3, [r4, #12]
 800baa6:	431d      	orrs	r5, r3
 800baa8:	81a5      	strh	r5, [r4, #12]
 800baaa:	e7cf      	b.n	800ba4c <__smakebuf_r+0x18>

0800baac <_fstat_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d07      	ldr	r5, [pc, #28]	@ (800bacc <_fstat_r+0x20>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	f7f6 fb22 	bl	8002102 <_fstat>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d102      	bne.n	800bac8 <_fstat_r+0x1c>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	b103      	cbz	r3, 800bac8 <_fstat_r+0x1c>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	20019724 	.word	0x20019724

0800bad0 <_isatty_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d06      	ldr	r5, [pc, #24]	@ (800baec <_isatty_r+0x1c>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f6 fb21 	bl	8002122 <_isatty>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_isatty_r+0x1a>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_isatty_r+0x1a>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	20019724 	.word	0x20019724

0800baf0 <_sbrk_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d06      	ldr	r5, [pc, #24]	@ (800bb0c <_sbrk_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f6 fb2a 	bl	8002154 <_sbrk>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_sbrk_r+0x1a>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_sbrk_r+0x1a>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	20019724 	.word	0x20019724

0800bb10 <pow>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	ed2d 8b02 	vpush	{d8}
 800bb16:	eeb0 8a40 	vmov.f32	s16, s0
 800bb1a:	eef0 8a60 	vmov.f32	s17, s1
 800bb1e:	ec55 4b11 	vmov	r4, r5, d1
 800bb22:	f000 f871 	bl	800bc08 <__ieee754_pow>
 800bb26:	4622      	mov	r2, r4
 800bb28:	462b      	mov	r3, r5
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	ec57 6b10 	vmov	r6, r7, d0
 800bb32:	f7f4 fff3 	bl	8000b1c <__aeabi_dcmpun>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d13b      	bne.n	800bbb2 <pow+0xa2>
 800bb3a:	ec51 0b18 	vmov	r0, r1, d8
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2300      	movs	r3, #0
 800bb42:	f7f4 ffb9 	bl	8000ab8 <__aeabi_dcmpeq>
 800bb46:	b1b8      	cbz	r0, 800bb78 <pow+0x68>
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7f4 ffb2 	bl	8000ab8 <__aeabi_dcmpeq>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d146      	bne.n	800bbe6 <pow+0xd6>
 800bb58:	ec45 4b10 	vmov	d0, r4, r5
 800bb5c:	f000 f848 	bl	800bbf0 <finite>
 800bb60:	b338      	cbz	r0, 800bbb2 <pow+0xa2>
 800bb62:	2200      	movs	r2, #0
 800bb64:	2300      	movs	r3, #0
 800bb66:	4620      	mov	r0, r4
 800bb68:	4629      	mov	r1, r5
 800bb6a:	f7f4 ffaf 	bl	8000acc <__aeabi_dcmplt>
 800bb6e:	b300      	cbz	r0, 800bbb2 <pow+0xa2>
 800bb70:	f7ff fa9a 	bl	800b0a8 <__errno>
 800bb74:	2322      	movs	r3, #34	@ 0x22
 800bb76:	e01b      	b.n	800bbb0 <pow+0xa0>
 800bb78:	ec47 6b10 	vmov	d0, r6, r7
 800bb7c:	f000 f838 	bl	800bbf0 <finite>
 800bb80:	b9e0      	cbnz	r0, 800bbbc <pow+0xac>
 800bb82:	eeb0 0a48 	vmov.f32	s0, s16
 800bb86:	eef0 0a68 	vmov.f32	s1, s17
 800bb8a:	f000 f831 	bl	800bbf0 <finite>
 800bb8e:	b1a8      	cbz	r0, 800bbbc <pow+0xac>
 800bb90:	ec45 4b10 	vmov	d0, r4, r5
 800bb94:	f000 f82c 	bl	800bbf0 <finite>
 800bb98:	b180      	cbz	r0, 800bbbc <pow+0xac>
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	4630      	mov	r0, r6
 800bba0:	4639      	mov	r1, r7
 800bba2:	f7f4 ffbb 	bl	8000b1c <__aeabi_dcmpun>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d0e2      	beq.n	800bb70 <pow+0x60>
 800bbaa:	f7ff fa7d 	bl	800b0a8 <__errno>
 800bbae:	2321      	movs	r3, #33	@ 0x21
 800bbb0:	6003      	str	r3, [r0, #0]
 800bbb2:	ecbd 8b02 	vpop	{d8}
 800bbb6:	ec47 6b10 	vmov	d0, r6, r7
 800bbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 ff78 	bl	8000ab8 <__aeabi_dcmpeq>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d0f2      	beq.n	800bbb2 <pow+0xa2>
 800bbcc:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd0:	eef0 0a68 	vmov.f32	s1, s17
 800bbd4:	f000 f80c 	bl	800bbf0 <finite>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d0ea      	beq.n	800bbb2 <pow+0xa2>
 800bbdc:	ec45 4b10 	vmov	d0, r4, r5
 800bbe0:	f000 f806 	bl	800bbf0 <finite>
 800bbe4:	e7c3      	b.n	800bb6e <pow+0x5e>
 800bbe6:	4f01      	ldr	r7, [pc, #4]	@ (800bbec <pow+0xdc>)
 800bbe8:	2600      	movs	r6, #0
 800bbea:	e7e2      	b.n	800bbb2 <pow+0xa2>
 800bbec:	3ff00000 	.word	0x3ff00000

0800bbf0 <finite>:
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	ed8d 0b00 	vstr	d0, [sp]
 800bbf6:	9801      	ldr	r0, [sp, #4]
 800bbf8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bbfc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bc00:	0fc0      	lsrs	r0, r0, #31
 800bc02:	b002      	add	sp, #8
 800bc04:	4770      	bx	lr
	...

0800bc08 <__ieee754_pow>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	b091      	sub	sp, #68	@ 0x44
 800bc0e:	ed8d 1b00 	vstr	d1, [sp]
 800bc12:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bc16:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bc1a:	ea5a 0001 	orrs.w	r0, sl, r1
 800bc1e:	ec57 6b10 	vmov	r6, r7, d0
 800bc22:	d113      	bne.n	800bc4c <__ieee754_pow+0x44>
 800bc24:	19b3      	adds	r3, r6, r6
 800bc26:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bc2a:	4152      	adcs	r2, r2
 800bc2c:	4298      	cmp	r0, r3
 800bc2e:	4b9a      	ldr	r3, [pc, #616]	@ (800be98 <__ieee754_pow+0x290>)
 800bc30:	4193      	sbcs	r3, r2
 800bc32:	f080 84ee 	bcs.w	800c612 <__ieee754_pow+0xa0a>
 800bc36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 fb1d 	bl	800027c <__adddf3>
 800bc42:	ec41 0b10 	vmov	d0, r0, r1
 800bc46:	b011      	add	sp, #68	@ 0x44
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	4a93      	ldr	r2, [pc, #588]	@ (800be9c <__ieee754_pow+0x294>)
 800bc4e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800bc52:	4295      	cmp	r5, r2
 800bc54:	46b8      	mov	r8, r7
 800bc56:	4633      	mov	r3, r6
 800bc58:	d80a      	bhi.n	800bc70 <__ieee754_pow+0x68>
 800bc5a:	d104      	bne.n	800bc66 <__ieee754_pow+0x5e>
 800bc5c:	2e00      	cmp	r6, #0
 800bc5e:	d1ea      	bne.n	800bc36 <__ieee754_pow+0x2e>
 800bc60:	45aa      	cmp	sl, r5
 800bc62:	d8e8      	bhi.n	800bc36 <__ieee754_pow+0x2e>
 800bc64:	e001      	b.n	800bc6a <__ieee754_pow+0x62>
 800bc66:	4592      	cmp	sl, r2
 800bc68:	d802      	bhi.n	800bc70 <__ieee754_pow+0x68>
 800bc6a:	4592      	cmp	sl, r2
 800bc6c:	d10f      	bne.n	800bc8e <__ieee754_pow+0x86>
 800bc6e:	b171      	cbz	r1, 800bc8e <__ieee754_pow+0x86>
 800bc70:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bc74:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bc78:	ea58 0803 	orrs.w	r8, r8, r3
 800bc7c:	d1db      	bne.n	800bc36 <__ieee754_pow+0x2e>
 800bc7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc82:	18db      	adds	r3, r3, r3
 800bc84:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bc88:	4152      	adcs	r2, r2
 800bc8a:	4598      	cmp	r8, r3
 800bc8c:	e7cf      	b.n	800bc2e <__ieee754_pow+0x26>
 800bc8e:	f1b8 0f00 	cmp.w	r8, #0
 800bc92:	46ab      	mov	fp, r5
 800bc94:	da43      	bge.n	800bd1e <__ieee754_pow+0x116>
 800bc96:	4a82      	ldr	r2, [pc, #520]	@ (800bea0 <__ieee754_pow+0x298>)
 800bc98:	4592      	cmp	sl, r2
 800bc9a:	d856      	bhi.n	800bd4a <__ieee754_pow+0x142>
 800bc9c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bca0:	4592      	cmp	sl, r2
 800bca2:	f240 84c5 	bls.w	800c630 <__ieee754_pow+0xa28>
 800bca6:	ea4f 522a 	mov.w	r2, sl, asr #20
 800bcaa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bcae:	2a14      	cmp	r2, #20
 800bcb0:	dd18      	ble.n	800bce4 <__ieee754_pow+0xdc>
 800bcb2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bcb6:	fa21 f402 	lsr.w	r4, r1, r2
 800bcba:	fa04 f202 	lsl.w	r2, r4, r2
 800bcbe:	428a      	cmp	r2, r1
 800bcc0:	f040 84b6 	bne.w	800c630 <__ieee754_pow+0xa28>
 800bcc4:	f004 0401 	and.w	r4, r4, #1
 800bcc8:	f1c4 0402 	rsb	r4, r4, #2
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d159      	bne.n	800bd84 <__ieee754_pow+0x17c>
 800bcd0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bcd4:	d148      	bne.n	800bd68 <__ieee754_pow+0x160>
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	463b      	mov	r3, r7
 800bcda:	4630      	mov	r0, r6
 800bcdc:	4639      	mov	r1, r7
 800bcde:	f7f4 fc83 	bl	80005e8 <__aeabi_dmul>
 800bce2:	e7ae      	b.n	800bc42 <__ieee754_pow+0x3a>
 800bce4:	2900      	cmp	r1, #0
 800bce6:	d14c      	bne.n	800bd82 <__ieee754_pow+0x17a>
 800bce8:	f1c2 0214 	rsb	r2, r2, #20
 800bcec:	fa4a f402 	asr.w	r4, sl, r2
 800bcf0:	fa04 f202 	lsl.w	r2, r4, r2
 800bcf4:	4552      	cmp	r2, sl
 800bcf6:	f040 8498 	bne.w	800c62a <__ieee754_pow+0xa22>
 800bcfa:	f004 0401 	and.w	r4, r4, #1
 800bcfe:	f1c4 0402 	rsb	r4, r4, #2
 800bd02:	4a68      	ldr	r2, [pc, #416]	@ (800bea4 <__ieee754_pow+0x29c>)
 800bd04:	4592      	cmp	sl, r2
 800bd06:	d1e3      	bne.n	800bcd0 <__ieee754_pow+0xc8>
 800bd08:	f1b9 0f00 	cmp.w	r9, #0
 800bd0c:	f280 8489 	bge.w	800c622 <__ieee754_pow+0xa1a>
 800bd10:	4964      	ldr	r1, [pc, #400]	@ (800bea4 <__ieee754_pow+0x29c>)
 800bd12:	4632      	mov	r2, r6
 800bd14:	463b      	mov	r3, r7
 800bd16:	2000      	movs	r0, #0
 800bd18:	f7f4 fd90 	bl	800083c <__aeabi_ddiv>
 800bd1c:	e791      	b.n	800bc42 <__ieee754_pow+0x3a>
 800bd1e:	2400      	movs	r4, #0
 800bd20:	bb81      	cbnz	r1, 800bd84 <__ieee754_pow+0x17c>
 800bd22:	4a5e      	ldr	r2, [pc, #376]	@ (800be9c <__ieee754_pow+0x294>)
 800bd24:	4592      	cmp	sl, r2
 800bd26:	d1ec      	bne.n	800bd02 <__ieee754_pow+0xfa>
 800bd28:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800bd2c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bd30:	431a      	orrs	r2, r3
 800bd32:	f000 846e 	beq.w	800c612 <__ieee754_pow+0xa0a>
 800bd36:	4b5c      	ldr	r3, [pc, #368]	@ (800bea8 <__ieee754_pow+0x2a0>)
 800bd38:	429d      	cmp	r5, r3
 800bd3a:	d908      	bls.n	800bd4e <__ieee754_pow+0x146>
 800bd3c:	f1b9 0f00 	cmp.w	r9, #0
 800bd40:	f280 846b 	bge.w	800c61a <__ieee754_pow+0xa12>
 800bd44:	2000      	movs	r0, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	e77b      	b.n	800bc42 <__ieee754_pow+0x3a>
 800bd4a:	2402      	movs	r4, #2
 800bd4c:	e7e8      	b.n	800bd20 <__ieee754_pow+0x118>
 800bd4e:	f1b9 0f00 	cmp.w	r9, #0
 800bd52:	f04f 0000 	mov.w	r0, #0
 800bd56:	f04f 0100 	mov.w	r1, #0
 800bd5a:	f6bf af72 	bge.w	800bc42 <__ieee754_pow+0x3a>
 800bd5e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bd62:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bd66:	e76c      	b.n	800bc42 <__ieee754_pow+0x3a>
 800bd68:	4a50      	ldr	r2, [pc, #320]	@ (800beac <__ieee754_pow+0x2a4>)
 800bd6a:	4591      	cmp	r9, r2
 800bd6c:	d10a      	bne.n	800bd84 <__ieee754_pow+0x17c>
 800bd6e:	f1b8 0f00 	cmp.w	r8, #0
 800bd72:	db07      	blt.n	800bd84 <__ieee754_pow+0x17c>
 800bd74:	ec47 6b10 	vmov	d0, r6, r7
 800bd78:	b011      	add	sp, #68	@ 0x44
 800bd7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7e:	f000 bd4f 	b.w	800c820 <__ieee754_sqrt>
 800bd82:	2400      	movs	r4, #0
 800bd84:	ec47 6b10 	vmov	d0, r6, r7
 800bd88:	9302      	str	r3, [sp, #8]
 800bd8a:	f000 fc87 	bl	800c69c <fabs>
 800bd8e:	9b02      	ldr	r3, [sp, #8]
 800bd90:	ec51 0b10 	vmov	r0, r1, d0
 800bd94:	bb43      	cbnz	r3, 800bde8 <__ieee754_pow+0x1e0>
 800bd96:	4b43      	ldr	r3, [pc, #268]	@ (800bea4 <__ieee754_pow+0x29c>)
 800bd98:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d000      	beq.n	800bda2 <__ieee754_pow+0x19a>
 800bda0:	bb15      	cbnz	r5, 800bde8 <__ieee754_pow+0x1e0>
 800bda2:	f1b9 0f00 	cmp.w	r9, #0
 800bda6:	da05      	bge.n	800bdb4 <__ieee754_pow+0x1ac>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	2000      	movs	r0, #0
 800bdae:	493d      	ldr	r1, [pc, #244]	@ (800bea4 <__ieee754_pow+0x29c>)
 800bdb0:	f7f4 fd44 	bl	800083c <__aeabi_ddiv>
 800bdb4:	f1b8 0f00 	cmp.w	r8, #0
 800bdb8:	f6bf af43 	bge.w	800bc42 <__ieee754_pow+0x3a>
 800bdbc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bdc0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bdc4:	4325      	orrs	r5, r4
 800bdc6:	d108      	bne.n	800bdda <__ieee754_pow+0x1d2>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f7f4 fa52 	bl	8000278 <__aeabi_dsub>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	e79e      	b.n	800bd18 <__ieee754_pow+0x110>
 800bdda:	2c01      	cmp	r4, #1
 800bddc:	f47f af31 	bne.w	800bc42 <__ieee754_pow+0x3a>
 800bde0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bde4:	4619      	mov	r1, r3
 800bde6:	e72c      	b.n	800bc42 <__ieee754_pow+0x3a>
 800bde8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800bdec:	3b01      	subs	r3, #1
 800bdee:	ea53 0204 	orrs.w	r2, r3, r4
 800bdf2:	d102      	bne.n	800bdfa <__ieee754_pow+0x1f2>
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	e7e8      	b.n	800bdcc <__ieee754_pow+0x1c4>
 800bdfa:	3c01      	subs	r4, #1
 800bdfc:	431c      	orrs	r4, r3
 800bdfe:	d016      	beq.n	800be2e <__ieee754_pow+0x226>
 800be00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800be88 <__ieee754_pow+0x280>
 800be04:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800be08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be0c:	f240 8110 	bls.w	800c030 <__ieee754_pow+0x428>
 800be10:	4b27      	ldr	r3, [pc, #156]	@ (800beb0 <__ieee754_pow+0x2a8>)
 800be12:	459a      	cmp	sl, r3
 800be14:	4b24      	ldr	r3, [pc, #144]	@ (800bea8 <__ieee754_pow+0x2a0>)
 800be16:	d916      	bls.n	800be46 <__ieee754_pow+0x23e>
 800be18:	429d      	cmp	r5, r3
 800be1a:	d80b      	bhi.n	800be34 <__ieee754_pow+0x22c>
 800be1c:	f1b9 0f00 	cmp.w	r9, #0
 800be20:	da0b      	bge.n	800be3a <__ieee754_pow+0x232>
 800be22:	2000      	movs	r0, #0
 800be24:	b011      	add	sp, #68	@ 0x44
 800be26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2a:	f000 bcf1 	b.w	800c810 <__math_oflow>
 800be2e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800be90 <__ieee754_pow+0x288>
 800be32:	e7e7      	b.n	800be04 <__ieee754_pow+0x1fc>
 800be34:	f1b9 0f00 	cmp.w	r9, #0
 800be38:	dcf3      	bgt.n	800be22 <__ieee754_pow+0x21a>
 800be3a:	2000      	movs	r0, #0
 800be3c:	b011      	add	sp, #68	@ 0x44
 800be3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be42:	f000 bcdd 	b.w	800c800 <__math_uflow>
 800be46:	429d      	cmp	r5, r3
 800be48:	d20c      	bcs.n	800be64 <__ieee754_pow+0x25c>
 800be4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4e:	2200      	movs	r2, #0
 800be50:	2300      	movs	r3, #0
 800be52:	f7f4 fe3b 	bl	8000acc <__aeabi_dcmplt>
 800be56:	3800      	subs	r0, #0
 800be58:	bf18      	it	ne
 800be5a:	2001      	movne	r0, #1
 800be5c:	f1b9 0f00 	cmp.w	r9, #0
 800be60:	daec      	bge.n	800be3c <__ieee754_pow+0x234>
 800be62:	e7df      	b.n	800be24 <__ieee754_pow+0x21c>
 800be64:	4b0f      	ldr	r3, [pc, #60]	@ (800bea4 <__ieee754_pow+0x29c>)
 800be66:	429d      	cmp	r5, r3
 800be68:	f04f 0200 	mov.w	r2, #0
 800be6c:	d922      	bls.n	800beb4 <__ieee754_pow+0x2ac>
 800be6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be72:	2300      	movs	r3, #0
 800be74:	f7f4 fe2a 	bl	8000acc <__aeabi_dcmplt>
 800be78:	3800      	subs	r0, #0
 800be7a:	bf18      	it	ne
 800be7c:	2001      	movne	r0, #1
 800be7e:	f1b9 0f00 	cmp.w	r9, #0
 800be82:	dccf      	bgt.n	800be24 <__ieee754_pow+0x21c>
 800be84:	e7da      	b.n	800be3c <__ieee754_pow+0x234>
 800be86:	bf00      	nop
 800be88:	00000000 	.word	0x00000000
 800be8c:	3ff00000 	.word	0x3ff00000
 800be90:	00000000 	.word	0x00000000
 800be94:	bff00000 	.word	0xbff00000
 800be98:	fff00000 	.word	0xfff00000
 800be9c:	7ff00000 	.word	0x7ff00000
 800bea0:	433fffff 	.word	0x433fffff
 800bea4:	3ff00000 	.word	0x3ff00000
 800bea8:	3fefffff 	.word	0x3fefffff
 800beac:	3fe00000 	.word	0x3fe00000
 800beb0:	43f00000 	.word	0x43f00000
 800beb4:	4b5a      	ldr	r3, [pc, #360]	@ (800c020 <__ieee754_pow+0x418>)
 800beb6:	f7f4 f9df 	bl	8000278 <__aeabi_dsub>
 800beba:	a351      	add	r3, pc, #324	@ (adr r3, 800c000 <__ieee754_pow+0x3f8>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	4604      	mov	r4, r0
 800bec2:	460d      	mov	r5, r1
 800bec4:	f7f4 fb90 	bl	80005e8 <__aeabi_dmul>
 800bec8:	a34f      	add	r3, pc, #316	@ (adr r3, 800c008 <__ieee754_pow+0x400>)
 800beca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bece:	4606      	mov	r6, r0
 800bed0:	460f      	mov	r7, r1
 800bed2:	4620      	mov	r0, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 fb87 	bl	80005e8 <__aeabi_dmul>
 800beda:	4b52      	ldr	r3, [pc, #328]	@ (800c024 <__ieee754_pow+0x41c>)
 800bedc:	4682      	mov	sl, r0
 800bede:	468b      	mov	fp, r1
 800bee0:	2200      	movs	r2, #0
 800bee2:	4620      	mov	r0, r4
 800bee4:	4629      	mov	r1, r5
 800bee6:	f7f4 fb7f 	bl	80005e8 <__aeabi_dmul>
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	a148      	add	r1, pc, #288	@ (adr r1, 800c010 <__ieee754_pow+0x408>)
 800bef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bef4:	f7f4 f9c0 	bl	8000278 <__aeabi_dsub>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	f7f4 fb74 	bl	80005e8 <__aeabi_dmul>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	2000      	movs	r0, #0
 800bf06:	4948      	ldr	r1, [pc, #288]	@ (800c028 <__ieee754_pow+0x420>)
 800bf08:	f7f4 f9b6 	bl	8000278 <__aeabi_dsub>
 800bf0c:	4622      	mov	r2, r4
 800bf0e:	4680      	mov	r8, r0
 800bf10:	4689      	mov	r9, r1
 800bf12:	462b      	mov	r3, r5
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f7f4 fb66 	bl	80005e8 <__aeabi_dmul>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4640      	mov	r0, r8
 800bf22:	4649      	mov	r1, r9
 800bf24:	f7f4 fb60 	bl	80005e8 <__aeabi_dmul>
 800bf28:	a33b      	add	r3, pc, #236	@ (adr r3, 800c018 <__ieee754_pow+0x410>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 fb5b 	bl	80005e8 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4650      	mov	r0, sl
 800bf38:	4659      	mov	r1, fp
 800bf3a:	f7f4 f99d 	bl	8000278 <__aeabi_dsub>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	460b      	mov	r3, r1
 800bf42:	4680      	mov	r8, r0
 800bf44:	4689      	mov	r9, r1
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	f7f4 f997 	bl	800027c <__adddf3>
 800bf4e:	2400      	movs	r4, #0
 800bf50:	4632      	mov	r2, r6
 800bf52:	463b      	mov	r3, r7
 800bf54:	4620      	mov	r0, r4
 800bf56:	460d      	mov	r5, r1
 800bf58:	f7f4 f98e 	bl	8000278 <__aeabi_dsub>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4640      	mov	r0, r8
 800bf62:	4649      	mov	r1, r9
 800bf64:	f7f4 f988 	bl	8000278 <__aeabi_dsub>
 800bf68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf70:	2300      	movs	r3, #0
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bf78:	4606      	mov	r6, r0
 800bf7a:	460f      	mov	r7, r1
 800bf7c:	465b      	mov	r3, fp
 800bf7e:	4652      	mov	r2, sl
 800bf80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf84:	f7f4 f978 	bl	8000278 <__aeabi_dsub>
 800bf88:	4622      	mov	r2, r4
 800bf8a:	462b      	mov	r3, r5
 800bf8c:	f7f4 fb2c 	bl	80005e8 <__aeabi_dmul>
 800bf90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf94:	4680      	mov	r8, r0
 800bf96:	4689      	mov	r9, r1
 800bf98:	4630      	mov	r0, r6
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	f7f4 fb24 	bl	80005e8 <__aeabi_dmul>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	f7f4 f968 	bl	800027c <__adddf3>
 800bfac:	465b      	mov	r3, fp
 800bfae:	4606      	mov	r6, r0
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	4652      	mov	r2, sl
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 fb16 	bl	80005e8 <__aeabi_dmul>
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	4680      	mov	r8, r0
 800bfc2:	4689      	mov	r9, r1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	f7f4 f958 	bl	800027c <__adddf3>
 800bfcc:	4b17      	ldr	r3, [pc, #92]	@ (800c02c <__ieee754_pow+0x424>)
 800bfce:	4299      	cmp	r1, r3
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	468b      	mov	fp, r1
 800bfd6:	f340 820b 	ble.w	800c3f0 <__ieee754_pow+0x7e8>
 800bfda:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bfde:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bfe2:	4303      	orrs	r3, r0
 800bfe4:	f000 81ea 	beq.w	800c3bc <__ieee754_pow+0x7b4>
 800bfe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfec:	2200      	movs	r2, #0
 800bfee:	2300      	movs	r3, #0
 800bff0:	f7f4 fd6c 	bl	8000acc <__aeabi_dcmplt>
 800bff4:	3800      	subs	r0, #0
 800bff6:	bf18      	it	ne
 800bff8:	2001      	movne	r0, #1
 800bffa:	e713      	b.n	800be24 <__ieee754_pow+0x21c>
 800bffc:	f3af 8000 	nop.w
 800c000:	60000000 	.word	0x60000000
 800c004:	3ff71547 	.word	0x3ff71547
 800c008:	f85ddf44 	.word	0xf85ddf44
 800c00c:	3e54ae0b 	.word	0x3e54ae0b
 800c010:	55555555 	.word	0x55555555
 800c014:	3fd55555 	.word	0x3fd55555
 800c018:	652b82fe 	.word	0x652b82fe
 800c01c:	3ff71547 	.word	0x3ff71547
 800c020:	3ff00000 	.word	0x3ff00000
 800c024:	3fd00000 	.word	0x3fd00000
 800c028:	3fe00000 	.word	0x3fe00000
 800c02c:	408fffff 	.word	0x408fffff
 800c030:	4bd5      	ldr	r3, [pc, #852]	@ (800c388 <__ieee754_pow+0x780>)
 800c032:	ea08 0303 	and.w	r3, r8, r3
 800c036:	2200      	movs	r2, #0
 800c038:	b92b      	cbnz	r3, 800c046 <__ieee754_pow+0x43e>
 800c03a:	4bd4      	ldr	r3, [pc, #848]	@ (800c38c <__ieee754_pow+0x784>)
 800c03c:	f7f4 fad4 	bl	80005e8 <__aeabi_dmul>
 800c040:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c044:	468b      	mov	fp, r1
 800c046:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c04a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c04e:	4413      	add	r3, r2
 800c050:	930a      	str	r3, [sp, #40]	@ 0x28
 800c052:	4bcf      	ldr	r3, [pc, #828]	@ (800c390 <__ieee754_pow+0x788>)
 800c054:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c058:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c05c:	459b      	cmp	fp, r3
 800c05e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c062:	dd08      	ble.n	800c076 <__ieee754_pow+0x46e>
 800c064:	4bcb      	ldr	r3, [pc, #812]	@ (800c394 <__ieee754_pow+0x78c>)
 800c066:	459b      	cmp	fp, r3
 800c068:	f340 81a5 	ble.w	800c3b6 <__ieee754_pow+0x7ae>
 800c06c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c06e:	3301      	adds	r3, #1
 800c070:	930a      	str	r3, [sp, #40]	@ 0x28
 800c072:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c076:	f04f 0a00 	mov.w	sl, #0
 800c07a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c07e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c080:	4bc5      	ldr	r3, [pc, #788]	@ (800c398 <__ieee754_pow+0x790>)
 800c082:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c086:	ed93 7b00 	vldr	d7, [r3]
 800c08a:	4629      	mov	r1, r5
 800c08c:	ec53 2b17 	vmov	r2, r3, d7
 800c090:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c094:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c098:	f7f4 f8ee 	bl	8000278 <__aeabi_dsub>
 800c09c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0a8:	f7f4 f8e8 	bl	800027c <__adddf3>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	49ba      	ldr	r1, [pc, #744]	@ (800c39c <__ieee754_pow+0x794>)
 800c0b4:	f7f4 fbc2 	bl	800083c <__aeabi_ddiv>
 800c0b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fa90 	bl	80005e8 <__aeabi_dmul>
 800c0c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0cc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c0d0:	106d      	asrs	r5, r5, #1
 800c0d2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c0d6:	f04f 0b00 	mov.w	fp, #0
 800c0da:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c0de:	4661      	mov	r1, ip
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	46e1      	mov	r9, ip
 800c0ea:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c0ee:	4614      	mov	r4, r2
 800c0f0:	461d      	mov	r5, r3
 800c0f2:	f7f4 fa79 	bl	80005e8 <__aeabi_dmul>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	f7f4 f8bb 	bl	8000278 <__aeabi_dsub>
 800c102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	4620      	mov	r0, r4
 800c10c:	4629      	mov	r1, r5
 800c10e:	f7f4 f8b3 	bl	8000278 <__aeabi_dsub>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c11a:	f7f4 f8ad 	bl	8000278 <__aeabi_dsub>
 800c11e:	465a      	mov	r2, fp
 800c120:	464b      	mov	r3, r9
 800c122:	f7f4 fa61 	bl	80005e8 <__aeabi_dmul>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4630      	mov	r0, r6
 800c12c:	4639      	mov	r1, r7
 800c12e:	f7f4 f8a3 	bl	8000278 <__aeabi_dsub>
 800c132:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c136:	f7f4 fa57 	bl	80005e8 <__aeabi_dmul>
 800c13a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c13e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c142:	4610      	mov	r0, r2
 800c144:	4619      	mov	r1, r3
 800c146:	f7f4 fa4f 	bl	80005e8 <__aeabi_dmul>
 800c14a:	a37d      	add	r3, pc, #500	@ (adr r3, 800c340 <__ieee754_pow+0x738>)
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	4604      	mov	r4, r0
 800c152:	460d      	mov	r5, r1
 800c154:	f7f4 fa48 	bl	80005e8 <__aeabi_dmul>
 800c158:	a37b      	add	r3, pc, #492	@ (adr r3, 800c348 <__ieee754_pow+0x740>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 f88d 	bl	800027c <__adddf3>
 800c162:	4622      	mov	r2, r4
 800c164:	462b      	mov	r3, r5
 800c166:	f7f4 fa3f 	bl	80005e8 <__aeabi_dmul>
 800c16a:	a379      	add	r3, pc, #484	@ (adr r3, 800c350 <__ieee754_pow+0x748>)
 800c16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c170:	f7f4 f884 	bl	800027c <__adddf3>
 800c174:	4622      	mov	r2, r4
 800c176:	462b      	mov	r3, r5
 800c178:	f7f4 fa36 	bl	80005e8 <__aeabi_dmul>
 800c17c:	a376      	add	r3, pc, #472	@ (adr r3, 800c358 <__ieee754_pow+0x750>)
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f7f4 f87b 	bl	800027c <__adddf3>
 800c186:	4622      	mov	r2, r4
 800c188:	462b      	mov	r3, r5
 800c18a:	f7f4 fa2d 	bl	80005e8 <__aeabi_dmul>
 800c18e:	a374      	add	r3, pc, #464	@ (adr r3, 800c360 <__ieee754_pow+0x758>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	f7f4 f872 	bl	800027c <__adddf3>
 800c198:	4622      	mov	r2, r4
 800c19a:	462b      	mov	r3, r5
 800c19c:	f7f4 fa24 	bl	80005e8 <__aeabi_dmul>
 800c1a0:	a371      	add	r3, pc, #452	@ (adr r3, 800c368 <__ieee754_pow+0x760>)
 800c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a6:	f7f4 f869 	bl	800027c <__adddf3>
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	462b      	mov	r3, r5
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f4 fa17 	bl	80005e8 <__aeabi_dmul>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4630      	mov	r0, r6
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	f7f4 fa11 	bl	80005e8 <__aeabi_dmul>
 800c1c6:	465a      	mov	r2, fp
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	464b      	mov	r3, r9
 800c1ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1d2:	f7f4 f853 	bl	800027c <__adddf3>
 800c1d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1da:	f7f4 fa05 	bl	80005e8 <__aeabi_dmul>
 800c1de:	4622      	mov	r2, r4
 800c1e0:	462b      	mov	r3, r5
 800c1e2:	f7f4 f84b 	bl	800027c <__adddf3>
 800c1e6:	465a      	mov	r2, fp
 800c1e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1ec:	464b      	mov	r3, r9
 800c1ee:	4658      	mov	r0, fp
 800c1f0:	4649      	mov	r1, r9
 800c1f2:	f7f4 f9f9 	bl	80005e8 <__aeabi_dmul>
 800c1f6:	4b6a      	ldr	r3, [pc, #424]	@ (800c3a0 <__ieee754_pow+0x798>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	f7f4 f83d 	bl	800027c <__adddf3>
 800c202:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c206:	f7f4 f839 	bl	800027c <__adddf3>
 800c20a:	46d8      	mov	r8, fp
 800c20c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c210:	460d      	mov	r5, r1
 800c212:	465a      	mov	r2, fp
 800c214:	460b      	mov	r3, r1
 800c216:	4640      	mov	r0, r8
 800c218:	4649      	mov	r1, r9
 800c21a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c21e:	f7f4 f9e3 	bl	80005e8 <__aeabi_dmul>
 800c222:	465c      	mov	r4, fp
 800c224:	4680      	mov	r8, r0
 800c226:	4689      	mov	r9, r1
 800c228:	4b5d      	ldr	r3, [pc, #372]	@ (800c3a0 <__ieee754_pow+0x798>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	4620      	mov	r0, r4
 800c22e:	4629      	mov	r1, r5
 800c230:	f7f4 f822 	bl	8000278 <__aeabi_dsub>
 800c234:	4632      	mov	r2, r6
 800c236:	463b      	mov	r3, r7
 800c238:	f7f4 f81e 	bl	8000278 <__aeabi_dsub>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c244:	f7f4 f818 	bl	8000278 <__aeabi_dsub>
 800c248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c24c:	f7f4 f9cc 	bl	80005e8 <__aeabi_dmul>
 800c250:	4622      	mov	r2, r4
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	462b      	mov	r3, r5
 800c258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c25c:	f7f4 f9c4 	bl	80005e8 <__aeabi_dmul>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4630      	mov	r0, r6
 800c266:	4639      	mov	r1, r7
 800c268:	f7f4 f808 	bl	800027c <__adddf3>
 800c26c:	4606      	mov	r6, r0
 800c26e:	460f      	mov	r7, r1
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4640      	mov	r0, r8
 800c276:	4649      	mov	r1, r9
 800c278:	f7f4 f800 	bl	800027c <__adddf3>
 800c27c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c280:	a33b      	add	r3, pc, #236	@ (adr r3, 800c370 <__ieee754_pow+0x768>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	4658      	mov	r0, fp
 800c288:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c28c:	460d      	mov	r5, r1
 800c28e:	f7f4 f9ab 	bl	80005e8 <__aeabi_dmul>
 800c292:	465c      	mov	r4, fp
 800c294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c298:	4642      	mov	r2, r8
 800c29a:	464b      	mov	r3, r9
 800c29c:	4620      	mov	r0, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7f3 ffea 	bl	8000278 <__aeabi_dsub>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f3 ffe4 	bl	8000278 <__aeabi_dsub>
 800c2b0:	a331      	add	r3, pc, #196	@ (adr r3, 800c378 <__ieee754_pow+0x770>)
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	f7f4 f997 	bl	80005e8 <__aeabi_dmul>
 800c2ba:	a331      	add	r3, pc, #196	@ (adr r3, 800c380 <__ieee754_pow+0x778>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	4606      	mov	r6, r0
 800c2c2:	460f      	mov	r7, r1
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f4 f98e 	bl	80005e8 <__aeabi_dmul>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	f7f3 ffd2 	bl	800027c <__adddf3>
 800c2d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2da:	4b32      	ldr	r3, [pc, #200]	@ (800c3a4 <__ieee754_pow+0x79c>)
 800c2dc:	4413      	add	r3, r2
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	f7f3 ffcb 	bl	800027c <__adddf3>
 800c2e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2ec:	f7f4 f912 	bl	8000514 <__aeabi_i2d>
 800c2f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2f2:	4b2d      	ldr	r3, [pc, #180]	@ (800c3a8 <__ieee754_pow+0x7a0>)
 800c2f4:	4413      	add	r3, r2
 800c2f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c300:	460f      	mov	r7, r1
 800c302:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c306:	f7f3 ffb9 	bl	800027c <__adddf3>
 800c30a:	4642      	mov	r2, r8
 800c30c:	464b      	mov	r3, r9
 800c30e:	f7f3 ffb5 	bl	800027c <__adddf3>
 800c312:	4632      	mov	r2, r6
 800c314:	463b      	mov	r3, r7
 800c316:	f7f3 ffb1 	bl	800027c <__adddf3>
 800c31a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c31e:	4632      	mov	r2, r6
 800c320:	463b      	mov	r3, r7
 800c322:	4658      	mov	r0, fp
 800c324:	460d      	mov	r5, r1
 800c326:	f7f3 ffa7 	bl	8000278 <__aeabi_dsub>
 800c32a:	4642      	mov	r2, r8
 800c32c:	464b      	mov	r3, r9
 800c32e:	f7f3 ffa3 	bl	8000278 <__aeabi_dsub>
 800c332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c336:	f7f3 ff9f 	bl	8000278 <__aeabi_dsub>
 800c33a:	465c      	mov	r4, fp
 800c33c:	e036      	b.n	800c3ac <__ieee754_pow+0x7a4>
 800c33e:	bf00      	nop
 800c340:	4a454eef 	.word	0x4a454eef
 800c344:	3fca7e28 	.word	0x3fca7e28
 800c348:	93c9db65 	.word	0x93c9db65
 800c34c:	3fcd864a 	.word	0x3fcd864a
 800c350:	a91d4101 	.word	0xa91d4101
 800c354:	3fd17460 	.word	0x3fd17460
 800c358:	518f264d 	.word	0x518f264d
 800c35c:	3fd55555 	.word	0x3fd55555
 800c360:	db6fabff 	.word	0xdb6fabff
 800c364:	3fdb6db6 	.word	0x3fdb6db6
 800c368:	33333303 	.word	0x33333303
 800c36c:	3fe33333 	.word	0x3fe33333
 800c370:	e0000000 	.word	0xe0000000
 800c374:	3feec709 	.word	0x3feec709
 800c378:	dc3a03fd 	.word	0xdc3a03fd
 800c37c:	3feec709 	.word	0x3feec709
 800c380:	145b01f5 	.word	0x145b01f5
 800c384:	be3e2fe0 	.word	0xbe3e2fe0
 800c388:	7ff00000 	.word	0x7ff00000
 800c38c:	43400000 	.word	0x43400000
 800c390:	0003988e 	.word	0x0003988e
 800c394:	000bb679 	.word	0x000bb679
 800c398:	0800d350 	.word	0x0800d350
 800c39c:	3ff00000 	.word	0x3ff00000
 800c3a0:	40080000 	.word	0x40080000
 800c3a4:	0800d330 	.word	0x0800d330
 800c3a8:	0800d340 	.word	0x0800d340
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3b4:	e5d6      	b.n	800bf64 <__ieee754_pow+0x35c>
 800c3b6:	f04f 0a01 	mov.w	sl, #1
 800c3ba:	e65e      	b.n	800c07a <__ieee754_pow+0x472>
 800c3bc:	a3b5      	add	r3, pc, #724	@ (adr r3, 800c694 <__ieee754_pow+0xa8c>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4639      	mov	r1, r7
 800c3c6:	f7f3 ff59 	bl	800027c <__adddf3>
 800c3ca:	4642      	mov	r2, r8
 800c3cc:	e9cd 0100 	strd	r0, r1, [sp]
 800c3d0:	464b      	mov	r3, r9
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7f3 ff4f 	bl	8000278 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3e2:	f7f4 fb91 	bl	8000b08 <__aeabi_dcmpgt>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f47f adfe 	bne.w	800bfe8 <__ieee754_pow+0x3e0>
 800c3ec:	4ba2      	ldr	r3, [pc, #648]	@ (800c678 <__ieee754_pow+0xa70>)
 800c3ee:	e022      	b.n	800c436 <__ieee754_pow+0x82e>
 800c3f0:	4ca2      	ldr	r4, [pc, #648]	@ (800c67c <__ieee754_pow+0xa74>)
 800c3f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c3f6:	42a3      	cmp	r3, r4
 800c3f8:	d919      	bls.n	800c42e <__ieee754_pow+0x826>
 800c3fa:	4ba1      	ldr	r3, [pc, #644]	@ (800c680 <__ieee754_pow+0xa78>)
 800c3fc:	440b      	add	r3, r1
 800c3fe:	4303      	orrs	r3, r0
 800c400:	d009      	beq.n	800c416 <__ieee754_pow+0x80e>
 800c402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c406:	2200      	movs	r2, #0
 800c408:	2300      	movs	r3, #0
 800c40a:	f7f4 fb5f 	bl	8000acc <__aeabi_dcmplt>
 800c40e:	3800      	subs	r0, #0
 800c410:	bf18      	it	ne
 800c412:	2001      	movne	r0, #1
 800c414:	e512      	b.n	800be3c <__ieee754_pow+0x234>
 800c416:	4642      	mov	r2, r8
 800c418:	464b      	mov	r3, r9
 800c41a:	f7f3 ff2d 	bl	8000278 <__aeabi_dsub>
 800c41e:	4632      	mov	r2, r6
 800c420:	463b      	mov	r3, r7
 800c422:	f7f4 fb67 	bl	8000af4 <__aeabi_dcmpge>
 800c426:	2800      	cmp	r0, #0
 800c428:	d1eb      	bne.n	800c402 <__ieee754_pow+0x7fa>
 800c42a:	4b96      	ldr	r3, [pc, #600]	@ (800c684 <__ieee754_pow+0xa7c>)
 800c42c:	e003      	b.n	800c436 <__ieee754_pow+0x82e>
 800c42e:	4a96      	ldr	r2, [pc, #600]	@ (800c688 <__ieee754_pow+0xa80>)
 800c430:	4293      	cmp	r3, r2
 800c432:	f240 80e7 	bls.w	800c604 <__ieee754_pow+0x9fc>
 800c436:	151b      	asrs	r3, r3, #20
 800c438:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800c43c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800c440:	fa4a fa03 	asr.w	sl, sl, r3
 800c444:	44da      	add	sl, fp
 800c446:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c44a:	4890      	ldr	r0, [pc, #576]	@ (800c68c <__ieee754_pow+0xa84>)
 800c44c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c450:	4108      	asrs	r0, r1
 800c452:	ea00 030a 	and.w	r3, r0, sl
 800c456:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c45a:	f1c1 0114 	rsb	r1, r1, #20
 800c45e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c462:	fa4a fa01 	asr.w	sl, sl, r1
 800c466:	f1bb 0f00 	cmp.w	fp, #0
 800c46a:	4640      	mov	r0, r8
 800c46c:	4649      	mov	r1, r9
 800c46e:	f04f 0200 	mov.w	r2, #0
 800c472:	bfb8      	it	lt
 800c474:	f1ca 0a00 	rsblt	sl, sl, #0
 800c478:	f7f3 fefe 	bl	8000278 <__aeabi_dsub>
 800c47c:	4680      	mov	r8, r0
 800c47e:	4689      	mov	r9, r1
 800c480:	4632      	mov	r2, r6
 800c482:	463b      	mov	r3, r7
 800c484:	4640      	mov	r0, r8
 800c486:	4649      	mov	r1, r9
 800c488:	f7f3 fef8 	bl	800027c <__adddf3>
 800c48c:	2400      	movs	r4, #0
 800c48e:	a36a      	add	r3, pc, #424	@ (adr r3, 800c638 <__ieee754_pow+0xa30>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	4620      	mov	r0, r4
 800c496:	460d      	mov	r5, r1
 800c498:	f7f4 f8a6 	bl	80005e8 <__aeabi_dmul>
 800c49c:	4642      	mov	r2, r8
 800c49e:	e9cd 0100 	strd	r0, r1, [sp]
 800c4a2:	464b      	mov	r3, r9
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f3 fee6 	bl	8000278 <__aeabi_dsub>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	4639      	mov	r1, r7
 800c4b4:	f7f3 fee0 	bl	8000278 <__aeabi_dsub>
 800c4b8:	a361      	add	r3, pc, #388	@ (adr r3, 800c640 <__ieee754_pow+0xa38>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	f7f4 f893 	bl	80005e8 <__aeabi_dmul>
 800c4c2:	a361      	add	r3, pc, #388	@ (adr r3, 800c648 <__ieee754_pow+0xa40>)
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	4680      	mov	r8, r0
 800c4ca:	4689      	mov	r9, r1
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	f7f4 f88a 	bl	80005e8 <__aeabi_dmul>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4640      	mov	r0, r8
 800c4da:	4649      	mov	r1, r9
 800c4dc:	f7f3 fece 	bl	800027c <__adddf3>
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	460d      	mov	r5, r1
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4ec:	f7f3 fec6 	bl	800027c <__adddf3>
 800c4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f4:	4680      	mov	r8, r0
 800c4f6:	4689      	mov	r9, r1
 800c4f8:	f7f3 febe 	bl	8000278 <__aeabi_dsub>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	4620      	mov	r0, r4
 800c502:	4629      	mov	r1, r5
 800c504:	f7f3 feb8 	bl	8000278 <__aeabi_dsub>
 800c508:	4642      	mov	r2, r8
 800c50a:	4606      	mov	r6, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	464b      	mov	r3, r9
 800c510:	4640      	mov	r0, r8
 800c512:	4649      	mov	r1, r9
 800c514:	f7f4 f868 	bl	80005e8 <__aeabi_dmul>
 800c518:	a34d      	add	r3, pc, #308	@ (adr r3, 800c650 <__ieee754_pow+0xa48>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	4604      	mov	r4, r0
 800c520:	460d      	mov	r5, r1
 800c522:	f7f4 f861 	bl	80005e8 <__aeabi_dmul>
 800c526:	a34c      	add	r3, pc, #304	@ (adr r3, 800c658 <__ieee754_pow+0xa50>)
 800c528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52c:	f7f3 fea4 	bl	8000278 <__aeabi_dsub>
 800c530:	4622      	mov	r2, r4
 800c532:	462b      	mov	r3, r5
 800c534:	f7f4 f858 	bl	80005e8 <__aeabi_dmul>
 800c538:	a349      	add	r3, pc, #292	@ (adr r3, 800c660 <__ieee754_pow+0xa58>)
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	f7f3 fe9d 	bl	800027c <__adddf3>
 800c542:	4622      	mov	r2, r4
 800c544:	462b      	mov	r3, r5
 800c546:	f7f4 f84f 	bl	80005e8 <__aeabi_dmul>
 800c54a:	a347      	add	r3, pc, #284	@ (adr r3, 800c668 <__ieee754_pow+0xa60>)
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f7f3 fe92 	bl	8000278 <__aeabi_dsub>
 800c554:	4622      	mov	r2, r4
 800c556:	462b      	mov	r3, r5
 800c558:	f7f4 f846 	bl	80005e8 <__aeabi_dmul>
 800c55c:	a344      	add	r3, pc, #272	@ (adr r3, 800c670 <__ieee754_pow+0xa68>)
 800c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c562:	f7f3 fe8b 	bl	800027c <__adddf3>
 800c566:	4622      	mov	r2, r4
 800c568:	462b      	mov	r3, r5
 800c56a:	f7f4 f83d 	bl	80005e8 <__aeabi_dmul>
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4640      	mov	r0, r8
 800c574:	4649      	mov	r1, r9
 800c576:	f7f3 fe7f 	bl	8000278 <__aeabi_dsub>
 800c57a:	4604      	mov	r4, r0
 800c57c:	460d      	mov	r5, r1
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4640      	mov	r0, r8
 800c584:	4649      	mov	r1, r9
 800c586:	f7f4 f82f 	bl	80005e8 <__aeabi_dmul>
 800c58a:	2200      	movs	r2, #0
 800c58c:	e9cd 0100 	strd	r0, r1, [sp]
 800c590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f7f3 fe6e 	bl	8000278 <__aeabi_dsub>
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5a4:	f7f4 f94a 	bl	800083c <__aeabi_ddiv>
 800c5a8:	4632      	mov	r2, r6
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	460d      	mov	r5, r1
 800c5ae:	463b      	mov	r3, r7
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	f7f4 f818 	bl	80005e8 <__aeabi_dmul>
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	f7f3 fe5e 	bl	800027c <__adddf3>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	f7f3 fe56 	bl	8000278 <__aeabi_dsub>
 800c5cc:	4642      	mov	r2, r8
 800c5ce:	464b      	mov	r3, r9
 800c5d0:	f7f3 fe52 	bl	8000278 <__aeabi_dsub>
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	492d      	ldr	r1, [pc, #180]	@ (800c690 <__ieee754_pow+0xa88>)
 800c5da:	2000      	movs	r0, #0
 800c5dc:	f7f3 fe4c 	bl	8000278 <__aeabi_dsub>
 800c5e0:	ec41 0b10 	vmov	d0, r0, r1
 800c5e4:	ee10 3a90 	vmov	r3, s1
 800c5e8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c5ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5f0:	da0b      	bge.n	800c60a <__ieee754_pow+0xa02>
 800c5f2:	4650      	mov	r0, sl
 800c5f4:	f000 f85c 	bl	800c6b0 <scalbn>
 800c5f8:	ec51 0b10 	vmov	r0, r1, d0
 800c5fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c600:	f7ff bb6d 	b.w	800bcde <__ieee754_pow+0xd6>
 800c604:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c608:	e73a      	b.n	800c480 <__ieee754_pow+0x878>
 800c60a:	ec51 0b10 	vmov	r0, r1, d0
 800c60e:	4619      	mov	r1, r3
 800c610:	e7f4      	b.n	800c5fc <__ieee754_pow+0x9f4>
 800c612:	491f      	ldr	r1, [pc, #124]	@ (800c690 <__ieee754_pow+0xa88>)
 800c614:	2000      	movs	r0, #0
 800c616:	f7ff bb14 	b.w	800bc42 <__ieee754_pow+0x3a>
 800c61a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c61e:	f7ff bb10 	b.w	800bc42 <__ieee754_pow+0x3a>
 800c622:	4630      	mov	r0, r6
 800c624:	4639      	mov	r1, r7
 800c626:	f7ff bb0c 	b.w	800bc42 <__ieee754_pow+0x3a>
 800c62a:	460c      	mov	r4, r1
 800c62c:	f7ff bb69 	b.w	800bd02 <__ieee754_pow+0xfa>
 800c630:	2400      	movs	r4, #0
 800c632:	f7ff bb4b 	b.w	800bccc <__ieee754_pow+0xc4>
 800c636:	bf00      	nop
 800c638:	00000000 	.word	0x00000000
 800c63c:	3fe62e43 	.word	0x3fe62e43
 800c640:	fefa39ef 	.word	0xfefa39ef
 800c644:	3fe62e42 	.word	0x3fe62e42
 800c648:	0ca86c39 	.word	0x0ca86c39
 800c64c:	be205c61 	.word	0xbe205c61
 800c650:	72bea4d0 	.word	0x72bea4d0
 800c654:	3e663769 	.word	0x3e663769
 800c658:	c5d26bf1 	.word	0xc5d26bf1
 800c65c:	3ebbbd41 	.word	0x3ebbbd41
 800c660:	af25de2c 	.word	0xaf25de2c
 800c664:	3f11566a 	.word	0x3f11566a
 800c668:	16bebd93 	.word	0x16bebd93
 800c66c:	3f66c16c 	.word	0x3f66c16c
 800c670:	5555553e 	.word	0x5555553e
 800c674:	3fc55555 	.word	0x3fc55555
 800c678:	40900000 	.word	0x40900000
 800c67c:	4090cbff 	.word	0x4090cbff
 800c680:	3f6f3400 	.word	0x3f6f3400
 800c684:	4090cc00 	.word	0x4090cc00
 800c688:	3fe00000 	.word	0x3fe00000
 800c68c:	fff00000 	.word	0xfff00000
 800c690:	3ff00000 	.word	0x3ff00000
 800c694:	652b82fe 	.word	0x652b82fe
 800c698:	3c971547 	.word	0x3c971547

0800c69c <fabs>:
 800c69c:	ec51 0b10 	vmov	r0, r1, d0
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c6a6:	ec43 2b10 	vmov	d0, r2, r3
 800c6aa:	4770      	bx	lr
 800c6ac:	0000      	movs	r0, r0
	...

0800c6b0 <scalbn>:
 800c6b0:	b570      	push	{r4, r5, r6, lr}
 800c6b2:	ec55 4b10 	vmov	r4, r5, d0
 800c6b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c6ba:	4606      	mov	r6, r0
 800c6bc:	462b      	mov	r3, r5
 800c6be:	b991      	cbnz	r1, 800c6e6 <scalbn+0x36>
 800c6c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c6c4:	4323      	orrs	r3, r4
 800c6c6:	d03b      	beq.n	800c740 <scalbn+0x90>
 800c6c8:	4b33      	ldr	r3, [pc, #204]	@ (800c798 <scalbn+0xe8>)
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f7f3 ff8a 	bl	80005e8 <__aeabi_dmul>
 800c6d4:	4b31      	ldr	r3, [pc, #196]	@ (800c79c <scalbn+0xec>)
 800c6d6:	429e      	cmp	r6, r3
 800c6d8:	4604      	mov	r4, r0
 800c6da:	460d      	mov	r5, r1
 800c6dc:	da0f      	bge.n	800c6fe <scalbn+0x4e>
 800c6de:	a326      	add	r3, pc, #152	@ (adr r3, 800c778 <scalbn+0xc8>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	e01e      	b.n	800c724 <scalbn+0x74>
 800c6e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c6ea:	4291      	cmp	r1, r2
 800c6ec:	d10b      	bne.n	800c706 <scalbn+0x56>
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	f7f3 fdc2 	bl	800027c <__adddf3>
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	e020      	b.n	800c740 <scalbn+0x90>
 800c6fe:	460b      	mov	r3, r1
 800c700:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c704:	3936      	subs	r1, #54	@ 0x36
 800c706:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c70a:	4296      	cmp	r6, r2
 800c70c:	dd0d      	ble.n	800c72a <scalbn+0x7a>
 800c70e:	2d00      	cmp	r5, #0
 800c710:	a11b      	add	r1, pc, #108	@ (adr r1, 800c780 <scalbn+0xd0>)
 800c712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c716:	da02      	bge.n	800c71e <scalbn+0x6e>
 800c718:	a11b      	add	r1, pc, #108	@ (adr r1, 800c788 <scalbn+0xd8>)
 800c71a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c71e:	a318      	add	r3, pc, #96	@ (adr r3, 800c780 <scalbn+0xd0>)
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f7f3 ff60 	bl	80005e8 <__aeabi_dmul>
 800c728:	e7e6      	b.n	800c6f8 <scalbn+0x48>
 800c72a:	1872      	adds	r2, r6, r1
 800c72c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c730:	428a      	cmp	r2, r1
 800c732:	dcec      	bgt.n	800c70e <scalbn+0x5e>
 800c734:	2a00      	cmp	r2, #0
 800c736:	dd06      	ble.n	800c746 <scalbn+0x96>
 800c738:	f36f 531e 	bfc	r3, #20, #11
 800c73c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c740:	ec45 4b10 	vmov	d0, r4, r5
 800c744:	bd70      	pop	{r4, r5, r6, pc}
 800c746:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c74a:	da08      	bge.n	800c75e <scalbn+0xae>
 800c74c:	2d00      	cmp	r5, #0
 800c74e:	a10a      	add	r1, pc, #40	@ (adr r1, 800c778 <scalbn+0xc8>)
 800c750:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c754:	dac3      	bge.n	800c6de <scalbn+0x2e>
 800c756:	a10e      	add	r1, pc, #56	@ (adr r1, 800c790 <scalbn+0xe0>)
 800c758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75c:	e7bf      	b.n	800c6de <scalbn+0x2e>
 800c75e:	3236      	adds	r2, #54	@ 0x36
 800c760:	f36f 531e 	bfc	r3, #20, #11
 800c764:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c768:	4620      	mov	r0, r4
 800c76a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a0 <scalbn+0xf0>)
 800c76c:	4629      	mov	r1, r5
 800c76e:	2200      	movs	r2, #0
 800c770:	e7d8      	b.n	800c724 <scalbn+0x74>
 800c772:	bf00      	nop
 800c774:	f3af 8000 	nop.w
 800c778:	c2f8f359 	.word	0xc2f8f359
 800c77c:	01a56e1f 	.word	0x01a56e1f
 800c780:	8800759c 	.word	0x8800759c
 800c784:	7e37e43c 	.word	0x7e37e43c
 800c788:	8800759c 	.word	0x8800759c
 800c78c:	fe37e43c 	.word	0xfe37e43c
 800c790:	c2f8f359 	.word	0xc2f8f359
 800c794:	81a56e1f 	.word	0x81a56e1f
 800c798:	43500000 	.word	0x43500000
 800c79c:	ffff3cb0 	.word	0xffff3cb0
 800c7a0:	3c900000 	.word	0x3c900000

0800c7a4 <with_errno>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	ed2d 8b02 	vpush	{d8}
 800c7aa:	eeb0 8a40 	vmov.f32	s16, s0
 800c7ae:	eef0 8a60 	vmov.f32	s17, s1
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	f7fe fc78 	bl	800b0a8 <__errno>
 800c7b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c7bc:	eef0 0a68 	vmov.f32	s1, s17
 800c7c0:	ecbd 8b02 	vpop	{d8}
 800c7c4:	6004      	str	r4, [r0, #0]
 800c7c6:	bd10      	pop	{r4, pc}

0800c7c8 <xflow>:
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	b507      	push	{r0, r1, r2, lr}
 800c7cc:	ec51 0b10 	vmov	r0, r1, d0
 800c7d0:	b183      	cbz	r3, 800c7f4 <xflow+0x2c>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7d8:	e9cd 2300 	strd	r2, r3, [sp]
 800c7dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7e0:	f7f3 ff02 	bl	80005e8 <__aeabi_dmul>
 800c7e4:	ec41 0b10 	vmov	d0, r0, r1
 800c7e8:	2022      	movs	r0, #34	@ 0x22
 800c7ea:	b003      	add	sp, #12
 800c7ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7f0:	f7ff bfd8 	b.w	800c7a4 <with_errno>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	e7ee      	b.n	800c7d8 <xflow+0x10>
 800c7fa:	0000      	movs	r0, r0
 800c7fc:	0000      	movs	r0, r0
	...

0800c800 <__math_uflow>:
 800c800:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c808 <__math_uflow+0x8>
 800c804:	f7ff bfe0 	b.w	800c7c8 <xflow>
 800c808:	00000000 	.word	0x00000000
 800c80c:	10000000 	.word	0x10000000

0800c810 <__math_oflow>:
 800c810:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c818 <__math_oflow+0x8>
 800c814:	f7ff bfd8 	b.w	800c7c8 <xflow>
 800c818:	00000000 	.word	0x00000000
 800c81c:	70000000 	.word	0x70000000

0800c820 <__ieee754_sqrt>:
 800c820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	4a66      	ldr	r2, [pc, #408]	@ (800c9c0 <__ieee754_sqrt+0x1a0>)
 800c826:	ec55 4b10 	vmov	r4, r5, d0
 800c82a:	43aa      	bics	r2, r5
 800c82c:	462b      	mov	r3, r5
 800c82e:	4621      	mov	r1, r4
 800c830:	d110      	bne.n	800c854 <__ieee754_sqrt+0x34>
 800c832:	4622      	mov	r2, r4
 800c834:	4620      	mov	r0, r4
 800c836:	4629      	mov	r1, r5
 800c838:	f7f3 fed6 	bl	80005e8 <__aeabi_dmul>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	4620      	mov	r0, r4
 800c842:	4629      	mov	r1, r5
 800c844:	f7f3 fd1a 	bl	800027c <__adddf3>
 800c848:	4604      	mov	r4, r0
 800c84a:	460d      	mov	r5, r1
 800c84c:	ec45 4b10 	vmov	d0, r4, r5
 800c850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c854:	2d00      	cmp	r5, #0
 800c856:	dc0e      	bgt.n	800c876 <__ieee754_sqrt+0x56>
 800c858:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c85c:	4322      	orrs	r2, r4
 800c85e:	d0f5      	beq.n	800c84c <__ieee754_sqrt+0x2c>
 800c860:	b19d      	cbz	r5, 800c88a <__ieee754_sqrt+0x6a>
 800c862:	4622      	mov	r2, r4
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	f7f3 fd06 	bl	8000278 <__aeabi_dsub>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	f7f3 ffe4 	bl	800083c <__aeabi_ddiv>
 800c874:	e7e8      	b.n	800c848 <__ieee754_sqrt+0x28>
 800c876:	152a      	asrs	r2, r5, #20
 800c878:	d115      	bne.n	800c8a6 <__ieee754_sqrt+0x86>
 800c87a:	2000      	movs	r0, #0
 800c87c:	e009      	b.n	800c892 <__ieee754_sqrt+0x72>
 800c87e:	0acb      	lsrs	r3, r1, #11
 800c880:	3a15      	subs	r2, #21
 800c882:	0549      	lsls	r1, r1, #21
 800c884:	2b00      	cmp	r3, #0
 800c886:	d0fa      	beq.n	800c87e <__ieee754_sqrt+0x5e>
 800c888:	e7f7      	b.n	800c87a <__ieee754_sqrt+0x5a>
 800c88a:	462a      	mov	r2, r5
 800c88c:	e7fa      	b.n	800c884 <__ieee754_sqrt+0x64>
 800c88e:	005b      	lsls	r3, r3, #1
 800c890:	3001      	adds	r0, #1
 800c892:	02dc      	lsls	r4, r3, #11
 800c894:	d5fb      	bpl.n	800c88e <__ieee754_sqrt+0x6e>
 800c896:	1e44      	subs	r4, r0, #1
 800c898:	1b12      	subs	r2, r2, r4
 800c89a:	f1c0 0420 	rsb	r4, r0, #32
 800c89e:	fa21 f404 	lsr.w	r4, r1, r4
 800c8a2:	4323      	orrs	r3, r4
 800c8a4:	4081      	lsls	r1, r0
 800c8a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8aa:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c8ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8b2:	07d2      	lsls	r2, r2, #31
 800c8b4:	bf5c      	itt	pl
 800c8b6:	005b      	lslpl	r3, r3, #1
 800c8b8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c8bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8c0:	bf58      	it	pl
 800c8c2:	0049      	lslpl	r1, r1, #1
 800c8c4:	2600      	movs	r6, #0
 800c8c6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c8ca:	107f      	asrs	r7, r7, #1
 800c8cc:	0049      	lsls	r1, r1, #1
 800c8ce:	2016      	movs	r0, #22
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c8d6:	1915      	adds	r5, r2, r4
 800c8d8:	429d      	cmp	r5, r3
 800c8da:	bfde      	ittt	le
 800c8dc:	192a      	addle	r2, r5, r4
 800c8de:	1b5b      	suble	r3, r3, r5
 800c8e0:	1936      	addle	r6, r6, r4
 800c8e2:	0fcd      	lsrs	r5, r1, #31
 800c8e4:	3801      	subs	r0, #1
 800c8e6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c8ea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c8ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c8f2:	d1f0      	bne.n	800c8d6 <__ieee754_sqrt+0xb6>
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	2420      	movs	r4, #32
 800c8f8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	eb0c 0e00 	add.w	lr, ip, r0
 800c902:	dc02      	bgt.n	800c90a <__ieee754_sqrt+0xea>
 800c904:	d113      	bne.n	800c92e <__ieee754_sqrt+0x10e>
 800c906:	458e      	cmp	lr, r1
 800c908:	d811      	bhi.n	800c92e <__ieee754_sqrt+0x10e>
 800c90a:	f1be 0f00 	cmp.w	lr, #0
 800c90e:	eb0e 000c 	add.w	r0, lr, ip
 800c912:	da3f      	bge.n	800c994 <__ieee754_sqrt+0x174>
 800c914:	2800      	cmp	r0, #0
 800c916:	db3d      	blt.n	800c994 <__ieee754_sqrt+0x174>
 800c918:	f102 0801 	add.w	r8, r2, #1
 800c91c:	1a9b      	subs	r3, r3, r2
 800c91e:	458e      	cmp	lr, r1
 800c920:	bf88      	it	hi
 800c922:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c926:	eba1 010e 	sub.w	r1, r1, lr
 800c92a:	4465      	add	r5, ip
 800c92c:	4642      	mov	r2, r8
 800c92e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c932:	3c01      	subs	r4, #1
 800c934:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c938:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c93c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c940:	d1dc      	bne.n	800c8fc <__ieee754_sqrt+0xdc>
 800c942:	4319      	orrs	r1, r3
 800c944:	d01b      	beq.n	800c97e <__ieee754_sqrt+0x15e>
 800c946:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800c9c4 <__ieee754_sqrt+0x1a4>
 800c94a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800c9c8 <__ieee754_sqrt+0x1a8>
 800c94e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c952:	e9db 2300 	ldrd	r2, r3, [fp]
 800c956:	f7f3 fc8f 	bl	8000278 <__aeabi_dsub>
 800c95a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4640      	mov	r0, r8
 800c964:	4649      	mov	r1, r9
 800c966:	f7f4 f8bb 	bl	8000ae0 <__aeabi_dcmple>
 800c96a:	b140      	cbz	r0, 800c97e <__ieee754_sqrt+0x15e>
 800c96c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c970:	e9da 0100 	ldrd	r0, r1, [sl]
 800c974:	e9db 2300 	ldrd	r2, r3, [fp]
 800c978:	d10e      	bne.n	800c998 <__ieee754_sqrt+0x178>
 800c97a:	3601      	adds	r6, #1
 800c97c:	4625      	mov	r5, r4
 800c97e:	1073      	asrs	r3, r6, #1
 800c980:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800c984:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c988:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800c98c:	086b      	lsrs	r3, r5, #1
 800c98e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800c992:	e759      	b.n	800c848 <__ieee754_sqrt+0x28>
 800c994:	4690      	mov	r8, r2
 800c996:	e7c1      	b.n	800c91c <__ieee754_sqrt+0xfc>
 800c998:	f7f3 fc70 	bl	800027c <__adddf3>
 800c99c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	4649      	mov	r1, r9
 800c9a8:	f7f4 f890 	bl	8000acc <__aeabi_dcmplt>
 800c9ac:	b120      	cbz	r0, 800c9b8 <__ieee754_sqrt+0x198>
 800c9ae:	1cab      	adds	r3, r5, #2
 800c9b0:	bf08      	it	eq
 800c9b2:	3601      	addeq	r6, #1
 800c9b4:	3502      	adds	r5, #2
 800c9b6:	e7e2      	b.n	800c97e <__ieee754_sqrt+0x15e>
 800c9b8:	1c6b      	adds	r3, r5, #1
 800c9ba:	f023 0501 	bic.w	r5, r3, #1
 800c9be:	e7de      	b.n	800c97e <__ieee754_sqrt+0x15e>
 800c9c0:	7ff00000 	.word	0x7ff00000
 800c9c4:	0800d368 	.word	0x0800d368
 800c9c8:	0800d360 	.word	0x0800d360

0800c9cc <_init>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	bf00      	nop
 800c9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d2:	bc08      	pop	{r3}
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	4770      	bx	lr

0800c9d8 <_fini>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	bf00      	nop
 800c9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9de:	bc08      	pop	{r3}
 800c9e0:	469e      	mov	lr, r3
 800c9e2:	4770      	bx	lr
