
Hello_World2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800c13c  0800c13c  0000d13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c620  0800c620  0000e15c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c620  0800c620  0000d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c628  0800c628  0000e15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c628  0800c628  0000d628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c62c  0800c62c  0000d62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800c630  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e15c  2**0
                  CONTENTS
 10 .bss          000195b8  2000015c  2000015c  0000e15c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019714  20019714  0000e15c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e15c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169b3  00000000  00000000  0000e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d8e  00000000  00000000  00024b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  000288d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4a  00000000  00000000  00029cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025470  00000000  00000000  0002ac3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad79  00000000  00000000  000500aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdba5  00000000  00000000  0006ae23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001389c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d88  00000000  00000000  00138a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0013e794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000015c 	.word	0x2000015c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c124 	.word	0x0800c124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000160 	.word	0x20000160
 80001cc:	0800c124 	.word	0x0800c124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b988 	b.w	8000c04 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	468e      	mov	lr, r1
 8000914:	4604      	mov	r4, r0
 8000916:	4688      	mov	r8, r1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14a      	bne.n	80009b2 <__udivmoddi4+0xa6>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d962      	bls.n	80009e8 <__udivmoddi4+0xdc>
 8000922:	fab2 f682 	clz	r6, r2
 8000926:	b14e      	cbz	r6, 800093c <__udivmoddi4+0x30>
 8000928:	f1c6 0320 	rsb	r3, r6, #32
 800092c:	fa01 f806 	lsl.w	r8, r1, r6
 8000930:	fa20 f303 	lsr.w	r3, r0, r3
 8000934:	40b7      	lsls	r7, r6
 8000936:	ea43 0808 	orr.w	r8, r3, r8
 800093a:	40b4      	lsls	r4, r6
 800093c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fbb8 f1fe 	udiv	r1, r8, lr
 8000948:	0c23      	lsrs	r3, r4, #16
 800094a:	fb0e 8811 	mls	r8, lr, r1, r8
 800094e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000952:	fb01 f20c 	mul.w	r2, r1, ip
 8000956:	429a      	cmp	r2, r3
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0x62>
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000960:	f080 80ea 	bcs.w	8000b38 <__udivmoddi4+0x22c>
 8000964:	429a      	cmp	r2, r3
 8000966:	f240 80e7 	bls.w	8000b38 <__udivmoddi4+0x22c>
 800096a:	3902      	subs	r1, #2
 800096c:	443b      	add	r3, r7
 800096e:	1a9a      	subs	r2, r3, r2
 8000970:	b2a3      	uxth	r3, r4
 8000972:	fbb2 f0fe 	udiv	r0, r2, lr
 8000976:	fb0e 2210 	mls	r2, lr, r0, r2
 800097a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000982:	459c      	cmp	ip, r3
 8000984:	d909      	bls.n	800099a <__udivmoddi4+0x8e>
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	f100 32ff 	add.w	r2, r0, #4294967295
 800098c:	f080 80d6 	bcs.w	8000b3c <__udivmoddi4+0x230>
 8000990:	459c      	cmp	ip, r3
 8000992:	f240 80d3 	bls.w	8000b3c <__udivmoddi4+0x230>
 8000996:	443b      	add	r3, r7
 8000998:	3802      	subs	r0, #2
 800099a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800099e:	eba3 030c 	sub.w	r3, r3, ip
 80009a2:	2100      	movs	r1, #0
 80009a4:	b11d      	cbz	r5, 80009ae <__udivmoddi4+0xa2>
 80009a6:	40f3      	lsrs	r3, r6
 80009a8:	2200      	movs	r2, #0
 80009aa:	e9c5 3200 	strd	r3, r2, [r5]
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d905      	bls.n	80009c2 <__udivmoddi4+0xb6>
 80009b6:	b10d      	cbz	r5, 80009bc <__udivmoddi4+0xb0>
 80009b8:	e9c5 0100 	strd	r0, r1, [r5]
 80009bc:	2100      	movs	r1, #0
 80009be:	4608      	mov	r0, r1
 80009c0:	e7f5      	b.n	80009ae <__udivmoddi4+0xa2>
 80009c2:	fab3 f183 	clz	r1, r3
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d146      	bne.n	8000a58 <__udivmoddi4+0x14c>
 80009ca:	4573      	cmp	r3, lr
 80009cc:	d302      	bcc.n	80009d4 <__udivmoddi4+0xc8>
 80009ce:	4282      	cmp	r2, r0
 80009d0:	f200 8105 	bhi.w	8000bde <__udivmoddi4+0x2d2>
 80009d4:	1a84      	subs	r4, r0, r2
 80009d6:	eb6e 0203 	sbc.w	r2, lr, r3
 80009da:	2001      	movs	r0, #1
 80009dc:	4690      	mov	r8, r2
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d0e5      	beq.n	80009ae <__udivmoddi4+0xa2>
 80009e2:	e9c5 4800 	strd	r4, r8, [r5]
 80009e6:	e7e2      	b.n	80009ae <__udivmoddi4+0xa2>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	f000 8090 	beq.w	8000b0e <__udivmoddi4+0x202>
 80009ee:	fab2 f682 	clz	r6, r2
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	f040 80a4 	bne.w	8000b40 <__udivmoddi4+0x234>
 80009f8:	1a8a      	subs	r2, r1, r2
 80009fa:	0c03      	lsrs	r3, r0, #16
 80009fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a00:	b280      	uxth	r0, r0
 8000a02:	b2bc      	uxth	r4, r7
 8000a04:	2101      	movs	r1, #1
 8000a06:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a0a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a12:	fb04 f20c 	mul.w	r2, r4, ip
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d907      	bls.n	8000a2a <__udivmoddi4+0x11e>
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a20:	d202      	bcs.n	8000a28 <__udivmoddi4+0x11c>
 8000a22:	429a      	cmp	r2, r3
 8000a24:	f200 80e0 	bhi.w	8000be8 <__udivmoddi4+0x2dc>
 8000a28:	46c4      	mov	ip, r8
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a30:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a34:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a38:	fb02 f404 	mul.w	r4, r2, r4
 8000a3c:	429c      	cmp	r4, r3
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0x144>
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x142>
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	f200 80ca 	bhi.w	8000be2 <__udivmoddi4+0x2d6>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	1b1b      	subs	r3, r3, r4
 8000a52:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a56:	e7a5      	b.n	80009a4 <__udivmoddi4+0x98>
 8000a58:	f1c1 0620 	rsb	r6, r1, #32
 8000a5c:	408b      	lsls	r3, r1
 8000a5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a62:	431f      	orrs	r7, r3
 8000a64:	fa0e f401 	lsl.w	r4, lr, r1
 8000a68:	fa20 f306 	lsr.w	r3, r0, r6
 8000a6c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a70:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a74:	4323      	orrs	r3, r4
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	fa1f fc87 	uxth.w	ip, r7
 8000a7e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a82:	0c1c      	lsrs	r4, r3, #16
 8000a84:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a88:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a8c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	fa02 f201 	lsl.w	r2, r2, r1
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x1a0>
 8000a98:	193c      	adds	r4, r7, r4
 8000a9a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a9e:	f080 809c 	bcs.w	8000bda <__udivmoddi4+0x2ce>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f240 8099 	bls.w	8000bda <__udivmoddi4+0x2ce>
 8000aa8:	3802      	subs	r0, #2
 8000aaa:	443c      	add	r4, r7
 8000aac:	eba4 040e 	sub.w	r4, r4, lr
 8000ab0:	fa1f fe83 	uxth.w	lr, r3
 8000ab4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab8:	fb09 4413 	mls	r4, r9, r3, r4
 8000abc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ac0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ac4:	45a4      	cmp	ip, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x1ce>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ace:	f080 8082 	bcs.w	8000bd6 <__udivmoddi4+0x2ca>
 8000ad2:	45a4      	cmp	ip, r4
 8000ad4:	d97f      	bls.n	8000bd6 <__udivmoddi4+0x2ca>
 8000ad6:	3b02      	subs	r3, #2
 8000ad8:	443c      	add	r4, r7
 8000ada:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ade:	eba4 040c 	sub.w	r4, r4, ip
 8000ae2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ae6:	4564      	cmp	r4, ip
 8000ae8:	4673      	mov	r3, lr
 8000aea:	46e1      	mov	r9, ip
 8000aec:	d362      	bcc.n	8000bb4 <__udivmoddi4+0x2a8>
 8000aee:	d05f      	beq.n	8000bb0 <__udivmoddi4+0x2a4>
 8000af0:	b15d      	cbz	r5, 8000b0a <__udivmoddi4+0x1fe>
 8000af2:	ebb8 0203 	subs.w	r2, r8, r3
 8000af6:	eb64 0409 	sbc.w	r4, r4, r9
 8000afa:	fa04 f606 	lsl.w	r6, r4, r6
 8000afe:	fa22 f301 	lsr.w	r3, r2, r1
 8000b02:	431e      	orrs	r6, r3
 8000b04:	40cc      	lsrs	r4, r1
 8000b06:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e74f      	b.n	80009ae <__udivmoddi4+0xa2>
 8000b0e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b12:	0c01      	lsrs	r1, r0, #16
 8000b14:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4638      	mov	r0, r7
 8000b22:	463c      	mov	r4, r7
 8000b24:	46b8      	mov	r8, r7
 8000b26:	46be      	mov	lr, r7
 8000b28:	2620      	movs	r6, #32
 8000b2a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b2e:	eba2 0208 	sub.w	r2, r2, r8
 8000b32:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b36:	e766      	b.n	8000a06 <__udivmoddi4+0xfa>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	e718      	b.n	800096e <__udivmoddi4+0x62>
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	e72c      	b.n	800099a <__udivmoddi4+0x8e>
 8000b40:	f1c6 0220 	rsb	r2, r6, #32
 8000b44:	fa2e f302 	lsr.w	r3, lr, r2
 8000b48:	40b7      	lsls	r7, r6
 8000b4a:	40b1      	lsls	r1, r6
 8000b4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	430a      	orrs	r2, r1
 8000b56:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b5a:	b2bc      	uxth	r4, r7
 8000b5c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b60:	0c11      	lsrs	r1, r2, #16
 8000b62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b66:	fb08 f904 	mul.w	r9, r8, r4
 8000b6a:	40b0      	lsls	r0, r6
 8000b6c:	4589      	cmp	r9, r1
 8000b6e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b72:	b280      	uxth	r0, r0
 8000b74:	d93e      	bls.n	8000bf4 <__udivmoddi4+0x2e8>
 8000b76:	1879      	adds	r1, r7, r1
 8000b78:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b7c:	d201      	bcs.n	8000b82 <__udivmoddi4+0x276>
 8000b7e:	4589      	cmp	r9, r1
 8000b80:	d81f      	bhi.n	8000bc2 <__udivmoddi4+0x2b6>
 8000b82:	eba1 0109 	sub.w	r1, r1, r9
 8000b86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b8a:	fb09 f804 	mul.w	r8, r9, r4
 8000b8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b92:	b292      	uxth	r2, r2
 8000b94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b98:	4542      	cmp	r2, r8
 8000b9a:	d229      	bcs.n	8000bf0 <__udivmoddi4+0x2e4>
 8000b9c:	18ba      	adds	r2, r7, r2
 8000b9e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ba2:	d2c4      	bcs.n	8000b2e <__udivmoddi4+0x222>
 8000ba4:	4542      	cmp	r2, r8
 8000ba6:	d2c2      	bcs.n	8000b2e <__udivmoddi4+0x222>
 8000ba8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bac:	443a      	add	r2, r7
 8000bae:	e7be      	b.n	8000b2e <__udivmoddi4+0x222>
 8000bb0:	45f0      	cmp	r8, lr
 8000bb2:	d29d      	bcs.n	8000af0 <__udivmoddi4+0x1e4>
 8000bb4:	ebbe 0302 	subs.w	r3, lr, r2
 8000bb8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000bbc:	3801      	subs	r0, #1
 8000bbe:	46e1      	mov	r9, ip
 8000bc0:	e796      	b.n	8000af0 <__udivmoddi4+0x1e4>
 8000bc2:	eba7 0909 	sub.w	r9, r7, r9
 8000bc6:	4449      	add	r1, r9
 8000bc8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000bcc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd0:	fb09 f804 	mul.w	r8, r9, r4
 8000bd4:	e7db      	b.n	8000b8e <__udivmoddi4+0x282>
 8000bd6:	4673      	mov	r3, lr
 8000bd8:	e77f      	b.n	8000ada <__udivmoddi4+0x1ce>
 8000bda:	4650      	mov	r0, sl
 8000bdc:	e766      	b.n	8000aac <__udivmoddi4+0x1a0>
 8000bde:	4608      	mov	r0, r1
 8000be0:	e6fd      	b.n	80009de <__udivmoddi4+0xd2>
 8000be2:	443b      	add	r3, r7
 8000be4:	3a02      	subs	r2, #2
 8000be6:	e733      	b.n	8000a50 <__udivmoddi4+0x144>
 8000be8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bec:	443b      	add	r3, r7
 8000bee:	e71c      	b.n	8000a2a <__udivmoddi4+0x11e>
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	e79c      	b.n	8000b2e <__udivmoddi4+0x222>
 8000bf4:	eba1 0109 	sub.w	r1, r1, r9
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bfe:	fb09 f804 	mul.w	r8, r9, r4
 8000c02:	e7c4      	b.n	8000b8e <__udivmoddi4+0x282>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c10:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c14:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d013      	beq.n	8000c48 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c20:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c24:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c28:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00b      	beq.n	8000c48 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c30:	e000      	b.n	8000c34 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c32:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c34:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0f9      	beq.n	8000c32 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c3e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	outBufPtr = &dacData[0];
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000c62:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000c64:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	200002cc 	.word	0x200002cc
 8000c80:	200179cc 	.word	0x200179cc

08000c84 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	outBufPtr = &dacData[BUFFER_SIZE / 2];
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_I2S_TxCpltCallback+0x20>)
 8000c8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ca8 <HAL_I2S_TxCpltCallback+0x24>)
 8000c90:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_I2S_TxCpltCallback+0x28>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	2000be4c 	.word	0x2000be4c
 8000cac:	200179cc 	.word	0x200179cc

08000cb0 <processData>:

void processData() {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	static float leftOut, rightOut;
	float t;
	for (uint16_t n = 0; n < (BUFFER_SIZE / 2) - 1; n += 2) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	e050      	b.n	8000d5e <processData+0xae>

		t = (float)(n/2) * 1.0/FS + tglobal;
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	085b      	lsrs	r3, r3, #1
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	ee07 3a90 	vmov	s15, r3
 8000cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cca:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8000db0 <processData+0x100>
 8000cce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cd2:	edc7 7a00 	vstr	s15, [r7]
		leftOut = sinf(192.3953916 *TAU * t);
 8000cd6:	6838      	ldr	r0, [r7, #0]
 8000cd8:	f7ff fd58 	bl	800078c <__aeabi_f2d>
 8000cdc:	a330      	add	r3, pc, #192	@ (adr r3, 8000da0 <processData+0xf0>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	f7ff fac5 	bl	8000270 <__aeabi_dmul>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	4610      	mov	r0, r2
 8000cec:	4619      	mov	r1, r3
 8000cee:	f7ff fda5 	bl	800083c <__aeabi_d2f>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	ee00 3a10 	vmov	s0, r3
 8000cf8:	f00a fce4 	bl	800b6c4 <sinf>
 8000cfc:	eef0 7a40 	vmov.f32	s15, s0
 8000d00:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <processData+0x104>)
 8000d02:	edc3 7a00 	vstr	s15, [r3]
		rightOut = leftOut;
 8000d06:	4b2b      	ldr	r3, [pc, #172]	@ (8000db4 <processData+0x104>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000db8 <processData+0x108>)
 8000d0c:	6013      	str	r3, [r2, #0]
		outBufPtr[n] = (int16_t) (FLOAT_TO_INT16 * leftOut);
 8000d0e:	4b29      	ldr	r3, [pc, #164]	@ (8000db4 <processData+0x104>)
 8000d10:	edd3 7a00 	vldr	s15, [r3]
 8000d14:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000dbc <processData+0x10c>
 8000d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1c:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <processData+0x110>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d2a:	ee17 2a90 	vmov	r2, s15
 8000d2e:	b212      	sxth	r2, r2
 8000d30:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + 1] = (int16_t) (FLOAT_TO_INT16 * rightOut);
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <processData+0x108>)
 8000d34:	edd3 7a00 	vldr	s15, [r3]
 8000d38:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000dbc <processData+0x10c>
 8000d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d40:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <processData+0x110>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	3301      	adds	r3, #1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d50:	ee17 2a90 	vmov	r2, s15
 8000d54:	b212      	sxth	r2, r2
 8000d56:	801a      	strh	r2, [r3, #0]
	for (uint16_t n = 0; n < (BUFFER_SIZE / 2) - 1; n += 2) {
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	80fb      	strh	r3, [r7, #6]
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	f645 52be 	movw	r2, #23998	@ 0x5dbe
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d9a9      	bls.n	8000cbc <processData+0xc>
	}
	tglobal += 1.0/FS;
 8000d68:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <processData+0x114>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fd0d 	bl	800078c <__aeabi_f2d>
 8000d72:	a30d      	add	r3, pc, #52	@ (adr r3, 8000da8 <processData+0xf8>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	f7ff fbaa 	bl	80004d0 <__adddf3>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	f7ff fd5a 	bl	800083c <__aeabi_d2f>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <processData+0x114>)
 8000d8c:	6013      	str	r3, [r2, #0]
	dataReadyFlag = 0;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <processData+0x118>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]

}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	f3af 8000 	nop.w
 8000da0:	707058a2 	.word	0x707058a2
 8000da4:	4092e36c 	.word	0x4092e36c
 8000da8:	e077bddf 	.word	0xe077bddf
 8000dac:	3ef5cd5b 	.word	0x3ef5cd5b
 8000db0:	473bdf00 	.word	0x473bdf00
 8000db4:	200179d4 	.word	0x200179d4
 8000db8:	200179d8 	.word	0x200179d8
 8000dbc:	47000000 	.word	0x47000000
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	200179d0 	.word	0x200179d0
 8000dc8:	200179cc 	.word	0x200179cc

08000dcc <i2c_wr>:

struct cs4x_drv {
	struct cs4x_cfg cfg;
};

HAL_StatusTypeDef i2c_wr(uint8_t *buf, uint8_t Nbytes) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Transmit(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	9200      	str	r2, [sp, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	2194      	movs	r1, #148	@ 0x94
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <i2c_wr+0x30>)
 8000de8:	f002 f812 	bl	8002e10 <HAL_I2C_Master_Transmit>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
	return rc;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000178 	.word	0x20000178

08000e00 <i2c_rd>:

HAL_StatusTypeDef i2c_rd(uint8_t *buf, uint8_t Nbytes) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Receive(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	9200      	str	r2, [sp, #0]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	2194      	movs	r1, #148	@ 0x94
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <i2c_rd+0x30>)
 8000e1c:	f002 f8f6 	bl	800300c <HAL_I2C_Master_Receive>
 8000e20:	4603      	mov	r3, r0
 8000e22:	73fb      	strb	r3, [r7, #15]
	return rc;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000178 	.word	0x20000178

08000e34 <cs4x_rd>:
// read a dac register
static int cs4x_rd(struct cs4x_drv *dac, uint8_t reg, uint8_t *val) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[1] = { reg };
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	743b      	strb	r3, [r7, #16]
	int rc;
	rc = i2c_wr(buf, 1);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffbd 	bl	8000dcc <i2c_wr>
 8000e52:	4603      	mov	r3, r0
 8000e54:	617b      	str	r3, [r7, #20]
	if (rc != 0) {
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <cs4x_rd+0x2c>
		return rc;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	e010      	b.n	8000e82 <cs4x_rd+0x4e>
	}
	rc = i2c_rd(buf, 1);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffca 	bl	8000e00 <i2c_rd>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	617b      	str	r3, [r7, #20]
	if (rc != 0) {
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <cs4x_rd+0x46>
		return rc;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	e003      	b.n	8000e82 <cs4x_rd+0x4e>
	}
	*val = buf[0];
 8000e7a:	7c3a      	ldrb	r2, [r7, #16]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <cs4x_wr>:

// write a dac register
static int cs4x_wr(struct cs4x_drv *dac, uint8_t reg, uint8_t val) {
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]
 8000e96:	4613      	mov	r3, r2
 8000e98:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2] = { reg, val };
 8000e9a:	78fb      	ldrb	r3, [r7, #3]
 8000e9c:	733b      	strb	r3, [r7, #12]
 8000e9e:	78bb      	ldrb	r3, [r7, #2]
 8000ea0:	737b      	strb	r3, [r7, #13]
	return i2c_wr(buf, 2);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff8f 	bl	8000dcc <i2c_wr>
 8000eae:	4603      	mov	r3, r0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <cs4x_rmw>:

// read/modify/write a register
static int cs4x_rmw(struct cs4x_drv *dac, uint8_t reg, uint8_t mask,
		uint8_t val) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	70fb      	strb	r3, [r7, #3]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70bb      	strb	r3, [r7, #2]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	707b      	strb	r3, [r7, #1]
	uint8_t x;
	int rc;
	rc = cs4x_rd(dac, reg, &x);
 8000ed2:	f107 020b 	add.w	r2, r7, #11
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffaa 	bl	8000e34 <cs4x_rd>
 8000ee0:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <cs4x_rmw+0x34>
		return rc;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	e018      	b.n	8000f1e <cs4x_rmw+0x66>
	}
	x &= ~mask;
 8000eec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	b25a      	sxtb	r2, r3
 8000ef4:	7afb      	ldrb	r3, [r7, #11]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	b25b      	sxtb	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	72fb      	strb	r3, [r7, #11]
	x |= val & mask;
 8000f00:	787a      	ldrb	r2, [r7, #1]
 8000f02:	78bb      	ldrb	r3, [r7, #2]
 8000f04:	4013      	ands	r3, r2
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	7afb      	ldrb	r3, [r7, #11]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	72fb      	strb	r3, [r7, #11]
	return cs4x_wr(dac, reg, x);
 8000f10:	7afa      	ldrb	r2, [r7, #11]
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffb7 	bl	8000e8a <cs4x_wr>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <cs4x_set>:

// set bits in a register
static int cs4x_set(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	70fb      	strb	r3, [r7, #3]
 8000f32:	4613      	mov	r3, r2
 8000f34:	70bb      	strb	r3, [r7, #2]
	return cs4x_rmw(dac, reg, bits, 0xff);
 8000f36:	78ba      	ldrb	r2, [r7, #2]
 8000f38:	78f9      	ldrb	r1, [r7, #3]
 8000f3a:	23ff      	movs	r3, #255	@ 0xff
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffbb 	bl	8000eb8 <cs4x_rmw>
 8000f42:	4603      	mov	r3, r0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <cs4x_clr>:

// clear bits in a register
static int cs4x_clr(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	70bb      	strb	r3, [r7, #2]
	return cs4x_rmw(dac, reg, bits, 0);
 8000f5c:	78ba      	ldrb	r2, [r7, #2]
 8000f5e:	78f9      	ldrb	r1, [r7, #3]
 8000f60:	2300      	movs	r3, #0
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa8 	bl	8000eb8 <cs4x_rmw>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <cs4x_id>:

//-----------------------------------------------------------------------------

// read and verify the device id
static int cs4x_id(struct cs4x_drv *dac) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	uint8_t id;
	int rc;
	rc = cs4x_rd(dac, CS43L22_REG_ID, &id);
 8000f7a:	f107 030b 	add.w	r3, r7, #11
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2101      	movs	r1, #1
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff56 	bl	8000e34 <cs4x_rd>
 8000f88:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <cs4x_id+0x22>
		return rc;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	e008      	b.n	8000fa6 <cs4x_id+0x34>
	}
	if ((id & 0xf8) != 0xe0) {
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8000f9a:	2be0      	cmp	r3, #224	@ 0xe0
 8000f9c:	d002      	beq.n	8000fa4 <cs4x_id+0x32>
		return -1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e000      	b.n	8000fa6 <cs4x_id+0x34>
	}
	return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <cs4x_output>:

//-----------------------------------------------------------------------------

// set the output device
int cs4x_output(struct cs4x_drv *dac, unsigned int out) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	const uint8_t ctrl[DAC_OUTPUT_MAX] = { 0xff, 0xfa, 0xaf, 0xaa, 0x05 };
 8000fba:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <cs4x_output+0x54>)
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc4:	6018      	str	r0, [r3, #0]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	7019      	strb	r1, [r3, #0]
	int rc;
	if (out >= DAC_OUTPUT_MAX) {
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d901      	bls.n	8000fd4 <cs4x_output+0x24>
		out = DAC_OUTPUT_OFF;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	603b      	str	r3, [r7, #0]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, ctrl[out]);
 8000fd4:	f107 020c 	add.w	r2, r7, #12
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff51 	bl	8000e8a <cs4x_wr>
 8000fe8:	6178      	str	r0, [r7, #20]
	if (rc != 0) {
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <cs4x_output+0x44>
		return rc;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	e003      	b.n	8000ffc <cs4x_output+0x4c>
	}
	dac->cfg.out = out;
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	605a      	str	r2, [r3, #4]
	return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800c13c 	.word	0x0800c13c

08001008 <cs4x_master_volume>:
// volume controls
// Map 0..255 to the control value for a volume register.
// 0 is minium volume (or mute), 255 is maximum volume.

// set the master volume
int cs4x_master_volume(struct cs4x_drv *dac, uint8_t vol) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	x = (((281 - 52) << 16) / 255) * vol + (52 << 16);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	f24e 52e5 	movw	r2, #58853	@ 0xe5e5
 800101a:	fb02 f303 	mul.w	r3, r2, r3
 800101e:	f503 1350 	add.w	r3, r3, #3407872	@ 0x340000
 8001022:	60fb      	str	r3, [r7, #12]
	x >>= 16;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	0c1b      	lsrs	r3, r3, #16
 8001028:	60fb      	str	r3, [r7, #12]
	x &= 255;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	60fb      	str	r3, [r7, #12]
	rc = cs4x_wr(dac, CS43L22_REG_Master_A_Vol, x);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	2120      	movs	r1, #32
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff26 	bl	8000e8a <cs4x_wr>
 800103e:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Master_B_Vol, x);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	2121      	movs	r1, #33	@ 0x21
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff1e 	bl	8000e8a <cs4x_wr>
 800104e:	4602      	mov	r2, r0
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
 8001054:	60bb      	str	r3, [r7, #8]
	return rc;
 8001056:	68bb      	ldr	r3, [r7, #8]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <cs4x_headphone_volume>:

// set the headphone volume
int cs4x_headphone_volume(struct cs4x_drv *dac, uint8_t vol) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <cs4x_headphone_volume+0x18>
		x = 1;		// muted
 8001072:	2301      	movs	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e00e      	b.n	8001096 <cs4x_headphone_volume+0x36>
	} else {
		x = (((257 - 52) << 16) / 255) * (vol - 1) + (52 << 16);
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	3b01      	subs	r3, #1
 800107c:	f64c 52cd 	movw	r2, #52685	@ 0xcdcd
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	f503 1350 	add.w	r3, r3, #3407872	@ 0x340000
 8001088:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	0c1b      	lsrs	r3, r3, #16
 800108e:	60fb      	str	r3, [r7, #12]
		x &= 255;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Headphone_A_Volume, x);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	461a      	mov	r2, r3
 800109c:	2122      	movs	r1, #34	@ 0x22
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fef3 	bl	8000e8a <cs4x_wr>
 80010a4:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Headphone_B_Volume, x);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	2123      	movs	r1, #35	@ 0x23
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff feeb 	bl	8000e8a <cs4x_wr>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
	return rc;
 80010bc:	68bb      	ldr	r3, [r7, #8]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <cs4x_speaker_volume>:

// set the speaker volume
int cs4x_speaker_volume(struct cs4x_drv *dac, uint8_t vol) {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <cs4x_speaker_volume+0x18>
		x = 1;		// muted
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e00e      	b.n	80010fc <cs4x_speaker_volume+0x36>
	} else {
		x = (((257 - 64) << 16) / 255) * (vol - 1) + (64 << 16);
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	f24c 12c1 	movw	r2, #49601	@ 0xc1c1
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 80010ee:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	0c1b      	lsrs	r3, r3, #16
 80010f4:	60fb      	str	r3, [r7, #12]
		x &= 255;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Speaker_A_Volume, x);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	461a      	mov	r2, r3
 8001102:	2124      	movs	r1, #36	@ 0x24
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff fec0 	bl	8000e8a <cs4x_wr>
 800110a:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Speaker_B_Volume, x);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	2125      	movs	r1, #37	@ 0x25
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff feb8 	bl	8000e8a <cs4x_wr>
 800111a:	4602      	mov	r2, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
 8001120:	60bb      	str	r3, [r7, #8]
	return rc;
 8001122:	68bb      	ldr	r3, [r7, #8]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <cs4x_pcm_volume>:

// set the pcm volume
int cs4x_pcm_volume(struct cs4x_drv *dac, uint8_t vol) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <cs4x_pcm_volume+0x18>
		x = 0x80;	// muted
 800113e:	2380      	movs	r3, #128	@ 0x80
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	e010      	b.n	8001166 <cs4x_pcm_volume+0x3a>
	} else {
		x = (((281 - 25) << 16) / (255 - 1)) * (vol - 1) + (25 << 16);
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	4613      	mov	r3, r2
 800114a:	01db      	lsls	r3, r3, #7
 800114c:	4413      	add	r3, r2
 800114e:	01db      	lsls	r3, r3, #7
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	f503 13c8 	add.w	r3, r3, #1638400	@ 0x190000
 8001158:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	0c1b      	lsrs	r3, r3, #16
 800115e:	60fb      	str	r3, [r7, #12]
		x &= 255;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_PCMA_Vol, x);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	211a      	movs	r1, #26
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fe8b 	bl	8000e8a <cs4x_wr>
 8001174:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_PCMB_Vol, x);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	211b      	movs	r1, #27
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fe83 	bl	8000e8a <cs4x_wr>
 8001184:	4602      	mov	r2, r0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4313      	orrs	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
	return rc;
 800118c:	68bb      	ldr	r3, [r7, #8]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <cs4x_mute_off>:
	int rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, 0xff);
	rc |= cs4x_headphone_volume(dac, 0);
	return rc;
}

static int cs4x_mute_off(struct cs4x_drv *dac) {
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	int rc = cs4x_headphone_volume(dac, 0xff);
 800119e:	21ff      	movs	r1, #255	@ 0xff
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff5d 	bl	8001060 <cs4x_headphone_volume>
 80011a6:	60f8      	str	r0, [r7, #12]
	rc |= cs4x_output(dac, dac->cfg.out);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4619      	mov	r1, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fefe 	bl	8000fb0 <cs4x_output>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]
	return rc;
 80011bc:	68fb      	ldr	r3, [r7, #12]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <cs4x_init>:

//-----------------------------------------------------------------------------

int cs4x_init(struct cs4x_drv *dac, struct cs4x_cfg *cfg) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	int rc;

	memset(dac, 0, sizeof(struct cs4x_drv));
 80011d2:	2208      	movs	r2, #8
 80011d4:	2100      	movs	r1, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f009 fcf2 	bl	800abc0 <memset>
	dac->cfg = *cfg;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e4:	e883 0003 	stmia.w	r3, {r0, r1}

	// 4.9 Recommended Power-Up Sequence (1,2)
	// reset the dac
	// DAC Reset is active low, so pull the pin high.
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2110      	movs	r1, #16
 80011ec:	4856      	ldr	r0, [pc, #344]	@ (8001348 <cs4x_init+0x180>)
 80011ee:	f001 fcb1 	bl	8002b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_SET);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4854      	ldr	r0, [pc, #336]	@ (8001348 <cs4x_init+0x180>)
 80011f8:	f001 fcac 	bl	8002b54 <HAL_GPIO_WritePin>

	rc = cs4x_id(dac);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff feb8 	bl	8000f72 <cs4x_id>
 8001202:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <cs4x_init+0x4c>
		printf("cs4x bad device id %d\r\n", rc);
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	484f      	ldr	r0, [pc, #316]	@ (800134c <cs4x_init+0x184>)
 800120e:	f009 fb8f 	bl	800a930 <iprintf>
		goto exit;
 8001212:	e094      	b.n	800133e <cs4x_init+0x176>
	}
	// 4.9 Recommended Power-Up Sequence (4)
	// 4.11 Required Initialization Settings
	rc |= cs4x_wr(dac, 0, 0x99);
 8001214:	2299      	movs	r2, #153	@ 0x99
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fe36 	bl	8000e8a <cs4x_wr>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_wr(dac, 0x47, 0x80);
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	2147      	movs	r1, #71	@ 0x47
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fe2d 	bl	8000e8a <cs4x_wr>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4313      	orrs	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_set(dac, 0x32, 1 << 7);
 8001238:	2280      	movs	r2, #128	@ 0x80
 800123a:	2132      	movs	r1, #50	@ 0x32
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fe72 	bl	8000f26 <cs4x_set>
 8001242:	4602      	mov	r2, r0
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_clr(dac, 0x32, 1 << 7);
 800124a:	2280      	movs	r2, #128	@ 0x80
 800124c:	2132      	movs	r1, #50	@ 0x32
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fe7c 	bl	8000f4c <cs4x_clr>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_wr(dac, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fe12 	bl	8000e8a <cs4x_wr>
 8001266:	4602      	mov	r2, r0
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]

	// set the output to AUTO
	rc |= cs4x_output(dac, DAC_OUTPUT_AUTO);
 800126e:	2104      	movs	r1, #4
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fe9d 	bl	8000fb0 <cs4x_output>
 8001276:	4602      	mov	r2, r0
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
	// Clock configuration: Auto detection
	rc |= cs4x_wr(dac, CS43L22_REG_Clocking_Ctl, 0x81);
 800127e:	2281      	movs	r2, #129	@ 0x81
 8001280:	2105      	movs	r1, #5
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fe01 	bl	8000e8a <cs4x_wr>
 8001288:	4602      	mov	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
	// Set the Slave Mode and the audio Standard
	rc |= cs4x_wr(dac, CS43L22_REG_Interface_Ctl_1, 0x04);
 8001290:	2204      	movs	r2, #4
 8001292:	2106      	movs	r1, #6
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fdf8 	bl	8000e8a <cs4x_wr>
 800129a:	4602      	mov	r2, r0
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

	// Set the Master volume
	rc |= cs4x_master_volume(dac, 169);
 80012a2:	21a9      	movs	r1, #169	@ 0xa9
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff feaf 	bl	8001008 <cs4x_master_volume>
 80012aa:	4602      	mov	r2, r0
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

	// If the Speaker is enabled, set the Mono mode and volume attenuation level
	if (dac->cfg.out != DAC_OUTPUT_OFF
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d014      	beq.n	80012e4 <cs4x_init+0x11c>
			&& dac->cfg.out != DAC_OUTPUT_HEADPHONE) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d010      	beq.n	80012e4 <cs4x_init+0x11c>
		// Set the Speaker Mono mode
		rc |= cs4x_wr(dac, CS43L22_REG_Playback_Ctl_2, 0x06);
 80012c2:	2206      	movs	r2, #6
 80012c4:	210f      	movs	r1, #15
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fddf 	bl	8000e8a <cs4x_wr>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
		rc |= cs4x_speaker_volume(dac, 0xff);
 80012d4:	21ff      	movs	r1, #255	@ 0xff
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fef5 	bl	80010c6 <cs4x_speaker_volume>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
	// off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	// If this delay is not inserted, then the codec will not shut down properly and
	// it results in high noise after shut down.

	// Disable the analog soft ramp
	rc |= cs4x_rmw(dac, CS43L22_REG_Analog_ZC_and_SR_Settings, 0x0f, 0x00);
 80012e4:	2300      	movs	r3, #0
 80012e6:	220f      	movs	r2, #15
 80012e8:	210a      	movs	r1, #10
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fde4 	bl	8000eb8 <cs4x_rmw>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	// Disable the digital soft ramp
	rc |= cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x04);
 80012f8:	2204      	movs	r2, #4
 80012fa:	210e      	movs	r1, #14
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fdc4 	bl	8000e8a <cs4x_wr>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
	// Disable the limiter attack level
	rc |= cs4x_wr(dac, CS43L22_REG_Limit_Ctl_1_Thresholds, 0x00);
 800130a:	2200      	movs	r2, #0
 800130c:	2127      	movs	r1, #39	@ 0x27
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fdbb 	bl	8000e8a <cs4x_wr>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
	// Adjust Bass and Treble levels
	rc |= cs4x_wr(dac, CS43L22_REG_Tone_Ctl, 0x0f);
 800131c:	220f      	movs	r2, #15
 800131e:	211f      	movs	r1, #31
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fdb2 	bl	8000e8a <cs4x_wr>
 8001326:	4602      	mov	r2, r0
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
	// Adjust PCM volume level
	rc |= cs4x_pcm_volume(dac, 241);
 800132e:	21f1      	movs	r1, #241	@ 0xf1
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fefb 	bl	800112c <cs4x_pcm_volume>
 8001336:	4602      	mov	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

	exit: return rc;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40020c00 	.word	0x40020c00
 800134c:	0800c144 	.word	0x0800c144

08001350 <cs4x_start>:

//-----------------------------------------------------------------------------

int cs4x_start(struct cs4x_drv *dac) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	// Enable the digital soft ramp
	int rc = cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x06);
 8001358:	2206      	movs	r2, #6
 800135a:	210e      	movs	r1, #14
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fd94 	bl	8000e8a <cs4x_wr>
 8001362:	60f8      	str	r0, [r7, #12]
	// Enable Output device
	rc |= cs4x_mute_off(dac);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff16 	bl	8001196 <cs4x_mute_off>
 800136a:	4602      	mov	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
	// Power on the Codec
	rc |= cs4x_wr(dac, CS43L22_REG_Power_Ctl_1, 0x9e);
 8001372:	229e      	movs	r2, #158	@ 0x9e
 8001374:	2102      	movs	r1, #2
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fd87 	bl	8000e8a <cs4x_wr>
 800137c:	4602      	mov	r2, r0
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4313      	orrs	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
	return rc;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f000 fd29 	bl	8001dec <HAL_Init>
	uint8_t buf[12];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f851 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f000 f96b 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a2:	f000 f949 	bl	8001638 <MX_DMA_Init>
  MX_I2C1_Init();
 80013a6:	f000 f8b5 	bl	8001514 <MX_I2C1_Init>
  MX_I2S3_Init();
 80013aa:	f000 f8e1 	bl	8001570 <MX_I2S3_Init>
  MX_SPI1_Init();
 80013ae:	f000 f90d 	bl	80015cc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80013b2:	f008 fcf9 	bl	8009da8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	// EXT DAC INTIIALIZATION
	struct cs4x_cfg cfgdac;
	cfgdac.adr = DACADDR;
 80013b6:	2394      	movs	r3, #148	@ 0x94
 80013b8:	733b      	strb	r3, [r7, #12]
	cfgdac.out = DAC_OUTPUT_HEADPHONE;
 80013ba:	2302      	movs	r3, #2
 80013bc:	613b      	str	r3, [r7, #16]
	struct cs4x_drv dac;
	int rc = cs4x_init(&dac, &cfgdac);
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fefe 	bl	80011c8 <cs4x_init>
 80013cc:	6278      	str	r0, [r7, #36]	@ 0x24
	printf("CS4X init returned %d\r\n", rc);
 80013ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013d0:	4815      	ldr	r0, [pc, #84]	@ (8001428 <main+0x98>)
 80013d2:	f009 faad 	bl	800a930 <iprintf>
	rc = cs4x_start(&dac);
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ffb9 	bl	8001350 <cs4x_start>
 80013de:	6278      	str	r0, [r7, #36]	@ 0x24
	printf("CS4X start returned %d\r\n", rc);
 80013e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013e2:	4812      	ldr	r0, [pc, #72]	@ (800142c <main+0x9c>)
 80013e4:	f009 faa4 	bl	800a930 <iprintf>

	HAL_Delay(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 fd71 	bl	8001ed0 <HAL_Delay>
//		i += 2;
//	}


	// Attempt to transmit audio data to DAC
	processData(); //stuck here?
 80013ee:	f7ff fc5f 	bl	8000cb0 <processData>
	res = HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) dacData, BUFFER_SIZE);
 80013f2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80013f6:	490e      	ldr	r1, [pc, #56]	@ (8001430 <main+0xa0>)
 80013f8:	480e      	ldr	r0, [pc, #56]	@ (8001434 <main+0xa4>)
 80013fa:	f002 fcff 	bl	8003dfc <HAL_I2S_Transmit_DMA>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	//res = HAL_I2S_Transmit(&hi2s3, (uint16_t*) signal, nsamples,HAL_MAX_DELAY);
	if (res != HAL_OK) {
 8001404:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <main+0x88>
		printf("I2S - ERROR, res = %d!\r\n", res);
 800140c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001410:	4619      	mov	r1, r3
 8001412:	4809      	ldr	r0, [pc, #36]	@ (8001438 <main+0xa8>)
 8001414:	f009 fa8c 	bl	800a930 <iprintf>
//		if (res != HAL_OK) {
//			printf("I2S - ERROR, res = %d!\r\n", res);
//			//break;
//		}

		if (dataReadyFlag) {
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <main+0xac>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0fb      	beq.n	8001418 <main+0x88>
			processData();
 8001420:	f7ff fc46 	bl	8000cb0 <processData>
		if (dataReadyFlag) {
 8001424:	e7f8      	b.n	8001418 <main+0x88>
 8001426:	bf00      	nop
 8001428:	0800c15c 	.word	0x0800c15c
 800142c:	0800c174 	.word	0x0800c174
 8001430:	200002cc 	.word	0x200002cc
 8001434:	200001cc 	.word	0x200001cc
 8001438:	0800c190 	.word	0x0800c190
 800143c:	200179cc 	.word	0x200179cc

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	@ 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	2230      	movs	r2, #48	@ 0x30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f009 fbb6 	bl	800abc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <SystemClock_Config+0xcc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	4a27      	ldr	r2, [pc, #156]	@ (800150c <SystemClock_Config+0xcc>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	@ 0x40
 8001474:	4b25      	ldr	r3, [pc, #148]	@ (800150c <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <SystemClock_Config+0xd0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a21      	ldr	r2, [pc, #132]	@ (8001510 <SystemClock_Config+0xd0>)
 800148a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b0:	2308      	movs	r3, #8
 80014b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80014b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014be:	2307      	movs	r3, #7
 80014c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 fb44 	bl	8005b54 <HAL_RCC_OscConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014d2:	f000 f9f9 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d6:	230f      	movs	r3, #15
 80014d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014da:	2302      	movs	r3, #2
 80014dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2105      	movs	r1, #5
 80014f4:	4618      	mov	r0, r3
 80014f6:	f004 fda5 	bl	8006044 <HAL_RCC_ClockConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001500:	f000 f9e2 	bl	80018c8 <Error_Handler>
  }
}
 8001504:	bf00      	nop
 8001506:	3750      	adds	r7, #80	@ 0x50
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000

08001514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_I2C1_Init+0x50>)
 800151a:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <MX_I2C1_Init+0x54>)
 800151c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_I2C1_Init+0x50>)
 8001520:	4a12      	ldr	r2, [pc, #72]	@ (800156c <MX_I2C1_Init+0x58>)
 8001522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_I2C1_Init+0x50>)
 8001532:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001536:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	@ (8001564 <MX_I2C1_Init+0x50>)
 8001552:	f001 fb19 	bl	8002b88 <HAL_I2C_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800155c:	f000 f9b4 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000178 	.word	0x20000178
 8001568:	40005400 	.word	0x40005400
 800156c:	000186a0 	.word	0x000186a0

08001570 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <MX_I2S3_Init+0x54>)
 8001576:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <MX_I2S3_Init+0x58>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_I2S3_Init+0x54>)
 800157c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001580:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <MX_I2S3_Init+0x54>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001588:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_I2S3_Init+0x54>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <MX_I2S3_Init+0x54>)
 8001590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001594:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <MX_I2S3_Init+0x54>)
 8001598:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800159c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_I2S3_Init+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <MX_I2S3_Init+0x54>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_I2S3_Init+0x54>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <MX_I2S3_Init+0x54>)
 80015b2:	f002 fae3 	bl	8003b7c <HAL_I2S_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80015bc:	f000 f984 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	200001cc 	.word	0x200001cc
 80015c8:	40003c00 	.word	0x40003c00

080015cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d0:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <MX_SPI1_Init+0x64>)
 80015d2:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <MX_SPI1_Init+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_SPI1_Init+0x64>)
 80015d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_SPI1_Init+0x64>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <MX_SPI1_Init+0x64>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_SPI1_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_SPI1_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_SPI1_Init+0x64>)
 80015f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_SPI1_Init+0x64>)
 8001618:	220a      	movs	r2, #10
 800161a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <MX_SPI1_Init+0x64>)
 800161e:	f005 f85f 	bl	80066e0 <HAL_SPI_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001628:	f000 f94e 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000274 	.word	0x20000274
 8001634:	40013000 	.word	0x40013000

08001638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_DMA_Init+0x3c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <MX_DMA_Init+0x3c>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_DMA_Init+0x3c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2010      	movs	r0, #16
 8001660:	f000 fd35 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001664:	2010      	movs	r0, #16
 8001666:	f000 fd4e 	bl	8002106 <HAL_NVIC_EnableIRQ>

}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	4b79      	ldr	r3, [pc, #484]	@ (8001878 <MX_GPIO_Init+0x200>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a78      	ldr	r2, [pc, #480]	@ (8001878 <MX_GPIO_Init+0x200>)
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b76      	ldr	r3, [pc, #472]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	4b72      	ldr	r3, [pc, #456]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a71      	ldr	r2, [pc, #452]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b64      	ldr	r3, [pc, #400]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a63      	ldr	r2, [pc, #396]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b61      	ldr	r3, [pc, #388]	@ (8001878 <MX_GPIO_Init+0x200>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b5d      	ldr	r3, [pc, #372]	@ (8001878 <MX_GPIO_Init+0x200>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a5c      	ldr	r2, [pc, #368]	@ (8001878 <MX_GPIO_Init+0x200>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b5a      	ldr	r3, [pc, #360]	@ (8001878 <MX_GPIO_Init+0x200>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b56      	ldr	r3, [pc, #344]	@ (8001878 <MX_GPIO_Init+0x200>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a55      	ldr	r2, [pc, #340]	@ (8001878 <MX_GPIO_Init+0x200>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <MX_GPIO_Init+0x200>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2108      	movs	r1, #8
 800173a:	4850      	ldr	r0, [pc, #320]	@ (800187c <MX_GPIO_Init+0x204>)
 800173c:	f001 fa0a 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2101      	movs	r1, #1
 8001744:	484e      	ldr	r0, [pc, #312]	@ (8001880 <MX_GPIO_Init+0x208>)
 8001746:	f001 fa05 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800174a:	2200      	movs	r2, #0
 800174c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001750:	484c      	ldr	r0, [pc, #304]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001752:	f001 f9ff 	bl	8002b54 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001756:	2308      	movs	r3, #8
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4843      	ldr	r0, [pc, #268]	@ (800187c <MX_GPIO_Init+0x204>)
 800176e:	f001 f855 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001772:	2301      	movs	r3, #1
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	483d      	ldr	r0, [pc, #244]	@ (8001880 <MX_GPIO_Init+0x208>)
 800178a:	f001 f847 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800178e:	2308      	movs	r3, #8
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800179e:	2305      	movs	r3, #5
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4835      	ldr	r0, [pc, #212]	@ (8001880 <MX_GPIO_Init+0x208>)
 80017aa:	f001 f837 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	4831      	ldr	r0, [pc, #196]	@ (8001888 <MX_GPIO_Init+0x210>)
 80017c4:	f001 f82a 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017c8:	2304      	movs	r3, #4
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	482c      	ldr	r0, [pc, #176]	@ (800188c <MX_GPIO_Init+0x214>)
 80017dc:	f001 f81e 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80017e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f2:	2305      	movs	r3, #5
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	4823      	ldr	r0, [pc, #140]	@ (800188c <MX_GPIO_Init+0x214>)
 80017fe:	f001 f80d 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001802:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	481a      	ldr	r0, [pc, #104]	@ (8001884 <MX_GPIO_Init+0x20c>)
 800181c:	f000 fffe 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001820:	2310      	movs	r3, #16
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001828:	2301      	movs	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	4813      	ldr	r0, [pc, #76]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001838:	f000 fff0 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800183c:	2320      	movs	r3, #32
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <MX_GPIO_Init+0x20c>)
 8001850:	f000 ffe4 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001854:	2302      	movs	r3, #2
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001858:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4804      	ldr	r0, [pc, #16]	@ (800187c <MX_GPIO_Init+0x204>)
 800186a:	f000 ffd7 	bl	800281c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	@ 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40021000 	.word	0x40021000
 8001880:	40020800 	.word	0x40020800
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40020000 	.word	0x40020000
 800188c:	40020400 	.word	0x40020400

08001890 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e009      	b.n	80018b6 <_write+0x26>
		ITM_SendChar(*ptr++);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f9ac 	bl	8000c08 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dbf1      	blt.n	80018a2 <_write+0x12>
	}
	return len;
 80018be:	687b      	ldr	r3, [r7, #4]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("Error\r\n");
 80018d0:	4801      	ldr	r0, [pc, #4]	@ (80018d8 <Error_Handler+0x10>)
 80018d2:	f009 f895 	bl	800aa00 <puts>
 80018d6:	e7fb      	b.n	80018d0 <Error_Handler+0x8>
 80018d8:	0800c1ac 	.word	0x0800c1ac

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001928 <HAL_MspInit+0x4c>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_MspInit+0x4c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <HAL_MspInit+0x4c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	@ 0x40
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_MspInit+0x4c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800191a:	2007      	movs	r0, #7
 800191c:	f000 fbcc 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	@ (80019b0 <HAL_I2C_MspInit+0x84>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d12c      	bne.n	80019a8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a17      	ldr	r2, [pc, #92]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800196a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001970:	2312      	movs	r3, #18
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800197c:	2304      	movs	r3, #4
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <HAL_I2C_MspInit+0x8c>)
 8001988:	f000 ff48 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 8001996:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800199a:	6413      	str	r3, [r2, #64]	@ 0x40
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_I2C_MspInit+0x88>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	@ 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40005400 	.word	0x40005400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	@ 0x38
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001b20 <HAL_I2S_MspInit+0x164>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	f040 8094 	bne.w	8001b16 <HAL_I2S_MspInit+0x15a>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80019ee:	2301      	movs	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 197;
 80019f2:	23c5      	movs	r3, #197	@ 0xc5
 80019f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80019f6:	2302      	movs	r3, #2
 80019f8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fd2c 	bl	800645c <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001a0a:	f7ff ff5d 	bl	80018c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b44      	ldr	r3, [pc, #272]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	4a43      	ldr	r2, [pc, #268]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a3c      	ldr	r2, [pc, #240]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b36      	ldr	r3, [pc, #216]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a35      	ldr	r2, [pc, #212]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b33      	ldr	r3, [pc, #204]	@ (8001b24 <HAL_I2S_MspInit+0x168>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001a62:	2310      	movs	r3, #16
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a72:	2306      	movs	r3, #6
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	482a      	ldr	r0, [pc, #168]	@ (8001b28 <HAL_I2S_MspInit+0x16c>)
 8001a7e:	f000 fecd 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a82:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a94:	2306      	movs	r3, #6
 8001a96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4823      	ldr	r0, [pc, #140]	@ (8001b2c <HAL_I2S_MspInit+0x170>)
 8001aa0:	f000 febc 	bl	800281c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001aa6:	4a23      	ldr	r2, [pc, #140]	@ (8001b34 <HAL_I2S_MspInit+0x178>)
 8001aa8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001ab2:	2240      	movs	r2, #64	@ 0x40
 8001ab4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aca:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001ace:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001ad6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ada:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001ade:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ae2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001aea:	4811      	ldr	r0, [pc, #68]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001aec:	f000 fb26 	bl	800213c <HAL_DMA_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001af6:	f7ff fee7 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a0c      	ldr	r2, [pc, #48]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001afe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b00:	4a0b      	ldr	r2, [pc, #44]	@ (8001b30 <HAL_I2S_MspInit+0x174>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2033      	movs	r0, #51	@ 0x33
 8001b0c:	f000 fadf 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001b10:	2033      	movs	r0, #51	@ 0x33
 8001b12:	f000 faf8 	bl	8002106 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b16:	bf00      	nop
 8001b18:	3738      	adds	r7, #56	@ 0x38
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40003c00 	.word	0x40003c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	20000214 	.word	0x20000214
 8001b34:	40026088 	.word	0x40026088

08001b38 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	@ (8001bbc <HAL_SPI_MspInit+0x84>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d12b      	bne.n	8001bb2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <HAL_SPI_MspInit+0x88>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	4a17      	ldr	r2, [pc, #92]	@ (8001bc0 <HAL_SPI_MspInit+0x88>)
 8001b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_SPI_MspInit+0x88>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_SPI_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <HAL_SPI_MspInit+0x88>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_SPI_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b92:	23e0      	movs	r3, #224	@ 0xe0
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <HAL_SPI_MspInit+0x8c>)
 8001bae:	f000 fe35 	bl	800281c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	@ 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40013000 	.word	0x40013000
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <NMI_Handler+0x4>

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <MemManage_Handler+0x4>

08001be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <UsageFault_Handler+0x4>

08001bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1e:	f000 f937 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <DMA1_Stream5_IRQHandler+0x10>)
 8001c2e:	f000 fb8b 	bl	8002348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000214 	.word	0x20000214

08001c3c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <SPI3_IRQHandler+0x10>)
 8001c42:	f002 f97f 	bl	8003f44 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200001cc 	.word	0x200001cc

08001c50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <OTG_FS_IRQHandler+0x10>)
 8001c56:	f002 fe6f 	bl	8004938 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20018ec4 	.word	0x20018ec4

08001c64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00a      	b.n	8001c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c76:	f3af 8000 	nop.w
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf0      	blt.n	8001c76 <_read+0x12>
  }

  return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <_isatty>:

int _isatty(int file)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f008 ff90 	bl	800ac5c <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20020000 	.word	0x20020000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	200179dc 	.word	0x200179dc
 8001d70:	20019718 	.word	0x20019718

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d9c:	f7ff ffea 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	@ (8001de4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f008 ff4f 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff fae1 	bl	8001390 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001ddc:	0800c630 	.word	0x0800c630
  ldr r2, =_sbss
 8001de0:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001de4:	20019714 	.word	0x20019714

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f94f 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fd5c 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f967 	bl	8002122 <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f92f 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000004 	.word	0x20000004
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000008 	.word	0x20000008

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	2000000c 	.word	0x2000000c
 8001eb4:	200179e0 	.word	0x200179e0

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200179e0 	.word	0x200179e0

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <__NVIC_SetPriorityGrouping>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff feb6 	bl	8001eb8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e099      	b.n	800228c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	e00f      	b.n	800219a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217a:	f7ff fe9d 	bl	8001eb8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b05      	cmp	r3, #5
 8002186:	d908      	bls.n	800219a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e078      	b.n	800228c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e8      	bne.n	800217a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <HAL_DMA_Init+0x158>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	4313      	orrs	r3, r2
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	2b04      	cmp	r3, #4
 800222c:	d117      	bne.n	800225e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fa6f 	bl	8002724 <DMA_CheckFifoParam>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800225a:	2301      	movs	r3, #1
 800225c:	e016      	b.n	800228c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fa26 	bl	80026b8 <DMA_CalcBaseAndBitshift>
 800226c:	4603      	mov	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	223f      	movs	r2, #63	@ 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	f010803f 	.word	0xf010803f

08002298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_DMA_Start_IT+0x26>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e040      	b.n	8002340 <HAL_DMA_Start_IT+0xa8>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d12f      	bne.n	8002332 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f9b8 	bl	800265c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f0:	223f      	movs	r2, #63	@ 0x3f
 80022f2:	409a      	lsls	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0216 	orr.w	r2, r2, #22
 8002306:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d007      	beq.n	8002320 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0208 	orr.w	r2, r2, #8
 800231e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e005      	b.n	800233e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233a:	2302      	movs	r3, #2
 800233c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800233e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002354:	4b8e      	ldr	r3, [pc, #568]	@ (8002590 <HAL_DMA_IRQHandler+0x248>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a8e      	ldr	r2, [pc, #568]	@ (8002594 <HAL_DMA_IRQHandler+0x24c>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a9b      	lsrs	r3, r3, #10
 8002360:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	2208      	movs	r2, #8
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a0:	2208      	movs	r2, #8
 80023a2:	409a      	lsls	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	f043 0201 	orr.w	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	2201      	movs	r2, #1
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d012      	beq.n	80023ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	2201      	movs	r2, #1
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	f043 0202 	orr.w	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	2204      	movs	r2, #4
 80023f0:	409a      	lsls	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	2204      	movs	r2, #4
 800240e:	409a      	lsls	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002418:	f043 0204 	orr.w	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	2210      	movs	r2, #16
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d043      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d03c      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002442:	2210      	movs	r2, #16
 8002444:	409a      	lsls	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d018      	beq.n	800248a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d024      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
 8002476:	e01f      	b.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
 8002488:	e016      	b.n	80024b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0208 	bic.w	r2, r2, #8
 80024a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	2220      	movs	r2, #32
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 808f 	beq.w	80025e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 8087 	beq.w	80025e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	2220      	movs	r2, #32
 80024e0:	409a      	lsls	r2, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d136      	bne.n	8002560 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0216 	bic.w	r2, r2, #22
 8002500:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002510:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_DMA_IRQHandler+0x1da>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0208 	bic.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	223f      	movs	r2, #63	@ 0x3f
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d07e      	beq.n	8002654 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
        }
        return;
 800255e:	e079      	b.n	8002654 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01d      	beq.n	80025aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10d      	bne.n	8002598 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002580:	2b00      	cmp	r3, #0
 8002582:	d031      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e02c      	b.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
 800258e:	bf00      	nop
 8002590:	20000004 	.word	0x20000004
 8002594:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d023      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
 80025a8:	e01e      	b.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10f      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0210 	bic.w	r2, r2, #16
 80025c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d032      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d022      	beq.n	8002642 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2205      	movs	r2, #5
 8002600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0201 	bic.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	d307      	bcc.n	8002630 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f2      	bne.n	8002614 <HAL_DMA_IRQHandler+0x2cc>
 800262e:	e000      	b.n	8002632 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002630:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e000      	b.n	8002656 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002654:	bf00      	nop
    }
  }
}
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002678:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b40      	cmp	r3, #64	@ 0x40
 8002688:	d108      	bne.n	800269c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269a:	e007      	b.n	80026ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b10      	subs	r3, #16
 80026c8:	4a14      	ldr	r2, [pc, #80]	@ (800271c <DMA_CalcBaseAndBitshift+0x64>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d2:	4a13      	ldr	r2, [pc, #76]	@ (8002720 <DMA_CalcBaseAndBitshift+0x68>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d909      	bls.n	80026fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80026f8:	e007      	b.n	800270a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	0800c214 	.word	0x0800c214

08002724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11f      	bne.n	800277e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d856      	bhi.n	80027f2 <DMA_CheckFifoParam+0xce>
 8002744:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <DMA_CheckFifoParam+0x28>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	0800275d 	.word	0x0800275d
 8002750:	0800276f 	.word	0x0800276f
 8002754:	0800275d 	.word	0x0800275d
 8002758:	080027f3 	.word	0x080027f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d046      	beq.n	80027f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e043      	b.n	80027f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002776:	d140      	bne.n	80027fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e03d      	b.n	80027fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002786:	d121      	bne.n	80027cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d837      	bhi.n	80027fe <DMA_CheckFifoParam+0xda>
 800278e:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <DMA_CheckFifoParam+0x70>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027ab 	.word	0x080027ab
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	080027bd 	.word	0x080027bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e030      	b.n	800280c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d025      	beq.n	8002802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ba:	e022      	b.n	8002802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027c4:	d11f      	bne.n	8002806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ca:	e01c      	b.n	8002806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d903      	bls.n	80027da <DMA_CheckFifoParam+0xb6>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d003      	beq.n	80027e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d8:	e018      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      break;
 80027de:	e015      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00e      	beq.n	800280a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e00b      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 80027f2:	bf00      	nop
 80027f4:	e00a      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e008      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e006      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e004      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e002      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;   
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
    }
  } 
  
  return status; 
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	@ 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e16b      	b.n	8002b10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 815a 	bne.w	8002b0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80b4 	beq.w	8002b0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b60      	ldr	r3, [pc, #384]	@ (8002b28 <HAL_GPIO_Init+0x30c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002b28 <HAL_GPIO_Init+0x30c>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b28 <HAL_GPIO_Init+0x30c>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a5b      	ldr	r2, [pc, #364]	@ (8002b2c <HAL_GPIO_Init+0x310>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_GPIO_Init+0x314>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a51      	ldr	r2, [pc, #324]	@ (8002b34 <HAL_GPIO_Init+0x318>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d025      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a50      	ldr	r2, [pc, #320]	@ (8002b38 <HAL_GPIO_Init+0x31c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4f      	ldr	r2, [pc, #316]	@ (8002b3c <HAL_GPIO_Init+0x320>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d019      	beq.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4e      	ldr	r2, [pc, #312]	@ (8002b40 <HAL_GPIO_Init+0x324>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b44 <HAL_GPIO_Init+0x328>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00d      	beq.n	8002a2e <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4c      	ldr	r2, [pc, #304]	@ (8002b48 <HAL_GPIO_Init+0x32c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <HAL_GPIO_Init+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b4c <HAL_GPIO_Init+0x330>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_GPIO_Init+0x20a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00e      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e00c      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e00a      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e008      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e004      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x228>
 8002a42:	2300      	movs	r3, #0
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f002 0203 	and.w	r2, r2, #3
 8002a4a:	0092      	lsls	r2, r2, #2
 8002a4c:	4093      	lsls	r3, r2
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a54:	4935      	ldr	r1, [pc, #212]	@ (8002b2c <HAL_GPIO_Init+0x310>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a62:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a86:	4a32      	ldr	r2, [pc, #200]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a8c:	4b30      	ldr	r3, [pc, #192]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab0:	4a27      	ldr	r2, [pc, #156]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab6:	4b26      	ldr	r3, [pc, #152]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ada:	4a1d      	ldr	r2, [pc, #116]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b04:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_GPIO_Init+0x334>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	f67f ae90 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	3724      	adds	r7, #36	@ 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40013800 	.word	0x40013800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	40020400 	.word	0x40020400
 8002b38:	40020800 	.word	0x40020800
 8002b3c:	40020c00 	.word	0x40020c00
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40021400 	.word	0x40021400
 8002b48:	40021800 	.word	0x40021800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	619a      	str	r2, [r3, #24]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e12b      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe febc 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2224      	movs	r2, #36	@ 0x24
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bec:	f003 fc22 	bl	8006434 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a81      	ldr	r2, [pc, #516]	@ (8002dfc <HAL_I2C_Init+0x274>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d807      	bhi.n	8002c0c <HAL_I2C_Init+0x84>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a80      	ldr	r2, [pc, #512]	@ (8002e00 <HAL_I2C_Init+0x278>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e006      	b.n	8002c1a <HAL_I2C_Init+0x92>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002e04 <HAL_I2C_Init+0x27c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0e7      	b.n	8002df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a78      	ldr	r2, [pc, #480]	@ (8002e08 <HAL_I2C_Init+0x280>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a6a      	ldr	r2, [pc, #424]	@ (8002dfc <HAL_I2C_Init+0x274>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d802      	bhi.n	8002c5c <HAL_I2C_Init+0xd4>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e009      	b.n	8002c70 <HAL_I2C_Init+0xe8>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	4a69      	ldr	r2, [pc, #420]	@ (8002e0c <HAL_I2C_Init+0x284>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	3301      	adds	r3, #1
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	495c      	ldr	r1, [pc, #368]	@ (8002dfc <HAL_I2C_Init+0x274>)
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	d819      	bhi.n	8002cc4 <HAL_I2C_Init+0x13c>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e59      	subs	r1, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9e:	1c59      	adds	r1, r3, #1
 8002ca0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_I2C_Init+0x138>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1e59      	subs	r1, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	e051      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	e04f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_I2C_Init+0x168>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e58      	subs	r0, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e012      	b.n	8002d16 <HAL_I2C_Init+0x18e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Init+0x196>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10e      	bne.n	8002d44 <HAL_I2C_Init+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1e58      	subs	r0, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	440b      	add	r3, r1
 8002d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d42:	e00f      	b.n	8002d64 <HAL_I2C_Init+0x1dc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	6809      	ldr	r1, [r1, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6911      	ldr	r1, [r2, #16]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	000186a0 	.word	0x000186a0
 8002e00:	001e847f 	.word	0x001e847f
 8002e04:	003d08ff 	.word	0x003d08ff
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	10624dd3 	.word	0x10624dd3

08002e10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	817b      	strh	r3, [r7, #10]
 8002e20:	4613      	mov	r3, r2
 8002e22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff f848 	bl	8001eb8 <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 80e0 	bne.w	8002ff8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2319      	movs	r3, #25
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4970      	ldr	r1, [pc, #448]	@ (8003004 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fc64 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0d3      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_I2C_Master_Transmit+0x50>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0cc      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d007      	beq.n	8002e86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2221      	movs	r2, #33	@ 0x21
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	893a      	ldrh	r2, [r7, #8]
 8002eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a50      	ldr	r2, [pc, #320]	@ (8003008 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ec6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 face 	bl	8003470 <I2C_MasterRequestWrite>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e08d      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ef4:	e066      	b.n	8002fc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fd22 	bl	8003944 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d107      	bne.n	8002f1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e06b      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d11b      	bne.n	8002f98 <HAL_I2C_Master_Transmit+0x188>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d017      	beq.n	8002f98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6a39      	ldr	r1, [r7, #32]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fd19 	bl	80039d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d107      	bne.n	8002fc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e01a      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d194      	bne.n	8002ef6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e000      	b.n	8002ffa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ff8:	2302      	movs	r3, #2
  }
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	00100002 	.word	0x00100002
 8003008:	ffff0000 	.word	0xffff0000

0800300c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	@ 0x30
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	460b      	mov	r3, r1
 800301a:	817b      	strh	r3, [r7, #10]
 800301c:	4613      	mov	r3, r2
 800301e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003020:	f7fe ff4a 	bl	8001eb8 <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b20      	cmp	r3, #32
 8003030:	f040 8217 	bne.w	8003462 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2319      	movs	r3, #25
 800303a:	2201      	movs	r2, #1
 800303c:	497c      	ldr	r1, [pc, #496]	@ (8003230 <HAL_I2C_Master_Receive+0x224>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fb66 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	e20a      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2C_Master_Receive+0x50>
 8003058:	2302      	movs	r3, #2
 800305a:	e203      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d007      	beq.n	8003082 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2222      	movs	r2, #34	@ 0x22
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2210      	movs	r2, #16
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	893a      	ldrh	r2, [r7, #8]
 80030b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003234 <HAL_I2C_Master_Receive+0x228>)
 80030c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa52 	bl	8003574 <I2C_MasterRequestRead>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e1c4      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d113      	bne.n	800310a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	623b      	str	r3, [r7, #32]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e198      	b.n	800343c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310e:	2b01      	cmp	r3, #1
 8003110:	d11b      	bne.n	800314a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e178      	b.n	800343c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314e:	2b02      	cmp	r3, #2
 8003150:	d11b      	bne.n	800318a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003160:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	e158      	b.n	800343c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003198:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031b0:	e144      	b.n	800343c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	f200 80f1 	bhi.w	800339e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d123      	bne.n	800320c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fc4b 	bl	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e145      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800320a:	e117      	b.n	800343c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	2b02      	cmp	r3, #2
 8003212:	d14e      	bne.n	80032b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321a:	2200      	movs	r2, #0
 800321c:	4906      	ldr	r1, [pc, #24]	@ (8003238 <HAL_I2C_Master_Receive+0x22c>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa76 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e11a      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
 800322e:	bf00      	nop
 8003230:	00100002 	.word	0x00100002
 8003234:	ffff0000 	.word	0xffff0000
 8003238:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032b0:	e0c4      	b.n	800343c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b8:	2200      	movs	r2, #0
 80032ba:	496c      	ldr	r1, [pc, #432]	@ (800346c <HAL_I2C_Master_Receive+0x460>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fa27 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0cb      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	2200      	movs	r2, #0
 8003316:	4955      	ldr	r1, [pc, #340]	@ (800346c <HAL_I2C_Master_Receive+0x460>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f9f9 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e09d      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800339c:	e04e      	b.n	800343c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fb5e 	bl	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e058      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d124      	bne.n	800343c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d107      	bne.n	800340a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003408:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	f47f aeb6 	bne.w	80031b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	@ 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	00010004 	.word	0x00010004

08003470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	460b      	mov	r3, r1
 800347e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d006      	beq.n	800349a <I2C_MasterRequestWrite+0x2a>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d003      	beq.n	800349a <I2C_MasterRequestWrite+0x2a>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003498:	d108      	bne.n	80034ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e00b      	b.n	80034c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	2b12      	cmp	r3, #18
 80034b2:	d107      	bne.n	80034c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f91d 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ea:	d103      	bne.n	80034f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e035      	b.n	8003564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003500:	d108      	bne.n	8003514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003510:	611a      	str	r2, [r3, #16]
 8003512:	e01b      	b.n	800354c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	11db      	asrs	r3, r3, #7
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f063 030f 	orn	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	490e      	ldr	r1, [pc, #56]	@ (800356c <I2C_MasterRequestWrite+0xfc>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f966 	bl	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e010      	b.n	8003564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4907      	ldr	r1, [pc, #28]	@ (8003570 <I2C_MasterRequestWrite+0x100>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f956 	bl	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	00010008 	.word	0x00010008
 8003570:	00010002 	.word	0x00010002

08003574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	460b      	mov	r3, r1
 8003582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d006      	beq.n	80035ae <I2C_MasterRequestRead+0x3a>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d003      	beq.n	80035ae <I2C_MasterRequestRead+0x3a>
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e00b      	b.n	80035d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	2b11      	cmp	r3, #17
 80035c6:	d107      	bne.n	80035d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f893 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fe:	d103      	bne.n	8003608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003606:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e079      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003614:	d108      	bne.n	8003628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	611a      	str	r2, [r3, #16]
 8003626:	e05f      	b.n	80036e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	11db      	asrs	r3, r3, #7
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f063 030f 	orn	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4930      	ldr	r1, [pc, #192]	@ (8003708 <I2C_MasterRequestRead+0x194>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8dc 	bl	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e054      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003656:	897b      	ldrh	r3, [r7, #10]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4929      	ldr	r1, [pc, #164]	@ (800370c <I2C_MasterRequestRead+0x198>)
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f8cc 	bl	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e044      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800369a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f831 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c2:	d103      	bne.n	80036cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e017      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	11db      	asrs	r3, r3, #7
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 0306 	and.w	r3, r3, #6
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f063 030e 	orn	r3, r3, #14
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4907      	ldr	r1, [pc, #28]	@ (800370c <I2C_MasterRequestRead+0x198>)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f888 	bl	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00010008 	.word	0x00010008
 800370c:	00010002 	.word	0x00010002

08003710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	e048      	b.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d044      	beq.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fe fbc5 	bl	8001eb8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d139      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	0c1b      	lsrs	r3, r3, #16
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10d      	bne.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x56>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	43da      	mvns	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4013      	ands	r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	e00c      	b.n	8003780 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	429a      	cmp	r2, r3
 8003784:	d116      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e023      	b.n	80037fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	0c1b      	lsrs	r3, r3, #16
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10d      	bne.n	80037da <I2C_WaitOnFlagUntilTimeout+0xca>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	43da      	mvns	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	e00c      	b.n	80037f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d093      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003812:	e071      	b.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003822:	d123      	bne.n	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003832:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800383c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	f043 0204 	orr.w	r2, r3, #4
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e067      	b.n	800393c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d041      	beq.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003874:	f7fe fb20 	bl	8001eb8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d302      	bcc.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d136      	bne.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d10c      	bne.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e00b      	b.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e021      	b.n	800393c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d10c      	bne.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	43da      	mvns	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4013      	ands	r3, r2
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e00b      	b.n	8003934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	f47f af6d 	bne.w	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003950:	e034      	b.n	80039bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f8e3 	bl	8003b1e <I2C_IsAcknowledgeFailed>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e034      	b.n	80039cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d028      	beq.n	80039bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396a:	f7fe faa5 	bl	8001eb8 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	d302      	bcc.n	8003980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11d      	bne.n	80039bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800398a:	2b80      	cmp	r3, #128	@ 0x80
 800398c:	d016      	beq.n	80039bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e007      	b.n	80039cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c6:	2b80      	cmp	r3, #128	@ 0x80
 80039c8:	d1c3      	bne.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039e0:	e034      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f89b 	bl	8003b1e <I2C_IsAcknowledgeFailed>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e034      	b.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d028      	beq.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7fe fa5d 	bl	8001eb8 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11d      	bne.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d016      	beq.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e007      	b.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d1c3      	bne.n	80039e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a70:	e049      	b.n	8003b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d119      	bne.n	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0210 	mvn.w	r2, #16
 8003a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e030      	b.n	8003b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab4:	f7fe fa00 	bl	8001eb8 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11d      	bne.n	8003b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b40      	cmp	r3, #64	@ 0x40
 8003ad6:	d016      	beq.n	8003b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e007      	b.n	8003b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b10:	2b40      	cmp	r3, #64	@ 0x40
 8003b12:	d1ae      	bne.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b34:	d11b      	bne.n	8003b6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e128      	b.n	8003de0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a90      	ldr	r2, [pc, #576]	@ (8003de8 <HAL_I2S_Init+0x26c>)
 8003ba6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fd ff07 	bl	80019bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bc4:	f023 030f 	bic.w	r3, r3, #15
 8003bc8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d060      	beq.n	8003c9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003be2:	2310      	movs	r3, #16
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e001      	b.n	8003bec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d802      	bhi.n	8003bfa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f002 fd10 	bl	8006620 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c0a:	d125      	bne.n	8003c58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d010      	beq.n	8003c36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	3305      	adds	r3, #5
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	e01f      	b.n	8003c76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	461a      	mov	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	3305      	adds	r3, #5
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	e00e      	b.n	8003c76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	3305      	adds	r3, #5
 8003c74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4a5c      	ldr	r2, [pc, #368]	@ (8003dec <HAL_I2S_Init+0x270>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e003      	b.n	8003ca4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d902      	bls.n	8003cb0 <HAL_I2S_Init+0x134>
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2bff      	cmp	r3, #255	@ 0xff
 8003cae:	d907      	bls.n	8003cc0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb4:	f043 0210 	orr.w	r2, r3, #16
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e08f      	b.n	8003de0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	ea42 0103 	orr.w	r1, r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cde:	f023 030f 	bic.w	r3, r3, #15
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6851      	ldr	r1, [r2, #4]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6892      	ldr	r2, [r2, #8]
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68d2      	ldr	r2, [r2, #12]
 8003cf0:	4311      	orrs	r1, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6992      	ldr	r2, [r2, #24]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d161      	bne.n	8003dd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <HAL_I2S_Init+0x274>)
 8003d10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a37      	ldr	r2, [pc, #220]	@ (8003df4 <HAL_I2S_Init+0x278>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_I2S_Init+0x1a4>
 8003d1c:	4b36      	ldr	r3, [pc, #216]	@ (8003df8 <HAL_I2S_Init+0x27c>)
 8003d1e:	e001      	b.n	8003d24 <HAL_I2S_Init+0x1a8>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6812      	ldr	r2, [r2, #0]
 8003d2a:	4932      	ldr	r1, [pc, #200]	@ (8003df4 <HAL_I2S_Init+0x278>)
 8003d2c:	428a      	cmp	r2, r1
 8003d2e:	d101      	bne.n	8003d34 <HAL_I2S_Init+0x1b8>
 8003d30:	4a31      	ldr	r2, [pc, #196]	@ (8003df8 <HAL_I2S_Init+0x27c>)
 8003d32:	e001      	b.n	8003d38 <HAL_I2S_Init+0x1bc>
 8003d34:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003d38:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d3c:	f023 030f 	bic.w	r3, r3, #15
 8003d40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2b      	ldr	r2, [pc, #172]	@ (8003df4 <HAL_I2S_Init+0x278>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2S_Init+0x1d4>
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003df8 <HAL_I2S_Init+0x27c>)
 8003d4e:	e001      	b.n	8003d54 <HAL_I2S_Init+0x1d8>
 8003d50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d54:	2202      	movs	r2, #2
 8003d56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <HAL_I2S_Init+0x278>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_I2S_Init+0x1ea>
 8003d62:	4b25      	ldr	r3, [pc, #148]	@ (8003df8 <HAL_I2S_Init+0x27c>)
 8003d64:	e001      	b.n	8003d6a <HAL_I2S_Init+0x1ee>
 8003d66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d76:	d003      	beq.n	8003d80 <HAL_I2S_Init+0x204>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d103      	bne.n	8003d88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	e001      	b.n	8003d8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d96:	4313      	orrs	r3, r2
 8003d98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003da0:	4313      	orrs	r3, r2
 8003da2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003daa:	4313      	orrs	r3, r2
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	897b      	ldrh	r3, [r7, #10]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003db8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003df4 <HAL_I2S_Init+0x278>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_I2S_Init+0x24c>
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <HAL_I2S_Init+0x27c>)
 8003dc6:	e001      	b.n	8003dcc <HAL_I2S_Init+0x250>
 8003dc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dcc:	897a      	ldrh	r2, [r7, #10]
 8003dce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	080040e9 	.word	0x080040e9
 8003dec:	cccccccd 	.word	0xcccccccd
 8003df0:	080041fd 	.word	0x080041fd
 8003df4:	40003800 	.word	0x40003800
 8003df8:	40003400 	.word	0x40003400

08003dfc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_I2S_Transmit_DMA+0x1a>
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e08a      	b.n	8003f30 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d001      	beq.n	8003e2a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
 8003e28:	e082      	b.n	8003f30 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_I2S_Transmit_DMA+0x3e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e07a      	b.n	8003f30 <HAL_I2S_Transmit_DMA+0x134>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2203      	movs	r2, #3
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d002      	beq.n	8003e6e <HAL_I2S_Transmit_DMA+0x72>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d10a      	bne.n	8003e84 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e82:	e005      	b.n	8003e90 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	4a28      	ldr	r2, [pc, #160]	@ (8003f38 <HAL_I2S_Transmit_DMA+0x13c>)
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	4a27      	ldr	r2, [pc, #156]	@ (8003f3c <HAL_I2S_Transmit_DMA+0x140>)
 8003e9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_I2S_Transmit_DMA+0x144>)
 8003ea6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003eb0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003eb8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ec0:	f7fe f9ea 	bl	8002298 <HAL_DMA_Start_IT>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00f      	beq.n	8003eea <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f043 0208 	orr.w	r2, r3, #8
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e022      	b.n	8003f30 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0202 	orr.w	r2, r2, #2
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f2c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	08003fc7 	.word	0x08003fc7
 8003f3c:	08003f85 	.word	0x08003f85
 8003f40:	08003fe3 	.word	0x08003fe3

08003f44 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f90:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10e      	bne.n	8003fb8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0202 	bic.w	r2, r2, #2
 8003fa8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7fc fe63 	bl	8000c84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f7fc fe3f 	bl	8000c58 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0203 	bic.w	r2, r2, #3
 8003ffe:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004018:	f043 0208 	orr.w	r2, r3, #8
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ffa5 	bl	8003f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	881a      	ldrh	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	1c9a      	adds	r2, r3, #2
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10e      	bne.n	8004082 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004072:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fc fe01 	bl	8000c84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	b292      	uxth	r2, r2
 800409e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	1c9a      	adds	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10e      	bne.n	80040e0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff ff3e 	bl	8003f5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b04      	cmp	r3, #4
 8004102:	d13a      	bne.n	800417a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d109      	bne.n	8004122 <I2S_IRQHandler+0x3a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b40      	cmp	r3, #64	@ 0x40
 800411a:	d102      	bne.n	8004122 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffb4 	bl	800408a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b40      	cmp	r3, #64	@ 0x40
 800412a:	d126      	bne.n	800417a <I2S_IRQHandler+0x92>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b20      	cmp	r3, #32
 8004138:	d11f      	bne.n	800417a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004148:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416c:	f043 0202 	orr.w	r2, r3, #2
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fefb 	bl	8003f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b03      	cmp	r3, #3
 8004184:	d136      	bne.n	80041f4 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d109      	bne.n	80041a4 <I2S_IRQHandler+0xbc>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419a:	2b80      	cmp	r3, #128	@ 0x80
 800419c:	d102      	bne.n	80041a4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ff45 	bl	800402e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d122      	bne.n	80041f4 <I2S_IRQHandler+0x10c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d11b      	bne.n	80041f4 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041ca:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff febe 	bl	8003f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041f4:	bf00      	nop
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a92      	ldr	r2, [pc, #584]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004216:	4b92      	ldr	r3, [pc, #584]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004218:	e001      	b.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800421a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a8b      	ldr	r2, [pc, #556]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004234:	4b8a      	ldr	r3, [pc, #552]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004236:	e001      	b.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004248:	d004      	beq.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f040 8099 	bne.w	8004386 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d107      	bne.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f925 	bl	80044b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b01      	cmp	r3, #1
 8004276:	d107      	bne.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f9c8 	bl	8004618 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800428e:	2b40      	cmp	r3, #64	@ 0x40
 8004290:	d13a      	bne.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d035      	beq.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a6e      	ldr	r2, [pc, #440]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a8:	e001      	b.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4969      	ldr	r1, [pc, #420]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d101      	bne.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042ba:	4b69      	ldr	r3, [pc, #420]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042bc:	e001      	b.n	80042c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f043 0202 	orr.w	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fe34 	bl	8003f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	f040 80c3 	bne.w	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80bd 	beq.w	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800432e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a49      	ldr	r2, [pc, #292]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800433a:	4b49      	ldr	r3, [pc, #292]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800433c:	e001      	b.n	8004342 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800433e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4944      	ldr	r1, [pc, #272]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800434a:	428b      	cmp	r3, r1
 800434c:	d101      	bne.n	8004352 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800434e:	4b44      	ldr	r3, [pc, #272]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004350:	e001      	b.n	8004356 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004352:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004356:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800435a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800435c:	2300      	movs	r3, #0
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f043 0204 	orr.w	r2, r3, #4
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fdf6 	bl	8003f70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004384:	e089      	b.n	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b02      	cmp	r3, #2
 800438e:	d107      	bne.n	80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8be 	bl	800451c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d107      	bne.n	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8fd 	bl	80045b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c0:	2b40      	cmp	r3, #64	@ 0x40
 80043c2:	d12f      	bne.n	8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02a      	beq.n	8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1e      	ldr	r2, [pc, #120]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043ea:	e001      	b.n	80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4919      	ldr	r1, [pc, #100]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043f8:	428b      	cmp	r3, r1
 80043fa:	d101      	bne.n	8004400 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043fc:	4b18      	ldr	r3, [pc, #96]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043fe:	e001      	b.n	8004404 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004400:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004404:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004408:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff fda6 	bl	8003f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d136      	bne.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d031      	beq.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a07      	ldr	r2, [pc, #28]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004442:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004444:	e001      	b.n	800444a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004446:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4902      	ldr	r1, [pc, #8]	@ (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004452:	428b      	cmp	r3, r1
 8004454:	d106      	bne.n	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004456:	4b02      	ldr	r3, [pc, #8]	@ (8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004458:	e006      	b.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800445a:	bf00      	nop
 800445c:	40003800 	.word	0x40003800
 8004460:	40003400 	.word	0x40003400
 8004464:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004468:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800446c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800447c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	f043 0204 	orr.w	r2, r3, #4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fd6c 	bl	8003f70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004498:	e000      	b.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800449a:	bf00      	nop
}
 800449c:	bf00      	nop
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c4:	1c99      	adds	r1, r3, #2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80044ca:	881a      	ldrh	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d113      	bne.n	8004512 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ffc9 	bl	80044a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	1c99      	adds	r1, r3, #2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6251      	str	r1, [r2, #36]	@ 0x24
 800452e:	8819      	ldrh	r1, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1d      	ldr	r2, [pc, #116]	@ (80045ac <I2SEx_TxISR_I2SExt+0x90>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <I2SEx_TxISR_I2SExt+0x22>
 800453a:	4b1d      	ldr	r3, [pc, #116]	@ (80045b0 <I2SEx_TxISR_I2SExt+0x94>)
 800453c:	e001      	b.n	8004542 <I2SEx_TxISR_I2SExt+0x26>
 800453e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004542:	460a      	mov	r2, r1
 8004544:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d121      	bne.n	80045a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a12      	ldr	r2, [pc, #72]	@ (80045ac <I2SEx_TxISR_I2SExt+0x90>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <I2SEx_TxISR_I2SExt+0x50>
 8004568:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <I2SEx_TxISR_I2SExt+0x94>)
 800456a:	e001      	b.n	8004570 <I2SEx_TxISR_I2SExt+0x54>
 800456c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	490d      	ldr	r1, [pc, #52]	@ (80045ac <I2SEx_TxISR_I2SExt+0x90>)
 8004578:	428b      	cmp	r3, r1
 800457a:	d101      	bne.n	8004580 <I2SEx_TxISR_I2SExt+0x64>
 800457c:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <I2SEx_TxISR_I2SExt+0x94>)
 800457e:	e001      	b.n	8004584 <I2SEx_TxISR_I2SExt+0x68>
 8004580:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004584:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004588:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	d106      	bne.n	80045a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ff81 	bl	80044a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40003800 	.word	0x40003800
 80045b0:	40003400 	.word	0x40003400

080045b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68d8      	ldr	r0, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	1c99      	adds	r1, r3, #2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045cc:	b282      	uxth	r2, r0
 80045ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d113      	bne.n	8004610 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff4a 	bl	80044a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a20      	ldr	r2, [pc, #128]	@ (80046a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <I2SEx_RxISR_I2SExt+0x16>
 800462a:	4b20      	ldr	r3, [pc, #128]	@ (80046ac <I2SEx_RxISR_I2SExt+0x94>)
 800462c:	e001      	b.n	8004632 <I2SEx_RxISR_I2SExt+0x1a>
 800462e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004632:	68d8      	ldr	r0, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	1c99      	adds	r1, r3, #2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800463e:	b282      	uxth	r2, r0
 8004640:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d121      	bne.n	800469e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a12      	ldr	r2, [pc, #72]	@ (80046a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <I2SEx_RxISR_I2SExt+0x50>
 8004664:	4b11      	ldr	r3, [pc, #68]	@ (80046ac <I2SEx_RxISR_I2SExt+0x94>)
 8004666:	e001      	b.n	800466c <I2SEx_RxISR_I2SExt+0x54>
 8004668:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	490d      	ldr	r1, [pc, #52]	@ (80046a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004674:	428b      	cmp	r3, r1
 8004676:	d101      	bne.n	800467c <I2SEx_RxISR_I2SExt+0x64>
 8004678:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <I2SEx_RxISR_I2SExt+0x94>)
 800467a:	e001      	b.n	8004680 <I2SEx_RxISR_I2SExt+0x68>
 800467c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004680:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004684:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff03 	bl	80044a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40003800 	.word	0x40003800
 80046ac:	40003400 	.word	0x40003400

080046b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e101      	b.n	80048c6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f005 fd43 	bl	800a168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2203      	movs	r2, #3
 80046e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046f0:	d102      	bne.n	80046f8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f002 f990 	bl	8006a22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7c1a      	ldrb	r2, [r3, #16]
 800470a:	f88d 2000 	strb.w	r2, [sp]
 800470e:	3304      	adds	r3, #4
 8004710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004712:	f002 f86e 	bl	80067f2 <USB_CoreInit>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0ce      	b.n	80048c6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f002 f988 	bl	8006a44 <USB_SetCurrentMode>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d005      	beq.n	8004746 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0bf      	b.n	80048c6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
 800474a:	e04a      	b.n	80047e2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	3315      	adds	r3, #21
 800475c:	2201      	movs	r2, #1
 800475e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	3314      	adds	r3, #20
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004774:	7bfa      	ldrb	r2, [r7, #15]
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	b298      	uxth	r0, r3
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	332e      	adds	r3, #46	@ 0x2e
 8004788:	4602      	mov	r2, r0
 800478a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3318      	adds	r3, #24
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	331c      	adds	r3, #28
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3320      	adds	r3, #32
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	3324      	adds	r3, #36	@ 0x24
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	3301      	adds	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d3af      	bcc.n	800474c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	e044      	b.n	800487c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800481a:	7bfa      	ldrb	r2, [r7, #15]
 800481c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800481e:	7bfa      	ldrb	r2, [r7, #15]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800484a:	7bfa      	ldrb	r2, [r7, #15]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	3301      	adds	r3, #1
 800487a:	73fb      	strb	r3, [r7, #15]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	791b      	ldrb	r3, [r3, #4]
 8004880:	7bfa      	ldrb	r2, [r7, #15]
 8004882:	429a      	cmp	r2, r3
 8004884:	d3b5      	bcc.n	80047f2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	7c1a      	ldrb	r2, [r3, #16]
 800488e:	f88d 2000 	strb.w	r2, [sp]
 8004892:	3304      	adds	r3, #4
 8004894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004896:	f002 f921 	bl	8006adc <USB_DevInit>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e00c      	b.n	80048c6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f003 f96b 	bl	8007b9a <USB_DevDisconnect>

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_PCD_Start+0x1c>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e022      	b.n	8004930 <HAL_PCD_Start+0x62>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004902:	2b01      	cmp	r3, #1
 8004904:	d105      	bne.n	8004912 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f002 f872 	bl	8006a00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f003 f919 	bl	8007b58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b08d      	sub	sp, #52	@ 0x34
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f003 f9d7 	bl	8007d02 <USB_GetMode>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 848c 	bne.w	8005274 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f003 f93b 	bl	8007bdc <USB_ReadInterrupts>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8482 	beq.w	8005272 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f003 f928 	bl	8007bdc <USB_ReadInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d107      	bne.n	80049a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f002 0202 	and.w	r2, r2, #2
 80049a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f003 f916 	bl	8007bdc <USB_ReadInterrupts>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d161      	bne.n	8004a7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0210 	bic.w	r2, r2, #16
 80049c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	3304      	adds	r3, #4
 80049e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80049f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049f4:	d124      	bne.n	8004a40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d035      	beq.n	8004a6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	6a38      	ldr	r0, [r7, #32]
 8004a16:	f002 ff4d 	bl	80078b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a26:	441a      	add	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	695a      	ldr	r2, [r3, #20]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a38:	441a      	add	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	615a      	str	r2, [r3, #20]
 8004a3e:	e016      	b.n	8004a6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004a46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a4a:	d110      	bne.n	8004a6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a52:	2208      	movs	r2, #8
 8004a54:	4619      	mov	r1, r3
 8004a56:	6a38      	ldr	r0, [r7, #32]
 8004a58:	f002 ff2c 	bl	80078b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a68:	441a      	add	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0210 	orr.w	r2, r2, #16
 8004a7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f003 f8aa 	bl	8007bdc <USB_ReadInterrupts>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a92:	f040 80a7 	bne.w	8004be4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f003 f8af 	bl	8007c02 <USB_ReadDevAllOutEpInterrupt>
 8004aa4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004aa6:	e099      	b.n	8004bdc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 808e 	beq.w	8004bd0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f003 f8d3 	bl	8007c6a <USB_ReadDevOutEPInterrupt>
 8004ac4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004adc:	461a      	mov	r2, r3
 8004ade:	2301      	movs	r3, #1
 8004ae0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ae2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fea3 	bl	8005830 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00c      	beq.n	8004b0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b00:	461a      	mov	r2, r3
 8004b02:	2308      	movs	r3, #8
 8004b04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 ff79 	bl	8005a00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b24:	461a      	mov	r2, r3
 8004b26:	2310      	movs	r3, #16
 8004b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d030      	beq.n	8004b96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3c:	2b80      	cmp	r3, #128	@ 0x80
 8004b3e:	d109      	bne.n	8004b54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	3304      	adds	r3, #4
 8004b68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	78db      	ldrb	r3, [r3, #3]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d108      	bne.n	8004b84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f005 fc06 	bl	800a390 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2302      	movs	r3, #2
 8004b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	461a      	mov	r2, r3
 8004bae:	2320      	movs	r3, #32
 8004bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f47f af62 	bne.w	8004aa8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f002 fff7 	bl	8007bdc <USB_ReadInterrupts>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bf8:	f040 80db 	bne.w	8004db2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f003 f818 	bl	8007c36 <USB_ReadDevAllInEpInterrupt>
 8004c06:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004c0c:	e0cd      	b.n	8004daa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80c2 	beq.w	8004d9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 f83e 	bl	8007ca6 <USB_ReadDevInEPInterrupt>
 8004c2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d057      	beq.n	8004ce6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69f9      	ldr	r1, [r7, #28]
 8004c52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c56:	4013      	ands	r3, r2
 8004c58:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c66:	461a      	mov	r2, r3
 8004c68:	2301      	movs	r3, #1
 8004c6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	799b      	ldrb	r3, [r3, #6]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d132      	bne.n	8004cda <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c78:	4613      	mov	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	3320      	adds	r3, #32
 8004c84:	6819      	ldr	r1, [r3, #0]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4403      	add	r3, r0
 8004c94:	331c      	adds	r3, #28
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4419      	add	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4403      	add	r3, r0
 8004ca8:	3320      	adds	r3, #32
 8004caa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d113      	bne.n	8004cda <HAL_PCD_IRQHandler+0x3a2>
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3324      	adds	r3, #36	@ 0x24
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d108      	bne.n	8004cda <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	f003 f845 	bl	8007d64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f005 fad0 	bl	800a286 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d008      	beq.n	8004d02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2308      	movs	r3, #8
 8004d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d34:	461a      	mov	r2, r3
 8004d36:	2340      	movs	r3, #64	@ 0x40
 8004d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d023      	beq.n	8004d8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004d44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d46:	6a38      	ldr	r0, [r7, #32]
 8004d48:	f002 f82c 	bl	8006da4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4e:	4613      	mov	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	3310      	adds	r3, #16
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	78db      	ldrb	r3, [r3, #3]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d108      	bne.n	8004d7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f005 fb1d 	bl	800a3b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d86:	461a      	mov	r2, r3
 8004d88:	2302      	movs	r3, #2
 8004d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fcbd 	bl	8005718 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	3301      	adds	r3, #1
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f47f af2e 	bne.w	8004c0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f002 ff10 	bl	8007bdc <USB_ReadInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc6:	d122      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d108      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004dee:	2100      	movs	r1, #0
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fea3 	bl	8005b3c <HAL_PCDEx_LPM_Callback>
 8004df6:	e002      	b.n	8004dfe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f005 fabb 	bl	800a374 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f002 fee2 	bl	8007bdc <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e22:	d112      	bne.n	8004e4a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d102      	bne.n	8004e3a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f005 fa77 	bl	800a328 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004e48:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f002 fec4 	bl	8007bdc <USB_ReadInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5e:	f040 80b7 	bne.w	8004fd0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2110      	movs	r1, #16
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 ff91 	bl	8006da4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e82:	2300      	movs	r3, #0
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e86:	e046      	b.n	8004f16 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e94:	461a      	mov	r2, r3
 8004e96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ece:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f12:	3301      	adds	r3, #1
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	791b      	ldrb	r3, [r3, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d3b2      	bcc.n	8004e88 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f30:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004f34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	7bdb      	ldrb	r3, [r3, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d016      	beq.n	8004f6c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f4e:	f043 030b 	orr.w	r3, r3, #11
 8004f52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f64:	f043 030b 	orr.w	r3, r3, #11
 8004f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f6a:	e015      	b.n	8004f98 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f7e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004f82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f92:	f043 030b 	orr.w	r3, r3, #11
 8004f96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004faa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f002 fed2 	bl	8007d64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f002 fe01 	bl	8007bdc <USB_ReadInterrupts>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fe4:	d123      	bne.n	800502e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 fe97 	bl	8007d1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 ff4e 	bl	8006e96 <USB_GetDevSpeed>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681c      	ldr	r4, [r3, #0]
 8005006:	f001 fa09 	bl	800641c <HAL_RCC_GetHCLKFreq>
 800500a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005010:	461a      	mov	r2, r3
 8005012:	4620      	mov	r0, r4
 8005014:	f001 fc52 	bl	80068bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f005 f95c 	bl	800a2d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800502c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f002 fdd2 	bl	8007bdc <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b08      	cmp	r3, #8
 8005040:	d10a      	bne.n	8005058 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f005 f939 	bl	800a2ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f002 0208 	and.w	r2, r2, #8
 8005056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f002 fdbd 	bl	8007bdc <USB_ReadInterrupts>
 8005062:	4603      	mov	r3, r0
 8005064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005068:	2b80      	cmp	r3, #128	@ 0x80
 800506a:	d123      	bne.n	80050b4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005078:	2301      	movs	r3, #1
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
 800507c:	e014      	b.n	80050a8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d105      	bne.n	80050a2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	b2db      	uxtb	r3, r3
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fb0a 	bl	80056b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	3301      	adds	r3, #1
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	791b      	ldrb	r3, [r3, #4]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d3e4      	bcc.n	800507e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 fd8f 	bl	8007bdc <USB_ReadInterrupts>
 80050be:	4603      	mov	r3, r0
 80050c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c8:	d13c      	bne.n	8005144 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050ca:	2301      	movs	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ce:	e02b      	b.n	8005128 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	3318      	adds	r3, #24
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d115      	bne.n	8005122 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80050f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da12      	bge.n	8005122 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3317      	adds	r3, #23
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005118:	b2db      	uxtb	r3, r3
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 faca 	bl	80056b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	3301      	adds	r3, #1
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	791b      	ldrb	r3, [r3, #4]
 800512c:	461a      	mov	r2, r3
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	4293      	cmp	r3, r2
 8005132:	d3cd      	bcc.n	80050d0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f002 fd47 	bl	8007bdc <USB_ReadInterrupts>
 800514e:	4603      	mov	r3, r0
 8005150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005154:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005158:	d156      	bne.n	8005208 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800515a:	2301      	movs	r3, #1
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
 800515e:	e045      	b.n	80051ec <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d12e      	bne.n	80051e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005188:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800518a:	2b00      	cmp	r3, #0
 800518c:	da2b      	bge.n	80051e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800519a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800519e:	429a      	cmp	r2, r3
 80051a0:	d121      	bne.n	80051e6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051e2:	6053      	str	r3, [r2, #4]
            break;
 80051e4:	e008      	b.n	80051f8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	3301      	adds	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	791b      	ldrb	r3, [r3, #4]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d3b3      	bcc.n	8005160 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f002 fce5 	bl	8007bdc <USB_ReadInterrupts>
 8005212:	4603      	mov	r3, r0
 8005214:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521c:	d10a      	bne.n	8005234 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f005 f8da 	bl	800a3d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f002 fccf 	bl	8007bdc <USB_ReadInterrupts>
 800523e:	4603      	mov	r3, r0
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d115      	bne.n	8005274 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f005 f8ca 	bl	800a3f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
 8005270:	e000      	b.n	8005274 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005272:	bf00      	nop
    }
  }
}
 8005274:	3734      	adds	r7, #52	@ 0x34
 8005276:	46bd      	mov	sp, r7
 8005278:	bd90      	pop	{r4, r7, pc}

0800527a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_PCD_SetAddress+0x1a>
 8005290:	2302      	movs	r3, #2
 8005292:	e012      	b.n	80052ba <HAL_PCD_SetAddress+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	4611      	mov	r1, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f002 fc2e 	bl	8007b0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	4608      	mov	r0, r1
 80052cc:	4611      	mov	r1, r2
 80052ce:	461a      	mov	r2, r3
 80052d0:	4603      	mov	r3, r0
 80052d2:	70fb      	strb	r3, [r7, #3]
 80052d4:	460b      	mov	r3, r1
 80052d6:	803b      	strh	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da0f      	bge.n	8005308 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	f003 020f 	and.w	r2, r3, #15
 80052ee:	4613      	mov	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	3310      	adds	r3, #16
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	705a      	strb	r2, [r3, #1]
 8005306:	e00f      	b.n	8005328 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	f003 020f 	and.w	r2, r3, #15
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	3304      	adds	r3, #4
 8005320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005334:	883b      	ldrh	r3, [r7, #0]
 8005336:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	78ba      	ldrb	r2, [r7, #2]
 8005342:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005356:	78bb      	ldrb	r3, [r7, #2]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d102      	bne.n	8005362 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_PCD_EP_Open+0xae>
 800536c:	2302      	movs	r3, #2
 800536e:	e00e      	b.n	800538e <HAL_PCD_EP_Open+0xcc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	4618      	mov	r0, r3
 8005380:	f001 fdae 	bl	8006ee0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800538c:	7afb      	ldrb	r3, [r7, #11]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da0f      	bge.n	80053ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	3310      	adds	r3, #16
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	3304      	adds	r3, #4
 80053c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	705a      	strb	r2, [r3, #1]
 80053c8:	e00f      	b.n	80053ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	4413      	add	r3, r2
 80053e0:	3304      	adds	r3, #4
 80053e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_PCD_EP_Close+0x6e>
 8005400:	2302      	movs	r3, #2
 8005402:	e00e      	b.n	8005422 <HAL_PCD_EP_Close+0x8c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68f9      	ldr	r1, [r7, #12]
 8005412:	4618      	mov	r0, r3
 8005414:	f001 fdec 	bl	8006ff0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b086      	sub	sp, #24
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	460b      	mov	r3, r1
 8005438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	f003 020f 	and.w	r2, r3, #15
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	3304      	adds	r3, #4
 8005452:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2200      	movs	r2, #0
 8005464:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800546c:	7afb      	ldrb	r3, [r7, #11]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	b2da      	uxtb	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	799b      	ldrb	r3, [r3, #6]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d102      	bne.n	8005486 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	799b      	ldrb	r3, [r3, #6]
 800548e:	461a      	mov	r2, r3
 8005490:	6979      	ldr	r1, [r7, #20]
 8005492:	f001 fe89 	bl	80071a8 <USB_EPStartXfer>

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	f003 020f 	and.w	r2, r3, #15
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80054c2:	681b      	ldr	r3, [r3, #0]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	460b      	mov	r3, r1
 80054de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054e0:	7afb      	ldrb	r3, [r7, #11]
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	4613      	mov	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	3310      	adds	r3, #16
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	3304      	adds	r3, #4
 80054f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2200      	movs	r2, #0
 8005508:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2201      	movs	r2, #1
 800550e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005510:	7afb      	ldrb	r3, [r7, #11]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	b2da      	uxtb	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	799b      	ldrb	r3, [r3, #6]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d102      	bne.n	800552a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	799b      	ldrb	r3, [r3, #6]
 8005532:	461a      	mov	r2, r3
 8005534:	6979      	ldr	r1, [r7, #20]
 8005536:	f001 fe37 	bl	80071a8 <USB_EPStartXfer>

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	7912      	ldrb	r2, [r2, #4]
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e04f      	b.n	8005602 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005566:	2b00      	cmp	r3, #0
 8005568:	da0f      	bge.n	800558a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	3310      	adds	r3, #16
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	705a      	strb	r2, [r3, #1]
 8005588:	e00d      	b.n	80055a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4413      	add	r3, r2
 800559c:	3304      	adds	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_PCD_EP_SetStall+0x82>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e01d      	b.n	8005602 <HAL_PCD_EP_SetStall+0xbe>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f002 f9c5 	bl	8007964 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7999      	ldrb	r1, [r3, #6]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055f2:	461a      	mov	r2, r3
 80055f4:	f002 fbb6 	bl	8007d64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005616:	78fb      	ldrb	r3, [r7, #3]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	7912      	ldrb	r2, [r2, #4]
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e042      	b.n	80056ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800562c:	2b00      	cmp	r3, #0
 800562e:	da0f      	bge.n	8005650 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 020f 	and.w	r2, r3, #15
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	3310      	adds	r3, #16
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	3304      	adds	r3, #4
 8005646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	705a      	strb	r2, [r3, #1]
 800564e:	e00f      	b.n	8005670 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 020f 	and.w	r2, r3, #15
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	3304      	adds	r3, #4
 8005668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_PCD_EP_ClrStall+0x86>
 800568c:	2302      	movs	r3, #2
 800568e:	e00e      	b.n	80056ae <HAL_PCD_EP_ClrStall+0xa4>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	4618      	mov	r0, r3
 80056a0:	f002 f9ce 	bl	8007a40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80056c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da0c      	bge.n	80056e4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	f003 020f 	and.w	r2, r3, #15
 80056d0:	4613      	mov	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	3310      	adds	r3, #16
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	3304      	adds	r3, #4
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e00c      	b.n	80056fe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	4613      	mov	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	3304      	adds	r3, #4
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	4618      	mov	r0, r3
 8005706:	f001 ffed 	bl	80076e4 <USB_EPStopXfer>
 800570a:	4603      	mov	r3, r0
 800570c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800570e:	7afb      	ldrb	r3, [r7, #11]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	@ 0x28
 800571c:	af02      	add	r7, sp, #8
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	3310      	adds	r3, #16
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	3304      	adds	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	429a      	cmp	r2, r3
 800574a:	d901      	bls.n	8005750 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e06b      	b.n	8005828 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	429a      	cmp	r2, r3
 8005764:	d902      	bls.n	800576c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3303      	adds	r3, #3
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005774:	e02a      	b.n	80057cc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	429a      	cmp	r2, r3
 800578a:	d902      	bls.n	8005792 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3303      	adds	r3, #3
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68d9      	ldr	r1, [r3, #12]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	4603      	mov	r3, r0
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f002 f842 	bl	8007838 <USB_WritePacket>

    ep->xfer_buff  += len;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	441a      	add	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	441a      	add	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d809      	bhi.n	80057f6 <PCD_WriteEmptyTxFifo+0xde>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d203      	bcs.n	80057f6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1bf      	bne.n	8005776 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d811      	bhi.n	8005826 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	2201      	movs	r2, #1
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	43db      	mvns	r3, r3
 800581c:	6939      	ldr	r1, [r7, #16]
 800581e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005822:	4013      	ands	r3, r2
 8005824:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3720      	adds	r7, #32
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	333c      	adds	r3, #60	@ 0x3c
 8005848:	3304      	adds	r3, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	799b      	ldrb	r3, [r3, #6]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d17b      	bne.n	800595e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d015      	beq.n	800589c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4a61      	ldr	r2, [pc, #388]	@ (80059f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	f240 80b9 	bls.w	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80b3 	beq.w	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005892:	461a      	mov	r2, r3
 8005894:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005898:	6093      	str	r3, [r2, #8]
 800589a:	e0a7      	b.n	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	2320      	movs	r3, #32
 80058b6:	6093      	str	r3, [r2, #8]
 80058b8:	e098      	b.n	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 8093 	bne.w	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	4a4b      	ldr	r2, [pc, #300]	@ (80059f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d90f      	bls.n	80058ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e4:	461a      	mov	r2, r3
 80058e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ea:	6093      	str	r3, [r2, #8]
 80058ec:	e07e      	b.n	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4413      	add	r3, r2
 8005900:	3304      	adds	r3, #4
 8005902:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	0159      	lsls	r1, r3, #5
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	440b      	add	r3, r1
 8005910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591a:	1ad2      	subs	r2, r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d114      	bne.n	8005950 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005938:	461a      	mov	r2, r3
 800593a:	2101      	movs	r1, #1
 800593c:	f002 fa12 	bl	8007d64 <USB_EP0_OutStart>
 8005940:	e006      	b.n	8005950 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	441a      	add	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f004 fc7a 	bl	800a250 <HAL_PCD_DataOutStageCallback>
 800595c:	e046      	b.n	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4a26      	ldr	r2, [pc, #152]	@ (80059fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d124      	bne.n	80059b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597c:	461a      	mov	r2, r3
 800597e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005982:	6093      	str	r3, [r2, #8]
 8005984:	e032      	b.n	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599c:	461a      	mov	r2, r3
 800599e:	2320      	movs	r3, #32
 80059a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f004 fc51 	bl	800a250 <HAL_PCD_DataOutStageCallback>
 80059ae:	e01d      	b.n	80059ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d114      	bne.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	4613      	mov	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d108      	bne.n	80059e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059d8:	461a      	mov	r2, r3
 80059da:	2100      	movs	r1, #0
 80059dc:	f002 f9c2 	bl	8007d64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f004 fc32 	bl	800a250 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3720      	adds	r7, #32
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	4f54300a 	.word	0x4f54300a
 80059fc:	4f54310a 	.word	0x4f54310a

08005a00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	333c      	adds	r3, #60	@ 0x3c
 8005a18:	3304      	adds	r3, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a15      	ldr	r2, [pc, #84]	@ (8005a88 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d90e      	bls.n	8005a54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f004 fbe9 	bl	800a22c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a88 <PCD_EP_OutSetupPacket_int+0x88>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d90c      	bls.n	8005a7c <PCD_EP_OutSetupPacket_int+0x7c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	799b      	ldrb	r3, [r3, #6]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d108      	bne.n	8005a7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a74:	461a      	mov	r2, r3
 8005a76:	2101      	movs	r1, #1
 8005a78:	f002 f974 	bl	8007d64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	4f54300a 	.word	0x4f54300a

08005a8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d107      	bne.n	8005aba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005aaa:	883b      	ldrh	r3, [r7, #0]
 8005aac:	0419      	lsls	r1, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ab8:	e028      	b.n	8005b0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	0c1b      	lsrs	r3, r3, #16
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	e00d      	b.n	8005aea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	3340      	adds	r3, #64	@ 0x40
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	7bfa      	ldrb	r2, [r7, #15]
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d3ec      	bcc.n	8005ace <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005af4:	883b      	ldrh	r3, [r7, #0]
 8005af6:	0418      	lsls	r0, r3, #16
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6819      	ldr	r1, [r3, #0]
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	4302      	orrs	r2, r0
 8005b04:	3340      	adds	r3, #64	@ 0x40
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	460b      	mov	r3, r1
 8005b24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	887a      	ldrh	r2, [r7, #2]
 8005b2c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e267      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d075      	beq.n	8005c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b72:	4b88      	ldr	r3, [pc, #544]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d00c      	beq.n	8005b98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b7e:	4b85      	ldr	r3, [pc, #532]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	d112      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b8a:	4b82      	ldr	r3, [pc, #520]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b96:	d10b      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	4b7e      	ldr	r3, [pc, #504]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d05b      	beq.n	8005c5c <HAL_RCC_OscConfig+0x108>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d157      	bne.n	8005c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e242      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb8:	d106      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x74>
 8005bba:	4b76      	ldr	r3, [pc, #472]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a75      	ldr	r2, [pc, #468]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e01d      	b.n	8005c04 <HAL_RCC_OscConfig+0xb0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCC_OscConfig+0x98>
 8005bd2:	4b70      	ldr	r3, [pc, #448]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4b6d      	ldr	r3, [pc, #436]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a6c      	ldr	r2, [pc, #432]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e00b      	b.n	8005c04 <HAL_RCC_OscConfig+0xb0>
 8005bec:	4b69      	ldr	r3, [pc, #420]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a68      	ldr	r2, [pc, #416]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	4b66      	ldr	r3, [pc, #408]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a65      	ldr	r2, [pc, #404]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7fc f954 	bl	8001eb8 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c14:	f7fc f950 	bl	8001eb8 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	@ 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e207      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c26:	4b5b      	ldr	r3, [pc, #364]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0xc0>
 8005c32:	e014      	b.n	8005c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fc f940 	bl	8001eb8 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c3c:	f7fc f93c 	bl	8001eb8 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b64      	cmp	r3, #100	@ 0x64
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e1f3      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c4e:	4b51      	ldr	r3, [pc, #324]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0xe8>
 8005c5a:	e000      	b.n	8005c5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d063      	beq.n	8005d32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c76:	4b47      	ldr	r3, [pc, #284]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d11c      	bne.n	8005cbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c82:	4b44      	ldr	r3, [pc, #272]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d116      	bne.n	8005cbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c8e:	4b41      	ldr	r3, [pc, #260]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x152>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e1c7      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4937      	ldr	r1, [pc, #220]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cba:	e03a      	b.n	8005d32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d020      	beq.n	8005d06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cc4:	4b34      	ldr	r3, [pc, #208]	@ (8005d98 <HAL_RCC_OscConfig+0x244>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cca:	f7fc f8f5 	bl	8001eb8 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cd2:	f7fc f8f1 	bl	8001eb8 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e1a8      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf0:	4b28      	ldr	r3, [pc, #160]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4925      	ldr	r1, [pc, #148]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	600b      	str	r3, [r1, #0]
 8005d04:	e015      	b.n	8005d32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d06:	4b24      	ldr	r3, [pc, #144]	@ (8005d98 <HAL_RCC_OscConfig+0x244>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fc f8d4 	bl	8001eb8 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d14:	f7fc f8d0 	bl	8001eb8 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e187      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d26:	4b1b      	ldr	r3, [pc, #108]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d036      	beq.n	8005dac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d016      	beq.n	8005d74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d46:	4b15      	ldr	r3, [pc, #84]	@ (8005d9c <HAL_RCC_OscConfig+0x248>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4c:	f7fc f8b4 	bl	8001eb8 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d54:	f7fc f8b0 	bl	8001eb8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e167      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d66:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <HAL_RCC_OscConfig+0x240>)
 8005d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0x200>
 8005d72:	e01b      	b.n	8005dac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d74:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <HAL_RCC_OscConfig+0x248>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d7a:	f7fc f89d 	bl	8001eb8 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d80:	e00e      	b.n	8005da0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d82:	f7fc f899 	bl	8001eb8 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d907      	bls.n	8005da0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e150      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
 8005d94:	40023800 	.word	0x40023800
 8005d98:	42470000 	.word	0x42470000
 8005d9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da0:	4b88      	ldr	r3, [pc, #544]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1ea      	bne.n	8005d82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8097 	beq.w	8005ee8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dbe:	4b81      	ldr	r3, [pc, #516]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10f      	bne.n	8005dea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	4b7d      	ldr	r3, [pc, #500]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dda:	4b7a      	ldr	r3, [pc, #488]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de6:	2301      	movs	r3, #1
 8005de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dea:	4b77      	ldr	r3, [pc, #476]	@ (8005fc8 <HAL_RCC_OscConfig+0x474>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d118      	bne.n	8005e28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005df6:	4b74      	ldr	r3, [pc, #464]	@ (8005fc8 <HAL_RCC_OscConfig+0x474>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a73      	ldr	r2, [pc, #460]	@ (8005fc8 <HAL_RCC_OscConfig+0x474>)
 8005dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e02:	f7fc f859 	bl	8001eb8 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e0a:	f7fc f855 	bl	8001eb8 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e10c      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc8 <HAL_RCC_OscConfig+0x474>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0f0      	beq.n	8005e0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d106      	bne.n	8005e3e <HAL_RCC_OscConfig+0x2ea>
 8005e30:	4b64      	ldr	r3, [pc, #400]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e34:	4a63      	ldr	r2, [pc, #396]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e3c:	e01c      	b.n	8005e78 <HAL_RCC_OscConfig+0x324>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d10c      	bne.n	8005e60 <HAL_RCC_OscConfig+0x30c>
 8005e46:	4b5f      	ldr	r3, [pc, #380]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e4a:	4a5e      	ldr	r2, [pc, #376]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	f043 0304 	orr.w	r3, r3, #4
 8005e50:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e52:	4b5c      	ldr	r3, [pc, #368]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e56:	4a5b      	ldr	r2, [pc, #364]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e5e:	e00b      	b.n	8005e78 <HAL_RCC_OscConfig+0x324>
 8005e60:	4b58      	ldr	r3, [pc, #352]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e64:	4a57      	ldr	r2, [pc, #348]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e66:	f023 0301 	bic.w	r3, r3, #1
 8005e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e6c:	4b55      	ldr	r3, [pc, #340]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e70:	4a54      	ldr	r2, [pc, #336]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005e72:	f023 0304 	bic.w	r3, r3, #4
 8005e76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d015      	beq.n	8005eac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e80:	f7fc f81a 	bl	8001eb8 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e86:	e00a      	b.n	8005e9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e88:	f7fc f816 	bl	8001eb8 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e0cb      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9e:	4b49      	ldr	r3, [pc, #292]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0ee      	beq.n	8005e88 <HAL_RCC_OscConfig+0x334>
 8005eaa:	e014      	b.n	8005ed6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eac:	f7fc f804 	bl	8001eb8 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb2:	e00a      	b.n	8005eca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb4:	f7fc f800 	bl	8001eb8 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e0b5      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eca:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ee      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d105      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005edc:	4b39      	ldr	r3, [pc, #228]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee0:	4a38      	ldr	r2, [pc, #224]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ee6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80a1 	beq.w	8006034 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ef2:	4b34      	ldr	r3, [pc, #208]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d05c      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d141      	bne.n	8005f8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f06:	4b31      	ldr	r3, [pc, #196]	@ (8005fcc <HAL_RCC_OscConfig+0x478>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0c:	f7fb ffd4 	bl	8001eb8 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fb ffd0 	bl	8001eb8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e087      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f26:	4b27      	ldr	r3, [pc, #156]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69da      	ldr	r2, [r3, #28]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	041b      	lsls	r3, r3, #16
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f54:	061b      	lsls	r3, r3, #24
 8005f56:	491b      	ldr	r1, [pc, #108]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fcc <HAL_RCC_OscConfig+0x478>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f62:	f7fb ffa9 	bl	8001eb8 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6a:	f7fb ffa5 	bl	8001eb8 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e05c      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7c:	4b11      	ldr	r3, [pc, #68]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x416>
 8005f88:	e054      	b.n	8006034 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8a:	4b10      	ldr	r3, [pc, #64]	@ (8005fcc <HAL_RCC_OscConfig+0x478>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7fb ff92 	bl	8001eb8 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f98:	f7fb ff8e 	bl	8001eb8 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e045      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005faa:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <HAL_RCC_OscConfig+0x470>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x444>
 8005fb6:	e03d      	b.n	8006034 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e038      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006040 <HAL_RCC_OscConfig+0x4ec>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d028      	beq.n	8006030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d121      	bne.n	8006030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d11a      	bne.n	8006030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006000:	4013      	ands	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006008:	4293      	cmp	r3, r2
 800600a:	d111      	bne.n	8006030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	3b01      	subs	r3, #1
 800601a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800601c:	429a      	cmp	r2, r3
 800601e:	d107      	bne.n	8006030 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800602c:	429a      	cmp	r2, r3
 800602e:	d001      	beq.n	8006034 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800

08006044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0cc      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006058:	4b68      	ldr	r3, [pc, #416]	@ (80061fc <HAL_RCC_ClockConfig+0x1b8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d90c      	bls.n	8006080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006066:	4b65      	ldr	r3, [pc, #404]	@ (80061fc <HAL_RCC_ClockConfig+0x1b8>)
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b63      	ldr	r3, [pc, #396]	@ (80061fc <HAL_RCC_ClockConfig+0x1b8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0b8      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d020      	beq.n	80060ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006098:	4b59      	ldr	r3, [pc, #356]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	4a58      	ldr	r2, [pc, #352]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b0:	4b53      	ldr	r3, [pc, #332]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4a52      	ldr	r2, [pc, #328]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b50      	ldr	r3, [pc, #320]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	494d      	ldr	r1, [pc, #308]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d044      	beq.n	8006164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d107      	bne.n	80060f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e2:	4b47      	ldr	r3, [pc, #284]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d119      	bne.n	8006122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e07f      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d003      	beq.n	8006102 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006102:	4b3f      	ldr	r3, [pc, #252]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e06f      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006112:	4b3b      	ldr	r3, [pc, #236]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e067      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006122:	4b37      	ldr	r3, [pc, #220]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f023 0203 	bic.w	r2, r3, #3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4934      	ldr	r1, [pc, #208]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	4313      	orrs	r3, r2
 8006132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006134:	f7fb fec0 	bl	8001eb8 <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	e00a      	b.n	8006152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800613c:	f7fb febc 	bl	8001eb8 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e04f      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006152:	4b2b      	ldr	r3, [pc, #172]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 020c 	and.w	r2, r3, #12
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	429a      	cmp	r2, r3
 8006162:	d1eb      	bne.n	800613c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006164:	4b25      	ldr	r3, [pc, #148]	@ (80061fc <HAL_RCC_ClockConfig+0x1b8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d20c      	bcs.n	800618c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	4b22      	ldr	r3, [pc, #136]	@ (80061fc <HAL_RCC_ClockConfig+0x1b8>)
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617a:	4b20      	ldr	r3, [pc, #128]	@ (80061fc <HAL_RCC_ClockConfig+0x1b8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d001      	beq.n	800618c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e032      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006198:	4b19      	ldr	r3, [pc, #100]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4916      	ldr	r1, [pc, #88]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061b6:	4b12      	ldr	r3, [pc, #72]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	490e      	ldr	r1, [pc, #56]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ca:	f000 f821 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80061ce:	4602      	mov	r2, r0
 80061d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006200 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	490a      	ldr	r1, [pc, #40]	@ (8006204 <HAL_RCC_ClockConfig+0x1c0>)
 80061dc:	5ccb      	ldrb	r3, [r1, r3]
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	4a09      	ldr	r2, [pc, #36]	@ (8006208 <HAL_RCC_ClockConfig+0x1c4>)
 80061e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80061e6:	4b09      	ldr	r3, [pc, #36]	@ (800620c <HAL_RCC_ClockConfig+0x1c8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fb fe20 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40023c00 	.word	0x40023c00
 8006200:	40023800 	.word	0x40023800
 8006204:	0800c1fc 	.word	0x0800c1fc
 8006208:	20000004 	.word	0x20000004
 800620c:	20000008 	.word	0x20000008

08006210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006214:	b094      	sub	sp, #80	@ 0x50
 8006216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006228:	4b79      	ldr	r3, [pc, #484]	@ (8006410 <HAL_RCC_GetSysClockFreq+0x200>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 030c 	and.w	r3, r3, #12
 8006230:	2b08      	cmp	r3, #8
 8006232:	d00d      	beq.n	8006250 <HAL_RCC_GetSysClockFreq+0x40>
 8006234:	2b08      	cmp	r3, #8
 8006236:	f200 80e1 	bhi.w	80063fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <HAL_RCC_GetSysClockFreq+0x34>
 800623e:	2b04      	cmp	r3, #4
 8006240:	d003      	beq.n	800624a <HAL_RCC_GetSysClockFreq+0x3a>
 8006242:	e0db      	b.n	80063fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4b73      	ldr	r3, [pc, #460]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x204>)
 8006246:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006248:	e0db      	b.n	8006402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624a:	4b73      	ldr	r3, [pc, #460]	@ (8006418 <HAL_RCC_GetSysClockFreq+0x208>)
 800624c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800624e:	e0d8      	b.n	8006402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006250:	4b6f      	ldr	r3, [pc, #444]	@ (8006410 <HAL_RCC_GetSysClockFreq+0x200>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006258:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800625a:	4b6d      	ldr	r3, [pc, #436]	@ (8006410 <HAL_RCC_GetSysClockFreq+0x200>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d063      	beq.n	800632e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006266:	4b6a      	ldr	r3, [pc, #424]	@ (8006410 <HAL_RCC_GetSysClockFreq+0x200>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	099b      	lsrs	r3, r3, #6
 800626c:	2200      	movs	r2, #0
 800626e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006270:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30
 800627a:	2300      	movs	r3, #0
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
 800627e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006282:	4622      	mov	r2, r4
 8006284:	462b      	mov	r3, r5
 8006286:	f04f 0000 	mov.w	r0, #0
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	0159      	lsls	r1, r3, #5
 8006290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006294:	0150      	lsls	r0, r2, #5
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4621      	mov	r1, r4
 800629c:	1a51      	subs	r1, r2, r1
 800629e:	6139      	str	r1, [r7, #16]
 80062a0:	4629      	mov	r1, r5
 80062a2:	eb63 0301 	sbc.w	r3, r3, r1
 80062a6:	617b      	str	r3, [r7, #20]
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062b4:	4659      	mov	r1, fp
 80062b6:	018b      	lsls	r3, r1, #6
 80062b8:	4651      	mov	r1, sl
 80062ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062be:	4651      	mov	r1, sl
 80062c0:	018a      	lsls	r2, r1, #6
 80062c2:	4651      	mov	r1, sl
 80062c4:	ebb2 0801 	subs.w	r8, r2, r1
 80062c8:	4659      	mov	r1, fp
 80062ca:	eb63 0901 	sbc.w	r9, r3, r1
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062e2:	4690      	mov	r8, r2
 80062e4:	4699      	mov	r9, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	eb18 0303 	adds.w	r3, r8, r3
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	462b      	mov	r3, r5
 80062f0:	eb49 0303 	adc.w	r3, r9, r3
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006302:	4629      	mov	r1, r5
 8006304:	024b      	lsls	r3, r1, #9
 8006306:	4621      	mov	r1, r4
 8006308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800630c:	4621      	mov	r1, r4
 800630e:	024a      	lsls	r2, r1, #9
 8006310:	4610      	mov	r0, r2
 8006312:	4619      	mov	r1, r3
 8006314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006316:	2200      	movs	r2, #0
 8006318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800631a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800631c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006320:	f7fa fadc 	bl	80008dc <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4613      	mov	r3, r2
 800632a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800632c:	e058      	b.n	80063e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632e:	4b38      	ldr	r3, [pc, #224]	@ (8006410 <HAL_RCC_GetSysClockFreq+0x200>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	099b      	lsrs	r3, r3, #6
 8006334:	2200      	movs	r2, #0
 8006336:	4618      	mov	r0, r3
 8006338:	4611      	mov	r1, r2
 800633a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	2300      	movs	r3, #0
 8006342:	627b      	str	r3, [r7, #36]	@ 0x24
 8006344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	f04f 0000 	mov.w	r0, #0
 8006350:	f04f 0100 	mov.w	r1, #0
 8006354:	0159      	lsls	r1, r3, #5
 8006356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800635a:	0150      	lsls	r0, r2, #5
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4641      	mov	r1, r8
 8006362:	ebb2 0a01 	subs.w	sl, r2, r1
 8006366:	4649      	mov	r1, r9
 8006368:	eb63 0b01 	sbc.w	fp, r3, r1
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800637c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006380:	ebb2 040a 	subs.w	r4, r2, sl
 8006384:	eb63 050b 	sbc.w	r5, r3, fp
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	00eb      	lsls	r3, r5, #3
 8006392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006396:	00e2      	lsls	r2, r4, #3
 8006398:	4614      	mov	r4, r2
 800639a:	461d      	mov	r5, r3
 800639c:	4643      	mov	r3, r8
 800639e:	18e3      	adds	r3, r4, r3
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	464b      	mov	r3, r9
 80063a4:	eb45 0303 	adc.w	r3, r5, r3
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063b6:	4629      	mov	r1, r5
 80063b8:	028b      	lsls	r3, r1, #10
 80063ba:	4621      	mov	r1, r4
 80063bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063c0:	4621      	mov	r1, r4
 80063c2:	028a      	lsls	r2, r1, #10
 80063c4:	4610      	mov	r0, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ca:	2200      	movs	r2, #0
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	61fa      	str	r2, [r7, #28]
 80063d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d4:	f7fa fa82 	bl	80008dc <__aeabi_uldivmod>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4613      	mov	r3, r2
 80063de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	3301      	adds	r3, #1
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80063f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063fa:	e002      	b.n	8006402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063fc:	4b05      	ldr	r3, [pc, #20]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x204>)
 80063fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006404:	4618      	mov	r0, r3
 8006406:	3750      	adds	r7, #80	@ 0x50
 8006408:	46bd      	mov	sp, r7
 800640a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800640e:	bf00      	nop
 8006410:	40023800 	.word	0x40023800
 8006414:	00f42400 	.word	0x00f42400
 8006418:	007a1200 	.word	0x007a1200

0800641c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006420:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <HAL_RCC_GetHCLKFreq+0x14>)
 8006422:	681b      	ldr	r3, [r3, #0]
}
 8006424:	4618      	mov	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	20000004 	.word	0x20000004

08006434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006438:	f7ff fff0 	bl	800641c <HAL_RCC_GetHCLKFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	0a9b      	lsrs	r3, r3, #10
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	4903      	ldr	r1, [pc, #12]	@ (8006458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006450:	4618      	mov	r0, r3
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40023800 	.word	0x40023800
 8006458:	0800c20c 	.word	0x0800c20c

0800645c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d105      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006480:	2b00      	cmp	r3, #0
 8006482:	d035      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006484:	4b62      	ldr	r3, [pc, #392]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006486:	2200      	movs	r2, #0
 8006488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800648a:	f7fb fd15 	bl	8001eb8 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006490:	e008      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006492:	f7fb fd11 	bl	8001eb8 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e0b0      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f0      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	019a      	lsls	r2, r3, #6
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	071b      	lsls	r3, r3, #28
 80064bc:	4955      	ldr	r1, [pc, #340]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064c4:	4b52      	ldr	r3, [pc, #328]	@ (8006610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064ca:	f7fb fcf5 	bl	8001eb8 <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064d2:	f7fb fcf1 	bl	8001eb8 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e090      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064e4:	4b4b      	ldr	r3, [pc, #300]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8083 	beq.w	8006604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	4b44      	ldr	r3, [pc, #272]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	4a43      	ldr	r2, [pc, #268]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800650c:	6413      	str	r3, [r2, #64]	@ 0x40
 800650e:	4b41      	ldr	r3, [pc, #260]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800651a:	4b3f      	ldr	r3, [pc, #252]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a3e      	ldr	r2, [pc, #248]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006520:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006524:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006526:	f7fb fcc7 	bl	8001eb8 <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800652e:	f7fb fcc3 	bl	8001eb8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e062      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006540:	4b35      	ldr	r3, [pc, #212]	@ (8006618 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0f0      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800654c:	4b31      	ldr	r3, [pc, #196]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006554:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02f      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d028      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800656a:	4b2a      	ldr	r3, [pc, #168]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006572:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006574:	4b29      	ldr	r3, [pc, #164]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800657a:	4b28      	ldr	r3, [pc, #160]	@ (800661c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006580:	4a24      	ldr	r2, [pc, #144]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006586:	4b23      	ldr	r3, [pc, #140]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d114      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006592:	f7fb fc91 	bl	8001eb8 <HAL_GetTick>
 8006596:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006598:	e00a      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659a:	f7fb fc8d 	bl	8001eb8 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e02a      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b0:	4b18      	ldr	r3, [pc, #96]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0ee      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065c8:	d10d      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80065ca:	4b12      	ldr	r3, [pc, #72]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065de:	490d      	ldr	r1, [pc, #52]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	608b      	str	r3, [r1, #8]
 80065e4:	e005      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80065f0:	6093      	str	r3, [r2, #8]
 80065f2:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065fe:	4905      	ldr	r1, [pc, #20]	@ (8006614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006600:	4313      	orrs	r3, r2
 8006602:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	42470068 	.word	0x42470068
 8006614:	40023800 	.word	0x40023800
 8006618:	40007000 	.word	0x40007000
 800661c:	42470e40 	.word	0x42470e40

08006620 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d13f      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800663e:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006646:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d006      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006654:	d12f      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006656:	4b1f      	ldr	r3, [pc, #124]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006658:	617b      	str	r3, [r7, #20]
          break;
 800665a:	e02f      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800665c:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006664:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006668:	d108      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800666a:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006672:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e007      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800667c:	4b14      	ldr	r3, [pc, #80]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800668c:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800668e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006692:	099b      	lsrs	r3, r3, #6
 8006694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80066a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066a6:	0f1b      	lsrs	r3, r3, #28
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	617b      	str	r3, [r7, #20]
          break;
 80066b4:	e002      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
          break;
 80066ba:	bf00      	nop
        }
      }
      break;
 80066bc:	e000      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80066be:	bf00      	nop
    }
  }
  return frequency;
 80066c0:	697b      	ldr	r3, [r7, #20]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800
 80066d4:	00bb8000 	.word	0x00bb8000
 80066d8:	007a1200 	.word	0x007a1200
 80066dc:	00f42400 	.word	0x00f42400

080066e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e07b      	b.n	80067ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d108      	bne.n	800670c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006702:	d009      	beq.n	8006718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
 800670a:	e005      	b.n	8006718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d106      	bne.n	8006738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fb fa00 	bl	8001b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800674e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	ea42 0103 	orr.w	r1, r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	f003 0104 	and.w	r1, r3, #4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	f003 0210 	and.w	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067f2:	b084      	sub	sp, #16
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	f107 001c 	add.w	r0, r7, #28
 8006800:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006804:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006808:	2b01      	cmp	r3, #1
 800680a:	d123      	bne.n	8006854 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006834:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006838:	2b01      	cmp	r3, #1
 800683a:	d105      	bne.n	8006848 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fae9 	bl	8007e20 <USB_CoreReset>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	e01b      	b.n	800688c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fadd 	bl	8007e20 <USB_CoreReset>
 8006866:	4603      	mov	r3, r0
 8006868:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800686a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	639a      	str	r2, [r3, #56]	@ 0x38
 800687e:	e005      	b.n	800688c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006884:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800688c:	7fbb      	ldrb	r3, [r7, #30]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10b      	bne.n	80068aa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f043 0206 	orr.w	r2, r3, #6
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f043 0220 	orr.w	r2, r3, #32
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068b6:	b004      	add	sp, #16
 80068b8:	4770      	bx	lr
	...

080068bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d165      	bne.n	800699c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4a41      	ldr	r2, [pc, #260]	@ (80069d8 <USB_SetTurnaroundTime+0x11c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d906      	bls.n	80068e6 <USB_SetTurnaroundTime+0x2a>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a40      	ldr	r2, [pc, #256]	@ (80069dc <USB_SetTurnaroundTime+0x120>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d202      	bcs.n	80068e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068e0:	230f      	movs	r3, #15
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	e062      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4a3c      	ldr	r2, [pc, #240]	@ (80069dc <USB_SetTurnaroundTime+0x120>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d306      	bcc.n	80068fc <USB_SetTurnaroundTime+0x40>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a3b      	ldr	r2, [pc, #236]	@ (80069e0 <USB_SetTurnaroundTime+0x124>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d202      	bcs.n	80068fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068f6:	230e      	movs	r3, #14
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	e057      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4a38      	ldr	r2, [pc, #224]	@ (80069e0 <USB_SetTurnaroundTime+0x124>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d306      	bcc.n	8006912 <USB_SetTurnaroundTime+0x56>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4a37      	ldr	r2, [pc, #220]	@ (80069e4 <USB_SetTurnaroundTime+0x128>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d202      	bcs.n	8006912 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800690c:	230d      	movs	r3, #13
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e04c      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4a33      	ldr	r2, [pc, #204]	@ (80069e4 <USB_SetTurnaroundTime+0x128>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d306      	bcc.n	8006928 <USB_SetTurnaroundTime+0x6c>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4a32      	ldr	r2, [pc, #200]	@ (80069e8 <USB_SetTurnaroundTime+0x12c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d802      	bhi.n	8006928 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006922:	230c      	movs	r3, #12
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e041      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4a2f      	ldr	r2, [pc, #188]	@ (80069e8 <USB_SetTurnaroundTime+0x12c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d906      	bls.n	800693e <USB_SetTurnaroundTime+0x82>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4a2e      	ldr	r2, [pc, #184]	@ (80069ec <USB_SetTurnaroundTime+0x130>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d802      	bhi.n	800693e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006938:	230b      	movs	r3, #11
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e036      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4a2a      	ldr	r2, [pc, #168]	@ (80069ec <USB_SetTurnaroundTime+0x130>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d906      	bls.n	8006954 <USB_SetTurnaroundTime+0x98>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	4a29      	ldr	r2, [pc, #164]	@ (80069f0 <USB_SetTurnaroundTime+0x134>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d802      	bhi.n	8006954 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800694e:	230a      	movs	r3, #10
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e02b      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	4a26      	ldr	r2, [pc, #152]	@ (80069f0 <USB_SetTurnaroundTime+0x134>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d906      	bls.n	800696a <USB_SetTurnaroundTime+0xae>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4a25      	ldr	r2, [pc, #148]	@ (80069f4 <USB_SetTurnaroundTime+0x138>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d202      	bcs.n	800696a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006964:	2309      	movs	r3, #9
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e020      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4a21      	ldr	r2, [pc, #132]	@ (80069f4 <USB_SetTurnaroundTime+0x138>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d306      	bcc.n	8006980 <USB_SetTurnaroundTime+0xc4>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4a20      	ldr	r2, [pc, #128]	@ (80069f8 <USB_SetTurnaroundTime+0x13c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d802      	bhi.n	8006980 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800697a:	2308      	movs	r3, #8
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	e015      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4a1d      	ldr	r2, [pc, #116]	@ (80069f8 <USB_SetTurnaroundTime+0x13c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d906      	bls.n	8006996 <USB_SetTurnaroundTime+0xda>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4a1c      	ldr	r2, [pc, #112]	@ (80069fc <USB_SetTurnaroundTime+0x140>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d202      	bcs.n	8006996 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006990:	2307      	movs	r3, #7
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e00a      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006996:	2306      	movs	r3, #6
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e007      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d102      	bne.n	80069a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069a2:	2309      	movs	r3, #9
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	e001      	b.n	80069ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069a8:	2309      	movs	r3, #9
 80069aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	029b      	lsls	r3, r3, #10
 80069c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80069c4:	431a      	orrs	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	00d8acbf 	.word	0x00d8acbf
 80069dc:	00e4e1c0 	.word	0x00e4e1c0
 80069e0:	00f42400 	.word	0x00f42400
 80069e4:	01067380 	.word	0x01067380
 80069e8:	011a499f 	.word	0x011a499f
 80069ec:	01312cff 	.word	0x01312cff
 80069f0:	014ca43f 	.word	0x014ca43f
 80069f4:	016e3600 	.word	0x016e3600
 80069f8:	01a6ab1f 	.word	0x01a6ab1f
 80069fc:	01e84800 	.word	0x01e84800

08006a00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d115      	bne.n	8006a92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a72:	200a      	movs	r0, #10
 8006a74:	f7fb fa2c 	bl	8001ed0 <HAL_Delay>
      ms += 10U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	330a      	adds	r3, #10
 8006a7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 f93f 	bl	8007d02 <USB_GetMode>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d01e      	beq.n	8006ac8 <USB_SetCurrentMode+0x84>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a8e:	d9f0      	bls.n	8006a72 <USB_SetCurrentMode+0x2e>
 8006a90:	e01a      	b.n	8006ac8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d115      	bne.n	8006ac4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006aa4:	200a      	movs	r0, #10
 8006aa6:	f7fb fa13 	bl	8001ed0 <HAL_Delay>
      ms += 10U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	330a      	adds	r3, #10
 8006aae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f001 f926 	bl	8007d02 <USB_GetMode>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <USB_SetCurrentMode+0x84>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ac0:	d9f0      	bls.n	8006aa4 <USB_SetCurrentMode+0x60>
 8006ac2:	e001      	b.n	8006ac8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e005      	b.n	8006ad4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2bc8      	cmp	r3, #200	@ 0xc8
 8006acc:	d101      	bne.n	8006ad2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006adc:	b084      	sub	sp, #16
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	e009      	b.n	8006b10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3340      	adds	r3, #64	@ 0x40
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b0e      	cmp	r3, #14
 8006b14:	d9f2      	bls.n	8006afc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d11c      	bne.n	8006b58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b2c:	f043 0302 	orr.w	r3, r3, #2
 8006b30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b56:	e00b      	b.n	8006b70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b76:	461a      	mov	r2, r3
 8006b78:	2300      	movs	r3, #0
 8006b7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d10d      	bne.n	8006ba0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f968 	bl	8006e64 <USB_SetDevSpeed>
 8006b94:	e008      	b.n	8006ba8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b96:	2101      	movs	r1, #1
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f963 	bl	8006e64 <USB_SetDevSpeed>
 8006b9e:	e003      	b.n	8006ba8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ba0:	2103      	movs	r1, #3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f95e 	bl	8006e64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ba8:	2110      	movs	r1, #16
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8fa 	bl	8006da4 <USB_FlushTxFifo>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f924 	bl	8006e08 <USB_FlushRxFifo>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bdc:	461a      	mov	r2, r3
 8006bde:	2300      	movs	r3, #0
 8006be0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be8:	461a      	mov	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bee:	2300      	movs	r3, #0
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	e043      	b.n	8006c7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c0a:	d118      	bne.n	8006c3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e013      	b.n	8006c50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c34:	461a      	mov	r2, r3
 8006c36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	e008      	b.n	8006c50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2300      	movs	r3, #0
 8006c60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c80:	461a      	mov	r2, r3
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d3b5      	bcc.n	8006bf4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	e043      	b.n	8006d16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ca4:	d118      	bne.n	8006cd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e013      	b.n	8006cea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e008      	b.n	8006cea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3301      	adds	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d3b5      	bcc.n	8006c8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f043 0210 	orr.w	r2, r3, #16
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	4b10      	ldr	r3, [pc, #64]	@ (8006da0 <USB_DevInit+0x2c4>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f043 0208 	orr.w	r2, r3, #8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d107      	bne.n	8006d90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d88:	f043 0304 	orr.w	r3, r3, #4
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d9c:	b004      	add	sp, #16
 8006d9e:	4770      	bx	lr
 8006da0:	803c3800 	.word	0x803c3800

08006da4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dbe:	d901      	bls.n	8006dc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e01b      	b.n	8006dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	daf2      	bge.n	8006db2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	019b      	lsls	r3, r3, #6
 8006dd4:	f043 0220 	orr.w	r2, r3, #32
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006de8:	d901      	bls.n	8006dee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e006      	b.n	8006dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d0f0      	beq.n	8006ddc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e20:	d901      	bls.n	8006e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e018      	b.n	8006e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	daf2      	bge.n	8006e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2210      	movs	r2, #16
 8006e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e44:	d901      	bls.n	8006e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e006      	b.n	8006e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d0f0      	beq.n	8006e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e84:	4313      	orrs	r3, r2
 8006e86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b087      	sub	sp, #28
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 0306 	and.w	r3, r3, #6
 8006eae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	75fb      	strb	r3, [r7, #23]
 8006eba:	e00a      	b.n	8006ed2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d002      	beq.n	8006ec8 <USB_GetDevSpeed+0x32>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b06      	cmp	r3, #6
 8006ec6:	d102      	bne.n	8006ece <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	75fb      	strb	r3, [r7, #23]
 8006ecc:	e001      	b.n	8006ed2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ece:	230f      	movs	r3, #15
 8006ed0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d13a      	bne.n	8006f72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d155      	bne.n	8006fe0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	791b      	ldrb	r3, [r3, #4]
 8006f4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	059b      	lsls	r3, r3, #22
 8006f56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e036      	b.n	8006fe0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f78:	69da      	ldr	r2, [r3, #28]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	2101      	movs	r1, #1
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	68f9      	ldr	r1, [r7, #12]
 8006f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f90:	4313      	orrs	r3, r2
 8006f92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d11a      	bne.n	8006fe0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	791b      	ldrb	r3, [r3, #4]
 8006fc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d161      	bne.n	80070d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800701e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007022:	d11f      	bne.n	8007064 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800703e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007042:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800705e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007062:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800706a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f003 030f 	and.w	r3, r3, #15
 8007074:	2101      	movs	r1, #1
 8007076:	fa01 f303 	lsl.w	r3, r1, r3
 800707a:	b29b      	uxth	r3, r3
 800707c:	43db      	mvns	r3, r3
 800707e:	68f9      	ldr	r1, [r7, #12]
 8007080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007084:	4013      	ands	r3, r2
 8007086:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	2101      	movs	r1, #1
 800709a:	fa01 f303 	lsl.w	r3, r1, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	43db      	mvns	r3, r3
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a8:	4013      	ands	r3, r2
 80070aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	0159      	lsls	r1, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	440b      	add	r3, r1
 80070c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c6:	4619      	mov	r1, r3
 80070c8:	4b35      	ldr	r3, [pc, #212]	@ (80071a0 <USB_DeactivateEndpoint+0x1b0>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	600b      	str	r3, [r1, #0]
 80070ce:	e060      	b.n	8007192 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070e6:	d11f      	bne.n	8007128 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	0151      	lsls	r1, r2, #5
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	440a      	add	r2, r1
 80070fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007102:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007106:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	440a      	add	r2, r1
 800711e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007122:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007126:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	2101      	movs	r1, #1
 800713a:	fa01 f303 	lsl.w	r3, r1, r3
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	43db      	mvns	r3, r3
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007148:	4013      	ands	r3, r2
 800714a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	2101      	movs	r1, #1
 800715e:	fa01 f303 	lsl.w	r3, r1, r3
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	43db      	mvns	r3, r3
 8007166:	68f9      	ldr	r1, [r7, #12]
 8007168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800716c:	4013      	ands	r3, r2
 800716e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	0159      	lsls	r1, r3, #5
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	440b      	add	r3, r1
 8007186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718a:	4619      	mov	r1, r3
 800718c:	4b05      	ldr	r3, [pc, #20]	@ (80071a4 <USB_DeactivateEndpoint+0x1b4>)
 800718e:	4013      	ands	r3, r2
 8007190:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	ec337800 	.word	0xec337800
 80071a4:	eff37800 	.word	0xeff37800

080071a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	@ 0x28
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	f040 817f 	bne.w	80074c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d132      	bne.n	8007238 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80071f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80071f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007210:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007214:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	0151      	lsls	r1, r2, #5
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	440a      	add	r2, r1
 800722c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007230:	0cdb      	lsrs	r3, r3, #19
 8007232:	04db      	lsls	r3, r3, #19
 8007234:	6113      	str	r3, [r2, #16]
 8007236:	e097      	b.n	8007368 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007252:	0cdb      	lsrs	r3, r3, #19
 8007254:	04db      	lsls	r3, r3, #19
 8007256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007272:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007276:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800727a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d11a      	bne.n	80072b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691a      	ldr	r2, [r3, #16]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	429a      	cmp	r2, r3
 800728c:	d903      	bls.n	8007296 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072b4:	6113      	str	r3, [r2, #16]
 80072b6:	e044      	b.n	8007342 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	1e5a      	subs	r2, r3, #1
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	8afb      	ldrh	r3, [r7, #22]
 80072de:	04d9      	lsls	r1, r3, #19
 80072e0:	4ba4      	ldr	r3, [pc, #656]	@ (8007574 <USB_EPStartXfer+0x3cc>)
 80072e2:	400b      	ands	r3, r1
 80072e4:	69b9      	ldr	r1, [r7, #24]
 80072e6:	0148      	lsls	r0, r1, #5
 80072e8:	69f9      	ldr	r1, [r7, #28]
 80072ea:	4401      	add	r1, r0
 80072ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80072f0:	4313      	orrs	r3, r2
 80072f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	791b      	ldrb	r3, [r3, #4]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d122      	bne.n	8007342 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	440a      	add	r2, r1
 8007312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007316:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800731a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	8afb      	ldrh	r3, [r7, #22]
 800732c:	075b      	lsls	r3, r3, #29
 800732e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007332:	69b9      	ldr	r1, [r7, #24]
 8007334:	0148      	lsls	r0, r1, #5
 8007336:	69f9      	ldr	r1, [r7, #28]
 8007338:	4401      	add	r1, r0
 800733a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800733e:	4313      	orrs	r3, r2
 8007340:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007358:	69b9      	ldr	r1, [r7, #24]
 800735a:	0148      	lsls	r0, r1, #5
 800735c:	69f9      	ldr	r1, [r7, #28]
 800735e:	4401      	add	r1, r0
 8007360:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007364:	4313      	orrs	r3, r2
 8007366:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d14b      	bne.n	8007406 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d009      	beq.n	800738a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	69db      	ldr	r3, [r3, #28]
 8007388:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	791b      	ldrb	r3, [r3, #4]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d128      	bne.n	80073e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d110      	bne.n	80073c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	e00f      	b.n	80073e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	e166      	b.n	80076d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007420:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007424:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	791b      	ldrb	r3, [r3, #4]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d015      	beq.n	800745a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 814e 	beq.w	80076d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800743e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	2101      	movs	r1, #1
 800744a:	fa01 f303 	lsl.w	r3, r1, r3
 800744e:	69f9      	ldr	r1, [r7, #28]
 8007450:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007454:	4313      	orrs	r3, r2
 8007456:	634b      	str	r3, [r1, #52]	@ 0x34
 8007458:	e13c      	b.n	80076d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d110      	bne.n	800748c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	440a      	add	r2, r1
 8007480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	e00f      	b.n	80074ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	68d9      	ldr	r1, [r3, #12]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	b298      	uxth	r0, r3
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	4603      	mov	r3, r0
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f9b9 	bl	8007838 <USB_WritePacket>
 80074c6:	e105      	b.n	80076d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e2:	0cdb      	lsrs	r3, r3, #19
 80074e4:	04db      	lsls	r3, r3, #19
 80074e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007502:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007506:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800750a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d132      	bne.n	8007578 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	0148      	lsls	r0, r1, #5
 8007544:	69f9      	ldr	r1, [r7, #28]
 8007546:	4401      	add	r1, r0
 8007548:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800754c:	4313      	orrs	r3, r2
 800754e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800756a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800756e:	6113      	str	r3, [r2, #16]
 8007570:	e062      	b.n	8007638 <USB_EPStartXfer+0x490>
 8007572:	bf00      	nop
 8007574:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d123      	bne.n	80075c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800758c:	691a      	ldr	r2, [r3, #16]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007596:	69b9      	ldr	r1, [r7, #24]
 8007598:	0148      	lsls	r0, r1, #5
 800759a:	69f9      	ldr	r1, [r7, #28]
 800759c:	4401      	add	r1, r0
 800759e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075a2:	4313      	orrs	r3, r2
 80075a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075c4:	6113      	str	r3, [r2, #16]
 80075c6:	e037      	b.n	8007638 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	1e5a      	subs	r2, r3, #1
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	8afa      	ldrh	r2, [r7, #22]
 80075e4:	fb03 f202 	mul.w	r2, r3, r2
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	8afb      	ldrh	r3, [r7, #22]
 80075fc:	04d9      	lsls	r1, r3, #19
 80075fe:	4b38      	ldr	r3, [pc, #224]	@ (80076e0 <USB_EPStartXfer+0x538>)
 8007600:	400b      	ands	r3, r1
 8007602:	69b9      	ldr	r1, [r7, #24]
 8007604:	0148      	lsls	r0, r1, #5
 8007606:	69f9      	ldr	r1, [r7, #28]
 8007608:	4401      	add	r1, r0
 800760a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800760e:	4313      	orrs	r3, r2
 8007610:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007628:	69b9      	ldr	r1, [r7, #24]
 800762a:	0148      	lsls	r0, r1, #5
 800762c:	69f9      	ldr	r1, [r7, #28]
 800762e:	4401      	add	r1, r0
 8007630:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007634:	4313      	orrs	r3, r2
 8007636:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d10d      	bne.n	800765a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	68d9      	ldr	r1, [r3, #12]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007656:	460a      	mov	r2, r1
 8007658:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	791b      	ldrb	r3, [r3, #4]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d128      	bne.n	80076b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800766e:	2b00      	cmp	r3, #0
 8007670:	d110      	bne.n	8007694 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800768c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	e00f      	b.n	80076b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	0151      	lsls	r1, r2, #5
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	440a      	add	r2, r1
 80076ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	1ff80000 	.word	0x1ff80000

080076e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d14a      	bne.n	8007798 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007716:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800771a:	f040 8086 	bne.w	800782a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	7812      	ldrb	r2, [r2, #0]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800773c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007740:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	7812      	ldrb	r2, [r2, #0]
 8007756:	0151      	lsls	r1, r2, #5
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	440a      	add	r2, r1
 800775c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007772:	4293      	cmp	r3, r2
 8007774:	d902      	bls.n	800777c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	75fb      	strb	r3, [r7, #23]
          break;
 800777a:	e056      	b.n	800782a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007794:	d0e7      	beq.n	8007766 <USB_EPStopXfer+0x82>
 8007796:	e048      	b.n	800782a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077b0:	d13b      	bne.n	800782a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	7812      	ldrb	r2, [r2, #0]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	7812      	ldrb	r2, [r2, #0]
 80077ea:	0151      	lsls	r1, r2, #5
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	440a      	add	r2, r1
 80077f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007806:	4293      	cmp	r3, r2
 8007808:	d902      	bls.n	8007810 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
          break;
 800780e:	e00c      	b.n	800782a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007828:	d0e7      	beq.n	80077fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007838:	b480      	push	{r7}
 800783a:	b089      	sub	sp, #36	@ 0x24
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4611      	mov	r1, r2
 8007844:	461a      	mov	r2, r3
 8007846:	460b      	mov	r3, r1
 8007848:	71fb      	strb	r3, [r7, #7]
 800784a:	4613      	mov	r3, r2
 800784c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800785a:	2b00      	cmp	r3, #0
 800785c:	d123      	bne.n	80078a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800785e:	88bb      	ldrh	r3, [r7, #4]
 8007860:	3303      	adds	r3, #3
 8007862:	089b      	lsrs	r3, r3, #2
 8007864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007866:	2300      	movs	r3, #0
 8007868:	61bb      	str	r3, [r7, #24]
 800786a:	e018      	b.n	800789e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	031a      	lsls	r2, r3, #12
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
 8007874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007878:	461a      	mov	r2, r3
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	3301      	adds	r3, #1
 8007884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	3301      	adds	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	3301      	adds	r3, #1
 8007890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	3301      	adds	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	3301      	adds	r3, #1
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d3e2      	bcc.n	800786c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3724      	adds	r7, #36	@ 0x24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b08b      	sub	sp, #44	@ 0x2c
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078ca:	88fb      	ldrh	r3, [r7, #6]
 80078cc:	089b      	lsrs	r3, r3, #2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078da:	2300      	movs	r3, #0
 80078dc:	623b      	str	r3, [r7, #32]
 80078de:	e014      	b.n	800790a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	3301      	adds	r3, #1
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f4:	3301      	adds	r3, #1
 80078f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	3301      	adds	r3, #1
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	3301      	adds	r3, #1
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	3301      	adds	r3, #1
 8007908:	623b      	str	r3, [r7, #32]
 800790a:	6a3a      	ldr	r2, [r7, #32]
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	429a      	cmp	r2, r3
 8007910:	d3e6      	bcc.n	80078e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007912:	8bfb      	ldrh	r3, [r7, #30]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01e      	beq.n	8007956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007922:	461a      	mov	r2, r3
 8007924:	f107 0310 	add.w	r3, r7, #16
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
 8007938:	b2da      	uxtb	r2, r3
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	701a      	strb	r2, [r3, #0]
      i++;
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	3301      	adds	r3, #1
 8007942:	623b      	str	r3, [r7, #32]
      pDest++;
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	3301      	adds	r3, #1
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800794a:	8bfb      	ldrh	r3, [r7, #30]
 800794c:	3b01      	subs	r3, #1
 800794e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007950:	8bfb      	ldrh	r3, [r7, #30]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1ea      	bne.n	800792c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007958:	4618      	mov	r0, r3
 800795a:	372c      	adds	r7, #44	@ 0x2c
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d12c      	bne.n	80079da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	db12      	blt.n	80079b8 <USB_EPSetStall+0x54>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00f      	beq.n	80079b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	e02b      	b.n	8007a32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	db12      	blt.n	8007a12 <USB_EPSetStall+0xae>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00f      	beq.n	8007a12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d128      	bne.n	8007aae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d003      	beq.n	8007a8c <USB_EPClearStall+0x4c>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	791b      	ldrb	r3, [r3, #4]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d138      	bne.n	8007afe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	e027      	b.n	8007afe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ac8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007acc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	791b      	ldrb	r3, [r3, #4]
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d003      	beq.n	8007ade <USB_EPClearStall+0x9e>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	791b      	ldrb	r3, [r3, #4]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d10f      	bne.n	8007afe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007afc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	78fb      	ldrb	r3, [r7, #3]
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007b40:	68f9      	ldr	r1, [r7, #12]
 8007b42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b46:	4313      	orrs	r3, r2
 8007b48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b86:	f023 0302 	bic.w	r3, r3, #2
 8007b8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bb4:	f023 0303 	bic.w	r3, r3, #3
 8007bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bc8:	f043 0302 	orr.w	r3, r3, #2
 8007bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	4013      	ands	r3, r2
 8007c24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	0c1b      	lsrs	r3, r3, #16
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	4013      	ands	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	b29b      	uxth	r3, r3
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	4013      	ands	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c98:	68bb      	ldr	r3, [r7, #8]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b087      	sub	sp, #28
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	01db      	lsls	r3, r3, #7
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007d3c:	f023 0307 	bic.w	r3, r3, #7
 8007d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	333c      	adds	r3, #60	@ 0x3c
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4a26      	ldr	r2, [pc, #152]	@ (8007e1c <USB_EP0_OutStart+0xb8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d90a      	bls.n	8007d9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d98:	d101      	bne.n	8007d9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e037      	b.n	8007e0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da4:	461a      	mov	r2, r3
 8007da6:	2300      	movs	r3, #0
 8007da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007db8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dcc:	f043 0318 	orr.w	r3, r3, #24
 8007dd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007de4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d10f      	bne.n	8007e0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df2:	461a      	mov	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007e0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	4f54300a 	.word	0x4f54300a

08007e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e38:	d901      	bls.n	8007e3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e01b      	b.n	8007e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	daf2      	bge.n	8007e2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f043 0201 	orr.w	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e62:	d901      	bls.n	8007e68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e006      	b.n	8007e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d0f0      	beq.n	8007e56 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007e94:	f002 fc46 	bl	800a724 <USBD_static_malloc>
 8007e98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	32b0      	adds	r2, #176	@ 0xb0
 8007eaa:	2100      	movs	r1, #0
 8007eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e0d4      	b.n	800805e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007eb4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007eb8:	2100      	movs	r1, #0
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f002 fe80 	bl	800abc0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	32b0      	adds	r2, #176	@ 0xb0
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	32b0      	adds	r2, #176	@ 0xb0
 8007eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	7c1b      	ldrb	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d138      	bne.n	8007f5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007eec:	4b5e      	ldr	r3, [pc, #376]	@ (8008068 <USBD_CDC_Init+0x1e4>)
 8007eee:	7819      	ldrb	r1, [r3, #0]
 8007ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f002 faf1 	bl	800a4de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007efc:	4b5a      	ldr	r3, [pc, #360]	@ (8008068 <USBD_CDC_Init+0x1e4>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	3324      	adds	r3, #36	@ 0x24
 8007f12:	2201      	movs	r2, #1
 8007f14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f16:	4b55      	ldr	r3, [pc, #340]	@ (800806c <USBD_CDC_Init+0x1e8>)
 8007f18:	7819      	ldrb	r1, [r3, #0]
 8007f1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f1e:	2202      	movs	r2, #2
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f002 fadc 	bl	800a4de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f26:	4b51      	ldr	r3, [pc, #324]	@ (800806c <USBD_CDC_Init+0x1e8>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	f003 020f 	and.w	r2, r3, #15
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	440b      	add	r3, r1
 8007f3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f3e:	2201      	movs	r2, #1
 8007f40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f42:	4b4b      	ldr	r3, [pc, #300]	@ (8008070 <USBD_CDC_Init+0x1ec>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	f003 020f 	and.w	r2, r3, #15
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	3326      	adds	r3, #38	@ 0x26
 8007f58:	2210      	movs	r2, #16
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	e035      	b.n	8007fca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f5e:	4b42      	ldr	r3, [pc, #264]	@ (8008068 <USBD_CDC_Init+0x1e4>)
 8007f60:	7819      	ldrb	r1, [r3, #0]
 8007f62:	2340      	movs	r3, #64	@ 0x40
 8007f64:	2202      	movs	r2, #2
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f002 fab9 	bl	800a4de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8008068 <USBD_CDC_Init+0x1e4>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	f003 020f 	and.w	r2, r3, #15
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	3324      	adds	r3, #36	@ 0x24
 8007f82:	2201      	movs	r2, #1
 8007f84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f86:	4b39      	ldr	r3, [pc, #228]	@ (800806c <USBD_CDC_Init+0x1e8>)
 8007f88:	7819      	ldrb	r1, [r3, #0]
 8007f8a:	2340      	movs	r3, #64	@ 0x40
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f002 faa5 	bl	800a4de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f94:	4b35      	ldr	r3, [pc, #212]	@ (800806c <USBD_CDC_Init+0x1e8>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f003 020f 	and.w	r2, r3, #15
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fac:	2201      	movs	r2, #1
 8007fae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fb0:	4b2f      	ldr	r3, [pc, #188]	@ (8008070 <USBD_CDC_Init+0x1ec>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 020f 	and.w	r2, r3, #15
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	3326      	adds	r3, #38	@ 0x26
 8007fc6:	2210      	movs	r2, #16
 8007fc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fca:	4b29      	ldr	r3, [pc, #164]	@ (8008070 <USBD_CDC_Init+0x1ec>)
 8007fcc:	7819      	ldrb	r1, [r3, #0]
 8007fce:	2308      	movs	r3, #8
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f002 fa83 	bl	800a4de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007fd8:	4b25      	ldr	r3, [pc, #148]	@ (8008070 <USBD_CDC_Init+0x1ec>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	f003 020f 	and.w	r2, r3, #15
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	3324      	adds	r3, #36	@ 0x24
 8007fee:	2201      	movs	r2, #1
 8007ff0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	33b0      	adds	r3, #176	@ 0xb0
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008028:	2302      	movs	r3, #2
 800802a:	e018      	b.n	800805e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	7c1b      	ldrb	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008034:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <USBD_CDC_Init+0x1e8>)
 8008036:	7819      	ldrb	r1, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800803e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f002 fb3a 	bl	800a6bc <USBD_LL_PrepareReceive>
 8008048:	e008      	b.n	800805c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800804a:	4b08      	ldr	r3, [pc, #32]	@ (800806c <USBD_CDC_Init+0x1e8>)
 800804c:	7819      	ldrb	r1, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008054:	2340      	movs	r3, #64	@ 0x40
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f002 fb30 	bl	800a6bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000097 	.word	0x20000097
 800806c:	20000098 	.word	0x20000098
 8008070:	20000099 	.word	0x20000099

08008074 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008080:	4b3a      	ldr	r3, [pc, #232]	@ (800816c <USBD_CDC_DeInit+0xf8>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f002 fa4f 	bl	800a52a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800808c:	4b37      	ldr	r3, [pc, #220]	@ (800816c <USBD_CDC_DeInit+0xf8>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	f003 020f 	and.w	r2, r3, #15
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	3324      	adds	r3, #36	@ 0x24
 80080a2:	2200      	movs	r2, #0
 80080a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80080a6:	4b32      	ldr	r3, [pc, #200]	@ (8008170 <USBD_CDC_DeInit+0xfc>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f002 fa3c 	bl	800a52a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80080b2:	4b2f      	ldr	r3, [pc, #188]	@ (8008170 <USBD_CDC_DeInit+0xfc>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 020f 	and.w	r2, r3, #15
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80080ca:	2200      	movs	r2, #0
 80080cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80080ce:	4b29      	ldr	r3, [pc, #164]	@ (8008174 <USBD_CDC_DeInit+0x100>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f002 fa28 	bl	800a52a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80080da:	4b26      	ldr	r3, [pc, #152]	@ (8008174 <USBD_CDC_DeInit+0x100>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	f003 020f 	and.w	r2, r3, #15
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	440b      	add	r3, r1
 80080ee:	3324      	adds	r3, #36	@ 0x24
 80080f0:	2200      	movs	r2, #0
 80080f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80080f4:	4b1f      	ldr	r3, [pc, #124]	@ (8008174 <USBD_CDC_DeInit+0x100>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 020f 	and.w	r2, r3, #15
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	3326      	adds	r3, #38	@ 0x26
 800810a:	2200      	movs	r2, #0
 800810c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	32b0      	adds	r2, #176	@ 0xb0
 8008118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01f      	beq.n	8008160 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	33b0      	adds	r3, #176	@ 0xb0
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	32b0      	adds	r2, #176	@ 0xb0
 800813e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008142:	4618      	mov	r0, r3
 8008144:	f002 fafc 	bl	800a740 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	32b0      	adds	r2, #176	@ 0xb0
 8008152:	2100      	movs	r1, #0
 8008154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000097 	.word	0x20000097
 8008170:	20000098 	.word	0x20000098
 8008174:	20000099 	.word	0x20000099

08008178 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	32b0      	adds	r2, #176	@ 0xb0
 800818c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008190:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e0bf      	b.n	8008328 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d050      	beq.n	8008256 <USBD_CDC_Setup+0xde>
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	f040 80af 	bne.w	8008318 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	88db      	ldrh	r3, [r3, #6]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d03a      	beq.n	8008238 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	b25b      	sxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	da1b      	bge.n	8008204 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	33b0      	adds	r3, #176	@ 0xb0
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4413      	add	r3, r2
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80081e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	88d2      	ldrh	r2, [r2, #6]
 80081e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	88db      	ldrh	r3, [r3, #6]
 80081ee:	2b07      	cmp	r3, #7
 80081f0:	bf28      	it	cs
 80081f2:	2307      	movcs	r3, #7
 80081f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	89fa      	ldrh	r2, [r7, #14]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fd53 	bl	8009ca8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008202:	e090      	b.n	8008326 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	785a      	ldrb	r2, [r3, #1]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	88db      	ldrh	r3, [r3, #6]
 8008212:	2b3f      	cmp	r3, #63	@ 0x3f
 8008214:	d803      	bhi.n	800821e <USBD_CDC_Setup+0xa6>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	88db      	ldrh	r3, [r3, #6]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	e000      	b.n	8008220 <USBD_CDC_Setup+0xa8>
 800821e:	2240      	movs	r2, #64	@ 0x40
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008226:	6939      	ldr	r1, [r7, #16]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800822e:	461a      	mov	r2, r3
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 fd65 	bl	8009d00 <USBD_CtlPrepareRx>
      break;
 8008236:	e076      	b.n	8008326 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	33b0      	adds	r3, #176	@ 0xb0
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	7850      	ldrb	r0, [r2, #1]
 800824e:	2200      	movs	r2, #0
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	4798      	blx	r3
      break;
 8008254:	e067      	b.n	8008326 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b0b      	cmp	r3, #11
 800825c:	d851      	bhi.n	8008302 <USBD_CDC_Setup+0x18a>
 800825e:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <USBD_CDC_Setup+0xec>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	08008295 	.word	0x08008295
 8008268:	08008311 	.word	0x08008311
 800826c:	08008303 	.word	0x08008303
 8008270:	08008303 	.word	0x08008303
 8008274:	08008303 	.word	0x08008303
 8008278:	08008303 	.word	0x08008303
 800827c:	08008303 	.word	0x08008303
 8008280:	08008303 	.word	0x08008303
 8008284:	08008303 	.word	0x08008303
 8008288:	08008303 	.word	0x08008303
 800828c:	080082bf 	.word	0x080082bf
 8008290:	080082e9 	.word	0x080082e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b03      	cmp	r3, #3
 800829e:	d107      	bne.n	80082b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082a0:	f107 030a 	add.w	r3, r7, #10
 80082a4:	2202      	movs	r2, #2
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 fcfd 	bl	8009ca8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082ae:	e032      	b.n	8008316 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f001 fc7b 	bl	8009bae <USBD_CtlError>
            ret = USBD_FAIL;
 80082b8:	2303      	movs	r3, #3
 80082ba:	75fb      	strb	r3, [r7, #23]
          break;
 80082bc:	e02b      	b.n	8008316 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d107      	bne.n	80082da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082ca:	f107 030d 	add.w	r3, r7, #13
 80082ce:	2201      	movs	r2, #1
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fce8 	bl	8009ca8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082d8:	e01d      	b.n	8008316 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 fc66 	bl	8009bae <USBD_CtlError>
            ret = USBD_FAIL;
 80082e2:	2303      	movs	r3, #3
 80082e4:	75fb      	strb	r3, [r7, #23]
          break;
 80082e6:	e016      	b.n	8008316 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d00f      	beq.n	8008314 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fc59 	bl	8009bae <USBD_CtlError>
            ret = USBD_FAIL;
 80082fc:	2303      	movs	r3, #3
 80082fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008300:	e008      	b.n	8008314 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 fc52 	bl	8009bae <USBD_CtlError>
          ret = USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	75fb      	strb	r3, [r7, #23]
          break;
 800830e:	e002      	b.n	8008316 <USBD_CDC_Setup+0x19e>
          break;
 8008310:	bf00      	nop
 8008312:	e008      	b.n	8008326 <USBD_CDC_Setup+0x1ae>
          break;
 8008314:	bf00      	nop
      }
      break;
 8008316:	e006      	b.n	8008326 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fc47 	bl	8009bae <USBD_CtlError>
      ret = USBD_FAIL;
 8008320:	2303      	movs	r3, #3
 8008322:	75fb      	strb	r3, [r7, #23]
      break;
 8008324:	bf00      	nop
  }

  return (uint8_t)ret;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008342:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	32b0      	adds	r2, #176	@ 0xb0
 800834e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008356:	2303      	movs	r3, #3
 8008358:	e065      	b.n	8008426 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	32b0      	adds	r2, #176	@ 0xb0
 8008364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008368:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800836a:	78fb      	ldrb	r3, [r7, #3]
 800836c:	f003 020f 	and.w	r2, r3, #15
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	3318      	adds	r3, #24
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d02f      	beq.n	80083e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	f003 020f 	and.w	r2, r3, #15
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	440b      	add	r3, r1
 8008396:	3318      	adds	r3, #24
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	f003 010f 	and.w	r1, r3, #15
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	460b      	mov	r3, r1
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	440b      	add	r3, r1
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4403      	add	r3, r0
 80083ac:	331c      	adds	r3, #28
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80083b4:	fb01 f303 	mul.w	r3, r1, r3
 80083b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d112      	bne.n	80083e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	f003 020f 	and.w	r2, r3, #15
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	3318      	adds	r3, #24
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083d6:	78f9      	ldrb	r1, [r7, #3]
 80083d8:	2300      	movs	r3, #0
 80083da:	2200      	movs	r2, #0
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f002 f94c 	bl	800a67a <USBD_LL_Transmit>
 80083e2:	e01f      	b.n	8008424 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	33b0      	adds	r3, #176	@ 0xb0
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d010      	beq.n	8008424 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	33b0      	adds	r3, #176	@ 0xb0
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4413      	add	r3, r2
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008420:	78fa      	ldrb	r2, [r7, #3]
 8008422:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	32b0      	adds	r2, #176	@ 0xb0
 8008444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008448:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	32b0      	adds	r2, #176	@ 0xb0
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	e01a      	b.n	8008496 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f002 f94a 	bl	800a6fe <USBD_LL_GetRxDataSize>
 800846a:	4602      	mov	r2, r0
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	33b0      	adds	r3, #176	@ 0xb0
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008490:	4611      	mov	r1, r2
 8008492:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	32b0      	adds	r2, #176	@ 0xb0
 80084b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084bc:	2303      	movs	r3, #3
 80084be:	e024      	b.n	800850a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	33b0      	adds	r3, #176	@ 0xb0
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d019      	beq.n	8008508 <USBD_CDC_EP0_RxReady+0x6a>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80084da:	2bff      	cmp	r3, #255	@ 0xff
 80084dc:	d014      	beq.n	8008508 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	33b0      	adds	r3, #176	@ 0xb0
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80084f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	22ff      	movs	r2, #255	@ 0xff
 8008504:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800851c:	2182      	movs	r1, #130	@ 0x82
 800851e:	4818      	ldr	r0, [pc, #96]	@ (8008580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008520:	f000 fd0f 	bl	8008f42 <USBD_GetEpDesc>
 8008524:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008526:	2101      	movs	r1, #1
 8008528:	4815      	ldr	r0, [pc, #84]	@ (8008580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800852a:	f000 fd0a 	bl	8008f42 <USBD_GetEpDesc>
 800852e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008530:	2181      	movs	r1, #129	@ 0x81
 8008532:	4813      	ldr	r0, [pc, #76]	@ (8008580 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008534:	f000 fd05 	bl	8008f42 <USBD_GetEpDesc>
 8008538:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2210      	movs	r2, #16
 8008544:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d006      	beq.n	800855a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	2200      	movs	r2, #0
 8008550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008554:	711a      	strb	r2, [r3, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d006      	beq.n	800856e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008568:	711a      	strb	r2, [r3, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2243      	movs	r2, #67	@ 0x43
 8008572:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008574:	4b02      	ldr	r3, [pc, #8]	@ (8008580 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008576:	4618      	mov	r0, r3
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000054 	.word	0x20000054

08008584 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800858c:	2182      	movs	r1, #130	@ 0x82
 800858e:	4818      	ldr	r0, [pc, #96]	@ (80085f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008590:	f000 fcd7 	bl	8008f42 <USBD_GetEpDesc>
 8008594:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008596:	2101      	movs	r1, #1
 8008598:	4815      	ldr	r0, [pc, #84]	@ (80085f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800859a:	f000 fcd2 	bl	8008f42 <USBD_GetEpDesc>
 800859e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085a0:	2181      	movs	r1, #129	@ 0x81
 80085a2:	4813      	ldr	r0, [pc, #76]	@ (80085f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085a4:	f000 fccd 	bl	8008f42 <USBD_GetEpDesc>
 80085a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2210      	movs	r2, #16
 80085b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2200      	movs	r2, #0
 80085c0:	711a      	strb	r2, [r3, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f042 0202 	orr.w	r2, r2, #2
 80085c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	711a      	strb	r2, [r3, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f042 0202 	orr.w	r2, r2, #2
 80085dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2243      	movs	r2, #67	@ 0x43
 80085e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085e4:	4b02      	ldr	r3, [pc, #8]	@ (80085f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000054 	.word	0x20000054

080085f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085fc:	2182      	movs	r1, #130	@ 0x82
 80085fe:	4818      	ldr	r0, [pc, #96]	@ (8008660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008600:	f000 fc9f 	bl	8008f42 <USBD_GetEpDesc>
 8008604:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008606:	2101      	movs	r1, #1
 8008608:	4815      	ldr	r0, [pc, #84]	@ (8008660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800860a:	f000 fc9a 	bl	8008f42 <USBD_GetEpDesc>
 800860e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008610:	2181      	movs	r1, #129	@ 0x81
 8008612:	4813      	ldr	r0, [pc, #76]	@ (8008660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008614:	f000 fc95 	bl	8008f42 <USBD_GetEpDesc>
 8008618:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2210      	movs	r2, #16
 8008624:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d006      	beq.n	800863a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	2200      	movs	r2, #0
 8008630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008634:	711a      	strb	r2, [r3, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d006      	beq.n	800864e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008648:	711a      	strb	r2, [r3, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2243      	movs	r2, #67	@ 0x43
 8008652:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008654:	4b02      	ldr	r3, [pc, #8]	@ (8008660 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000054 	.word	0x20000054

08008664 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	220a      	movs	r2, #10
 8008670:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008672:	4b03      	ldr	r3, [pc, #12]	@ (8008680 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20000010 	.word	0x20000010

08008684 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008694:	2303      	movs	r3, #3
 8008696:	e009      	b.n	80086ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	33b0      	adds	r3, #176	@ 0xb0
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	32b0      	adds	r2, #176	@ 0xb0
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80086da:	2303      	movs	r3, #3
 80086dc:	e008      	b.n	80086f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	32b0      	adds	r2, #176	@ 0xb0
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800871c:	2303      	movs	r3, #3
 800871e:	e004      	b.n	800872a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	32b0      	adds	r2, #176	@ 0xb0
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	32b0      	adds	r2, #176	@ 0xb0
 800875a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008762:	2303      	movs	r3, #3
 8008764:	e018      	b.n	8008798 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7c1b      	ldrb	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10a      	bne.n	8008784 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800876e:	4b0c      	ldr	r3, [pc, #48]	@ (80087a0 <USBD_CDC_ReceivePacket+0x68>)
 8008770:	7819      	ldrb	r1, [r3, #0]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f001 ff9d 	bl	800a6bc <USBD_LL_PrepareReceive>
 8008782:	e008      	b.n	8008796 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008784:	4b06      	ldr	r3, [pc, #24]	@ (80087a0 <USBD_CDC_ReceivePacket+0x68>)
 8008786:	7819      	ldrb	r1, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800878e:	2340      	movs	r3, #64	@ 0x40
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 ff93 	bl	800a6bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000098 	.word	0x20000098

080087a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e01f      	b.n	80087fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	79fa      	ldrb	r2, [r7, #7]
 80087ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 fe0d 	bl	800a410 <USBD_LL_Init>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008818:	2303      	movs	r3, #3
 800881a:	e025      	b.n	8008868 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	32ae      	adds	r2, #174	@ 0xae
 800882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00f      	beq.n	8008858 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	32ae      	adds	r2, #174	@ 0xae
 8008842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	f107 020e 	add.w	r2, r7, #14
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
 8008850:	4602      	mov	r2, r0
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f001 fe15 	bl	800a4a8 <USBD_LL_Start>
 800887e:	4603      	mov	r3, r0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008890:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d009      	beq.n	80088cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	78fa      	ldrb	r2, [r7, #3]
 80088c2:	4611      	mov	r1, r2
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	4611      	mov	r1, r2
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b084      	sub	sp, #16
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	4618      	mov	r0, r3
 800891e:	f001 f90c 	bl	8009b3a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008930:	461a      	mov	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2b02      	cmp	r3, #2
 8008944:	d01a      	beq.n	800897c <USBD_LL_SetupStage+0x72>
 8008946:	2b02      	cmp	r3, #2
 8008948:	d822      	bhi.n	8008990 <USBD_LL_SetupStage+0x86>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <USBD_LL_SetupStage+0x4a>
 800894e:	2b01      	cmp	r3, #1
 8008950:	d00a      	beq.n	8008968 <USBD_LL_SetupStage+0x5e>
 8008952:	e01d      	b.n	8008990 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fb63 	bl	8009028 <USBD_StdDevReq>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
      break;
 8008966:	e020      	b.n	80089aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fbcb 	bl	800910c <USBD_StdItfReq>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
      break;
 800897a:	e016      	b.n	80089aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fc2d 	bl	80091e4 <USBD_StdEPReq>
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]
      break;
 800898e:	e00c      	b.n	80089aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008996:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800899a:	b2db      	uxtb	r3, r3
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fde2 	bl	800a568 <USBD_LL_StallEP>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
      break;
 80089a8:	bf00      	nop
  }

  return ret;
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	460b      	mov	r3, r1
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80089c6:	7afb      	ldrb	r3, [r7, #11]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d16e      	bne.n	8008aaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80089d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089da:	2b03      	cmp	r3, #3
 80089dc:	f040 8098 	bne.w	8008b10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d913      	bls.n	8008a14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	1ad2      	subs	r2, r2, r3
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	68da      	ldr	r2, [r3, #12]
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	4293      	cmp	r3, r2
 8008a04:	bf28      	it	cs
 8008a06:	4613      	movcs	r3, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6879      	ldr	r1, [r7, #4]
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f001 f994 	bl	8009d3a <USBD_CtlContinueRx>
 8008a12:	e07d      	b.n	8008b10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a1a:	f003 031f 	and.w	r3, r3, #31
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d014      	beq.n	8008a4c <USBD_LL_DataOutStage+0x98>
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d81d      	bhi.n	8008a62 <USBD_LL_DataOutStage+0xae>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <USBD_LL_DataOutStage+0x7c>
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d003      	beq.n	8008a36 <USBD_LL_DataOutStage+0x82>
 8008a2e:	e018      	b.n	8008a62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75bb      	strb	r3, [r7, #22]
            break;
 8008a34:	e018      	b.n	8008a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fa64 	bl	8008f0e <USBD_CoreFindIF>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75bb      	strb	r3, [r7, #22]
            break;
 8008a4a:	e00d      	b.n	8008a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	4619      	mov	r1, r3
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 fa66 	bl	8008f28 <USBD_CoreFindEP>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	75bb      	strb	r3, [r7, #22]
            break;
 8008a60:	e002      	b.n	8008a68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	75bb      	strb	r3, [r7, #22]
            break;
 8008a66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a68:	7dbb      	ldrb	r3, [r7, #22]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d119      	bne.n	8008aa2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d113      	bne.n	8008aa2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a7a:	7dba      	ldrb	r2, [r7, #22]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	32ae      	adds	r2, #174	@ 0xae
 8008a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00b      	beq.n	8008aa2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a8a:	7dba      	ldrb	r2, [r7, #22]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a92:	7dba      	ldrb	r2, [r7, #22]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	32ae      	adds	r2, #174	@ 0xae
 8008a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f001 f95a 	bl	8009d5c <USBD_CtlSendStatus>
 8008aa8:	e032      	b.n	8008b10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 fa37 	bl	8008f28 <USBD_CoreFindEP>
 8008aba:	4603      	mov	r3, r0
 8008abc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008abe:	7dbb      	ldrb	r3, [r7, #22]
 8008ac0:	2bff      	cmp	r3, #255	@ 0xff
 8008ac2:	d025      	beq.n	8008b10 <USBD_LL_DataOutStage+0x15c>
 8008ac4:	7dbb      	ldrb	r3, [r7, #22]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d122      	bne.n	8008b10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d117      	bne.n	8008b06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ad6:	7dba      	ldrb	r2, [r7, #22]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	32ae      	adds	r2, #174	@ 0xae
 8008adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00f      	beq.n	8008b06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008ae6:	7dba      	ldrb	r2, [r7, #22]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008aee:	7dba      	ldrb	r2, [r7, #22]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	32ae      	adds	r2, #174	@ 0xae
 8008af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	7afa      	ldrb	r2, [r7, #11]
 8008afc:	4611      	mov	r1, r2
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	e000      	b.n	8008b12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b086      	sub	sp, #24
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	460b      	mov	r3, r1
 8008b24:	607a      	str	r2, [r7, #4]
 8008b26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d16f      	bne.n	8008c0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3314      	adds	r3, #20
 8008b32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d15a      	bne.n	8008bf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d914      	bls.n	8008b74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	689a      	ldr	r2, [r3, #8]
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	1ad2      	subs	r2, r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f001 f8bc 	bl	8009cde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b66:	2300      	movs	r3, #0
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f001 fda5 	bl	800a6bc <USBD_LL_PrepareReceive>
 8008b72:	e03f      	b.n	8008bf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d11c      	bne.n	8008bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d316      	bcc.n	8008bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d20f      	bcs.n	8008bba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f001 f89d 	bl	8009cde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bac:	2300      	movs	r3, #0
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f001 fd82 	bl	800a6bc <USBD_LL_PrepareReceive>
 8008bb8:	e01c      	b.n	8008bf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d10f      	bne.n	8008be6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008be6:	2180      	movs	r1, #128	@ 0x80
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f001 fcbd 	bl	800a568 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f001 f8c7 	bl	8009d82 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d03a      	beq.n	8008c74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff fe42 	bl	8008888 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008c0c:	e032      	b.n	8008c74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c0e:	7afb      	ldrb	r3, [r7, #11]
 8008c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 f985 	bl	8008f28 <USBD_CoreFindEP>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2bff      	cmp	r3, #255	@ 0xff
 8008c26:	d025      	beq.n	8008c74 <USBD_LL_DataInStage+0x15a>
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d122      	bne.n	8008c74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d11c      	bne.n	8008c74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008c3a:	7dfa      	ldrb	r2, [r7, #23]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	32ae      	adds	r2, #174	@ 0xae
 8008c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d014      	beq.n	8008c74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008c4a:	7dfa      	ldrb	r2, [r7, #23]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c52:	7dfa      	ldrb	r2, [r7, #23]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	32ae      	adds	r2, #174	@ 0xae
 8008c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	7afa      	ldrb	r2, [r7, #11]
 8008c60:	4611      	mov	r1, r2
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c6a:	7dbb      	ldrb	r3, [r7, #22]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c70:	7dbb      	ldrb	r3, [r7, #22]
 8008c72:	e000      	b.n	8008c76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d014      	beq.n	8008ce4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00e      	beq.n	8008ce4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6852      	ldr	r2, [r2, #4]
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ce4:	2340      	movs	r3, #64	@ 0x40
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 fbf7 	bl	800a4de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2240      	movs	r2, #64	@ 0x40
 8008cfc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d00:	2340      	movs	r3, #64	@ 0x40
 8008d02:	2200      	movs	r2, #0
 8008d04:	2180      	movs	r1, #128	@ 0x80
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fbe9 	bl	800a4de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2240      	movs	r2, #64	@ 0x40
 8008d16:	621a      	str	r2, [r3, #32]

  return ret;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b083      	sub	sp, #12
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	78fa      	ldrb	r2, [r7, #3]
 8008d32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d006      	beq.n	8008d64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2204      	movs	r2, #4
 8008d68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d106      	bne.n	8008d9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d110      	bne.n	8008de0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32ae      	adds	r2, #174	@ 0xae
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e01c      	b.n	8008e46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d115      	bne.n	8008e44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	32ae      	adds	r2, #174	@ 0xae
 8008e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	32ae      	adds	r2, #174	@ 0xae
 8008e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	4611      	mov	r1, r2
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	32ae      	adds	r2, #174	@ 0xae
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e01c      	b.n	8008eaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d115      	bne.n	8008ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	32ae      	adds	r2, #174	@ 0xae
 8008e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	32ae      	adds	r2, #174	@ 0xae
 8008e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea0:	78fa      	ldrb	r2, [r7, #3]
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00e      	beq.n	8008f04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6852      	ldr	r2, [r2, #4]
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	4798      	blx	r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b086      	sub	sp, #24
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	7812      	ldrb	r2, [r2, #0]
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d91f      	bls.n	8008fa8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f6e:	e013      	b.n	8008f98 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f70:	f107 030a 	add.w	r3, r7, #10
 8008f74:	4619      	mov	r1, r3
 8008f76:	6978      	ldr	r0, [r7, #20]
 8008f78:	f000 f81b 	bl	8008fb2 <USBD_GetNextDesc>
 8008f7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	785b      	ldrb	r3, [r3, #1]
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d108      	bne.n	8008f98 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	789b      	ldrb	r3, [r3, #2]
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d008      	beq.n	8008fa6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	897b      	ldrh	r3, [r7, #10]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d8e5      	bhi.n	8008f70 <USBD_GetEpDesc+0x2e>
 8008fa4:	e000      	b.n	8008fa8 <USBD_GetEpDesc+0x66>
          break;
 8008fa6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008fa8:	693b      	ldr	r3, [r7, #16]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	4413      	add	r3, r2
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b087      	sub	sp, #28
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	3301      	adds	r3, #1
 8009000:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009008:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	b21a      	sxth	r2, r3
 8009010:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009014:	4313      	orrs	r3, r2
 8009016:	b21b      	sxth	r3, r3
 8009018:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800901a:	89fb      	ldrh	r3, [r7, #14]
}
 800901c:	4618      	mov	r0, r3
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800903e:	2b40      	cmp	r3, #64	@ 0x40
 8009040:	d005      	beq.n	800904e <USBD_StdDevReq+0x26>
 8009042:	2b40      	cmp	r3, #64	@ 0x40
 8009044:	d857      	bhi.n	80090f6 <USBD_StdDevReq+0xce>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00f      	beq.n	800906a <USBD_StdDevReq+0x42>
 800904a:	2b20      	cmp	r3, #32
 800904c:	d153      	bne.n	80090f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	32ae      	adds	r2, #174	@ 0xae
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	4798      	blx	r3
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
      break;
 8009068:	e04a      	b.n	8009100 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	785b      	ldrb	r3, [r3, #1]
 800906e:	2b09      	cmp	r3, #9
 8009070:	d83b      	bhi.n	80090ea <USBD_StdDevReq+0xc2>
 8009072:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <USBD_StdDevReq+0x50>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	080090cd 	.word	0x080090cd
 800907c:	080090e1 	.word	0x080090e1
 8009080:	080090eb 	.word	0x080090eb
 8009084:	080090d7 	.word	0x080090d7
 8009088:	080090eb 	.word	0x080090eb
 800908c:	080090ab 	.word	0x080090ab
 8009090:	080090a1 	.word	0x080090a1
 8009094:	080090eb 	.word	0x080090eb
 8009098:	080090c3 	.word	0x080090c3
 800909c:	080090b5 	.word	0x080090b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa3c 	bl	8009520 <USBD_GetDescriptor>
          break;
 80090a8:	e024      	b.n	80090f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fba1 	bl	80097f4 <USBD_SetAddress>
          break;
 80090b2:	e01f      	b.n	80090f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fbe0 	bl	800987c <USBD_SetConfig>
 80090bc:	4603      	mov	r3, r0
 80090be:	73fb      	strb	r3, [r7, #15]
          break;
 80090c0:	e018      	b.n	80090f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fc83 	bl	80099d0 <USBD_GetConfig>
          break;
 80090ca:	e013      	b.n	80090f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fcb4 	bl	8009a3c <USBD_GetStatus>
          break;
 80090d4:	e00e      	b.n	80090f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fce3 	bl	8009aa4 <USBD_SetFeature>
          break;
 80090de:	e009      	b.n	80090f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fd07 	bl	8009af6 <USBD_ClrFeature>
          break;
 80090e8:	e004      	b.n	80090f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fd5e 	bl	8009bae <USBD_CtlError>
          break;
 80090f2:	bf00      	nop
      }
      break;
 80090f4:	e004      	b.n	8009100 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fd58 	bl	8009bae <USBD_CtlError>
      break;
 80090fe:	bf00      	nop
  }

  return ret;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop

0800910c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009122:	2b40      	cmp	r3, #64	@ 0x40
 8009124:	d005      	beq.n	8009132 <USBD_StdItfReq+0x26>
 8009126:	2b40      	cmp	r3, #64	@ 0x40
 8009128:	d852      	bhi.n	80091d0 <USBD_StdItfReq+0xc4>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <USBD_StdItfReq+0x26>
 800912e:	2b20      	cmp	r3, #32
 8009130:	d14e      	bne.n	80091d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009138:	b2db      	uxtb	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	2b02      	cmp	r3, #2
 800913e:	d840      	bhi.n	80091c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	889b      	ldrh	r3, [r3, #4]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b01      	cmp	r3, #1
 8009148:	d836      	bhi.n	80091b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	889b      	ldrh	r3, [r3, #4]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fedb 	bl	8008f0e <USBD_CoreFindIF>
 8009158:	4603      	mov	r3, r0
 800915a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	2bff      	cmp	r3, #255	@ 0xff
 8009160:	d01d      	beq.n	800919e <USBD_StdItfReq+0x92>
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d11a      	bne.n	800919e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009168:	7bba      	ldrb	r2, [r7, #14]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	32ae      	adds	r2, #174	@ 0xae
 800916e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00f      	beq.n	8009198 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009178:	7bba      	ldrb	r2, [r7, #14]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009180:	7bba      	ldrb	r2, [r7, #14]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	32ae      	adds	r2, #174	@ 0xae
 8009186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009196:	e004      	b.n	80091a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009198:	2303      	movs	r3, #3
 800919a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800919c:	e001      	b.n	80091a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	88db      	ldrh	r3, [r3, #6]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d110      	bne.n	80091cc <USBD_StdItfReq+0xc0>
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10d      	bne.n	80091cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fdd3 	bl	8009d5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091b6:	e009      	b.n	80091cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fcf7 	bl	8009bae <USBD_CtlError>
          break;
 80091c0:	e004      	b.n	80091cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fcf2 	bl	8009bae <USBD_CtlError>
          break;
 80091ca:	e000      	b.n	80091ce <USBD_StdItfReq+0xc2>
          break;
 80091cc:	bf00      	nop
      }
      break;
 80091ce:	e004      	b.n	80091da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fceb 	bl	8009bae <USBD_CtlError>
      break;
 80091d8:	bf00      	nop
  }

  return ret;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	889b      	ldrh	r3, [r3, #4]
 80091f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009200:	2b40      	cmp	r3, #64	@ 0x40
 8009202:	d007      	beq.n	8009214 <USBD_StdEPReq+0x30>
 8009204:	2b40      	cmp	r3, #64	@ 0x40
 8009206:	f200 817f 	bhi.w	8009508 <USBD_StdEPReq+0x324>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d02a      	beq.n	8009264 <USBD_StdEPReq+0x80>
 800920e:	2b20      	cmp	r3, #32
 8009210:	f040 817a 	bne.w	8009508 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff fe85 	bl	8008f28 <USBD_CoreFindEP>
 800921e:	4603      	mov	r3, r0
 8009220:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009222:	7b7b      	ldrb	r3, [r7, #13]
 8009224:	2bff      	cmp	r3, #255	@ 0xff
 8009226:	f000 8174 	beq.w	8009512 <USBD_StdEPReq+0x32e>
 800922a:	7b7b      	ldrb	r3, [r7, #13]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 8170 	bne.w	8009512 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009232:	7b7a      	ldrb	r2, [r7, #13]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800923a:	7b7a      	ldrb	r2, [r7, #13]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	32ae      	adds	r2, #174	@ 0xae
 8009240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 8163 	beq.w	8009512 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800924c:	7b7a      	ldrb	r2, [r7, #13]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	@ 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
 800925e:	4603      	mov	r3, r0
 8009260:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009262:	e156      	b.n	8009512 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d008      	beq.n	800927e <USBD_StdEPReq+0x9a>
 800926c:	2b03      	cmp	r3, #3
 800926e:	f300 8145 	bgt.w	80094fc <USBD_StdEPReq+0x318>
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 809b 	beq.w	80093ae <USBD_StdEPReq+0x1ca>
 8009278:	2b01      	cmp	r3, #1
 800927a:	d03c      	beq.n	80092f6 <USBD_StdEPReq+0x112>
 800927c:	e13e      	b.n	80094fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b02      	cmp	r3, #2
 8009288:	d002      	beq.n	8009290 <USBD_StdEPReq+0xac>
 800928a:	2b03      	cmp	r3, #3
 800928c:	d016      	beq.n	80092bc <USBD_StdEPReq+0xd8>
 800928e:	e02c      	b.n	80092ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00d      	beq.n	80092b2 <USBD_StdEPReq+0xce>
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b80      	cmp	r3, #128	@ 0x80
 800929a:	d00a      	beq.n	80092b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 f961 	bl	800a568 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092a6:	2180      	movs	r1, #128	@ 0x80
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f95d 	bl	800a568 <USBD_LL_StallEP>
 80092ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092b0:	e020      	b.n	80092f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fc7a 	bl	8009bae <USBD_CtlError>
              break;
 80092ba:	e01b      	b.n	80092f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	885b      	ldrh	r3, [r3, #2]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10e      	bne.n	80092e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <USBD_StdEPReq+0xfe>
 80092ca:	7bbb      	ldrb	r3, [r7, #14]
 80092cc:	2b80      	cmp	r3, #128	@ 0x80
 80092ce:	d008      	beq.n	80092e2 <USBD_StdEPReq+0xfe>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	88db      	ldrh	r3, [r3, #6]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d104      	bne.n	80092e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f943 	bl	800a568 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fd3a 	bl	8009d5c <USBD_CtlSendStatus>

              break;
 80092e8:	e004      	b.n	80092f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fc5e 	bl	8009bae <USBD_CtlError>
              break;
 80092f2:	bf00      	nop
          }
          break;
 80092f4:	e107      	b.n	8009506 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d002      	beq.n	8009308 <USBD_StdEPReq+0x124>
 8009302:	2b03      	cmp	r3, #3
 8009304:	d016      	beq.n	8009334 <USBD_StdEPReq+0x150>
 8009306:	e04b      	b.n	80093a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00d      	beq.n	800932a <USBD_StdEPReq+0x146>
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b80      	cmp	r3, #128	@ 0x80
 8009312:	d00a      	beq.n	800932a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f925 	bl	800a568 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800931e:	2180      	movs	r1, #128	@ 0x80
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 f921 	bl	800a568 <USBD_LL_StallEP>
 8009326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009328:	e040      	b.n	80093ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fc3e 	bl	8009bae <USBD_CtlError>
              break;
 8009332:	e03b      	b.n	80093ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	885b      	ldrh	r3, [r3, #2]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d136      	bne.n	80093aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f001 f92b 	bl	800a5a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fd03 	bl	8009d5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff fde4 	bl	8008f28 <USBD_CoreFindEP>
 8009360:	4603      	mov	r3, r0
 8009362:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009364:	7b7b      	ldrb	r3, [r7, #13]
 8009366:	2bff      	cmp	r3, #255	@ 0xff
 8009368:	d01f      	beq.n	80093aa <USBD_StdEPReq+0x1c6>
 800936a:	7b7b      	ldrb	r3, [r7, #13]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d11c      	bne.n	80093aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009370:	7b7a      	ldrb	r2, [r7, #13]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009378:	7b7a      	ldrb	r2, [r7, #13]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	32ae      	adds	r2, #174	@ 0xae
 800937e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d010      	beq.n	80093aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009388:	7b7a      	ldrb	r2, [r7, #13]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	32ae      	adds	r2, #174	@ 0xae
 800938e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	4798      	blx	r3
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800939e:	e004      	b.n	80093aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc03 	bl	8009bae <USBD_CtlError>
              break;
 80093a8:	e000      	b.n	80093ac <USBD_StdEPReq+0x1c8>
              break;
 80093aa:	bf00      	nop
          }
          break;
 80093ac:	e0ab      	b.n	8009506 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d002      	beq.n	80093c0 <USBD_StdEPReq+0x1dc>
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d032      	beq.n	8009424 <USBD_StdEPReq+0x240>
 80093be:	e097      	b.n	80094f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d007      	beq.n	80093d6 <USBD_StdEPReq+0x1f2>
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b80      	cmp	r3, #128	@ 0x80
 80093ca:	d004      	beq.n	80093d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fbed 	bl	8009bae <USBD_CtlError>
                break;
 80093d4:	e091      	b.n	80094fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	da0b      	bge.n	80093f6 <USBD_StdEPReq+0x212>
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	3310      	adds	r3, #16
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	3304      	adds	r3, #4
 80093f4:	e00b      	b.n	800940e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093fc:	4613      	mov	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	4413      	add	r3, r2
 800940c:	3304      	adds	r3, #4
 800940e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2202      	movs	r2, #2
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc43 	bl	8009ca8 <USBD_CtlSendData>
              break;
 8009422:	e06a      	b.n	80094fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009428:	2b00      	cmp	r3, #0
 800942a:	da11      	bge.n	8009450 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	f003 020f 	and.w	r2, r3, #15
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	440b      	add	r3, r1
 800943e:	3324      	adds	r3, #36	@ 0x24
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d117      	bne.n	8009476 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fbb0 	bl	8009bae <USBD_CtlError>
                  break;
 800944e:	e054      	b.n	80094fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	f003 020f 	and.w	r2, r3, #15
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d104      	bne.n	8009476 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fb9d 	bl	8009bae <USBD_CtlError>
                  break;
 8009474:	e041      	b.n	80094fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800947a:	2b00      	cmp	r3, #0
 800947c:	da0b      	bge.n	8009496 <USBD_StdEPReq+0x2b2>
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	3310      	adds	r3, #16
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	e00b      	b.n	80094ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	4413      	add	r3, r2
 80094ac:	3304      	adds	r3, #4
 80094ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <USBD_StdEPReq+0x2d8>
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b80      	cmp	r3, #128	@ 0x80
 80094ba:	d103      	bne.n	80094c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e00e      	b.n	80094e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 f88b 	bl	800a5e4 <USBD_LL_IsStallEP>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2201      	movs	r2, #1
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	e002      	b.n	80094e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2202      	movs	r2, #2
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fbdd 	bl	8009ca8 <USBD_CtlSendData>
              break;
 80094ee:	e004      	b.n	80094fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fb5b 	bl	8009bae <USBD_CtlError>
              break;
 80094f8:	bf00      	nop
          }
          break;
 80094fa:	e004      	b.n	8009506 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fb55 	bl	8009bae <USBD_CtlError>
          break;
 8009504:	bf00      	nop
      }
      break;
 8009506:	e005      	b.n	8009514 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fb4f 	bl	8009bae <USBD_CtlError>
      break;
 8009510:	e000      	b.n	8009514 <USBD_StdEPReq+0x330>
      break;
 8009512:	bf00      	nop
  }

  return ret;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	0a1b      	lsrs	r3, r3, #8
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	2b06      	cmp	r3, #6
 8009542:	f200 8128 	bhi.w	8009796 <USBD_GetDescriptor+0x276>
 8009546:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <USBD_GetDescriptor+0x2c>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	08009569 	.word	0x08009569
 8009550:	08009581 	.word	0x08009581
 8009554:	080095c1 	.word	0x080095c1
 8009558:	08009797 	.word	0x08009797
 800955c:	08009797 	.word	0x08009797
 8009560:	08009737 	.word	0x08009737
 8009564:	08009763 	.word	0x08009763
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	7c12      	ldrb	r2, [r2, #16]
 8009574:	f107 0108 	add.w	r1, r7, #8
 8009578:	4610      	mov	r0, r2
 800957a:	4798      	blx	r3
 800957c:	60f8      	str	r0, [r7, #12]
      break;
 800957e:	e112      	b.n	80097a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7c1b      	ldrb	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10d      	bne.n	80095a4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f107 0208 	add.w	r2, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	2202      	movs	r2, #2
 80095a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095a2:	e100      	b.n	80097a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	f107 0208 	add.w	r2, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	2202      	movs	r2, #2
 80095bc:	701a      	strb	r2, [r3, #0]
      break;
 80095be:	e0f2      	b.n	80097a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	885b      	ldrh	r3, [r3, #2]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	f200 80ac 	bhi.w	8009724 <USBD_GetDescriptor+0x204>
 80095cc:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <USBD_GetDescriptor+0xb4>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	080095ed 	.word	0x080095ed
 80095d8:	08009621 	.word	0x08009621
 80095dc:	08009655 	.word	0x08009655
 80095e0:	08009689 	.word	0x08009689
 80095e4:	080096bd 	.word	0x080096bd
 80095e8:	080096f1 	.word	0x080096f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00b      	beq.n	8009610 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	7c12      	ldrb	r2, [r2, #16]
 8009604:	f107 0108 	add.w	r1, r7, #8
 8009608:	4610      	mov	r0, r2
 800960a:	4798      	blx	r3
 800960c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800960e:	e091      	b.n	8009734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 facb 	bl	8009bae <USBD_CtlError>
            err++;
 8009618:	7afb      	ldrb	r3, [r7, #11]
 800961a:	3301      	adds	r3, #1
 800961c:	72fb      	strb	r3, [r7, #11]
          break;
 800961e:	e089      	b.n	8009734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	7c12      	ldrb	r2, [r2, #16]
 8009638:	f107 0108 	add.w	r1, r7, #8
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009642:	e077      	b.n	8009734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fab1 	bl	8009bae <USBD_CtlError>
            err++;
 800964c:	7afb      	ldrb	r3, [r7, #11]
 800964e:	3301      	adds	r3, #1
 8009650:	72fb      	strb	r3, [r7, #11]
          break;
 8009652:	e06f      	b.n	8009734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00b      	beq.n	8009678 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7c12      	ldrb	r2, [r2, #16]
 800966c:	f107 0108 	add.w	r1, r7, #8
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009676:	e05d      	b.n	8009734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 fa97 	bl	8009bae <USBD_CtlError>
            err++;
 8009680:	7afb      	ldrb	r3, [r7, #11]
 8009682:	3301      	adds	r3, #1
 8009684:	72fb      	strb	r3, [r7, #11]
          break;
 8009686:	e055      	b.n	8009734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7c12      	ldrb	r2, [r2, #16]
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096aa:	e043      	b.n	8009734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa7d 	bl	8009bae <USBD_CtlError>
            err++;
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	3301      	adds	r3, #1
 80096b8:	72fb      	strb	r3, [r7, #11]
          break;
 80096ba:	e03b      	b.n	8009734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096de:	e029      	b.n	8009734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa63 	bl	8009bae <USBD_CtlError>
            err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
          break;
 80096ee:	e021      	b.n	8009734 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009712:	e00f      	b.n	8009734 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa49 	bl	8009bae <USBD_CtlError>
            err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
          break;
 8009722:	e007      	b.n	8009734 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa41 	bl	8009bae <USBD_CtlError>
          err++;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	3301      	adds	r3, #1
 8009730:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009732:	bf00      	nop
      }
      break;
 8009734:	e037      	b.n	80097a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	7c1b      	ldrb	r3, [r3, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009746:	f107 0208 	add.w	r2, r7, #8
 800974a:	4610      	mov	r0, r2
 800974c:	4798      	blx	r3
 800974e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009750:	e029      	b.n	80097a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fa2a 	bl	8009bae <USBD_CtlError>
        err++;
 800975a:	7afb      	ldrb	r3, [r7, #11]
 800975c:	3301      	adds	r3, #1
 800975e:	72fb      	strb	r3, [r7, #11]
      break;
 8009760:	e021      	b.n	80097a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7c1b      	ldrb	r3, [r3, #16]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10d      	bne.n	8009786 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009772:	f107 0208 	add.w	r2, r7, #8
 8009776:	4610      	mov	r0, r2
 8009778:	4798      	blx	r3
 800977a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	3301      	adds	r3, #1
 8009780:	2207      	movs	r2, #7
 8009782:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009784:	e00f      	b.n	80097a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fa10 	bl	8009bae <USBD_CtlError>
        err++;
 800978e:	7afb      	ldrb	r3, [r7, #11]
 8009790:	3301      	adds	r3, #1
 8009792:	72fb      	strb	r3, [r7, #11]
      break;
 8009794:	e007      	b.n	80097a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fa08 	bl	8009bae <USBD_CtlError>
      err++;
 800979e:	7afb      	ldrb	r3, [r7, #11]
 80097a0:	3301      	adds	r3, #1
 80097a2:	72fb      	strb	r3, [r7, #11]
      break;
 80097a4:	bf00      	nop
  }

  if (err != 0U)
 80097a6:	7afb      	ldrb	r3, [r7, #11]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d11e      	bne.n	80097ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	88db      	ldrh	r3, [r3, #6]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d016      	beq.n	80097e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097b4:	893b      	ldrh	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00e      	beq.n	80097d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88da      	ldrh	r2, [r3, #6]
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	bf28      	it	cs
 80097c4:	4613      	movcs	r3, r2
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097ca:	893b      	ldrh	r3, [r7, #8]
 80097cc:	461a      	mov	r2, r3
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa69 	bl	8009ca8 <USBD_CtlSendData>
 80097d6:	e009      	b.n	80097ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9e7 	bl	8009bae <USBD_CtlError>
 80097e0:	e004      	b.n	80097ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 faba 	bl	8009d5c <USBD_CtlSendStatus>
 80097e8:	e000      	b.n	80097ec <USBD_GetDescriptor+0x2cc>
    return;
 80097ea:	bf00      	nop
  }
}
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop

080097f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	889b      	ldrh	r3, [r3, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d131      	bne.n	800986a <USBD_SetAddress+0x76>
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	88db      	ldrh	r3, [r3, #6]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d12d      	bne.n	800986a <USBD_SetAddress+0x76>
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	885b      	ldrh	r3, [r3, #2]
 8009812:	2b7f      	cmp	r3, #127	@ 0x7f
 8009814:	d829      	bhi.n	800986a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	885b      	ldrh	r3, [r3, #2]
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009820:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b03      	cmp	r3, #3
 800982c:	d104      	bne.n	8009838 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f9bc 	bl	8009bae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009836:	e01d      	b.n	8009874 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	7bfa      	ldrb	r2, [r7, #15]
 800983c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fef9 	bl	800a63c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa86 	bl	8009d5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d004      	beq.n	8009860 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985e:	e009      	b.n	8009874 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009868:	e004      	b.n	8009874 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f99e 	bl	8009bae <USBD_CtlError>
  }
}
 8009872:	bf00      	nop
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	885b      	ldrh	r3, [r3, #2]
 800988e:	b2da      	uxtb	r2, r3
 8009890:	4b4e      	ldr	r3, [pc, #312]	@ (80099cc <USBD_SetConfig+0x150>)
 8009892:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009894:	4b4d      	ldr	r3, [pc, #308]	@ (80099cc <USBD_SetConfig+0x150>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d905      	bls.n	80098a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f985 	bl	8009bae <USBD_CtlError>
    return USBD_FAIL;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e08c      	b.n	80099c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d002      	beq.n	80098ba <USBD_SetConfig+0x3e>
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d029      	beq.n	800990c <USBD_SetConfig+0x90>
 80098b8:	e075      	b.n	80099a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098ba:	4b44      	ldr	r3, [pc, #272]	@ (80099cc <USBD_SetConfig+0x150>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d020      	beq.n	8009904 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80098c2:	4b42      	ldr	r3, [pc, #264]	@ (80099cc <USBD_SetConfig+0x150>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098cc:	4b3f      	ldr	r3, [pc, #252]	@ (80099cc <USBD_SetConfig+0x150>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7fe ffe3 	bl	800889e <USBD_SetClassConfig>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d008      	beq.n	80098f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f962 	bl	8009bae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098f2:	e065      	b.n	80099c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fa31 	bl	8009d5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2203      	movs	r2, #3
 80098fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009902:	e05d      	b.n	80099c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 fa29 	bl	8009d5c <USBD_CtlSendStatus>
      break;
 800990a:	e059      	b.n	80099c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800990c:	4b2f      	ldr	r3, [pc, #188]	@ (80099cc <USBD_SetConfig+0x150>)
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d112      	bne.n	800993a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800991c:	4b2b      	ldr	r3, [pc, #172]	@ (80099cc <USBD_SetConfig+0x150>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009926:	4b29      	ldr	r3, [pc, #164]	@ (80099cc <USBD_SetConfig+0x150>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7fe ffd2 	bl	80088d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fa12 	bl	8009d5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009938:	e042      	b.n	80099c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800993a:	4b24      	ldr	r3, [pc, #144]	@ (80099cc <USBD_SetConfig+0x150>)
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d02a      	beq.n	800999e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7fe ffc0 	bl	80088d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009956:	4b1d      	ldr	r3, [pc, #116]	@ (80099cc <USBD_SetConfig+0x150>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009960:	4b1a      	ldr	r3, [pc, #104]	@ (80099cc <USBD_SetConfig+0x150>)
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fe ff99 	bl	800889e <USBD_SetClassConfig>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00f      	beq.n	8009996 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f918 	bl	8009bae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7fe ffa5 	bl	80088d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009994:	e014      	b.n	80099c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f9e0 	bl	8009d5c <USBD_CtlSendStatus>
      break;
 800999c:	e010      	b.n	80099c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f9dc 	bl	8009d5c <USBD_CtlSendStatus>
      break;
 80099a4:	e00c      	b.n	80099c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f900 	bl	8009bae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099ae:	4b07      	ldr	r3, [pc, #28]	@ (80099cc <USBD_SetConfig+0x150>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7fe ff8e 	bl	80088d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	73fb      	strb	r3, [r7, #15]
      break;
 80099be:	bf00      	nop
  }

  return ret;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	200179e4 	.word	0x200179e4

080099d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	88db      	ldrh	r3, [r3, #6]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d004      	beq.n	80099ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f8e2 	bl	8009bae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099ea:	e023      	b.n	8009a34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	dc02      	bgt.n	80099fe <USBD_GetConfig+0x2e>
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dc03      	bgt.n	8009a04 <USBD_GetConfig+0x34>
 80099fc:	e015      	b.n	8009a2a <USBD_GetConfig+0x5a>
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d00b      	beq.n	8009a1a <USBD_GetConfig+0x4a>
 8009a02:	e012      	b.n	8009a2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f948 	bl	8009ca8 <USBD_CtlSendData>
        break;
 8009a18:	e00c      	b.n	8009a34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f940 	bl	8009ca8 <USBD_CtlSendData>
        break;
 8009a28:	e004      	b.n	8009a34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f8be 	bl	8009bae <USBD_CtlError>
        break;
 8009a32:	bf00      	nop
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d81e      	bhi.n	8009a92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	88db      	ldrh	r3, [r3, #6]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d004      	beq.n	8009a66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f8a5 	bl	8009bae <USBD_CtlError>
        break;
 8009a64:	e01a      	b.n	8009a9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f043 0202 	orr.w	r2, r3, #2
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	330c      	adds	r3, #12
 8009a86:	2202      	movs	r2, #2
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f90c 	bl	8009ca8 <USBD_CtlSendData>
      break;
 8009a90:	e004      	b.n	8009a9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f88a 	bl	8009bae <USBD_CtlError>
      break;
 8009a9a:	bf00      	nop
  }
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	885b      	ldrh	r3, [r3, #2]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d107      	bne.n	8009ac6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f94c 	bl	8009d5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ac4:	e013      	b.n	8009aee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d10b      	bne.n	8009ae6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	889b      	ldrh	r3, [r3, #4]
 8009ad2:	0a1b      	lsrs	r3, r3, #8
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f93c 	bl	8009d5c <USBD_CtlSendStatus>
}
 8009ae4:	e003      	b.n	8009aee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 f860 	bl	8009bae <USBD_CtlError>
}
 8009aee:	bf00      	nop
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b082      	sub	sp, #8
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d80b      	bhi.n	8009b26 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	885b      	ldrh	r3, [r3, #2]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d10c      	bne.n	8009b30 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f91c 	bl	8009d5c <USBD_CtlSendStatus>
      }
      break;
 8009b24:	e004      	b.n	8009b30 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f840 	bl	8009bae <USBD_CtlError>
      break;
 8009b2e:	e000      	b.n	8009b32 <USBD_ClrFeature+0x3c>
      break;
 8009b30:	bf00      	nop
  }
}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
 8009b42:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	781a      	ldrb	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	781a      	ldrb	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fa40 	bl	8008fea <SWAPBYTE>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3301      	adds	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7ff fa33 	bl	8008fea <SWAPBYTE>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3301      	adds	r3, #1
 8009b96:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7ff fa26 	bl	8008fea <SWAPBYTE>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	80da      	strh	r2, [r3, #6]
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bb8:	2180      	movs	r1, #128	@ 0x80
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fcd4 	bl	800a568 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fcd0 	bl	800a568 <USBD_LL_StallEP>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d042      	beq.n	8009c6c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009bea:	6938      	ldr	r0, [r7, #16]
 8009bec:	f000 f842 	bl	8009c74 <USBD_GetLen>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bfa:	d808      	bhi.n	8009c0e <USBD_GetString+0x3e>
 8009bfc:	6938      	ldr	r0, [r7, #16]
 8009bfe:	f000 f839 	bl	8009c74 <USBD_GetLen>
 8009c02:	4603      	mov	r3, r0
 8009c04:	3301      	adds	r3, #1
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	e001      	b.n	8009c12 <USBD_GetString+0x42>
 8009c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7812      	ldrb	r2, [r2, #0]
 8009c20:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
 8009c24:	3301      	adds	r3, #1
 8009c26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	2203      	movs	r2, #3
 8009c30:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	3301      	adds	r3, #1
 8009c36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c38:	e013      	b.n	8009c62 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	4413      	add	r3, r2
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	7812      	ldrb	r2, [r2, #0]
 8009c44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	613b      	str	r3, [r7, #16]
    idx++;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c52:	7dfb      	ldrb	r3, [r7, #23]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	4413      	add	r3, r2
 8009c58:	2200      	movs	r2, #0
 8009c5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1e7      	bne.n	8009c3a <USBD_GetString+0x6a>
 8009c6a:	e000      	b.n	8009c6e <USBD_GetString+0x9e>
    return;
 8009c6c:	bf00      	nop
  }
}
 8009c6e:	3718      	adds	r7, #24
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c84:	e005      	b.n	8009c92 <USBD_GetLen+0x1e>
  {
    len++;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f5      	bne.n	8009c86 <USBD_GetLen+0x12>
  }

  return len;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	2100      	movs	r1, #0
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fcd3 	bl	800a67a <USBD_LL_Transmit>

  return USBD_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	60f8      	str	r0, [r7, #12]
 8009ce6:	60b9      	str	r1, [r7, #8]
 8009ce8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	2100      	movs	r1, #0
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 fcc2 	bl	800a67a <USBD_LL_Transmit>

  return USBD_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fcc6 	bl	800a6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fcb5 	bl	800a6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2204      	movs	r2, #4
 8009d68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2100      	movs	r1, #0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fc81 	bl	800a67a <USBD_LL_Transmit>

  return USBD_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2205      	movs	r2, #5
 8009d8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d92:	2300      	movs	r3, #0
 8009d94:	2200      	movs	r2, #0
 8009d96:	2100      	movs	r1, #0
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fc8f 	bl	800a6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009dac:	2200      	movs	r2, #0
 8009dae:	4912      	ldr	r1, [pc, #72]	@ (8009df8 <MX_USB_DEVICE_Init+0x50>)
 8009db0:	4812      	ldr	r0, [pc, #72]	@ (8009dfc <MX_USB_DEVICE_Init+0x54>)
 8009db2:	f7fe fcf7 	bl	80087a4 <USBD_Init>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009dbc:	f7f7 fd84 	bl	80018c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009dc0:	490f      	ldr	r1, [pc, #60]	@ (8009e00 <MX_USB_DEVICE_Init+0x58>)
 8009dc2:	480e      	ldr	r0, [pc, #56]	@ (8009dfc <MX_USB_DEVICE_Init+0x54>)
 8009dc4:	f7fe fd1e 	bl	8008804 <USBD_RegisterClass>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009dce:	f7f7 fd7b 	bl	80018c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009dd2:	490c      	ldr	r1, [pc, #48]	@ (8009e04 <MX_USB_DEVICE_Init+0x5c>)
 8009dd4:	4809      	ldr	r0, [pc, #36]	@ (8009dfc <MX_USB_DEVICE_Init+0x54>)
 8009dd6:	f7fe fc55 	bl	8008684 <USBD_CDC_RegisterInterface>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009de0:	f7f7 fd72 	bl	80018c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009de4:	4805      	ldr	r0, [pc, #20]	@ (8009dfc <MX_USB_DEVICE_Init+0x54>)
 8009de6:	f7fe fd43 	bl	8008870 <USBD_Start>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009df0:	f7f7 fd6a 	bl	80018c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009df4:	bf00      	nop
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	200000b0 	.word	0x200000b0
 8009dfc:	200179e8 	.word	0x200179e8
 8009e00:	2000001c 	.word	0x2000001c
 8009e04:	2000009c 	.word	0x2000009c

08009e08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4905      	ldr	r1, [pc, #20]	@ (8009e24 <CDC_Init_FS+0x1c>)
 8009e10:	4805      	ldr	r0, [pc, #20]	@ (8009e28 <CDC_Init_FS+0x20>)
 8009e12:	f7fe fc51 	bl	80086b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e16:	4905      	ldr	r1, [pc, #20]	@ (8009e2c <CDC_Init_FS+0x24>)
 8009e18:	4803      	ldr	r0, [pc, #12]	@ (8009e28 <CDC_Init_FS+0x20>)
 8009e1a:	f7fe fc6f 	bl	80086fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	200184c4 	.word	0x200184c4
 8009e28:	200179e8 	.word	0x200179e8
 8009e2c:	20017cc4 	.word	0x20017cc4

08009e30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e30:	b480      	push	{r7}
 8009e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	6039      	str	r1, [r7, #0]
 8009e4a:	71fb      	strb	r3, [r7, #7]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	2b23      	cmp	r3, #35	@ 0x23
 8009e54:	d84a      	bhi.n	8009eec <CDC_Control_FS+0xac>
 8009e56:	a201      	add	r2, pc, #4	@ (adr r2, 8009e5c <CDC_Control_FS+0x1c>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009eed 	.word	0x08009eed
 8009e60:	08009eed 	.word	0x08009eed
 8009e64:	08009eed 	.word	0x08009eed
 8009e68:	08009eed 	.word	0x08009eed
 8009e6c:	08009eed 	.word	0x08009eed
 8009e70:	08009eed 	.word	0x08009eed
 8009e74:	08009eed 	.word	0x08009eed
 8009e78:	08009eed 	.word	0x08009eed
 8009e7c:	08009eed 	.word	0x08009eed
 8009e80:	08009eed 	.word	0x08009eed
 8009e84:	08009eed 	.word	0x08009eed
 8009e88:	08009eed 	.word	0x08009eed
 8009e8c:	08009eed 	.word	0x08009eed
 8009e90:	08009eed 	.word	0x08009eed
 8009e94:	08009eed 	.word	0x08009eed
 8009e98:	08009eed 	.word	0x08009eed
 8009e9c:	08009eed 	.word	0x08009eed
 8009ea0:	08009eed 	.word	0x08009eed
 8009ea4:	08009eed 	.word	0x08009eed
 8009ea8:	08009eed 	.word	0x08009eed
 8009eac:	08009eed 	.word	0x08009eed
 8009eb0:	08009eed 	.word	0x08009eed
 8009eb4:	08009eed 	.word	0x08009eed
 8009eb8:	08009eed 	.word	0x08009eed
 8009ebc:	08009eed 	.word	0x08009eed
 8009ec0:	08009eed 	.word	0x08009eed
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009eed 	.word	0x08009eed
 8009ecc:	08009eed 	.word	0x08009eed
 8009ed0:	08009eed 	.word	0x08009eed
 8009ed4:	08009eed 	.word	0x08009eed
 8009ed8:	08009eed 	.word	0x08009eed
 8009edc:	08009eed 	.word	0x08009eed
 8009ee0:	08009eed 	.word	0x08009eed
 8009ee4:	08009eed 	.word	0x08009eed
 8009ee8:	08009eed 	.word	0x08009eed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009eec:	bf00      	nop
  }

  return (USBD_OK);
 8009eee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4805      	ldr	r0, [pc, #20]	@ (8009f20 <CDC_Receive_FS+0x24>)
 8009f0a:	f7fe fbf7 	bl	80086fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f0e:	4804      	ldr	r0, [pc, #16]	@ (8009f20 <CDC_Receive_FS+0x24>)
 8009f10:	f7fe fc12 	bl	8008738 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	200179e8 	.word	0x200179e8

08009f24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
	...

08009f48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2212      	movs	r2, #18
 8009f58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f5a:	4b03      	ldr	r3, [pc, #12]	@ (8009f68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	200000cc 	.word	0x200000cc

08009f6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	6039      	str	r1, [r7, #0]
 8009f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2204      	movs	r2, #4
 8009f7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009f7e:	4b03      	ldr	r3, [pc, #12]	@ (8009f8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	200000e0 	.word	0x200000e0

08009f90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	6039      	str	r1, [r7, #0]
 8009f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	4907      	ldr	r1, [pc, #28]	@ (8009fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fa6:	4808      	ldr	r0, [pc, #32]	@ (8009fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fa8:	f7ff fe12 	bl	8009bd0 <USBD_GetString>
 8009fac:	e004      	b.n	8009fb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	4904      	ldr	r1, [pc, #16]	@ (8009fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fb2:	4805      	ldr	r0, [pc, #20]	@ (8009fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fb4:	f7ff fe0c 	bl	8009bd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fb8:	4b02      	ldr	r3, [pc, #8]	@ (8009fc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3708      	adds	r7, #8
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20018cc4 	.word	0x20018cc4
 8009fc8:	0800c1b4 	.word	0x0800c1b4

08009fcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	4904      	ldr	r1, [pc, #16]	@ (8009fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009fdc:	4804      	ldr	r0, [pc, #16]	@ (8009ff0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009fde:	f7ff fdf7 	bl	8009bd0 <USBD_GetString>
  return USBD_StrDesc;
 8009fe2:	4b02      	ldr	r3, [pc, #8]	@ (8009fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20018cc4 	.word	0x20018cc4
 8009ff0:	0800c1cc 	.word	0x0800c1cc

08009ff4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	6039      	str	r1, [r7, #0]
 8009ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	221a      	movs	r2, #26
 800a004:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a006:	f000 f843 	bl	800a090 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a00a:	4b02      	ldr	r3, [pc, #8]	@ (800a014 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	200000e4 	.word	0x200000e4

0800a018 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	6039      	str	r1, [r7, #0]
 800a022:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a024:	79fb      	ldrb	r3, [r7, #7]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d105      	bne.n	800a036 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	4907      	ldr	r1, [pc, #28]	@ (800a04c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a02e:	4808      	ldr	r0, [pc, #32]	@ (800a050 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a030:	f7ff fdce 	bl	8009bd0 <USBD_GetString>
 800a034:	e004      	b.n	800a040 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	4904      	ldr	r1, [pc, #16]	@ (800a04c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a03a:	4805      	ldr	r0, [pc, #20]	@ (800a050 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a03c:	f7ff fdc8 	bl	8009bd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a040:	4b02      	ldr	r3, [pc, #8]	@ (800a04c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20018cc4 	.word	0x20018cc4
 800a050:	0800c1e0 	.word	0x0800c1e0

0800a054 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	6039      	str	r1, [r7, #0]
 800a05e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a060:	79fb      	ldrb	r3, [r7, #7]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d105      	bne.n	800a072 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	4907      	ldr	r1, [pc, #28]	@ (800a088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a06a:	4808      	ldr	r0, [pc, #32]	@ (800a08c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a06c:	f7ff fdb0 	bl	8009bd0 <USBD_GetString>
 800a070:	e004      	b.n	800a07c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4904      	ldr	r1, [pc, #16]	@ (800a088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a076:	4805      	ldr	r0, [pc, #20]	@ (800a08c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a078:	f7ff fdaa 	bl	8009bd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a07c:	4b02      	ldr	r3, [pc, #8]	@ (800a088 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20018cc4 	.word	0x20018cc4
 800a08c:	0800c1ec 	.word	0x0800c1ec

0800a090 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a096:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d4 <Get_SerialNum+0x44>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a09c:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d8 <Get_SerialNum+0x48>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a0dc <Get_SerialNum+0x4c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d009      	beq.n	800a0ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0b6:	2208      	movs	r2, #8
 800a0b8:	4909      	ldr	r1, [pc, #36]	@ (800a0e0 <Get_SerialNum+0x50>)
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 f814 	bl	800a0e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0c0:	2204      	movs	r2, #4
 800a0c2:	4908      	ldr	r1, [pc, #32]	@ (800a0e4 <Get_SerialNum+0x54>)
 800a0c4:	68b8      	ldr	r0, [r7, #8]
 800a0c6:	f000 f80f 	bl	800a0e8 <IntToUnicode>
  }
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	1fff7a10 	.word	0x1fff7a10
 800a0d8:	1fff7a14 	.word	0x1fff7a14
 800a0dc:	1fff7a18 	.word	0x1fff7a18
 800a0e0:	200000e6 	.word	0x200000e6
 800a0e4:	200000f6 	.word	0x200000f6

0800a0e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	75fb      	strb	r3, [r7, #23]
 800a0fe:	e027      	b.n	800a150 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	0f1b      	lsrs	r3, r3, #28
 800a104:	2b09      	cmp	r3, #9
 800a106:	d80b      	bhi.n	800a120 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	0f1b      	lsrs	r3, r3, #28
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	4619      	mov	r1, r3
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	440b      	add	r3, r1
 800a118:	3230      	adds	r2, #48	@ 0x30
 800a11a:	b2d2      	uxtb	r2, r2
 800a11c:	701a      	strb	r2, [r3, #0]
 800a11e:	e00a      	b.n	800a136 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	0f1b      	lsrs	r3, r3, #28
 800a124:	b2da      	uxtb	r2, r3
 800a126:	7dfb      	ldrb	r3, [r7, #23]
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	4619      	mov	r1, r3
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	440b      	add	r3, r1
 800a130:	3237      	adds	r2, #55	@ 0x37
 800a132:	b2d2      	uxtb	r2, r2
 800a134:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	3301      	adds	r3, #1
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	4413      	add	r3, r2
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
 800a14c:	3301      	adds	r3, #1
 800a14e:	75fb      	strb	r3, [r7, #23]
 800a150:	7dfa      	ldrb	r2, [r7, #23]
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	429a      	cmp	r2, r3
 800a156:	d3d3      	bcc.n	800a100 <IntToUnicode+0x18>
  }
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08a      	sub	sp, #40	@ 0x28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a170:	f107 0314 	add.w	r3, r7, #20
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	605a      	str	r2, [r3, #4]
 800a17a:	609a      	str	r2, [r3, #8]
 800a17c:	60da      	str	r2, [r3, #12]
 800a17e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a188:	d147      	bne.n	800a21a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a18a:	2300      	movs	r3, #0
 800a18c:	613b      	str	r3, [r7, #16]
 800a18e:	4b25      	ldr	r3, [pc, #148]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a192:	4a24      	ldr	r2, [pc, #144]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a194:	f043 0301 	orr.w	r3, r3, #1
 800a198:	6313      	str	r3, [r2, #48]	@ 0x30
 800a19a:	4b22      	ldr	r3, [pc, #136]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a19e:	f003 0301 	and.w	r3, r3, #1
 800a1a2:	613b      	str	r3, [r7, #16]
 800a1a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a1a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a1b4:	f107 0314 	add.w	r3, r7, #20
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	481b      	ldr	r0, [pc, #108]	@ (800a228 <HAL_PCD_MspInit+0xc0>)
 800a1bc:	f7f8 fb2e 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a1c0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a1c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a1d2:	230a      	movs	r3, #10
 800a1d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1d6:	f107 0314 	add.w	r3, r7, #20
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4812      	ldr	r0, [pc, #72]	@ (800a228 <HAL_PCD_MspInit+0xc0>)
 800a1de:	f7f8 fb1d 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a1e2:	4b10      	ldr	r3, [pc, #64]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a1e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1ec:	6353      	str	r3, [r2, #52]	@ 0x34
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f6:	4a0b      	ldr	r2, [pc, #44]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a1f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1fc:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1fe:	4b09      	ldr	r3, [pc, #36]	@ (800a224 <HAL_PCD_MspInit+0xbc>)
 800a200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a20a:	2200      	movs	r2, #0
 800a20c:	2100      	movs	r1, #0
 800a20e:	2043      	movs	r0, #67	@ 0x43
 800a210:	f7f7 ff5d 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a214:	2043      	movs	r0, #67	@ 0x43
 800a216:	f7f7 ff76 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a21a:	bf00      	nop
 800a21c:	3728      	adds	r7, #40	@ 0x28
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	40023800 	.word	0x40023800
 800a228:	40020000 	.word	0x40020000

0800a22c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7fe fb61 	bl	800890a <USBD_LL_SetupStage>
}
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a262:	78fa      	ldrb	r2, [r7, #3]
 800a264:	6879      	ldr	r1, [r7, #4]
 800a266:	4613      	mov	r3, r2
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	440b      	add	r3, r1
 800a270:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	78fb      	ldrb	r3, [r7, #3]
 800a278:	4619      	mov	r1, r3
 800a27a:	f7fe fb9b 	bl	80089b4 <USBD_LL_DataOutStage>
}
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	4613      	mov	r3, r2
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	440b      	add	r3, r1
 800a2a6:	3320      	adds	r3, #32
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f7fe fc34 	bl	8008b1a <USBD_LL_DataInStage>
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fe fd6e 	bl	8008daa <USBD_LL_SOF>
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	79db      	ldrb	r3, [r3, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d102      	bne.n	800a2f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]
 800a2ee:	e008      	b.n	800a302 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	79db      	ldrb	r3, [r3, #7]
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d102      	bne.n	800a2fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
 800a2fc:	e001      	b.n	800a302 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a2fe:	f7f7 fae3 	bl	80018c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a308:	7bfa      	ldrb	r2, [r7, #15]
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7fe fd08 	bl	8008d22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fcb0 	bl	8008c7e <USBD_LL_Reset>
}
 800a31e:	bf00      	nop
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fd03 	bl	8008d42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7adb      	ldrb	r3, [r3, #11]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d005      	beq.n	800a368 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a35c:	4b04      	ldr	r3, [pc, #16]	@ (800a370 <HAL_PCD_SuspendCallback+0x48>)
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	4a03      	ldr	r2, [pc, #12]	@ (800a370 <HAL_PCD_SuspendCallback+0x48>)
 800a362:	f043 0306 	orr.w	r3, r3, #6
 800a366:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a368:	bf00      	nop
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	e000ed00 	.word	0xe000ed00

0800a374 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe fcf9 	bl	8008d7a <USBD_LL_Resume>
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3a2:	78fa      	ldrb	r2, [r7, #3]
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe fd51 	bl	8008e4e <USBD_LL_IsoOUTIncomplete>
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fd0d 	bl	8008dea <USBD_LL_IsoINIncomplete>
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe fd63 	bl	8008eb2 <USBD_LL_DevConnected>
}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fd60 	bl	8008ec8 <USBD_LL_DevDisconnected>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d13c      	bne.n	800a49a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a420:	4a20      	ldr	r2, [pc, #128]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4a1e      	ldr	r2, [pc, #120]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a42c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a430:	4b1c      	ldr	r3, [pc, #112]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a432:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a436:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a438:	4b1a      	ldr	r3, [pc, #104]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a43a:	2204      	movs	r2, #4
 800a43c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a43e:	4b19      	ldr	r3, [pc, #100]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a440:	2202      	movs	r2, #2
 800a442:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a444:	4b17      	ldr	r3, [pc, #92]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a446:	2200      	movs	r2, #0
 800a448:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a44a:	4b16      	ldr	r3, [pc, #88]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a44c:	2202      	movs	r2, #2
 800a44e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a450:	4b14      	ldr	r3, [pc, #80]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a452:	2200      	movs	r2, #0
 800a454:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a456:	4b13      	ldr	r3, [pc, #76]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a458:	2200      	movs	r2, #0
 800a45a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a45c:	4b11      	ldr	r3, [pc, #68]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a45e:	2200      	movs	r2, #0
 800a460:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a462:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a464:	2201      	movs	r2, #1
 800a466:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a468:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a46e:	480d      	ldr	r0, [pc, #52]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a470:	f7fa f91e 	bl	80046b0 <HAL_PCD_Init>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a47a:	f7f7 fa25 	bl	80018c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a47e:	2180      	movs	r1, #128	@ 0x80
 800a480:	4808      	ldr	r0, [pc, #32]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a482:	f7fb fb4a 	bl	8005b1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a486:	2240      	movs	r2, #64	@ 0x40
 800a488:	2100      	movs	r1, #0
 800a48a:	4806      	ldr	r0, [pc, #24]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a48c:	f7fb fafe 	bl	8005a8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a490:	2280      	movs	r2, #128	@ 0x80
 800a492:	2101      	movs	r1, #1
 800a494:	4803      	ldr	r0, [pc, #12]	@ (800a4a4 <USBD_LL_Init+0x94>)
 800a496:	f7fb faf9 	bl	8005a8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20018ec4 	.word	0x20018ec4

0800a4a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fa fa05 	bl	80048ce <HAL_PCD_Start>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f000 f942 	bl	800a754 <USBD_Get_USB_Status>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	4608      	mov	r0, r1
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	70fb      	strb	r3, [r7, #3]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70bb      	strb	r3, [r7, #2]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a506:	78bb      	ldrb	r3, [r7, #2]
 800a508:	883a      	ldrh	r2, [r7, #0]
 800a50a:	78f9      	ldrb	r1, [r7, #3]
 800a50c:	f7fa fed9 	bl	80052c2 <HAL_PCD_EP_Open>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	4618      	mov	r0, r3
 800a518:	f000 f91c 	bl	800a754 <USBD_Get_USB_Status>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a520:	7bbb      	ldrb	r3, [r7, #14]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	460b      	mov	r3, r1
 800a534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a544:	78fa      	ldrb	r2, [r7, #3]
 800a546:	4611      	mov	r1, r2
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fa ff24 	bl	8005396 <HAL_PCD_EP_Close>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 f8fd 	bl	800a754 <USBD_Get_USB_Status>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a582:	78fa      	ldrb	r2, [r7, #3]
 800a584:	4611      	mov	r1, r2
 800a586:	4618      	mov	r0, r3
 800a588:	f7fa ffdc 	bl	8005544 <HAL_PCD_EP_SetStall>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 f8de 	bl	800a754 <USBD_Get_USB_Status>
 800a598:	4603      	mov	r3, r0
 800a59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fb f820 	bl	800560a <HAL_PCD_EP_ClrStall>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5ce:	7bfb      	ldrb	r3, [r7, #15]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 f8bf 	bl	800a754 <USBD_Get_USB_Status>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	da0b      	bge.n	800a618 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	4613      	mov	r3, r2
 800a60a:	00db      	lsls	r3, r3, #3
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	440b      	add	r3, r1
 800a612:	3316      	adds	r3, #22
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	e00b      	b.n	800a630 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a618:	78fb      	ldrb	r3, [r7, #3]
 800a61a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a61e:	68f9      	ldr	r1, [r7, #12]
 800a620:	4613      	mov	r3, r2
 800a622:	00db      	lsls	r3, r3, #3
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a62e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	4611      	mov	r1, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fa fe0d 	bl	800527a <HAL_PCD_SetAddress>
 800a660:	4603      	mov	r3, r0
 800a662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a664:	7bfb      	ldrb	r3, [r7, #15]
 800a666:	4618      	mov	r0, r3
 800a668:	f000 f874 	bl	800a754 <USBD_Get_USB_Status>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a670:	7bbb      	ldrb	r3, [r7, #14]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b086      	sub	sp, #24
 800a67e:	af00      	add	r7, sp, #0
 800a680:	60f8      	str	r0, [r7, #12]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
 800a686:	460b      	mov	r3, r1
 800a688:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a698:	7af9      	ldrb	r1, [r7, #11]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	f7fa ff17 	bl	80054d0 <HAL_PCD_EP_Transmit>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 f853 	bl	800a754 <USBD_Get_USB_Status>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	607a      	str	r2, [r7, #4]
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a6da:	7af9      	ldrb	r1, [r7, #11]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	f7fa fea3 	bl	800542a <HAL_PCD_EP_Receive>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 f832 	bl	800a754 <USBD_Get_USB_Status>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a710:	78fa      	ldrb	r2, [r7, #3]
 800a712:	4611      	mov	r1, r2
 800a714:	4618      	mov	r0, r3
 800a716:	f7fa fec3 	bl	80054a0 <HAL_PCD_EP_GetRxCount>
 800a71a:	4603      	mov	r3, r0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a72c:	4b03      	ldr	r3, [pc, #12]	@ (800a73c <USBD_static_malloc+0x18>)
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	200193a8 	.word	0x200193a8

0800a740 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]

}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	2b03      	cmp	r3, #3
 800a766:	d817      	bhi.n	800a798 <USBD_Get_USB_Status+0x44>
 800a768:	a201      	add	r2, pc, #4	@ (adr r2, 800a770 <USBD_Get_USB_Status+0x1c>)
 800a76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76e:	bf00      	nop
 800a770:	0800a781 	.word	0x0800a781
 800a774:	0800a787 	.word	0x0800a787
 800a778:	0800a78d 	.word	0x0800a78d
 800a77c:	0800a793 	.word	0x0800a793
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	73fb      	strb	r3, [r7, #15]
    break;
 800a784:	e00b      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a786:	2303      	movs	r3, #3
 800a788:	73fb      	strb	r3, [r7, #15]
    break;
 800a78a:	e008      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a78c:	2301      	movs	r3, #1
 800a78e:	73fb      	strb	r3, [r7, #15]
    break;
 800a790:	e005      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a792:	2303      	movs	r3, #3
 800a794:	73fb      	strb	r3, [r7, #15]
    break;
 800a796:	e002      	b.n	800a79e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a798:	2303      	movs	r3, #3
 800a79a:	73fb      	strb	r3, [r7, #15]
    break;
 800a79c:	bf00      	nop
  }
  return usb_status;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <std>:
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ba:	6083      	str	r3, [r0, #8]
 800a7bc:	8181      	strh	r1, [r0, #12]
 800a7be:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7c0:	81c2      	strh	r2, [r0, #14]
 800a7c2:	6183      	str	r3, [r0, #24]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	2208      	movs	r2, #8
 800a7c8:	305c      	adds	r0, #92	@ 0x5c
 800a7ca:	f000 f9f9 	bl	800abc0 <memset>
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a804 <std+0x58>)
 800a7d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a808 <std+0x5c>)
 800a7d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a80c <std+0x60>)
 800a7d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7da:	4b0d      	ldr	r3, [pc, #52]	@ (800a810 <std+0x64>)
 800a7dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7de:	4b0d      	ldr	r3, [pc, #52]	@ (800a814 <std+0x68>)
 800a7e0:	6224      	str	r4, [r4, #32]
 800a7e2:	429c      	cmp	r4, r3
 800a7e4:	d006      	beq.n	800a7f4 <std+0x48>
 800a7e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7ea:	4294      	cmp	r4, r2
 800a7ec:	d002      	beq.n	800a7f4 <std+0x48>
 800a7ee:	33d0      	adds	r3, #208	@ 0xd0
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	d105      	bne.n	800a800 <std+0x54>
 800a7f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7fc:	f000 ba58 	b.w	800acb0 <__retarget_lock_init_recursive>
 800a800:	bd10      	pop	{r4, pc}
 800a802:	bf00      	nop
 800a804:	0800aa11 	.word	0x0800aa11
 800a808:	0800aa33 	.word	0x0800aa33
 800a80c:	0800aa6b 	.word	0x0800aa6b
 800a810:	0800aa8f 	.word	0x0800aa8f
 800a814:	200195c8 	.word	0x200195c8

0800a818 <stdio_exit_handler>:
 800a818:	4a02      	ldr	r2, [pc, #8]	@ (800a824 <stdio_exit_handler+0xc>)
 800a81a:	4903      	ldr	r1, [pc, #12]	@ (800a828 <stdio_exit_handler+0x10>)
 800a81c:	4803      	ldr	r0, [pc, #12]	@ (800a82c <stdio_exit_handler+0x14>)
 800a81e:	f000 b869 	b.w	800a8f4 <_fwalk_sglue>
 800a822:	bf00      	nop
 800a824:	20000100 	.word	0x20000100
 800a828:	0800b54d 	.word	0x0800b54d
 800a82c:	20000110 	.word	0x20000110

0800a830 <cleanup_stdio>:
 800a830:	6841      	ldr	r1, [r0, #4]
 800a832:	4b0c      	ldr	r3, [pc, #48]	@ (800a864 <cleanup_stdio+0x34>)
 800a834:	4299      	cmp	r1, r3
 800a836:	b510      	push	{r4, lr}
 800a838:	4604      	mov	r4, r0
 800a83a:	d001      	beq.n	800a840 <cleanup_stdio+0x10>
 800a83c:	f000 fe86 	bl	800b54c <_fflush_r>
 800a840:	68a1      	ldr	r1, [r4, #8]
 800a842:	4b09      	ldr	r3, [pc, #36]	@ (800a868 <cleanup_stdio+0x38>)
 800a844:	4299      	cmp	r1, r3
 800a846:	d002      	beq.n	800a84e <cleanup_stdio+0x1e>
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 fe7f 	bl	800b54c <_fflush_r>
 800a84e:	68e1      	ldr	r1, [r4, #12]
 800a850:	4b06      	ldr	r3, [pc, #24]	@ (800a86c <cleanup_stdio+0x3c>)
 800a852:	4299      	cmp	r1, r3
 800a854:	d004      	beq.n	800a860 <cleanup_stdio+0x30>
 800a856:	4620      	mov	r0, r4
 800a858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85c:	f000 be76 	b.w	800b54c <_fflush_r>
 800a860:	bd10      	pop	{r4, pc}
 800a862:	bf00      	nop
 800a864:	200195c8 	.word	0x200195c8
 800a868:	20019630 	.word	0x20019630
 800a86c:	20019698 	.word	0x20019698

0800a870 <global_stdio_init.part.0>:
 800a870:	b510      	push	{r4, lr}
 800a872:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a0 <global_stdio_init.part.0+0x30>)
 800a874:	4c0b      	ldr	r4, [pc, #44]	@ (800a8a4 <global_stdio_init.part.0+0x34>)
 800a876:	4a0c      	ldr	r2, [pc, #48]	@ (800a8a8 <global_stdio_init.part.0+0x38>)
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	4620      	mov	r0, r4
 800a87c:	2200      	movs	r2, #0
 800a87e:	2104      	movs	r1, #4
 800a880:	f7ff ff94 	bl	800a7ac <std>
 800a884:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a888:	2201      	movs	r2, #1
 800a88a:	2109      	movs	r1, #9
 800a88c:	f7ff ff8e 	bl	800a7ac <std>
 800a890:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a894:	2202      	movs	r2, #2
 800a896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a89a:	2112      	movs	r1, #18
 800a89c:	f7ff bf86 	b.w	800a7ac <std>
 800a8a0:	20019700 	.word	0x20019700
 800a8a4:	200195c8 	.word	0x200195c8
 800a8a8:	0800a819 	.word	0x0800a819

0800a8ac <__sfp_lock_acquire>:
 800a8ac:	4801      	ldr	r0, [pc, #4]	@ (800a8b4 <__sfp_lock_acquire+0x8>)
 800a8ae:	f000 ba00 	b.w	800acb2 <__retarget_lock_acquire_recursive>
 800a8b2:	bf00      	nop
 800a8b4:	20019709 	.word	0x20019709

0800a8b8 <__sfp_lock_release>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	@ (800a8c0 <__sfp_lock_release+0x8>)
 800a8ba:	f000 b9fb 	b.w	800acb4 <__retarget_lock_release_recursive>
 800a8be:	bf00      	nop
 800a8c0:	20019709 	.word	0x20019709

0800a8c4 <__sinit>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	f7ff fff0 	bl	800a8ac <__sfp_lock_acquire>
 800a8cc:	6a23      	ldr	r3, [r4, #32]
 800a8ce:	b11b      	cbz	r3, 800a8d8 <__sinit+0x14>
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d4:	f7ff bff0 	b.w	800a8b8 <__sfp_lock_release>
 800a8d8:	4b04      	ldr	r3, [pc, #16]	@ (800a8ec <__sinit+0x28>)
 800a8da:	6223      	str	r3, [r4, #32]
 800a8dc:	4b04      	ldr	r3, [pc, #16]	@ (800a8f0 <__sinit+0x2c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1f5      	bne.n	800a8d0 <__sinit+0xc>
 800a8e4:	f7ff ffc4 	bl	800a870 <global_stdio_init.part.0>
 800a8e8:	e7f2      	b.n	800a8d0 <__sinit+0xc>
 800a8ea:	bf00      	nop
 800a8ec:	0800a831 	.word	0x0800a831
 800a8f0:	20019700 	.word	0x20019700

0800a8f4 <_fwalk_sglue>:
 800a8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	4688      	mov	r8, r1
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	2600      	movs	r6, #0
 800a900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a904:	f1b9 0901 	subs.w	r9, r9, #1
 800a908:	d505      	bpl.n	800a916 <_fwalk_sglue+0x22>
 800a90a:	6824      	ldr	r4, [r4, #0]
 800a90c:	2c00      	cmp	r4, #0
 800a90e:	d1f7      	bne.n	800a900 <_fwalk_sglue+0xc>
 800a910:	4630      	mov	r0, r6
 800a912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a916:	89ab      	ldrh	r3, [r5, #12]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d907      	bls.n	800a92c <_fwalk_sglue+0x38>
 800a91c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a920:	3301      	adds	r3, #1
 800a922:	d003      	beq.n	800a92c <_fwalk_sglue+0x38>
 800a924:	4629      	mov	r1, r5
 800a926:	4638      	mov	r0, r7
 800a928:	47c0      	blx	r8
 800a92a:	4306      	orrs	r6, r0
 800a92c:	3568      	adds	r5, #104	@ 0x68
 800a92e:	e7e9      	b.n	800a904 <_fwalk_sglue+0x10>

0800a930 <iprintf>:
 800a930:	b40f      	push	{r0, r1, r2, r3}
 800a932:	b507      	push	{r0, r1, r2, lr}
 800a934:	4906      	ldr	r1, [pc, #24]	@ (800a950 <iprintf+0x20>)
 800a936:	ab04      	add	r3, sp, #16
 800a938:	6808      	ldr	r0, [r1, #0]
 800a93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93e:	6881      	ldr	r1, [r0, #8]
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	f000 fadb 	bl	800aefc <_vfiprintf_r>
 800a946:	b003      	add	sp, #12
 800a948:	f85d eb04 	ldr.w	lr, [sp], #4
 800a94c:	b004      	add	sp, #16
 800a94e:	4770      	bx	lr
 800a950:	2000010c 	.word	0x2000010c

0800a954 <_puts_r>:
 800a954:	6a03      	ldr	r3, [r0, #32]
 800a956:	b570      	push	{r4, r5, r6, lr}
 800a958:	6884      	ldr	r4, [r0, #8]
 800a95a:	4605      	mov	r5, r0
 800a95c:	460e      	mov	r6, r1
 800a95e:	b90b      	cbnz	r3, 800a964 <_puts_r+0x10>
 800a960:	f7ff ffb0 	bl	800a8c4 <__sinit>
 800a964:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a966:	07db      	lsls	r3, r3, #31
 800a968:	d405      	bmi.n	800a976 <_puts_r+0x22>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	0598      	lsls	r0, r3, #22
 800a96e:	d402      	bmi.n	800a976 <_puts_r+0x22>
 800a970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a972:	f000 f99e 	bl	800acb2 <__retarget_lock_acquire_recursive>
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	0719      	lsls	r1, r3, #28
 800a97a:	d502      	bpl.n	800a982 <_puts_r+0x2e>
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d135      	bne.n	800a9ee <_puts_r+0x9a>
 800a982:	4621      	mov	r1, r4
 800a984:	4628      	mov	r0, r5
 800a986:	f000 f8c5 	bl	800ab14 <__swsetup_r>
 800a98a:	b380      	cbz	r0, 800a9ee <_puts_r+0x9a>
 800a98c:	f04f 35ff 	mov.w	r5, #4294967295
 800a990:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a992:	07da      	lsls	r2, r3, #31
 800a994:	d405      	bmi.n	800a9a2 <_puts_r+0x4e>
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	059b      	lsls	r3, r3, #22
 800a99a:	d402      	bmi.n	800a9a2 <_puts_r+0x4e>
 800a99c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a99e:	f000 f989 	bl	800acb4 <__retarget_lock_release_recursive>
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	bd70      	pop	{r4, r5, r6, pc}
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	da04      	bge.n	800a9b4 <_puts_r+0x60>
 800a9aa:	69a2      	ldr	r2, [r4, #24]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	dc17      	bgt.n	800a9e0 <_puts_r+0x8c>
 800a9b0:	290a      	cmp	r1, #10
 800a9b2:	d015      	beq.n	800a9e0 <_puts_r+0x8c>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	6022      	str	r2, [r4, #0]
 800a9ba:	7019      	strb	r1, [r3, #0]
 800a9bc:	68a3      	ldr	r3, [r4, #8]
 800a9be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	60a3      	str	r3, [r4, #8]
 800a9c6:	2900      	cmp	r1, #0
 800a9c8:	d1ed      	bne.n	800a9a6 <_puts_r+0x52>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da11      	bge.n	800a9f2 <_puts_r+0x9e>
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	210a      	movs	r1, #10
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f000 f85f 	bl	800aa96 <__swbuf_r>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d0d7      	beq.n	800a98c <_puts_r+0x38>
 800a9dc:	250a      	movs	r5, #10
 800a9de:	e7d7      	b.n	800a990 <_puts_r+0x3c>
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f000 f857 	bl	800aa96 <__swbuf_r>
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d1e7      	bne.n	800a9bc <_puts_r+0x68>
 800a9ec:	e7ce      	b.n	800a98c <_puts_r+0x38>
 800a9ee:	3e01      	subs	r6, #1
 800a9f0:	e7e4      	b.n	800a9bc <_puts_r+0x68>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	6022      	str	r2, [r4, #0]
 800a9f8:	220a      	movs	r2, #10
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e7ee      	b.n	800a9dc <_puts_r+0x88>
	...

0800aa00 <puts>:
 800aa00:	4b02      	ldr	r3, [pc, #8]	@ (800aa0c <puts+0xc>)
 800aa02:	4601      	mov	r1, r0
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	f7ff bfa5 	b.w	800a954 <_puts_r>
 800aa0a:	bf00      	nop
 800aa0c:	2000010c 	.word	0x2000010c

0800aa10 <__sread>:
 800aa10:	b510      	push	{r4, lr}
 800aa12:	460c      	mov	r4, r1
 800aa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa18:	f000 f8fc 	bl	800ac14 <_read_r>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	bfab      	itete	ge
 800aa20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa22:	89a3      	ldrhlt	r3, [r4, #12]
 800aa24:	181b      	addge	r3, r3, r0
 800aa26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa2a:	bfac      	ite	ge
 800aa2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa2e:	81a3      	strhlt	r3, [r4, #12]
 800aa30:	bd10      	pop	{r4, pc}

0800aa32 <__swrite>:
 800aa32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	461f      	mov	r7, r3
 800aa38:	898b      	ldrh	r3, [r1, #12]
 800aa3a:	05db      	lsls	r3, r3, #23
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	4616      	mov	r6, r2
 800aa42:	d505      	bpl.n	800aa50 <__swrite+0x1e>
 800aa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa48:	2302      	movs	r3, #2
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f000 f8d0 	bl	800abf0 <_lseek_r>
 800aa50:	89a3      	ldrh	r3, [r4, #12]
 800aa52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	463b      	mov	r3, r7
 800aa60:	4628      	mov	r0, r5
 800aa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa66:	f000 b8e7 	b.w	800ac38 <_write_r>

0800aa6a <__sseek>:
 800aa6a:	b510      	push	{r4, lr}
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa72:	f000 f8bd 	bl	800abf0 <_lseek_r>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	bf15      	itete	ne
 800aa7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa86:	81a3      	strheq	r3, [r4, #12]
 800aa88:	bf18      	it	ne
 800aa8a:	81a3      	strhne	r3, [r4, #12]
 800aa8c:	bd10      	pop	{r4, pc}

0800aa8e <__sclose>:
 800aa8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa92:	f000 b89d 	b.w	800abd0 <_close_r>

0800aa96 <__swbuf_r>:
 800aa96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa98:	460e      	mov	r6, r1
 800aa9a:	4614      	mov	r4, r2
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	b118      	cbz	r0, 800aaa8 <__swbuf_r+0x12>
 800aaa0:	6a03      	ldr	r3, [r0, #32]
 800aaa2:	b90b      	cbnz	r3, 800aaa8 <__swbuf_r+0x12>
 800aaa4:	f7ff ff0e 	bl	800a8c4 <__sinit>
 800aaa8:	69a3      	ldr	r3, [r4, #24]
 800aaaa:	60a3      	str	r3, [r4, #8]
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	071a      	lsls	r2, r3, #28
 800aab0:	d501      	bpl.n	800aab6 <__swbuf_r+0x20>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	b943      	cbnz	r3, 800aac8 <__swbuf_r+0x32>
 800aab6:	4621      	mov	r1, r4
 800aab8:	4628      	mov	r0, r5
 800aaba:	f000 f82b 	bl	800ab14 <__swsetup_r>
 800aabe:	b118      	cbz	r0, 800aac8 <__swbuf_r+0x32>
 800aac0:	f04f 37ff 	mov.w	r7, #4294967295
 800aac4:	4638      	mov	r0, r7
 800aac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	6922      	ldr	r2, [r4, #16]
 800aacc:	1a98      	subs	r0, r3, r2
 800aace:	6963      	ldr	r3, [r4, #20]
 800aad0:	b2f6      	uxtb	r6, r6
 800aad2:	4283      	cmp	r3, r0
 800aad4:	4637      	mov	r7, r6
 800aad6:	dc05      	bgt.n	800aae4 <__swbuf_r+0x4e>
 800aad8:	4621      	mov	r1, r4
 800aada:	4628      	mov	r0, r5
 800aadc:	f000 fd36 	bl	800b54c <_fflush_r>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d1ed      	bne.n	800aac0 <__swbuf_r+0x2a>
 800aae4:	68a3      	ldr	r3, [r4, #8]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	60a3      	str	r3, [r4, #8]
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	6022      	str	r2, [r4, #0]
 800aaf0:	701e      	strb	r6, [r3, #0]
 800aaf2:	6962      	ldr	r2, [r4, #20]
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d004      	beq.n	800ab04 <__swbuf_r+0x6e>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	07db      	lsls	r3, r3, #31
 800aafe:	d5e1      	bpl.n	800aac4 <__swbuf_r+0x2e>
 800ab00:	2e0a      	cmp	r6, #10
 800ab02:	d1df      	bne.n	800aac4 <__swbuf_r+0x2e>
 800ab04:	4621      	mov	r1, r4
 800ab06:	4628      	mov	r0, r5
 800ab08:	f000 fd20 	bl	800b54c <_fflush_r>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d0d9      	beq.n	800aac4 <__swbuf_r+0x2e>
 800ab10:	e7d6      	b.n	800aac0 <__swbuf_r+0x2a>
	...

0800ab14 <__swsetup_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4b29      	ldr	r3, [pc, #164]	@ (800abbc <__swsetup_r+0xa8>)
 800ab18:	4605      	mov	r5, r0
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	b118      	cbz	r0, 800ab28 <__swsetup_r+0x14>
 800ab20:	6a03      	ldr	r3, [r0, #32]
 800ab22:	b90b      	cbnz	r3, 800ab28 <__swsetup_r+0x14>
 800ab24:	f7ff fece 	bl	800a8c4 <__sinit>
 800ab28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2c:	0719      	lsls	r1, r3, #28
 800ab2e:	d422      	bmi.n	800ab76 <__swsetup_r+0x62>
 800ab30:	06da      	lsls	r2, r3, #27
 800ab32:	d407      	bmi.n	800ab44 <__swsetup_r+0x30>
 800ab34:	2209      	movs	r2, #9
 800ab36:	602a      	str	r2, [r5, #0]
 800ab38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab42:	e033      	b.n	800abac <__swsetup_r+0x98>
 800ab44:	0758      	lsls	r0, r3, #29
 800ab46:	d512      	bpl.n	800ab6e <__swsetup_r+0x5a>
 800ab48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab4a:	b141      	cbz	r1, 800ab5e <__swsetup_r+0x4a>
 800ab4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab50:	4299      	cmp	r1, r3
 800ab52:	d002      	beq.n	800ab5a <__swsetup_r+0x46>
 800ab54:	4628      	mov	r0, r5
 800ab56:	f000 f8af 	bl	800acb8 <_free_r>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab64:	81a3      	strh	r3, [r4, #12]
 800ab66:	2300      	movs	r3, #0
 800ab68:	6063      	str	r3, [r4, #4]
 800ab6a:	6923      	ldr	r3, [r4, #16]
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	89a3      	ldrh	r3, [r4, #12]
 800ab70:	f043 0308 	orr.w	r3, r3, #8
 800ab74:	81a3      	strh	r3, [r4, #12]
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	b94b      	cbnz	r3, 800ab8e <__swsetup_r+0x7a>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab84:	d003      	beq.n	800ab8e <__swsetup_r+0x7a>
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 fd2d 	bl	800b5e8 <__smakebuf_r>
 800ab8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab92:	f013 0201 	ands.w	r2, r3, #1
 800ab96:	d00a      	beq.n	800abae <__swsetup_r+0x9a>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	60a2      	str	r2, [r4, #8]
 800ab9c:	6962      	ldr	r2, [r4, #20]
 800ab9e:	4252      	negs	r2, r2
 800aba0:	61a2      	str	r2, [r4, #24]
 800aba2:	6922      	ldr	r2, [r4, #16]
 800aba4:	b942      	cbnz	r2, 800abb8 <__swsetup_r+0xa4>
 800aba6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abaa:	d1c5      	bne.n	800ab38 <__swsetup_r+0x24>
 800abac:	bd38      	pop	{r3, r4, r5, pc}
 800abae:	0799      	lsls	r1, r3, #30
 800abb0:	bf58      	it	pl
 800abb2:	6962      	ldrpl	r2, [r4, #20]
 800abb4:	60a2      	str	r2, [r4, #8]
 800abb6:	e7f4      	b.n	800aba2 <__swsetup_r+0x8e>
 800abb8:	2000      	movs	r0, #0
 800abba:	e7f7      	b.n	800abac <__swsetup_r+0x98>
 800abbc:	2000010c 	.word	0x2000010c

0800abc0 <memset>:
 800abc0:	4402      	add	r2, r0
 800abc2:	4603      	mov	r3, r0
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d100      	bne.n	800abca <memset+0xa>
 800abc8:	4770      	bx	lr
 800abca:	f803 1b01 	strb.w	r1, [r3], #1
 800abce:	e7f9      	b.n	800abc4 <memset+0x4>

0800abd0 <_close_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d06      	ldr	r5, [pc, #24]	@ (800abec <_close_r+0x1c>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	4604      	mov	r4, r0
 800abd8:	4608      	mov	r0, r1
 800abda:	602b      	str	r3, [r5, #0]
 800abdc:	f7f7 f85f 	bl	8001c9e <_close>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d102      	bne.n	800abea <_close_r+0x1a>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	b103      	cbz	r3, 800abea <_close_r+0x1a>
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	20019704 	.word	0x20019704

0800abf0 <_lseek_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4d07      	ldr	r5, [pc, #28]	@ (800ac10 <_lseek_r+0x20>)
 800abf4:	4604      	mov	r4, r0
 800abf6:	4608      	mov	r0, r1
 800abf8:	4611      	mov	r1, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	602a      	str	r2, [r5, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	f7f7 f874 	bl	8001cec <_lseek>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	d102      	bne.n	800ac0e <_lseek_r+0x1e>
 800ac08:	682b      	ldr	r3, [r5, #0]
 800ac0a:	b103      	cbz	r3, 800ac0e <_lseek_r+0x1e>
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	20019704 	.word	0x20019704

0800ac14 <_read_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4d07      	ldr	r5, [pc, #28]	@ (800ac34 <_read_r+0x20>)
 800ac18:	4604      	mov	r4, r0
 800ac1a:	4608      	mov	r0, r1
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	2200      	movs	r2, #0
 800ac20:	602a      	str	r2, [r5, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	f7f7 f81e 	bl	8001c64 <_read>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	d102      	bne.n	800ac32 <_read_r+0x1e>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	b103      	cbz	r3, 800ac32 <_read_r+0x1e>
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	20019704 	.word	0x20019704

0800ac38 <_write_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4d07      	ldr	r5, [pc, #28]	@ (800ac58 <_write_r+0x20>)
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	4608      	mov	r0, r1
 800ac40:	4611      	mov	r1, r2
 800ac42:	2200      	movs	r2, #0
 800ac44:	602a      	str	r2, [r5, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	f7f6 fe22 	bl	8001890 <_write>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	d102      	bne.n	800ac56 <_write_r+0x1e>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	b103      	cbz	r3, 800ac56 <_write_r+0x1e>
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	20019704 	.word	0x20019704

0800ac5c <__errno>:
 800ac5c:	4b01      	ldr	r3, [pc, #4]	@ (800ac64 <__errno+0x8>)
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	2000010c 	.word	0x2000010c

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4d0d      	ldr	r5, [pc, #52]	@ (800aca0 <__libc_init_array+0x38>)
 800ac6c:	4c0d      	ldr	r4, [pc, #52]	@ (800aca4 <__libc_init_array+0x3c>)
 800ac6e:	1b64      	subs	r4, r4, r5
 800ac70:	10a4      	asrs	r4, r4, #2
 800ac72:	2600      	movs	r6, #0
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	4d0b      	ldr	r5, [pc, #44]	@ (800aca8 <__libc_init_array+0x40>)
 800ac7a:	4c0c      	ldr	r4, [pc, #48]	@ (800acac <__libc_init_array+0x44>)
 800ac7c:	f001 fa52 	bl	800c124 <_init>
 800ac80:	1b64      	subs	r4, r4, r5
 800ac82:	10a4      	asrs	r4, r4, #2
 800ac84:	2600      	movs	r6, #0
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac90:	4798      	blx	r3
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9a:	4798      	blx	r3
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800c628 	.word	0x0800c628
 800aca4:	0800c628 	.word	0x0800c628
 800aca8:	0800c628 	.word	0x0800c628
 800acac:	0800c62c 	.word	0x0800c62c

0800acb0 <__retarget_lock_init_recursive>:
 800acb0:	4770      	bx	lr

0800acb2 <__retarget_lock_acquire_recursive>:
 800acb2:	4770      	bx	lr

0800acb4 <__retarget_lock_release_recursive>:
 800acb4:	4770      	bx	lr
	...

0800acb8 <_free_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4605      	mov	r5, r0
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d041      	beq.n	800ad44 <_free_r+0x8c>
 800acc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc4:	1f0c      	subs	r4, r1, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bfb8      	it	lt
 800acca:	18e4      	addlt	r4, r4, r3
 800accc:	f000 f8e0 	bl	800ae90 <__malloc_lock>
 800acd0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad48 <_free_r+0x90>)
 800acd2:	6813      	ldr	r3, [r2, #0]
 800acd4:	b933      	cbnz	r3, 800ace4 <_free_r+0x2c>
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	6014      	str	r4, [r2, #0]
 800acda:	4628      	mov	r0, r5
 800acdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ace0:	f000 b8dc 	b.w	800ae9c <__malloc_unlock>
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	d908      	bls.n	800acfa <_free_r+0x42>
 800ace8:	6820      	ldr	r0, [r4, #0]
 800acea:	1821      	adds	r1, r4, r0
 800acec:	428b      	cmp	r3, r1
 800acee:	bf01      	itttt	eq
 800acf0:	6819      	ldreq	r1, [r3, #0]
 800acf2:	685b      	ldreq	r3, [r3, #4]
 800acf4:	1809      	addeq	r1, r1, r0
 800acf6:	6021      	streq	r1, [r4, #0]
 800acf8:	e7ed      	b.n	800acd6 <_free_r+0x1e>
 800acfa:	461a      	mov	r2, r3
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	b10b      	cbz	r3, 800ad04 <_free_r+0x4c>
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	d9fa      	bls.n	800acfa <_free_r+0x42>
 800ad04:	6811      	ldr	r1, [r2, #0]
 800ad06:	1850      	adds	r0, r2, r1
 800ad08:	42a0      	cmp	r0, r4
 800ad0a:	d10b      	bne.n	800ad24 <_free_r+0x6c>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	4401      	add	r1, r0
 800ad10:	1850      	adds	r0, r2, r1
 800ad12:	4283      	cmp	r3, r0
 800ad14:	6011      	str	r1, [r2, #0]
 800ad16:	d1e0      	bne.n	800acda <_free_r+0x22>
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	6053      	str	r3, [r2, #4]
 800ad1e:	4408      	add	r0, r1
 800ad20:	6010      	str	r0, [r2, #0]
 800ad22:	e7da      	b.n	800acda <_free_r+0x22>
 800ad24:	d902      	bls.n	800ad2c <_free_r+0x74>
 800ad26:	230c      	movs	r3, #12
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	e7d6      	b.n	800acda <_free_r+0x22>
 800ad2c:	6820      	ldr	r0, [r4, #0]
 800ad2e:	1821      	adds	r1, r4, r0
 800ad30:	428b      	cmp	r3, r1
 800ad32:	bf04      	itt	eq
 800ad34:	6819      	ldreq	r1, [r3, #0]
 800ad36:	685b      	ldreq	r3, [r3, #4]
 800ad38:	6063      	str	r3, [r4, #4]
 800ad3a:	bf04      	itt	eq
 800ad3c:	1809      	addeq	r1, r1, r0
 800ad3e:	6021      	streq	r1, [r4, #0]
 800ad40:	6054      	str	r4, [r2, #4]
 800ad42:	e7ca      	b.n	800acda <_free_r+0x22>
 800ad44:	bd38      	pop	{r3, r4, r5, pc}
 800ad46:	bf00      	nop
 800ad48:	20019710 	.word	0x20019710

0800ad4c <sbrk_aligned>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ad8c <sbrk_aligned+0x40>)
 800ad50:	460c      	mov	r4, r1
 800ad52:	6831      	ldr	r1, [r6, #0]
 800ad54:	4605      	mov	r5, r0
 800ad56:	b911      	cbnz	r1, 800ad5e <sbrk_aligned+0x12>
 800ad58:	f000 fca4 	bl	800b6a4 <_sbrk_r>
 800ad5c:	6030      	str	r0, [r6, #0]
 800ad5e:	4621      	mov	r1, r4
 800ad60:	4628      	mov	r0, r5
 800ad62:	f000 fc9f 	bl	800b6a4 <_sbrk_r>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d103      	bne.n	800ad72 <sbrk_aligned+0x26>
 800ad6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad6e:	4620      	mov	r0, r4
 800ad70:	bd70      	pop	{r4, r5, r6, pc}
 800ad72:	1cc4      	adds	r4, r0, #3
 800ad74:	f024 0403 	bic.w	r4, r4, #3
 800ad78:	42a0      	cmp	r0, r4
 800ad7a:	d0f8      	beq.n	800ad6e <sbrk_aligned+0x22>
 800ad7c:	1a21      	subs	r1, r4, r0
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 fc90 	bl	800b6a4 <_sbrk_r>
 800ad84:	3001      	adds	r0, #1
 800ad86:	d1f2      	bne.n	800ad6e <sbrk_aligned+0x22>
 800ad88:	e7ef      	b.n	800ad6a <sbrk_aligned+0x1e>
 800ad8a:	bf00      	nop
 800ad8c:	2001970c 	.word	0x2001970c

0800ad90 <_malloc_r>:
 800ad90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad94:	1ccd      	adds	r5, r1, #3
 800ad96:	f025 0503 	bic.w	r5, r5, #3
 800ad9a:	3508      	adds	r5, #8
 800ad9c:	2d0c      	cmp	r5, #12
 800ad9e:	bf38      	it	cc
 800ada0:	250c      	movcc	r5, #12
 800ada2:	2d00      	cmp	r5, #0
 800ada4:	4606      	mov	r6, r0
 800ada6:	db01      	blt.n	800adac <_malloc_r+0x1c>
 800ada8:	42a9      	cmp	r1, r5
 800adaa:	d904      	bls.n	800adb6 <_malloc_r+0x26>
 800adac:	230c      	movs	r3, #12
 800adae:	6033      	str	r3, [r6, #0]
 800adb0:	2000      	movs	r0, #0
 800adb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae8c <_malloc_r+0xfc>
 800adba:	f000 f869 	bl	800ae90 <__malloc_lock>
 800adbe:	f8d8 3000 	ldr.w	r3, [r8]
 800adc2:	461c      	mov	r4, r3
 800adc4:	bb44      	cbnz	r4, 800ae18 <_malloc_r+0x88>
 800adc6:	4629      	mov	r1, r5
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff ffbf 	bl	800ad4c <sbrk_aligned>
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	4604      	mov	r4, r0
 800add2:	d158      	bne.n	800ae86 <_malloc_r+0xf6>
 800add4:	f8d8 4000 	ldr.w	r4, [r8]
 800add8:	4627      	mov	r7, r4
 800adda:	2f00      	cmp	r7, #0
 800addc:	d143      	bne.n	800ae66 <_malloc_r+0xd6>
 800adde:	2c00      	cmp	r4, #0
 800ade0:	d04b      	beq.n	800ae7a <_malloc_r+0xea>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	4639      	mov	r1, r7
 800ade6:	4630      	mov	r0, r6
 800ade8:	eb04 0903 	add.w	r9, r4, r3
 800adec:	f000 fc5a 	bl	800b6a4 <_sbrk_r>
 800adf0:	4581      	cmp	r9, r0
 800adf2:	d142      	bne.n	800ae7a <_malloc_r+0xea>
 800adf4:	6821      	ldr	r1, [r4, #0]
 800adf6:	1a6d      	subs	r5, r5, r1
 800adf8:	4629      	mov	r1, r5
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ffa6 	bl	800ad4c <sbrk_aligned>
 800ae00:	3001      	adds	r0, #1
 800ae02:	d03a      	beq.n	800ae7a <_malloc_r+0xea>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	442b      	add	r3, r5
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	bb62      	cbnz	r2, 800ae6c <_malloc_r+0xdc>
 800ae12:	f8c8 7000 	str.w	r7, [r8]
 800ae16:	e00f      	b.n	800ae38 <_malloc_r+0xa8>
 800ae18:	6822      	ldr	r2, [r4, #0]
 800ae1a:	1b52      	subs	r2, r2, r5
 800ae1c:	d420      	bmi.n	800ae60 <_malloc_r+0xd0>
 800ae1e:	2a0b      	cmp	r2, #11
 800ae20:	d917      	bls.n	800ae52 <_malloc_r+0xc2>
 800ae22:	1961      	adds	r1, r4, r5
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	6025      	str	r5, [r4, #0]
 800ae28:	bf18      	it	ne
 800ae2a:	6059      	strne	r1, [r3, #4]
 800ae2c:	6863      	ldr	r3, [r4, #4]
 800ae2e:	bf08      	it	eq
 800ae30:	f8c8 1000 	streq.w	r1, [r8]
 800ae34:	5162      	str	r2, [r4, r5]
 800ae36:	604b      	str	r3, [r1, #4]
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 f82f 	bl	800ae9c <__malloc_unlock>
 800ae3e:	f104 000b 	add.w	r0, r4, #11
 800ae42:	1d23      	adds	r3, r4, #4
 800ae44:	f020 0007 	bic.w	r0, r0, #7
 800ae48:	1ac2      	subs	r2, r0, r3
 800ae4a:	bf1c      	itt	ne
 800ae4c:	1a1b      	subne	r3, r3, r0
 800ae4e:	50a3      	strne	r3, [r4, r2]
 800ae50:	e7af      	b.n	800adb2 <_malloc_r+0x22>
 800ae52:	6862      	ldr	r2, [r4, #4]
 800ae54:	42a3      	cmp	r3, r4
 800ae56:	bf0c      	ite	eq
 800ae58:	f8c8 2000 	streq.w	r2, [r8]
 800ae5c:	605a      	strne	r2, [r3, #4]
 800ae5e:	e7eb      	b.n	800ae38 <_malloc_r+0xa8>
 800ae60:	4623      	mov	r3, r4
 800ae62:	6864      	ldr	r4, [r4, #4]
 800ae64:	e7ae      	b.n	800adc4 <_malloc_r+0x34>
 800ae66:	463c      	mov	r4, r7
 800ae68:	687f      	ldr	r7, [r7, #4]
 800ae6a:	e7b6      	b.n	800adda <_malloc_r+0x4a>
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	42a3      	cmp	r3, r4
 800ae72:	d1fb      	bne.n	800ae6c <_malloc_r+0xdc>
 800ae74:	2300      	movs	r3, #0
 800ae76:	6053      	str	r3, [r2, #4]
 800ae78:	e7de      	b.n	800ae38 <_malloc_r+0xa8>
 800ae7a:	230c      	movs	r3, #12
 800ae7c:	6033      	str	r3, [r6, #0]
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f000 f80c 	bl	800ae9c <__malloc_unlock>
 800ae84:	e794      	b.n	800adb0 <_malloc_r+0x20>
 800ae86:	6005      	str	r5, [r0, #0]
 800ae88:	e7d6      	b.n	800ae38 <_malloc_r+0xa8>
 800ae8a:	bf00      	nop
 800ae8c:	20019710 	.word	0x20019710

0800ae90 <__malloc_lock>:
 800ae90:	4801      	ldr	r0, [pc, #4]	@ (800ae98 <__malloc_lock+0x8>)
 800ae92:	f7ff bf0e 	b.w	800acb2 <__retarget_lock_acquire_recursive>
 800ae96:	bf00      	nop
 800ae98:	20019708 	.word	0x20019708

0800ae9c <__malloc_unlock>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	@ (800aea4 <__malloc_unlock+0x8>)
 800ae9e:	f7ff bf09 	b.w	800acb4 <__retarget_lock_release_recursive>
 800aea2:	bf00      	nop
 800aea4:	20019708 	.word	0x20019708

0800aea8 <__sfputc_r>:
 800aea8:	6893      	ldr	r3, [r2, #8]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	b410      	push	{r4}
 800aeb0:	6093      	str	r3, [r2, #8]
 800aeb2:	da08      	bge.n	800aec6 <__sfputc_r+0x1e>
 800aeb4:	6994      	ldr	r4, [r2, #24]
 800aeb6:	42a3      	cmp	r3, r4
 800aeb8:	db01      	blt.n	800aebe <__sfputc_r+0x16>
 800aeba:	290a      	cmp	r1, #10
 800aebc:	d103      	bne.n	800aec6 <__sfputc_r+0x1e>
 800aebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aec2:	f7ff bde8 	b.w	800aa96 <__swbuf_r>
 800aec6:	6813      	ldr	r3, [r2, #0]
 800aec8:	1c58      	adds	r0, r3, #1
 800aeca:	6010      	str	r0, [r2, #0]
 800aecc:	7019      	strb	r1, [r3, #0]
 800aece:	4608      	mov	r0, r1
 800aed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <__sfputs_r>:
 800aed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed8:	4606      	mov	r6, r0
 800aeda:	460f      	mov	r7, r1
 800aedc:	4614      	mov	r4, r2
 800aede:	18d5      	adds	r5, r2, r3
 800aee0:	42ac      	cmp	r4, r5
 800aee2:	d101      	bne.n	800aee8 <__sfputs_r+0x12>
 800aee4:	2000      	movs	r0, #0
 800aee6:	e007      	b.n	800aef8 <__sfputs_r+0x22>
 800aee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeec:	463a      	mov	r2, r7
 800aeee:	4630      	mov	r0, r6
 800aef0:	f7ff ffda 	bl	800aea8 <__sfputc_r>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d1f3      	bne.n	800aee0 <__sfputs_r+0xa>
 800aef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aefc <_vfiprintf_r>:
 800aefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	460d      	mov	r5, r1
 800af02:	b09d      	sub	sp, #116	@ 0x74
 800af04:	4614      	mov	r4, r2
 800af06:	4698      	mov	r8, r3
 800af08:	4606      	mov	r6, r0
 800af0a:	b118      	cbz	r0, 800af14 <_vfiprintf_r+0x18>
 800af0c:	6a03      	ldr	r3, [r0, #32]
 800af0e:	b90b      	cbnz	r3, 800af14 <_vfiprintf_r+0x18>
 800af10:	f7ff fcd8 	bl	800a8c4 <__sinit>
 800af14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af16:	07d9      	lsls	r1, r3, #31
 800af18:	d405      	bmi.n	800af26 <_vfiprintf_r+0x2a>
 800af1a:	89ab      	ldrh	r3, [r5, #12]
 800af1c:	059a      	lsls	r2, r3, #22
 800af1e:	d402      	bmi.n	800af26 <_vfiprintf_r+0x2a>
 800af20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af22:	f7ff fec6 	bl	800acb2 <__retarget_lock_acquire_recursive>
 800af26:	89ab      	ldrh	r3, [r5, #12]
 800af28:	071b      	lsls	r3, r3, #28
 800af2a:	d501      	bpl.n	800af30 <_vfiprintf_r+0x34>
 800af2c:	692b      	ldr	r3, [r5, #16]
 800af2e:	b99b      	cbnz	r3, 800af58 <_vfiprintf_r+0x5c>
 800af30:	4629      	mov	r1, r5
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff fdee 	bl	800ab14 <__swsetup_r>
 800af38:	b170      	cbz	r0, 800af58 <_vfiprintf_r+0x5c>
 800af3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af3c:	07dc      	lsls	r4, r3, #31
 800af3e:	d504      	bpl.n	800af4a <_vfiprintf_r+0x4e>
 800af40:	f04f 30ff 	mov.w	r0, #4294967295
 800af44:	b01d      	add	sp, #116	@ 0x74
 800af46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4a:	89ab      	ldrh	r3, [r5, #12]
 800af4c:	0598      	lsls	r0, r3, #22
 800af4e:	d4f7      	bmi.n	800af40 <_vfiprintf_r+0x44>
 800af50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af52:	f7ff feaf 	bl	800acb4 <__retarget_lock_release_recursive>
 800af56:	e7f3      	b.n	800af40 <_vfiprintf_r+0x44>
 800af58:	2300      	movs	r3, #0
 800af5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af5c:	2320      	movs	r3, #32
 800af5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af62:	f8cd 800c 	str.w	r8, [sp, #12]
 800af66:	2330      	movs	r3, #48	@ 0x30
 800af68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b118 <_vfiprintf_r+0x21c>
 800af6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af70:	f04f 0901 	mov.w	r9, #1
 800af74:	4623      	mov	r3, r4
 800af76:	469a      	mov	sl, r3
 800af78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7c:	b10a      	cbz	r2, 800af82 <_vfiprintf_r+0x86>
 800af7e:	2a25      	cmp	r2, #37	@ 0x25
 800af80:	d1f9      	bne.n	800af76 <_vfiprintf_r+0x7a>
 800af82:	ebba 0b04 	subs.w	fp, sl, r4
 800af86:	d00b      	beq.n	800afa0 <_vfiprintf_r+0xa4>
 800af88:	465b      	mov	r3, fp
 800af8a:	4622      	mov	r2, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	4630      	mov	r0, r6
 800af90:	f7ff ffa1 	bl	800aed6 <__sfputs_r>
 800af94:	3001      	adds	r0, #1
 800af96:	f000 80a7 	beq.w	800b0e8 <_vfiprintf_r+0x1ec>
 800af9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af9c:	445a      	add	r2, fp
 800af9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800afa0:	f89a 3000 	ldrb.w	r3, [sl]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 809f 	beq.w	800b0e8 <_vfiprintf_r+0x1ec>
 800afaa:	2300      	movs	r3, #0
 800afac:	f04f 32ff 	mov.w	r2, #4294967295
 800afb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb4:	f10a 0a01 	add.w	sl, sl, #1
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	9307      	str	r3, [sp, #28]
 800afbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800afc2:	4654      	mov	r4, sl
 800afc4:	2205      	movs	r2, #5
 800afc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afca:	4853      	ldr	r0, [pc, #332]	@ (800b118 <_vfiprintf_r+0x21c>)
 800afcc:	f7f5 f900 	bl	80001d0 <memchr>
 800afd0:	9a04      	ldr	r2, [sp, #16]
 800afd2:	b9d8      	cbnz	r0, 800b00c <_vfiprintf_r+0x110>
 800afd4:	06d1      	lsls	r1, r2, #27
 800afd6:	bf44      	itt	mi
 800afd8:	2320      	movmi	r3, #32
 800afda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afde:	0713      	lsls	r3, r2, #28
 800afe0:	bf44      	itt	mi
 800afe2:	232b      	movmi	r3, #43	@ 0x2b
 800afe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afe8:	f89a 3000 	ldrb.w	r3, [sl]
 800afec:	2b2a      	cmp	r3, #42	@ 0x2a
 800afee:	d015      	beq.n	800b01c <_vfiprintf_r+0x120>
 800aff0:	9a07      	ldr	r2, [sp, #28]
 800aff2:	4654      	mov	r4, sl
 800aff4:	2000      	movs	r0, #0
 800aff6:	f04f 0c0a 	mov.w	ip, #10
 800affa:	4621      	mov	r1, r4
 800affc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b000:	3b30      	subs	r3, #48	@ 0x30
 800b002:	2b09      	cmp	r3, #9
 800b004:	d94b      	bls.n	800b09e <_vfiprintf_r+0x1a2>
 800b006:	b1b0      	cbz	r0, 800b036 <_vfiprintf_r+0x13a>
 800b008:	9207      	str	r2, [sp, #28]
 800b00a:	e014      	b.n	800b036 <_vfiprintf_r+0x13a>
 800b00c:	eba0 0308 	sub.w	r3, r0, r8
 800b010:	fa09 f303 	lsl.w	r3, r9, r3
 800b014:	4313      	orrs	r3, r2
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	46a2      	mov	sl, r4
 800b01a:	e7d2      	b.n	800afc2 <_vfiprintf_r+0xc6>
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	1d19      	adds	r1, r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	9103      	str	r1, [sp, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	bfbb      	ittet	lt
 800b028:	425b      	neglt	r3, r3
 800b02a:	f042 0202 	orrlt.w	r2, r2, #2
 800b02e:	9307      	strge	r3, [sp, #28]
 800b030:	9307      	strlt	r3, [sp, #28]
 800b032:	bfb8      	it	lt
 800b034:	9204      	strlt	r2, [sp, #16]
 800b036:	7823      	ldrb	r3, [r4, #0]
 800b038:	2b2e      	cmp	r3, #46	@ 0x2e
 800b03a:	d10a      	bne.n	800b052 <_vfiprintf_r+0x156>
 800b03c:	7863      	ldrb	r3, [r4, #1]
 800b03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b040:	d132      	bne.n	800b0a8 <_vfiprintf_r+0x1ac>
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	1d1a      	adds	r2, r3, #4
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	9203      	str	r2, [sp, #12]
 800b04a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b04e:	3402      	adds	r4, #2
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b128 <_vfiprintf_r+0x22c>
 800b056:	7821      	ldrb	r1, [r4, #0]
 800b058:	2203      	movs	r2, #3
 800b05a:	4650      	mov	r0, sl
 800b05c:	f7f5 f8b8 	bl	80001d0 <memchr>
 800b060:	b138      	cbz	r0, 800b072 <_vfiprintf_r+0x176>
 800b062:	9b04      	ldr	r3, [sp, #16]
 800b064:	eba0 000a 	sub.w	r0, r0, sl
 800b068:	2240      	movs	r2, #64	@ 0x40
 800b06a:	4082      	lsls	r2, r0
 800b06c:	4313      	orrs	r3, r2
 800b06e:	3401      	adds	r4, #1
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b076:	4829      	ldr	r0, [pc, #164]	@ (800b11c <_vfiprintf_r+0x220>)
 800b078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b07c:	2206      	movs	r2, #6
 800b07e:	f7f5 f8a7 	bl	80001d0 <memchr>
 800b082:	2800      	cmp	r0, #0
 800b084:	d03f      	beq.n	800b106 <_vfiprintf_r+0x20a>
 800b086:	4b26      	ldr	r3, [pc, #152]	@ (800b120 <_vfiprintf_r+0x224>)
 800b088:	bb1b      	cbnz	r3, 800b0d2 <_vfiprintf_r+0x1d6>
 800b08a:	9b03      	ldr	r3, [sp, #12]
 800b08c:	3307      	adds	r3, #7
 800b08e:	f023 0307 	bic.w	r3, r3, #7
 800b092:	3308      	adds	r3, #8
 800b094:	9303      	str	r3, [sp, #12]
 800b096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b098:	443b      	add	r3, r7
 800b09a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09c:	e76a      	b.n	800af74 <_vfiprintf_r+0x78>
 800b09e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	e7a8      	b.n	800affa <_vfiprintf_r+0xfe>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	3401      	adds	r4, #1
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	f04f 0c0a 	mov.w	ip, #10
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ba:	3a30      	subs	r2, #48	@ 0x30
 800b0bc:	2a09      	cmp	r2, #9
 800b0be:	d903      	bls.n	800b0c8 <_vfiprintf_r+0x1cc>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d0c6      	beq.n	800b052 <_vfiprintf_r+0x156>
 800b0c4:	9105      	str	r1, [sp, #20]
 800b0c6:	e7c4      	b.n	800b052 <_vfiprintf_r+0x156>
 800b0c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e7f0      	b.n	800b0b4 <_vfiprintf_r+0x1b8>
 800b0d2:	ab03      	add	r3, sp, #12
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	4b12      	ldr	r3, [pc, #72]	@ (800b124 <_vfiprintf_r+0x228>)
 800b0da:	a904      	add	r1, sp, #16
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f3af 8000 	nop.w
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	1c78      	adds	r0, r7, #1
 800b0e6:	d1d6      	bne.n	800b096 <_vfiprintf_r+0x19a>
 800b0e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0ea:	07d9      	lsls	r1, r3, #31
 800b0ec:	d405      	bmi.n	800b0fa <_vfiprintf_r+0x1fe>
 800b0ee:	89ab      	ldrh	r3, [r5, #12]
 800b0f0:	059a      	lsls	r2, r3, #22
 800b0f2:	d402      	bmi.n	800b0fa <_vfiprintf_r+0x1fe>
 800b0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0f6:	f7ff fddd 	bl	800acb4 <__retarget_lock_release_recursive>
 800b0fa:	89ab      	ldrh	r3, [r5, #12]
 800b0fc:	065b      	lsls	r3, r3, #25
 800b0fe:	f53f af1f 	bmi.w	800af40 <_vfiprintf_r+0x44>
 800b102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b104:	e71e      	b.n	800af44 <_vfiprintf_r+0x48>
 800b106:	ab03      	add	r3, sp, #12
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	462a      	mov	r2, r5
 800b10c:	4b05      	ldr	r3, [pc, #20]	@ (800b124 <_vfiprintf_r+0x228>)
 800b10e:	a904      	add	r1, sp, #16
 800b110:	4630      	mov	r0, r6
 800b112:	f000 f879 	bl	800b208 <_printf_i>
 800b116:	e7e4      	b.n	800b0e2 <_vfiprintf_r+0x1e6>
 800b118:	0800c21c 	.word	0x0800c21c
 800b11c:	0800c226 	.word	0x0800c226
 800b120:	00000000 	.word	0x00000000
 800b124:	0800aed7 	.word	0x0800aed7
 800b128:	0800c222 	.word	0x0800c222

0800b12c <_printf_common>:
 800b12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b130:	4616      	mov	r6, r2
 800b132:	4698      	mov	r8, r3
 800b134:	688a      	ldr	r2, [r1, #8]
 800b136:	690b      	ldr	r3, [r1, #16]
 800b138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b13c:	4293      	cmp	r3, r2
 800b13e:	bfb8      	it	lt
 800b140:	4613      	movlt	r3, r2
 800b142:	6033      	str	r3, [r6, #0]
 800b144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b148:	4607      	mov	r7, r0
 800b14a:	460c      	mov	r4, r1
 800b14c:	b10a      	cbz	r2, 800b152 <_printf_common+0x26>
 800b14e:	3301      	adds	r3, #1
 800b150:	6033      	str	r3, [r6, #0]
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	0699      	lsls	r1, r3, #26
 800b156:	bf42      	ittt	mi
 800b158:	6833      	ldrmi	r3, [r6, #0]
 800b15a:	3302      	addmi	r3, #2
 800b15c:	6033      	strmi	r3, [r6, #0]
 800b15e:	6825      	ldr	r5, [r4, #0]
 800b160:	f015 0506 	ands.w	r5, r5, #6
 800b164:	d106      	bne.n	800b174 <_printf_common+0x48>
 800b166:	f104 0a19 	add.w	sl, r4, #25
 800b16a:	68e3      	ldr	r3, [r4, #12]
 800b16c:	6832      	ldr	r2, [r6, #0]
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	42ab      	cmp	r3, r5
 800b172:	dc26      	bgt.n	800b1c2 <_printf_common+0x96>
 800b174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b178:	6822      	ldr	r2, [r4, #0]
 800b17a:	3b00      	subs	r3, #0
 800b17c:	bf18      	it	ne
 800b17e:	2301      	movne	r3, #1
 800b180:	0692      	lsls	r2, r2, #26
 800b182:	d42b      	bmi.n	800b1dc <_printf_common+0xb0>
 800b184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b188:	4641      	mov	r1, r8
 800b18a:	4638      	mov	r0, r7
 800b18c:	47c8      	blx	r9
 800b18e:	3001      	adds	r0, #1
 800b190:	d01e      	beq.n	800b1d0 <_printf_common+0xa4>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	6922      	ldr	r2, [r4, #16]
 800b196:	f003 0306 	and.w	r3, r3, #6
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	bf02      	ittt	eq
 800b19e:	68e5      	ldreq	r5, [r4, #12]
 800b1a0:	6833      	ldreq	r3, [r6, #0]
 800b1a2:	1aed      	subeq	r5, r5, r3
 800b1a4:	68a3      	ldr	r3, [r4, #8]
 800b1a6:	bf0c      	ite	eq
 800b1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1ac:	2500      	movne	r5, #0
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	bfc4      	itt	gt
 800b1b2:	1a9b      	subgt	r3, r3, r2
 800b1b4:	18ed      	addgt	r5, r5, r3
 800b1b6:	2600      	movs	r6, #0
 800b1b8:	341a      	adds	r4, #26
 800b1ba:	42b5      	cmp	r5, r6
 800b1bc:	d11a      	bne.n	800b1f4 <_printf_common+0xc8>
 800b1be:	2000      	movs	r0, #0
 800b1c0:	e008      	b.n	800b1d4 <_printf_common+0xa8>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	4641      	mov	r1, r8
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	47c8      	blx	r9
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d103      	bne.n	800b1d8 <_printf_common+0xac>
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d8:	3501      	adds	r5, #1
 800b1da:	e7c6      	b.n	800b16a <_printf_common+0x3e>
 800b1dc:	18e1      	adds	r1, r4, r3
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	2030      	movs	r0, #48	@ 0x30
 800b1e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1e6:	4422      	add	r2, r4
 800b1e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	e7c7      	b.n	800b184 <_printf_common+0x58>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	47c8      	blx	r9
 800b1fe:	3001      	adds	r0, #1
 800b200:	d0e6      	beq.n	800b1d0 <_printf_common+0xa4>
 800b202:	3601      	adds	r6, #1
 800b204:	e7d9      	b.n	800b1ba <_printf_common+0x8e>
	...

0800b208 <_printf_i>:
 800b208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b20c:	7e0f      	ldrb	r7, [r1, #24]
 800b20e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b210:	2f78      	cmp	r7, #120	@ 0x78
 800b212:	4691      	mov	r9, r2
 800b214:	4680      	mov	r8, r0
 800b216:	460c      	mov	r4, r1
 800b218:	469a      	mov	sl, r3
 800b21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b21e:	d807      	bhi.n	800b230 <_printf_i+0x28>
 800b220:	2f62      	cmp	r7, #98	@ 0x62
 800b222:	d80a      	bhi.n	800b23a <_printf_i+0x32>
 800b224:	2f00      	cmp	r7, #0
 800b226:	f000 80d1 	beq.w	800b3cc <_printf_i+0x1c4>
 800b22a:	2f58      	cmp	r7, #88	@ 0x58
 800b22c:	f000 80b8 	beq.w	800b3a0 <_printf_i+0x198>
 800b230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b238:	e03a      	b.n	800b2b0 <_printf_i+0xa8>
 800b23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b23e:	2b15      	cmp	r3, #21
 800b240:	d8f6      	bhi.n	800b230 <_printf_i+0x28>
 800b242:	a101      	add	r1, pc, #4	@ (adr r1, 800b248 <_printf_i+0x40>)
 800b244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b248:	0800b2a1 	.word	0x0800b2a1
 800b24c:	0800b2b5 	.word	0x0800b2b5
 800b250:	0800b231 	.word	0x0800b231
 800b254:	0800b231 	.word	0x0800b231
 800b258:	0800b231 	.word	0x0800b231
 800b25c:	0800b231 	.word	0x0800b231
 800b260:	0800b2b5 	.word	0x0800b2b5
 800b264:	0800b231 	.word	0x0800b231
 800b268:	0800b231 	.word	0x0800b231
 800b26c:	0800b231 	.word	0x0800b231
 800b270:	0800b231 	.word	0x0800b231
 800b274:	0800b3b3 	.word	0x0800b3b3
 800b278:	0800b2df 	.word	0x0800b2df
 800b27c:	0800b36d 	.word	0x0800b36d
 800b280:	0800b231 	.word	0x0800b231
 800b284:	0800b231 	.word	0x0800b231
 800b288:	0800b3d5 	.word	0x0800b3d5
 800b28c:	0800b231 	.word	0x0800b231
 800b290:	0800b2df 	.word	0x0800b2df
 800b294:	0800b231 	.word	0x0800b231
 800b298:	0800b231 	.word	0x0800b231
 800b29c:	0800b375 	.word	0x0800b375
 800b2a0:	6833      	ldr	r3, [r6, #0]
 800b2a2:	1d1a      	adds	r2, r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6032      	str	r2, [r6, #0]
 800b2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e09c      	b.n	800b3ee <_printf_i+0x1e6>
 800b2b4:	6833      	ldr	r3, [r6, #0]
 800b2b6:	6820      	ldr	r0, [r4, #0]
 800b2b8:	1d19      	adds	r1, r3, #4
 800b2ba:	6031      	str	r1, [r6, #0]
 800b2bc:	0606      	lsls	r6, r0, #24
 800b2be:	d501      	bpl.n	800b2c4 <_printf_i+0xbc>
 800b2c0:	681d      	ldr	r5, [r3, #0]
 800b2c2:	e003      	b.n	800b2cc <_printf_i+0xc4>
 800b2c4:	0645      	lsls	r5, r0, #25
 800b2c6:	d5fb      	bpl.n	800b2c0 <_printf_i+0xb8>
 800b2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	da03      	bge.n	800b2d8 <_printf_i+0xd0>
 800b2d0:	232d      	movs	r3, #45	@ 0x2d
 800b2d2:	426d      	negs	r5, r5
 800b2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2d8:	4858      	ldr	r0, [pc, #352]	@ (800b43c <_printf_i+0x234>)
 800b2da:	230a      	movs	r3, #10
 800b2dc:	e011      	b.n	800b302 <_printf_i+0xfa>
 800b2de:	6821      	ldr	r1, [r4, #0]
 800b2e0:	6833      	ldr	r3, [r6, #0]
 800b2e2:	0608      	lsls	r0, r1, #24
 800b2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2e8:	d402      	bmi.n	800b2f0 <_printf_i+0xe8>
 800b2ea:	0649      	lsls	r1, r1, #25
 800b2ec:	bf48      	it	mi
 800b2ee:	b2ad      	uxthmi	r5, r5
 800b2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2f2:	4852      	ldr	r0, [pc, #328]	@ (800b43c <_printf_i+0x234>)
 800b2f4:	6033      	str	r3, [r6, #0]
 800b2f6:	bf14      	ite	ne
 800b2f8:	230a      	movne	r3, #10
 800b2fa:	2308      	moveq	r3, #8
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b302:	6866      	ldr	r6, [r4, #4]
 800b304:	60a6      	str	r6, [r4, #8]
 800b306:	2e00      	cmp	r6, #0
 800b308:	db05      	blt.n	800b316 <_printf_i+0x10e>
 800b30a:	6821      	ldr	r1, [r4, #0]
 800b30c:	432e      	orrs	r6, r5
 800b30e:	f021 0104 	bic.w	r1, r1, #4
 800b312:	6021      	str	r1, [r4, #0]
 800b314:	d04b      	beq.n	800b3ae <_printf_i+0x1a6>
 800b316:	4616      	mov	r6, r2
 800b318:	fbb5 f1f3 	udiv	r1, r5, r3
 800b31c:	fb03 5711 	mls	r7, r3, r1, r5
 800b320:	5dc7      	ldrb	r7, [r0, r7]
 800b322:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b326:	462f      	mov	r7, r5
 800b328:	42bb      	cmp	r3, r7
 800b32a:	460d      	mov	r5, r1
 800b32c:	d9f4      	bls.n	800b318 <_printf_i+0x110>
 800b32e:	2b08      	cmp	r3, #8
 800b330:	d10b      	bne.n	800b34a <_printf_i+0x142>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	07df      	lsls	r7, r3, #31
 800b336:	d508      	bpl.n	800b34a <_printf_i+0x142>
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	6861      	ldr	r1, [r4, #4]
 800b33c:	4299      	cmp	r1, r3
 800b33e:	bfde      	ittt	le
 800b340:	2330      	movle	r3, #48	@ 0x30
 800b342:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b346:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b34a:	1b92      	subs	r2, r2, r6
 800b34c:	6122      	str	r2, [r4, #16]
 800b34e:	f8cd a000 	str.w	sl, [sp]
 800b352:	464b      	mov	r3, r9
 800b354:	aa03      	add	r2, sp, #12
 800b356:	4621      	mov	r1, r4
 800b358:	4640      	mov	r0, r8
 800b35a:	f7ff fee7 	bl	800b12c <_printf_common>
 800b35e:	3001      	adds	r0, #1
 800b360:	d14a      	bne.n	800b3f8 <_printf_i+0x1f0>
 800b362:	f04f 30ff 	mov.w	r0, #4294967295
 800b366:	b004      	add	sp, #16
 800b368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	f043 0320 	orr.w	r3, r3, #32
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	4832      	ldr	r0, [pc, #200]	@ (800b440 <_printf_i+0x238>)
 800b376:	2778      	movs	r7, #120	@ 0x78
 800b378:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	6831      	ldr	r1, [r6, #0]
 800b380:	061f      	lsls	r7, r3, #24
 800b382:	f851 5b04 	ldr.w	r5, [r1], #4
 800b386:	d402      	bmi.n	800b38e <_printf_i+0x186>
 800b388:	065f      	lsls	r7, r3, #25
 800b38a:	bf48      	it	mi
 800b38c:	b2ad      	uxthmi	r5, r5
 800b38e:	6031      	str	r1, [r6, #0]
 800b390:	07d9      	lsls	r1, r3, #31
 800b392:	bf44      	itt	mi
 800b394:	f043 0320 	orrmi.w	r3, r3, #32
 800b398:	6023      	strmi	r3, [r4, #0]
 800b39a:	b11d      	cbz	r5, 800b3a4 <_printf_i+0x19c>
 800b39c:	2310      	movs	r3, #16
 800b39e:	e7ad      	b.n	800b2fc <_printf_i+0xf4>
 800b3a0:	4826      	ldr	r0, [pc, #152]	@ (800b43c <_printf_i+0x234>)
 800b3a2:	e7e9      	b.n	800b378 <_printf_i+0x170>
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	f023 0320 	bic.w	r3, r3, #32
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	e7f6      	b.n	800b39c <_printf_i+0x194>
 800b3ae:	4616      	mov	r6, r2
 800b3b0:	e7bd      	b.n	800b32e <_printf_i+0x126>
 800b3b2:	6833      	ldr	r3, [r6, #0]
 800b3b4:	6825      	ldr	r5, [r4, #0]
 800b3b6:	6961      	ldr	r1, [r4, #20]
 800b3b8:	1d18      	adds	r0, r3, #4
 800b3ba:	6030      	str	r0, [r6, #0]
 800b3bc:	062e      	lsls	r6, r5, #24
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	d501      	bpl.n	800b3c6 <_printf_i+0x1be>
 800b3c2:	6019      	str	r1, [r3, #0]
 800b3c4:	e002      	b.n	800b3cc <_printf_i+0x1c4>
 800b3c6:	0668      	lsls	r0, r5, #25
 800b3c8:	d5fb      	bpl.n	800b3c2 <_printf_i+0x1ba>
 800b3ca:	8019      	strh	r1, [r3, #0]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	6123      	str	r3, [r4, #16]
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	e7bc      	b.n	800b34e <_printf_i+0x146>
 800b3d4:	6833      	ldr	r3, [r6, #0]
 800b3d6:	1d1a      	adds	r2, r3, #4
 800b3d8:	6032      	str	r2, [r6, #0]
 800b3da:	681e      	ldr	r6, [r3, #0]
 800b3dc:	6862      	ldr	r2, [r4, #4]
 800b3de:	2100      	movs	r1, #0
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7f4 fef5 	bl	80001d0 <memchr>
 800b3e6:	b108      	cbz	r0, 800b3ec <_printf_i+0x1e4>
 800b3e8:	1b80      	subs	r0, r0, r6
 800b3ea:	6060      	str	r0, [r4, #4]
 800b3ec:	6863      	ldr	r3, [r4, #4]
 800b3ee:	6123      	str	r3, [r4, #16]
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3f6:	e7aa      	b.n	800b34e <_printf_i+0x146>
 800b3f8:	6923      	ldr	r3, [r4, #16]
 800b3fa:	4632      	mov	r2, r6
 800b3fc:	4649      	mov	r1, r9
 800b3fe:	4640      	mov	r0, r8
 800b400:	47d0      	blx	sl
 800b402:	3001      	adds	r0, #1
 800b404:	d0ad      	beq.n	800b362 <_printf_i+0x15a>
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	079b      	lsls	r3, r3, #30
 800b40a:	d413      	bmi.n	800b434 <_printf_i+0x22c>
 800b40c:	68e0      	ldr	r0, [r4, #12]
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	4298      	cmp	r0, r3
 800b412:	bfb8      	it	lt
 800b414:	4618      	movlt	r0, r3
 800b416:	e7a6      	b.n	800b366 <_printf_i+0x15e>
 800b418:	2301      	movs	r3, #1
 800b41a:	4632      	mov	r2, r6
 800b41c:	4649      	mov	r1, r9
 800b41e:	4640      	mov	r0, r8
 800b420:	47d0      	blx	sl
 800b422:	3001      	adds	r0, #1
 800b424:	d09d      	beq.n	800b362 <_printf_i+0x15a>
 800b426:	3501      	adds	r5, #1
 800b428:	68e3      	ldr	r3, [r4, #12]
 800b42a:	9903      	ldr	r1, [sp, #12]
 800b42c:	1a5b      	subs	r3, r3, r1
 800b42e:	42ab      	cmp	r3, r5
 800b430:	dcf2      	bgt.n	800b418 <_printf_i+0x210>
 800b432:	e7eb      	b.n	800b40c <_printf_i+0x204>
 800b434:	2500      	movs	r5, #0
 800b436:	f104 0619 	add.w	r6, r4, #25
 800b43a:	e7f5      	b.n	800b428 <_printf_i+0x220>
 800b43c:	0800c22d 	.word	0x0800c22d
 800b440:	0800c23e 	.word	0x0800c23e

0800b444 <__sflush_r>:
 800b444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44c:	0716      	lsls	r6, r2, #28
 800b44e:	4605      	mov	r5, r0
 800b450:	460c      	mov	r4, r1
 800b452:	d454      	bmi.n	800b4fe <__sflush_r+0xba>
 800b454:	684b      	ldr	r3, [r1, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	dc02      	bgt.n	800b460 <__sflush_r+0x1c>
 800b45a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dd48      	ble.n	800b4f2 <__sflush_r+0xae>
 800b460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b462:	2e00      	cmp	r6, #0
 800b464:	d045      	beq.n	800b4f2 <__sflush_r+0xae>
 800b466:	2300      	movs	r3, #0
 800b468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b46c:	682f      	ldr	r7, [r5, #0]
 800b46e:	6a21      	ldr	r1, [r4, #32]
 800b470:	602b      	str	r3, [r5, #0]
 800b472:	d030      	beq.n	800b4d6 <__sflush_r+0x92>
 800b474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	0759      	lsls	r1, r3, #29
 800b47a:	d505      	bpl.n	800b488 <__sflush_r+0x44>
 800b47c:	6863      	ldr	r3, [r4, #4]
 800b47e:	1ad2      	subs	r2, r2, r3
 800b480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b482:	b10b      	cbz	r3, 800b488 <__sflush_r+0x44>
 800b484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b486:	1ad2      	subs	r2, r2, r3
 800b488:	2300      	movs	r3, #0
 800b48a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b48c:	6a21      	ldr	r1, [r4, #32]
 800b48e:	4628      	mov	r0, r5
 800b490:	47b0      	blx	r6
 800b492:	1c43      	adds	r3, r0, #1
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	d106      	bne.n	800b4a6 <__sflush_r+0x62>
 800b498:	6829      	ldr	r1, [r5, #0]
 800b49a:	291d      	cmp	r1, #29
 800b49c:	d82b      	bhi.n	800b4f6 <__sflush_r+0xb2>
 800b49e:	4a2a      	ldr	r2, [pc, #168]	@ (800b548 <__sflush_r+0x104>)
 800b4a0:	40ca      	lsrs	r2, r1
 800b4a2:	07d6      	lsls	r6, r2, #31
 800b4a4:	d527      	bpl.n	800b4f6 <__sflush_r+0xb2>
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	6062      	str	r2, [r4, #4]
 800b4aa:	04d9      	lsls	r1, r3, #19
 800b4ac:	6922      	ldr	r2, [r4, #16]
 800b4ae:	6022      	str	r2, [r4, #0]
 800b4b0:	d504      	bpl.n	800b4bc <__sflush_r+0x78>
 800b4b2:	1c42      	adds	r2, r0, #1
 800b4b4:	d101      	bne.n	800b4ba <__sflush_r+0x76>
 800b4b6:	682b      	ldr	r3, [r5, #0]
 800b4b8:	b903      	cbnz	r3, 800b4bc <__sflush_r+0x78>
 800b4ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4be:	602f      	str	r7, [r5, #0]
 800b4c0:	b1b9      	cbz	r1, 800b4f2 <__sflush_r+0xae>
 800b4c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4c6:	4299      	cmp	r1, r3
 800b4c8:	d002      	beq.n	800b4d0 <__sflush_r+0x8c>
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f7ff fbf4 	bl	800acb8 <_free_r>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4d4:	e00d      	b.n	800b4f2 <__sflush_r+0xae>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	4628      	mov	r0, r5
 800b4da:	47b0      	blx	r6
 800b4dc:	4602      	mov	r2, r0
 800b4de:	1c50      	adds	r0, r2, #1
 800b4e0:	d1c9      	bne.n	800b476 <__sflush_r+0x32>
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d0c6      	beq.n	800b476 <__sflush_r+0x32>
 800b4e8:	2b1d      	cmp	r3, #29
 800b4ea:	d001      	beq.n	800b4f0 <__sflush_r+0xac>
 800b4ec:	2b16      	cmp	r3, #22
 800b4ee:	d11e      	bne.n	800b52e <__sflush_r+0xea>
 800b4f0:	602f      	str	r7, [r5, #0]
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e022      	b.n	800b53c <__sflush_r+0xf8>
 800b4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4fa:	b21b      	sxth	r3, r3
 800b4fc:	e01b      	b.n	800b536 <__sflush_r+0xf2>
 800b4fe:	690f      	ldr	r7, [r1, #16]
 800b500:	2f00      	cmp	r7, #0
 800b502:	d0f6      	beq.n	800b4f2 <__sflush_r+0xae>
 800b504:	0793      	lsls	r3, r2, #30
 800b506:	680e      	ldr	r6, [r1, #0]
 800b508:	bf08      	it	eq
 800b50a:	694b      	ldreq	r3, [r1, #20]
 800b50c:	600f      	str	r7, [r1, #0]
 800b50e:	bf18      	it	ne
 800b510:	2300      	movne	r3, #0
 800b512:	eba6 0807 	sub.w	r8, r6, r7
 800b516:	608b      	str	r3, [r1, #8]
 800b518:	f1b8 0f00 	cmp.w	r8, #0
 800b51c:	dde9      	ble.n	800b4f2 <__sflush_r+0xae>
 800b51e:	6a21      	ldr	r1, [r4, #32]
 800b520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b522:	4643      	mov	r3, r8
 800b524:	463a      	mov	r2, r7
 800b526:	4628      	mov	r0, r5
 800b528:	47b0      	blx	r6
 800b52a:	2800      	cmp	r0, #0
 800b52c:	dc08      	bgt.n	800b540 <__sflush_r+0xfc>
 800b52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b536:	81a3      	strh	r3, [r4, #12]
 800b538:	f04f 30ff 	mov.w	r0, #4294967295
 800b53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b540:	4407      	add	r7, r0
 800b542:	eba8 0800 	sub.w	r8, r8, r0
 800b546:	e7e7      	b.n	800b518 <__sflush_r+0xd4>
 800b548:	20400001 	.word	0x20400001

0800b54c <_fflush_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	690b      	ldr	r3, [r1, #16]
 800b550:	4605      	mov	r5, r0
 800b552:	460c      	mov	r4, r1
 800b554:	b913      	cbnz	r3, 800b55c <_fflush_r+0x10>
 800b556:	2500      	movs	r5, #0
 800b558:	4628      	mov	r0, r5
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	b118      	cbz	r0, 800b566 <_fflush_r+0x1a>
 800b55e:	6a03      	ldr	r3, [r0, #32]
 800b560:	b90b      	cbnz	r3, 800b566 <_fflush_r+0x1a>
 800b562:	f7ff f9af 	bl	800a8c4 <__sinit>
 800b566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0f3      	beq.n	800b556 <_fflush_r+0xa>
 800b56e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b570:	07d0      	lsls	r0, r2, #31
 800b572:	d404      	bmi.n	800b57e <_fflush_r+0x32>
 800b574:	0599      	lsls	r1, r3, #22
 800b576:	d402      	bmi.n	800b57e <_fflush_r+0x32>
 800b578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b57a:	f7ff fb9a 	bl	800acb2 <__retarget_lock_acquire_recursive>
 800b57e:	4628      	mov	r0, r5
 800b580:	4621      	mov	r1, r4
 800b582:	f7ff ff5f 	bl	800b444 <__sflush_r>
 800b586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b588:	07da      	lsls	r2, r3, #31
 800b58a:	4605      	mov	r5, r0
 800b58c:	d4e4      	bmi.n	800b558 <_fflush_r+0xc>
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	059b      	lsls	r3, r3, #22
 800b592:	d4e1      	bmi.n	800b558 <_fflush_r+0xc>
 800b594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b596:	f7ff fb8d 	bl	800acb4 <__retarget_lock_release_recursive>
 800b59a:	e7dd      	b.n	800b558 <_fflush_r+0xc>

0800b59c <__swhatbuf_r>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	460c      	mov	r4, r1
 800b5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a4:	2900      	cmp	r1, #0
 800b5a6:	b096      	sub	sp, #88	@ 0x58
 800b5a8:	4615      	mov	r5, r2
 800b5aa:	461e      	mov	r6, r3
 800b5ac:	da0d      	bge.n	800b5ca <__swhatbuf_r+0x2e>
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5b4:	f04f 0100 	mov.w	r1, #0
 800b5b8:	bf14      	ite	ne
 800b5ba:	2340      	movne	r3, #64	@ 0x40
 800b5bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	6031      	str	r1, [r6, #0]
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	b016      	add	sp, #88	@ 0x58
 800b5c8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ca:	466a      	mov	r2, sp
 800b5cc:	f000 f848 	bl	800b660 <_fstat_r>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	dbec      	blt.n	800b5ae <__swhatbuf_r+0x12>
 800b5d4:	9901      	ldr	r1, [sp, #4]
 800b5d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5de:	4259      	negs	r1, r3
 800b5e0:	4159      	adcs	r1, r3
 800b5e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5e6:	e7eb      	b.n	800b5c0 <__swhatbuf_r+0x24>

0800b5e8 <__smakebuf_r>:
 800b5e8:	898b      	ldrh	r3, [r1, #12]
 800b5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5ec:	079d      	lsls	r5, r3, #30
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	d507      	bpl.n	800b604 <__smakebuf_r+0x1c>
 800b5f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	6163      	str	r3, [r4, #20]
 800b600:	b003      	add	sp, #12
 800b602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b604:	ab01      	add	r3, sp, #4
 800b606:	466a      	mov	r2, sp
 800b608:	f7ff ffc8 	bl	800b59c <__swhatbuf_r>
 800b60c:	9f00      	ldr	r7, [sp, #0]
 800b60e:	4605      	mov	r5, r0
 800b610:	4639      	mov	r1, r7
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff fbbc 	bl	800ad90 <_malloc_r>
 800b618:	b948      	cbnz	r0, 800b62e <__smakebuf_r+0x46>
 800b61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b61e:	059a      	lsls	r2, r3, #22
 800b620:	d4ee      	bmi.n	800b600 <__smakebuf_r+0x18>
 800b622:	f023 0303 	bic.w	r3, r3, #3
 800b626:	f043 0302 	orr.w	r3, r3, #2
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	e7e2      	b.n	800b5f4 <__smakebuf_r+0xc>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	6020      	str	r0, [r4, #0]
 800b632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	9b01      	ldr	r3, [sp, #4]
 800b63a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b63e:	b15b      	cbz	r3, 800b658 <__smakebuf_r+0x70>
 800b640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b644:	4630      	mov	r0, r6
 800b646:	f000 f81d 	bl	800b684 <_isatty_r>
 800b64a:	b128      	cbz	r0, 800b658 <__smakebuf_r+0x70>
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	f043 0301 	orr.w	r3, r3, #1
 800b656:	81a3      	strh	r3, [r4, #12]
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	431d      	orrs	r5, r3
 800b65c:	81a5      	strh	r5, [r4, #12]
 800b65e:	e7cf      	b.n	800b600 <__smakebuf_r+0x18>

0800b660 <_fstat_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d07      	ldr	r5, [pc, #28]	@ (800b680 <_fstat_r+0x20>)
 800b664:	2300      	movs	r3, #0
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	4611      	mov	r1, r2
 800b66c:	602b      	str	r3, [r5, #0]
 800b66e:	f7f6 fb22 	bl	8001cb6 <_fstat>
 800b672:	1c43      	adds	r3, r0, #1
 800b674:	d102      	bne.n	800b67c <_fstat_r+0x1c>
 800b676:	682b      	ldr	r3, [r5, #0]
 800b678:	b103      	cbz	r3, 800b67c <_fstat_r+0x1c>
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop
 800b680:	20019704 	.word	0x20019704

0800b684 <_isatty_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d06      	ldr	r5, [pc, #24]	@ (800b6a0 <_isatty_r+0x1c>)
 800b688:	2300      	movs	r3, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	602b      	str	r3, [r5, #0]
 800b690:	f7f6 fb21 	bl	8001cd6 <_isatty>
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	d102      	bne.n	800b69e <_isatty_r+0x1a>
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	b103      	cbz	r3, 800b69e <_isatty_r+0x1a>
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	bd38      	pop	{r3, r4, r5, pc}
 800b6a0:	20019704 	.word	0x20019704

0800b6a4 <_sbrk_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	4d06      	ldr	r5, [pc, #24]	@ (800b6c0 <_sbrk_r+0x1c>)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	602b      	str	r3, [r5, #0]
 800b6b0:	f7f6 fb2a 	bl	8001d08 <_sbrk>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d102      	bne.n	800b6be <_sbrk_r+0x1a>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	b103      	cbz	r3, 800b6be <_sbrk_r+0x1a>
 800b6bc:	6023      	str	r3, [r4, #0]
 800b6be:	bd38      	pop	{r3, r4, r5, pc}
 800b6c0:	20019704 	.word	0x20019704

0800b6c4 <sinf>:
 800b6c4:	ee10 3a10 	vmov	r3, s0
 800b6c8:	b507      	push	{r0, r1, r2, lr}
 800b6ca:	4a1f      	ldr	r2, [pc, #124]	@ (800b748 <sinf+0x84>)
 800b6cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d807      	bhi.n	800b6e4 <sinf+0x20>
 800b6d4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b74c <sinf+0x88>
 800b6d8:	2000      	movs	r0, #0
 800b6da:	b003      	add	sp, #12
 800b6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e0:	f000 b88e 	b.w	800b800 <__kernel_sinf>
 800b6e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b6e8:	d304      	bcc.n	800b6f4 <sinf+0x30>
 800b6ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b6ee:	b003      	add	sp, #12
 800b6f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6f4:	4668      	mov	r0, sp
 800b6f6:	f000 f8cb 	bl	800b890 <__ieee754_rem_pio2f>
 800b6fa:	f000 0003 	and.w	r0, r0, #3
 800b6fe:	2801      	cmp	r0, #1
 800b700:	d00a      	beq.n	800b718 <sinf+0x54>
 800b702:	2802      	cmp	r0, #2
 800b704:	d00f      	beq.n	800b726 <sinf+0x62>
 800b706:	b9c0      	cbnz	r0, 800b73a <sinf+0x76>
 800b708:	eddd 0a01 	vldr	s1, [sp, #4]
 800b70c:	ed9d 0a00 	vldr	s0, [sp]
 800b710:	2001      	movs	r0, #1
 800b712:	f000 f875 	bl	800b800 <__kernel_sinf>
 800b716:	e7ea      	b.n	800b6ee <sinf+0x2a>
 800b718:	eddd 0a01 	vldr	s1, [sp, #4]
 800b71c:	ed9d 0a00 	vldr	s0, [sp]
 800b720:	f000 f816 	bl	800b750 <__kernel_cosf>
 800b724:	e7e3      	b.n	800b6ee <sinf+0x2a>
 800b726:	eddd 0a01 	vldr	s1, [sp, #4]
 800b72a:	ed9d 0a00 	vldr	s0, [sp]
 800b72e:	2001      	movs	r0, #1
 800b730:	f000 f866 	bl	800b800 <__kernel_sinf>
 800b734:	eeb1 0a40 	vneg.f32	s0, s0
 800b738:	e7d9      	b.n	800b6ee <sinf+0x2a>
 800b73a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b73e:	ed9d 0a00 	vldr	s0, [sp]
 800b742:	f000 f805 	bl	800b750 <__kernel_cosf>
 800b746:	e7f5      	b.n	800b734 <sinf+0x70>
 800b748:	3f490fd8 	.word	0x3f490fd8
 800b74c:	00000000 	.word	0x00000000

0800b750 <__kernel_cosf>:
 800b750:	ee10 3a10 	vmov	r3, s0
 800b754:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b758:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b75c:	eef0 6a40 	vmov.f32	s13, s0
 800b760:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b764:	d204      	bcs.n	800b770 <__kernel_cosf+0x20>
 800b766:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b76a:	ee17 2a90 	vmov	r2, s15
 800b76e:	b342      	cbz	r2, 800b7c2 <__kernel_cosf+0x72>
 800b770:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b774:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b7e0 <__kernel_cosf+0x90>
 800b778:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b7e4 <__kernel_cosf+0x94>
 800b77c:	4a1a      	ldr	r2, [pc, #104]	@ (800b7e8 <__kernel_cosf+0x98>)
 800b77e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b782:	4293      	cmp	r3, r2
 800b784:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b7ec <__kernel_cosf+0x9c>
 800b788:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b78c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b7f0 <__kernel_cosf+0xa0>
 800b790:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b794:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b7f4 <__kernel_cosf+0xa4>
 800b798:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b79c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b7f8 <__kernel_cosf+0xa8>
 800b7a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b7a4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b7a8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b7ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b7b0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b7b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b8:	d804      	bhi.n	800b7c4 <__kernel_cosf+0x74>
 800b7ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b7be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7c2:	4770      	bx	lr
 800b7c4:	4a0d      	ldr	r2, [pc, #52]	@ (800b7fc <__kernel_cosf+0xac>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	bf9a      	itte	ls
 800b7ca:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b7ce:	ee07 3a10 	vmovls	s14, r3
 800b7d2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b7d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b7da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7de:	e7ec      	b.n	800b7ba <__kernel_cosf+0x6a>
 800b7e0:	ad47d74e 	.word	0xad47d74e
 800b7e4:	310f74f6 	.word	0x310f74f6
 800b7e8:	3e999999 	.word	0x3e999999
 800b7ec:	b493f27c 	.word	0xb493f27c
 800b7f0:	37d00d01 	.word	0x37d00d01
 800b7f4:	bab60b61 	.word	0xbab60b61
 800b7f8:	3d2aaaab 	.word	0x3d2aaaab
 800b7fc:	3f480000 	.word	0x3f480000

0800b800 <__kernel_sinf>:
 800b800:	ee10 3a10 	vmov	r3, s0
 800b804:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b808:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b80c:	d204      	bcs.n	800b818 <__kernel_sinf+0x18>
 800b80e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b812:	ee17 3a90 	vmov	r3, s15
 800b816:	b35b      	cbz	r3, 800b870 <__kernel_sinf+0x70>
 800b818:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b81c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b874 <__kernel_sinf+0x74>
 800b820:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b878 <__kernel_sinf+0x78>
 800b824:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b828:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b87c <__kernel_sinf+0x7c>
 800b82c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b830:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b880 <__kernel_sinf+0x80>
 800b834:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b838:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b884 <__kernel_sinf+0x84>
 800b83c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b840:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b844:	b930      	cbnz	r0, 800b854 <__kernel_sinf+0x54>
 800b846:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b888 <__kernel_sinf+0x88>
 800b84a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b84e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b852:	4770      	bx	lr
 800b854:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b858:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b85c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b860:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b864:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b88c <__kernel_sinf+0x8c>
 800b868:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b86c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	2f2ec9d3 	.word	0x2f2ec9d3
 800b878:	b2d72f34 	.word	0xb2d72f34
 800b87c:	3638ef1b 	.word	0x3638ef1b
 800b880:	b9500d01 	.word	0xb9500d01
 800b884:	3c088889 	.word	0x3c088889
 800b888:	be2aaaab 	.word	0xbe2aaaab
 800b88c:	3e2aaaab 	.word	0x3e2aaaab

0800b890 <__ieee754_rem_pio2f>:
 800b890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b892:	ee10 6a10 	vmov	r6, s0
 800b896:	4b88      	ldr	r3, [pc, #544]	@ (800bab8 <__ieee754_rem_pio2f+0x228>)
 800b898:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b89c:	429d      	cmp	r5, r3
 800b89e:	b087      	sub	sp, #28
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	d805      	bhi.n	800b8b0 <__ieee754_rem_pio2f+0x20>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	ed80 0a00 	vstr	s0, [r0]
 800b8aa:	6043      	str	r3, [r0, #4]
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e022      	b.n	800b8f6 <__ieee754_rem_pio2f+0x66>
 800b8b0:	4b82      	ldr	r3, [pc, #520]	@ (800babc <__ieee754_rem_pio2f+0x22c>)
 800b8b2:	429d      	cmp	r5, r3
 800b8b4:	d83a      	bhi.n	800b92c <__ieee754_rem_pio2f+0x9c>
 800b8b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b8ba:	2e00      	cmp	r6, #0
 800b8bc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bac0 <__ieee754_rem_pio2f+0x230>
 800b8c0:	4a80      	ldr	r2, [pc, #512]	@ (800bac4 <__ieee754_rem_pio2f+0x234>)
 800b8c2:	f023 030f 	bic.w	r3, r3, #15
 800b8c6:	dd18      	ble.n	800b8fa <__ieee754_rem_pio2f+0x6a>
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b8ce:	bf09      	itett	eq
 800b8d0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bac8 <__ieee754_rem_pio2f+0x238>
 800b8d4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bacc <__ieee754_rem_pio2f+0x23c>
 800b8d8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bad0 <__ieee754_rem_pio2f+0x240>
 800b8dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b8e0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b8e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8e8:	ed80 7a00 	vstr	s14, [r0]
 800b8ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b8f0:	edc0 7a01 	vstr	s15, [r0, #4]
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	b007      	add	sp, #28
 800b8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b900:	bf09      	itett	eq
 800b902:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bac8 <__ieee754_rem_pio2f+0x238>
 800b906:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bacc <__ieee754_rem_pio2f+0x23c>
 800b90a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bad0 <__ieee754_rem_pio2f+0x240>
 800b90e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b912:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b91a:	ed80 7a00 	vstr	s14, [r0]
 800b91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b922:	edc0 7a01 	vstr	s15, [r0, #4]
 800b926:	f04f 30ff 	mov.w	r0, #4294967295
 800b92a:	e7e4      	b.n	800b8f6 <__ieee754_rem_pio2f+0x66>
 800b92c:	4b69      	ldr	r3, [pc, #420]	@ (800bad4 <__ieee754_rem_pio2f+0x244>)
 800b92e:	429d      	cmp	r5, r3
 800b930:	d873      	bhi.n	800ba1a <__ieee754_rem_pio2f+0x18a>
 800b932:	f000 f8dd 	bl	800baf0 <fabsf>
 800b936:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bad8 <__ieee754_rem_pio2f+0x248>
 800b93a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b93e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b94a:	ee17 0a90 	vmov	r0, s15
 800b94e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bac0 <__ieee754_rem_pio2f+0x230>
 800b952:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b956:	281f      	cmp	r0, #31
 800b958:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bacc <__ieee754_rem_pio2f+0x23c>
 800b95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b960:	eeb1 6a47 	vneg.f32	s12, s14
 800b964:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b968:	ee16 1a90 	vmov	r1, s13
 800b96c:	dc09      	bgt.n	800b982 <__ieee754_rem_pio2f+0xf2>
 800b96e:	4a5b      	ldr	r2, [pc, #364]	@ (800badc <__ieee754_rem_pio2f+0x24c>)
 800b970:	1e47      	subs	r7, r0, #1
 800b972:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b976:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b97a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b97e:	4293      	cmp	r3, r2
 800b980:	d107      	bne.n	800b992 <__ieee754_rem_pio2f+0x102>
 800b982:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b986:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b98a:	2a08      	cmp	r2, #8
 800b98c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b990:	dc14      	bgt.n	800b9bc <__ieee754_rem_pio2f+0x12c>
 800b992:	6021      	str	r1, [r4, #0]
 800b994:	ed94 7a00 	vldr	s14, [r4]
 800b998:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b99c:	2e00      	cmp	r6, #0
 800b99e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9a2:	ed84 0a01 	vstr	s0, [r4, #4]
 800b9a6:	daa6      	bge.n	800b8f6 <__ieee754_rem_pio2f+0x66>
 800b9a8:	eeb1 7a47 	vneg.f32	s14, s14
 800b9ac:	eeb1 0a40 	vneg.f32	s0, s0
 800b9b0:	ed84 7a00 	vstr	s14, [r4]
 800b9b4:	ed84 0a01 	vstr	s0, [r4, #4]
 800b9b8:	4240      	negs	r0, r0
 800b9ba:	e79c      	b.n	800b8f6 <__ieee754_rem_pio2f+0x66>
 800b9bc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bac8 <__ieee754_rem_pio2f+0x238>
 800b9c0:	eef0 6a40 	vmov.f32	s13, s0
 800b9c4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b9c8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b9cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b9d0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bad0 <__ieee754_rem_pio2f+0x240>
 800b9d4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b9d8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b9dc:	ee15 2a90 	vmov	r2, s11
 800b9e0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b9e4:	1a5b      	subs	r3, r3, r1
 800b9e6:	2b19      	cmp	r3, #25
 800b9e8:	dc04      	bgt.n	800b9f4 <__ieee754_rem_pio2f+0x164>
 800b9ea:	edc4 5a00 	vstr	s11, [r4]
 800b9ee:	eeb0 0a66 	vmov.f32	s0, s13
 800b9f2:	e7cf      	b.n	800b994 <__ieee754_rem_pio2f+0x104>
 800b9f4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bae0 <__ieee754_rem_pio2f+0x250>
 800b9f8:	eeb0 0a66 	vmov.f32	s0, s13
 800b9fc:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ba00:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ba04:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bae4 <__ieee754_rem_pio2f+0x254>
 800ba08:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ba0c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ba10:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ba14:	ed84 7a00 	vstr	s14, [r4]
 800ba18:	e7bc      	b.n	800b994 <__ieee754_rem_pio2f+0x104>
 800ba1a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ba1e:	d306      	bcc.n	800ba2e <__ieee754_rem_pio2f+0x19e>
 800ba20:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ba24:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba28:	edc0 7a00 	vstr	s15, [r0]
 800ba2c:	e73e      	b.n	800b8ac <__ieee754_rem_pio2f+0x1c>
 800ba2e:	15ea      	asrs	r2, r5, #23
 800ba30:	3a86      	subs	r2, #134	@ 0x86
 800ba32:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba3e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bae8 <__ieee754_rem_pio2f+0x258>
 800ba42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba4a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ba4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ba56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ba5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba5e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ba62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ba66:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6e:	edcd 7a05 	vstr	s15, [sp, #20]
 800ba72:	d11e      	bne.n	800bab2 <__ieee754_rem_pio2f+0x222>
 800ba74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ba78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba7c:	bf0c      	ite	eq
 800ba7e:	2301      	moveq	r3, #1
 800ba80:	2302      	movne	r3, #2
 800ba82:	491a      	ldr	r1, [pc, #104]	@ (800baec <__ieee754_rem_pio2f+0x25c>)
 800ba84:	9101      	str	r1, [sp, #4]
 800ba86:	2102      	movs	r1, #2
 800ba88:	9100      	str	r1, [sp, #0]
 800ba8a:	a803      	add	r0, sp, #12
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	f000 f837 	bl	800bb00 <__kernel_rem_pio2f>
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	f6bf af2f 	bge.w	800b8f6 <__ieee754_rem_pio2f+0x66>
 800ba98:	edd4 7a00 	vldr	s15, [r4]
 800ba9c:	eef1 7a67 	vneg.f32	s15, s15
 800baa0:	edc4 7a00 	vstr	s15, [r4]
 800baa4:	edd4 7a01 	vldr	s15, [r4, #4]
 800baa8:	eef1 7a67 	vneg.f32	s15, s15
 800baac:	edc4 7a01 	vstr	s15, [r4, #4]
 800bab0:	e782      	b.n	800b9b8 <__ieee754_rem_pio2f+0x128>
 800bab2:	2303      	movs	r3, #3
 800bab4:	e7e5      	b.n	800ba82 <__ieee754_rem_pio2f+0x1f2>
 800bab6:	bf00      	nop
 800bab8:	3f490fd8 	.word	0x3f490fd8
 800babc:	4016cbe3 	.word	0x4016cbe3
 800bac0:	3fc90f80 	.word	0x3fc90f80
 800bac4:	3fc90fd0 	.word	0x3fc90fd0
 800bac8:	37354400 	.word	0x37354400
 800bacc:	37354443 	.word	0x37354443
 800bad0:	2e85a308 	.word	0x2e85a308
 800bad4:	43490f80 	.word	0x43490f80
 800bad8:	3f22f984 	.word	0x3f22f984
 800badc:	0800c250 	.word	0x0800c250
 800bae0:	2e85a300 	.word	0x2e85a300
 800bae4:	248d3132 	.word	0x248d3132
 800bae8:	43800000 	.word	0x43800000
 800baec:	0800c2d0 	.word	0x0800c2d0

0800baf0 <fabsf>:
 800baf0:	ee10 3a10 	vmov	r3, s0
 800baf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800baf8:	ee00 3a10 	vmov	s0, r3
 800bafc:	4770      	bx	lr
	...

0800bb00 <__kernel_rem_pio2f>:
 800bb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb04:	ed2d 8b04 	vpush	{d8-d9}
 800bb08:	b0d9      	sub	sp, #356	@ 0x164
 800bb0a:	4690      	mov	r8, r2
 800bb0c:	9001      	str	r0, [sp, #4]
 800bb0e:	4ab6      	ldr	r2, [pc, #728]	@ (800bde8 <__kernel_rem_pio2f+0x2e8>)
 800bb10:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bb12:	f118 0f04 	cmn.w	r8, #4
 800bb16:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bb1a:	460f      	mov	r7, r1
 800bb1c:	f103 3bff 	add.w	fp, r3, #4294967295
 800bb20:	db26      	blt.n	800bb70 <__kernel_rem_pio2f+0x70>
 800bb22:	f1b8 0203 	subs.w	r2, r8, #3
 800bb26:	bf48      	it	mi
 800bb28:	f108 0204 	addmi.w	r2, r8, #4
 800bb2c:	10d2      	asrs	r2, r2, #3
 800bb2e:	1c55      	adds	r5, r2, #1
 800bb30:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bb32:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800bdf8 <__kernel_rem_pio2f+0x2f8>
 800bb36:	00e8      	lsls	r0, r5, #3
 800bb38:	eba2 060b 	sub.w	r6, r2, fp
 800bb3c:	9002      	str	r0, [sp, #8]
 800bb3e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bb42:	eb0a 0c0b 	add.w	ip, sl, fp
 800bb46:	ac1c      	add	r4, sp, #112	@ 0x70
 800bb48:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	4560      	cmp	r0, ip
 800bb50:	dd10      	ble.n	800bb74 <__kernel_rem_pio2f+0x74>
 800bb52:	a91c      	add	r1, sp, #112	@ 0x70
 800bb54:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bb58:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bb5c:	2600      	movs	r6, #0
 800bb5e:	4556      	cmp	r6, sl
 800bb60:	dc24      	bgt.n	800bbac <__kernel_rem_pio2f+0xac>
 800bb62:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bb66:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800bdf8 <__kernel_rem_pio2f+0x2f8>
 800bb6a:	4684      	mov	ip, r0
 800bb6c:	2400      	movs	r4, #0
 800bb6e:	e016      	b.n	800bb9e <__kernel_rem_pio2f+0x9e>
 800bb70:	2200      	movs	r2, #0
 800bb72:	e7dc      	b.n	800bb2e <__kernel_rem_pio2f+0x2e>
 800bb74:	42c6      	cmn	r6, r0
 800bb76:	bf5d      	ittte	pl
 800bb78:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bb7c:	ee07 1a90 	vmovpl	s15, r1
 800bb80:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bb84:	eef0 7a47 	vmovmi.f32	s15, s14
 800bb88:	ece4 7a01 	vstmia	r4!, {s15}
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	e7de      	b.n	800bb4e <__kernel_rem_pio2f+0x4e>
 800bb90:	ecfe 6a01 	vldmia	lr!, {s13}
 800bb94:	ed3c 7a01 	vldmdb	ip!, {s14}
 800bb98:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bb9c:	3401      	adds	r4, #1
 800bb9e:	455c      	cmp	r4, fp
 800bba0:	ddf6      	ble.n	800bb90 <__kernel_rem_pio2f+0x90>
 800bba2:	ece9 7a01 	vstmia	r9!, {s15}
 800bba6:	3601      	adds	r6, #1
 800bba8:	3004      	adds	r0, #4
 800bbaa:	e7d8      	b.n	800bb5e <__kernel_rem_pio2f+0x5e>
 800bbac:	a908      	add	r1, sp, #32
 800bbae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbb2:	9104      	str	r1, [sp, #16]
 800bbb4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bbb6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800bdf4 <__kernel_rem_pio2f+0x2f4>
 800bbba:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800bdf0 <__kernel_rem_pio2f+0x2f0>
 800bbbe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bbc2:	9203      	str	r2, [sp, #12]
 800bbc4:	4654      	mov	r4, sl
 800bbc6:	00a2      	lsls	r2, r4, #2
 800bbc8:	9205      	str	r2, [sp, #20]
 800bbca:	aa58      	add	r2, sp, #352	@ 0x160
 800bbcc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bbd0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800bbd4:	a944      	add	r1, sp, #272	@ 0x110
 800bbd6:	aa08      	add	r2, sp, #32
 800bbd8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800bbdc:	4694      	mov	ip, r2
 800bbde:	4626      	mov	r6, r4
 800bbe0:	2e00      	cmp	r6, #0
 800bbe2:	dc4c      	bgt.n	800bc7e <__kernel_rem_pio2f+0x17e>
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bbea:	f000 f9f1 	bl	800bfd0 <scalbnf>
 800bbee:	eeb0 8a40 	vmov.f32	s16, s0
 800bbf2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800bbf6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bbfa:	f000 fa4f 	bl	800c09c <floorf>
 800bbfe:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800bc02:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc0c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bc10:	ee17 9a90 	vmov	r9, s15
 800bc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc18:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bc1c:	dd41      	ble.n	800bca2 <__kernel_rem_pio2f+0x1a2>
 800bc1e:	f104 3cff 	add.w	ip, r4, #4294967295
 800bc22:	a908      	add	r1, sp, #32
 800bc24:	f1c5 0e08 	rsb	lr, r5, #8
 800bc28:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800bc2c:	fa46 f00e 	asr.w	r0, r6, lr
 800bc30:	4481      	add	r9, r0
 800bc32:	fa00 f00e 	lsl.w	r0, r0, lr
 800bc36:	1a36      	subs	r6, r6, r0
 800bc38:	f1c5 0007 	rsb	r0, r5, #7
 800bc3c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800bc40:	4106      	asrs	r6, r0
 800bc42:	2e00      	cmp	r6, #0
 800bc44:	dd3c      	ble.n	800bcc0 <__kernel_rem_pio2f+0x1c0>
 800bc46:	f04f 0e00 	mov.w	lr, #0
 800bc4a:	f109 0901 	add.w	r9, r9, #1
 800bc4e:	4670      	mov	r0, lr
 800bc50:	4574      	cmp	r4, lr
 800bc52:	dc68      	bgt.n	800bd26 <__kernel_rem_pio2f+0x226>
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	dd03      	ble.n	800bc60 <__kernel_rem_pio2f+0x160>
 800bc58:	2d01      	cmp	r5, #1
 800bc5a:	d074      	beq.n	800bd46 <__kernel_rem_pio2f+0x246>
 800bc5c:	2d02      	cmp	r5, #2
 800bc5e:	d07d      	beq.n	800bd5c <__kernel_rem_pio2f+0x25c>
 800bc60:	2e02      	cmp	r6, #2
 800bc62:	d12d      	bne.n	800bcc0 <__kernel_rem_pio2f+0x1c0>
 800bc64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bc68:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bc6c:	b340      	cbz	r0, 800bcc0 <__kernel_rem_pio2f+0x1c0>
 800bc6e:	4628      	mov	r0, r5
 800bc70:	9306      	str	r3, [sp, #24]
 800bc72:	f000 f9ad 	bl	800bfd0 <scalbnf>
 800bc76:	9b06      	ldr	r3, [sp, #24]
 800bc78:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bc7c:	e020      	b.n	800bcc0 <__kernel_rem_pio2f+0x1c0>
 800bc7e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bc82:	3e01      	subs	r6, #1
 800bc84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc8c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bc90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc94:	ecac 0a01 	vstmia	ip!, {s0}
 800bc98:	ed30 0a01 	vldmdb	r0!, {s0}
 800bc9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bca0:	e79e      	b.n	800bbe0 <__kernel_rem_pio2f+0xe0>
 800bca2:	d105      	bne.n	800bcb0 <__kernel_rem_pio2f+0x1b0>
 800bca4:	1e60      	subs	r0, r4, #1
 800bca6:	a908      	add	r1, sp, #32
 800bca8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800bcac:	11f6      	asrs	r6, r6, #7
 800bcae:	e7c8      	b.n	800bc42 <__kernel_rem_pio2f+0x142>
 800bcb0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bcb4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcbc:	da31      	bge.n	800bd22 <__kernel_rem_pio2f+0x222>
 800bcbe:	2600      	movs	r6, #0
 800bcc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc8:	f040 8098 	bne.w	800bdfc <__kernel_rem_pio2f+0x2fc>
 800bccc:	1e60      	subs	r0, r4, #1
 800bcce:	2200      	movs	r2, #0
 800bcd0:	4550      	cmp	r0, sl
 800bcd2:	da4b      	bge.n	800bd6c <__kernel_rem_pio2f+0x26c>
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	d065      	beq.n	800bda4 <__kernel_rem_pio2f+0x2a4>
 800bcd8:	3c01      	subs	r4, #1
 800bcda:	ab08      	add	r3, sp, #32
 800bcdc:	3d08      	subs	r5, #8
 800bcde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f8      	beq.n	800bcd8 <__kernel_rem_pio2f+0x1d8>
 800bce6:	4628      	mov	r0, r5
 800bce8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bcec:	f000 f970 	bl	800bfd0 <scalbnf>
 800bcf0:	1c63      	adds	r3, r4, #1
 800bcf2:	aa44      	add	r2, sp, #272	@ 0x110
 800bcf4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bdf4 <__kernel_rem_pio2f+0x2f4>
 800bcf8:	0099      	lsls	r1, r3, #2
 800bcfa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bcfe:	4623      	mov	r3, r4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f280 80a9 	bge.w	800be58 <__kernel_rem_pio2f+0x358>
 800bd06:	4623      	mov	r3, r4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f2c0 80c7 	blt.w	800be9c <__kernel_rem_pio2f+0x39c>
 800bd0e:	aa44      	add	r2, sp, #272	@ 0x110
 800bd10:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bd14:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bdec <__kernel_rem_pio2f+0x2ec>
 800bd18:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bdf8 <__kernel_rem_pio2f+0x2f8>
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	1ae2      	subs	r2, r4, r3
 800bd20:	e0b1      	b.n	800be86 <__kernel_rem_pio2f+0x386>
 800bd22:	2602      	movs	r6, #2
 800bd24:	e78f      	b.n	800bc46 <__kernel_rem_pio2f+0x146>
 800bd26:	f852 1b04 	ldr.w	r1, [r2], #4
 800bd2a:	b948      	cbnz	r0, 800bd40 <__kernel_rem_pio2f+0x240>
 800bd2c:	b121      	cbz	r1, 800bd38 <__kernel_rem_pio2f+0x238>
 800bd2e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bd32:	f842 1c04 	str.w	r1, [r2, #-4]
 800bd36:	2101      	movs	r1, #1
 800bd38:	f10e 0e01 	add.w	lr, lr, #1
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	e787      	b.n	800bc50 <__kernel_rem_pio2f+0x150>
 800bd40:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bd44:	e7f5      	b.n	800bd32 <__kernel_rem_pio2f+0x232>
 800bd46:	f104 3cff 	add.w	ip, r4, #4294967295
 800bd4a:	aa08      	add	r2, sp, #32
 800bd4c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bd50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bd54:	a908      	add	r1, sp, #32
 800bd56:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bd5a:	e781      	b.n	800bc60 <__kernel_rem_pio2f+0x160>
 800bd5c:	f104 3cff 	add.w	ip, r4, #4294967295
 800bd60:	aa08      	add	r2, sp, #32
 800bd62:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bd66:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bd6a:	e7f3      	b.n	800bd54 <__kernel_rem_pio2f+0x254>
 800bd6c:	a908      	add	r1, sp, #32
 800bd6e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bd72:	3801      	subs	r0, #1
 800bd74:	430a      	orrs	r2, r1
 800bd76:	e7ab      	b.n	800bcd0 <__kernel_rem_pio2f+0x1d0>
 800bd78:	3201      	adds	r2, #1
 800bd7a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bd7e:	2e00      	cmp	r6, #0
 800bd80:	d0fa      	beq.n	800bd78 <__kernel_rem_pio2f+0x278>
 800bd82:	9905      	ldr	r1, [sp, #20]
 800bd84:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bd88:	eb0d 0001 	add.w	r0, sp, r1
 800bd8c:	18e6      	adds	r6, r4, r3
 800bd8e:	a91c      	add	r1, sp, #112	@ 0x70
 800bd90:	f104 0c01 	add.w	ip, r4, #1
 800bd94:	384c      	subs	r0, #76	@ 0x4c
 800bd96:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bd9a:	4422      	add	r2, r4
 800bd9c:	4562      	cmp	r2, ip
 800bd9e:	da04      	bge.n	800bdaa <__kernel_rem_pio2f+0x2aa>
 800bda0:	4614      	mov	r4, r2
 800bda2:	e710      	b.n	800bbc6 <__kernel_rem_pio2f+0xc6>
 800bda4:	9804      	ldr	r0, [sp, #16]
 800bda6:	2201      	movs	r2, #1
 800bda8:	e7e7      	b.n	800bd7a <__kernel_rem_pio2f+0x27a>
 800bdaa:	9903      	ldr	r1, [sp, #12]
 800bdac:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bdb0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bdb4:	9105      	str	r1, [sp, #20]
 800bdb6:	ee07 1a90 	vmov	s15, r1
 800bdba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdbe:	2400      	movs	r4, #0
 800bdc0:	ece6 7a01 	vstmia	r6!, {s15}
 800bdc4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bdf8 <__kernel_rem_pio2f+0x2f8>
 800bdc8:	46b1      	mov	r9, r6
 800bdca:	455c      	cmp	r4, fp
 800bdcc:	dd04      	ble.n	800bdd8 <__kernel_rem_pio2f+0x2d8>
 800bdce:	ece0 7a01 	vstmia	r0!, {s15}
 800bdd2:	f10c 0c01 	add.w	ip, ip, #1
 800bdd6:	e7e1      	b.n	800bd9c <__kernel_rem_pio2f+0x29c>
 800bdd8:	ecfe 6a01 	vldmia	lr!, {s13}
 800bddc:	ed39 7a01 	vldmdb	r9!, {s14}
 800bde0:	3401      	adds	r4, #1
 800bde2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bde6:	e7f0      	b.n	800bdca <__kernel_rem_pio2f+0x2ca>
 800bde8:	0800c614 	.word	0x0800c614
 800bdec:	0800c5e8 	.word	0x0800c5e8
 800bdf0:	43800000 	.word	0x43800000
 800bdf4:	3b800000 	.word	0x3b800000
 800bdf8:	00000000 	.word	0x00000000
 800bdfc:	9b02      	ldr	r3, [sp, #8]
 800bdfe:	eeb0 0a48 	vmov.f32	s0, s16
 800be02:	eba3 0008 	sub.w	r0, r3, r8
 800be06:	f000 f8e3 	bl	800bfd0 <scalbnf>
 800be0a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bdf0 <__kernel_rem_pio2f+0x2f0>
 800be0e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800be12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be16:	db19      	blt.n	800be4c <__kernel_rem_pio2f+0x34c>
 800be18:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bdf4 <__kernel_rem_pio2f+0x2f4>
 800be1c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800be20:	aa08      	add	r2, sp, #32
 800be22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be26:	3508      	adds	r5, #8
 800be28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be2c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800be30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be38:	ee10 3a10 	vmov	r3, s0
 800be3c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800be40:	ee17 3a90 	vmov	r3, s15
 800be44:	3401      	adds	r4, #1
 800be46:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800be4a:	e74c      	b.n	800bce6 <__kernel_rem_pio2f+0x1e6>
 800be4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be50:	aa08      	add	r2, sp, #32
 800be52:	ee10 3a10 	vmov	r3, s0
 800be56:	e7f6      	b.n	800be46 <__kernel_rem_pio2f+0x346>
 800be58:	a808      	add	r0, sp, #32
 800be5a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800be5e:	9001      	str	r0, [sp, #4]
 800be60:	ee07 0a90 	vmov	s15, r0
 800be64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be68:	3b01      	subs	r3, #1
 800be6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800be6e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800be72:	ed62 7a01 	vstmdb	r2!, {s15}
 800be76:	e743      	b.n	800bd00 <__kernel_rem_pio2f+0x200>
 800be78:	ecfc 6a01 	vldmia	ip!, {s13}
 800be7c:	ecb5 7a01 	vldmia	r5!, {s14}
 800be80:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be84:	3001      	adds	r0, #1
 800be86:	4550      	cmp	r0, sl
 800be88:	dc01      	bgt.n	800be8e <__kernel_rem_pio2f+0x38e>
 800be8a:	4290      	cmp	r0, r2
 800be8c:	ddf4      	ble.n	800be78 <__kernel_rem_pio2f+0x378>
 800be8e:	a858      	add	r0, sp, #352	@ 0x160
 800be90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800be94:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800be98:	3b01      	subs	r3, #1
 800be9a:	e735      	b.n	800bd08 <__kernel_rem_pio2f+0x208>
 800be9c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	dc09      	bgt.n	800beb6 <__kernel_rem_pio2f+0x3b6>
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	dc27      	bgt.n	800bef6 <__kernel_rem_pio2f+0x3f6>
 800bea6:	d040      	beq.n	800bf2a <__kernel_rem_pio2f+0x42a>
 800bea8:	f009 0007 	and.w	r0, r9, #7
 800beac:	b059      	add	sp, #356	@ 0x164
 800beae:	ecbd 8b04 	vpop	{d8-d9}
 800beb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d1f5      	bne.n	800bea8 <__kernel_rem_pio2f+0x3a8>
 800bebc:	aa30      	add	r2, sp, #192	@ 0xc0
 800bebe:	1f0b      	subs	r3, r1, #4
 800bec0:	4413      	add	r3, r2
 800bec2:	461a      	mov	r2, r3
 800bec4:	4620      	mov	r0, r4
 800bec6:	2800      	cmp	r0, #0
 800bec8:	dc50      	bgt.n	800bf6c <__kernel_rem_pio2f+0x46c>
 800beca:	4622      	mov	r2, r4
 800becc:	2a01      	cmp	r2, #1
 800bece:	dc5d      	bgt.n	800bf8c <__kernel_rem_pio2f+0x48c>
 800bed0:	ab30      	add	r3, sp, #192	@ 0xc0
 800bed2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800bdf8 <__kernel_rem_pio2f+0x2f8>
 800bed6:	440b      	add	r3, r1
 800bed8:	2c01      	cmp	r4, #1
 800beda:	dc67      	bgt.n	800bfac <__kernel_rem_pio2f+0x4ac>
 800bedc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bee0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bee4:	2e00      	cmp	r6, #0
 800bee6:	d167      	bne.n	800bfb8 <__kernel_rem_pio2f+0x4b8>
 800bee8:	edc7 6a00 	vstr	s13, [r7]
 800beec:	ed87 7a01 	vstr	s14, [r7, #4]
 800bef0:	edc7 7a02 	vstr	s15, [r7, #8]
 800bef4:	e7d8      	b.n	800bea8 <__kernel_rem_pio2f+0x3a8>
 800bef6:	ab30      	add	r3, sp, #192	@ 0xc0
 800bef8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800bdf8 <__kernel_rem_pio2f+0x2f8>
 800befc:	440b      	add	r3, r1
 800befe:	4622      	mov	r2, r4
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	da24      	bge.n	800bf4e <__kernel_rem_pio2f+0x44e>
 800bf04:	b34e      	cbz	r6, 800bf5a <__kernel_rem_pio2f+0x45a>
 800bf06:	eef1 7a47 	vneg.f32	s15, s14
 800bf0a:	edc7 7a00 	vstr	s15, [r7]
 800bf0e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bf12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf16:	aa31      	add	r2, sp, #196	@ 0xc4
 800bf18:	2301      	movs	r3, #1
 800bf1a:	429c      	cmp	r4, r3
 800bf1c:	da20      	bge.n	800bf60 <__kernel_rem_pio2f+0x460>
 800bf1e:	b10e      	cbz	r6, 800bf24 <__kernel_rem_pio2f+0x424>
 800bf20:	eef1 7a67 	vneg.f32	s15, s15
 800bf24:	edc7 7a01 	vstr	s15, [r7, #4]
 800bf28:	e7be      	b.n	800bea8 <__kernel_rem_pio2f+0x3a8>
 800bf2a:	ab30      	add	r3, sp, #192	@ 0xc0
 800bf2c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800bdf8 <__kernel_rem_pio2f+0x2f8>
 800bf30:	440b      	add	r3, r1
 800bf32:	2c00      	cmp	r4, #0
 800bf34:	da05      	bge.n	800bf42 <__kernel_rem_pio2f+0x442>
 800bf36:	b10e      	cbz	r6, 800bf3c <__kernel_rem_pio2f+0x43c>
 800bf38:	eef1 7a67 	vneg.f32	s15, s15
 800bf3c:	edc7 7a00 	vstr	s15, [r7]
 800bf40:	e7b2      	b.n	800bea8 <__kernel_rem_pio2f+0x3a8>
 800bf42:	ed33 7a01 	vldmdb	r3!, {s14}
 800bf46:	3c01      	subs	r4, #1
 800bf48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf4c:	e7f1      	b.n	800bf32 <__kernel_rem_pio2f+0x432>
 800bf4e:	ed73 7a01 	vldmdb	r3!, {s15}
 800bf52:	3a01      	subs	r2, #1
 800bf54:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf58:	e7d2      	b.n	800bf00 <__kernel_rem_pio2f+0x400>
 800bf5a:	eef0 7a47 	vmov.f32	s15, s14
 800bf5e:	e7d4      	b.n	800bf0a <__kernel_rem_pio2f+0x40a>
 800bf60:	ecb2 7a01 	vldmia	r2!, {s14}
 800bf64:	3301      	adds	r3, #1
 800bf66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf6a:	e7d6      	b.n	800bf1a <__kernel_rem_pio2f+0x41a>
 800bf6c:	ed72 7a01 	vldmdb	r2!, {s15}
 800bf70:	edd2 6a01 	vldr	s13, [r2, #4]
 800bf74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bf78:	3801      	subs	r0, #1
 800bf7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf7e:	ed82 7a00 	vstr	s14, [r2]
 800bf82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf86:	edc2 7a01 	vstr	s15, [r2, #4]
 800bf8a:	e79c      	b.n	800bec6 <__kernel_rem_pio2f+0x3c6>
 800bf8c:	ed73 7a01 	vldmdb	r3!, {s15}
 800bf90:	edd3 6a01 	vldr	s13, [r3, #4]
 800bf94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bf98:	3a01      	subs	r2, #1
 800bf9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf9e:	ed83 7a00 	vstr	s14, [r3]
 800bfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfa6:	edc3 7a01 	vstr	s15, [r3, #4]
 800bfaa:	e78f      	b.n	800becc <__kernel_rem_pio2f+0x3cc>
 800bfac:	ed33 7a01 	vldmdb	r3!, {s14}
 800bfb0:	3c01      	subs	r4, #1
 800bfb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfb6:	e78f      	b.n	800bed8 <__kernel_rem_pio2f+0x3d8>
 800bfb8:	eef1 6a66 	vneg.f32	s13, s13
 800bfbc:	eeb1 7a47 	vneg.f32	s14, s14
 800bfc0:	edc7 6a00 	vstr	s13, [r7]
 800bfc4:	ed87 7a01 	vstr	s14, [r7, #4]
 800bfc8:	eef1 7a67 	vneg.f32	s15, s15
 800bfcc:	e790      	b.n	800bef0 <__kernel_rem_pio2f+0x3f0>
 800bfce:	bf00      	nop

0800bfd0 <scalbnf>:
 800bfd0:	ee10 3a10 	vmov	r3, s0
 800bfd4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bfd8:	d02b      	beq.n	800c032 <scalbnf+0x62>
 800bfda:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bfde:	d302      	bcc.n	800bfe6 <scalbnf+0x16>
 800bfe0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bfe4:	4770      	bx	lr
 800bfe6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bfea:	d123      	bne.n	800c034 <scalbnf+0x64>
 800bfec:	4b24      	ldr	r3, [pc, #144]	@ (800c080 <scalbnf+0xb0>)
 800bfee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c084 <scalbnf+0xb4>
 800bff2:	4298      	cmp	r0, r3
 800bff4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bff8:	db17      	blt.n	800c02a <scalbnf+0x5a>
 800bffa:	ee10 3a10 	vmov	r3, s0
 800bffe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c002:	3a19      	subs	r2, #25
 800c004:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c008:	4288      	cmp	r0, r1
 800c00a:	dd15      	ble.n	800c038 <scalbnf+0x68>
 800c00c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c088 <scalbnf+0xb8>
 800c010:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c08c <scalbnf+0xbc>
 800c014:	ee10 3a10 	vmov	r3, s0
 800c018:	eeb0 7a67 	vmov.f32	s14, s15
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bfb8      	it	lt
 800c020:	eef0 7a66 	vmovlt.f32	s15, s13
 800c024:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c028:	4770      	bx	lr
 800c02a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c090 <scalbnf+0xc0>
 800c02e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c032:	4770      	bx	lr
 800c034:	0dd2      	lsrs	r2, r2, #23
 800c036:	e7e5      	b.n	800c004 <scalbnf+0x34>
 800c038:	4410      	add	r0, r2
 800c03a:	28fe      	cmp	r0, #254	@ 0xfe
 800c03c:	dce6      	bgt.n	800c00c <scalbnf+0x3c>
 800c03e:	2800      	cmp	r0, #0
 800c040:	dd06      	ble.n	800c050 <scalbnf+0x80>
 800c042:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c046:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c04a:	ee00 3a10 	vmov	s0, r3
 800c04e:	4770      	bx	lr
 800c050:	f110 0f16 	cmn.w	r0, #22
 800c054:	da09      	bge.n	800c06a <scalbnf+0x9a>
 800c056:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c090 <scalbnf+0xc0>
 800c05a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c094 <scalbnf+0xc4>
 800c05e:	ee10 3a10 	vmov	r3, s0
 800c062:	eeb0 7a67 	vmov.f32	s14, s15
 800c066:	2b00      	cmp	r3, #0
 800c068:	e7d9      	b.n	800c01e <scalbnf+0x4e>
 800c06a:	3019      	adds	r0, #25
 800c06c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c070:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c074:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c098 <scalbnf+0xc8>
 800c078:	ee07 3a90 	vmov	s15, r3
 800c07c:	e7d7      	b.n	800c02e <scalbnf+0x5e>
 800c07e:	bf00      	nop
 800c080:	ffff3cb0 	.word	0xffff3cb0
 800c084:	4c000000 	.word	0x4c000000
 800c088:	7149f2ca 	.word	0x7149f2ca
 800c08c:	f149f2ca 	.word	0xf149f2ca
 800c090:	0da24260 	.word	0x0da24260
 800c094:	8da24260 	.word	0x8da24260
 800c098:	33000000 	.word	0x33000000

0800c09c <floorf>:
 800c09c:	ee10 3a10 	vmov	r3, s0
 800c0a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c0a4:	3a7f      	subs	r2, #127	@ 0x7f
 800c0a6:	2a16      	cmp	r2, #22
 800c0a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c0ac:	dc2b      	bgt.n	800c106 <floorf+0x6a>
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	da12      	bge.n	800c0d8 <floorf+0x3c>
 800c0b2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c118 <floorf+0x7c>
 800c0b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c2:	dd06      	ble.n	800c0d2 <floorf+0x36>
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	da24      	bge.n	800c112 <floorf+0x76>
 800c0c8:	2900      	cmp	r1, #0
 800c0ca:	4b14      	ldr	r3, [pc, #80]	@ (800c11c <floorf+0x80>)
 800c0cc:	bf08      	it	eq
 800c0ce:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c0d2:	ee00 3a10 	vmov	s0, r3
 800c0d6:	4770      	bx	lr
 800c0d8:	4911      	ldr	r1, [pc, #68]	@ (800c120 <floorf+0x84>)
 800c0da:	4111      	asrs	r1, r2
 800c0dc:	420b      	tst	r3, r1
 800c0de:	d0fa      	beq.n	800c0d6 <floorf+0x3a>
 800c0e0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c118 <floorf+0x7c>
 800c0e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0f0:	ddef      	ble.n	800c0d2 <floorf+0x36>
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	bfbe      	ittt	lt
 800c0f6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c0fa:	fa40 f202 	asrlt.w	r2, r0, r2
 800c0fe:	189b      	addlt	r3, r3, r2
 800c100:	ea23 0301 	bic.w	r3, r3, r1
 800c104:	e7e5      	b.n	800c0d2 <floorf+0x36>
 800c106:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c10a:	d3e4      	bcc.n	800c0d6 <floorf+0x3a>
 800c10c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c110:	4770      	bx	lr
 800c112:	2300      	movs	r3, #0
 800c114:	e7dd      	b.n	800c0d2 <floorf+0x36>
 800c116:	bf00      	nop
 800c118:	7149f2ca 	.word	0x7149f2ca
 800c11c:	bf800000 	.word	0xbf800000
 800c120:	007fffff 	.word	0x007fffff

0800c124 <_init>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	bf00      	nop
 800c128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c12a:	bc08      	pop	{r3}
 800c12c:	469e      	mov	lr, r3
 800c12e:	4770      	bx	lr

0800c130 <_fini>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	bf00      	nop
 800c134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c136:	bc08      	pop	{r3}
 800c138:	469e      	mov	lr, r3
 800c13a:	4770      	bx	lr
