
Hello_World2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b578  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800b708  0800b708  0000c708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b968  0800b968  0000d088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b968  0800b968  0000c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b970  0800b970  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b970  0800b970  0000c970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b974  0800b974  0000c974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800b978  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d088  2**0
                  CONTENTS
 10 .bss          00000a20  20000088  20000088  0000d088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa8  20000aa8  0000d088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153fc  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b15  00000000  00000000  000224b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00025fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da5  00000000  00000000  000271c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ca5  00000000  00000000  00027f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c38  00000000  00000000  0004cc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd9c  00000000  00000000  0006584a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001335e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005604  00000000  00000000  0013362c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00138c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b6f0 	.word	0x0800b6f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800b6f0 	.word	0x0800b6f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ea0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ea4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d013      	beq.n	8000ed8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000eb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eb4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000eb8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ec0:	e000      	b.n	8000ec4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ec2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f9      	beq.n	8000ec2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ece:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	f5ad 4d00 	sub.w	sp, sp, #32768	@ 0x8000
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f000 fd3f 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f8e9 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 f9e5 	bl	80012c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000efe:	f000 f94f 	bl	80011a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f02:	f000 f97b 	bl	80011fc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f06:	f000 f9a9 	bl	800125c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f0a:	f008 f925 	bl	8009158 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	printf("Hello world \r\n");
 8000f0e:	486a      	ldr	r0, [pc, #424]	@ (80010b8 <main+0x1d0>)
 8000f10:	f008 fe14 	bl	8009b3c <puts>
	HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 fd9f 	bl	8001a58 <HAL_Delay>

  HAL_StatusTypeDef res;
  int16_t signal[16384]; //was 46876
  int nsamples = sizeof(signal) / sizeof(signal[0]);
 8000f1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f1e:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8000f22:	f102 0210 	add.w	r2, r2, #16
 8000f26:	6013      	str	r3, [r2, #0]

  int i = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8000f2e:	f102 0214 	add.w	r2, r2, #20
 8000f32:	6013      	str	r3, [r2, #0]
  while(i < nsamples) {
 8000f34:	e076      	b.n	8001024 <main+0x13c>
      double t = ((double)i/2.0)/((double)nsamples);
 8000f36:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000f3a:	f103 0314 	add.w	r3, r3, #20
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	f7ff fae8 	bl	8000514 <__aeabi_i2d>
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f4c:	f7ff fc76 	bl	800083c <__aeabi_ddiv>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4614      	mov	r4, r2
 8000f56:	461d      	mov	r5, r3
 8000f58:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000f5c:	f103 0310 	add.w	r3, r3, #16
 8000f60:	6818      	ldr	r0, [r3, #0]
 8000f62:	f7ff fad7 	bl	8000514 <__aeabi_i2d>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	f7ff fc65 	bl	800083c <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	f507 4100 	add.w	r1, r7, #32768	@ 0x8000
 8000f7a:	e9c1 2300 	strd	r2, r3, [r1]
      signal[i] = 32767*sin(100.0 * TAU * t); // left
 8000f7e:	a34a      	add	r3, pc, #296	@ (adr r3, 80010a8 <main+0x1c0>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f507 4100 	add.w	r1, r7, #32768	@ 0x8000
 8000f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f8c:	f7ff fb2c 	bl	80005e8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	ec43 2b17 	vmov	d7, r2, r3
 8000f98:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9c:	eef0 0a67 	vmov.f32	s1, s15
 8000fa0:	f009 fb82 	bl	800a6a8 <sin>
 8000fa4:	ec51 0b10 	vmov	r0, r1, d0
 8000fa8:	a341      	add	r3, pc, #260	@ (adr r3, 80010b0 <main+0x1c8>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fb1b 	bl	80005e8 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fdaf 	bl	8000b1c <__aeabi_d2iz>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000fcc:	f103 0314 	add.w	r3, r3, #20
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f823 2c18 	strh.w	r2, [r3, #-24]
      signal[i+1] = signal[i]; // right
 8000fda:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000fde:	f103 0314 	add.w	r3, r3, #20
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	4619      	mov	r1, r3
 8000fec:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000ff0:	f103 0314 	add.w	r3, r3, #20
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f933 1c18 	ldrsh.w	r1, [r3, #-24]
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4618      	mov	r0, r3
 8001004:	0053      	lsls	r3, r2, #1
 8001006:	4403      	add	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	f823 2c18 	strh.w	r2, [r3, #-24]
      i += 2;
 800100e:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001012:	f103 0314 	add.w	r3, r3, #20
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3302      	adds	r3, #2
 800101a:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 800101e:	f102 0214 	add.w	r2, r2, #20
 8001022:	6013      	str	r3, [r2, #0]
  while(i < nsamples) {
 8001024:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001028:	f103 0314 	add.w	r3, r3, #20
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001032:	f103 0310 	add.w	r3, r3, #16
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	f6ff af7c 	blt.w	8000f36 <main+0x4e>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800103e:	f008 f8b1 	bl	80091a4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8001042:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001046:	481d      	ldr	r0, [pc, #116]	@ (80010bc <main+0x1d4>)
 8001048:	f000 fff1 	bl	800202e <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 800104c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001050:	f000 fd02 	bl	8001a58 <HAL_Delay>
    printf("In loop \r\n");
 8001054:	481a      	ldr	r0, [pc, #104]	@ (80010c0 <main+0x1d8>)
 8001056:	f008 fd71 	bl	8009b3c <puts>


	res = HAL_I2S_Transmit(&hi2s3, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
 800105a:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 800105e:	f103 0310 	add.w	r3, r3, #16
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	b29a      	uxth	r2, r3
 8001066:	f107 0118 	add.w	r1, r7, #24
 800106a:	3918      	subs	r1, #24
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	4814      	ldr	r0, [pc, #80]	@ (80010c4 <main+0x1dc>)
 8001072:	f003 fbaf 	bl	80047d4 <HAL_I2S_Transmit>
 8001076:	4603      	mov	r3, r0
 8001078:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 800107c:	f102 020f 	add.w	r2, r2, #15
 8001080:	7013      	strb	r3, [r2, #0]
	if(res != HAL_OK) {
 8001082:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001086:	f103 030f 	add.w	r3, r3, #15
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0d6      	beq.n	800103e <main+0x156>
		printf("I2S - ERROR, res = %d!\r\n", res);
 8001090:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001094:	f103 030f 	add.w	r3, r3, #15
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	480a      	ldr	r0, [pc, #40]	@ (80010c8 <main+0x1e0>)
 800109e:	f008 fce5 	bl	8009a6c <iprintf>
    MX_USB_HOST_Process();
 80010a2:	e7cc      	b.n	800103e <main+0x156>
 80010a4:	f3af 8000 	nop.w
 80010a8:	59d5433b 	.word	0x59d5433b
 80010ac:	4083a28c 	.word	0x4083a28c
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40dfffc0 	.word	0x40dfffc0
 80010b8:	0800b708 	.word	0x0800b708
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	0800b718 	.word	0x0800b718
 80010c4:	200000f8 	.word	0x200000f8
 80010c8:	0800b724 	.word	0x0800b724

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	@ 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	@ 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 fe0e 	bl	8009cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <SystemClock_Config+0xcc>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <SystemClock_Config+0xcc>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <SystemClock_Config+0xcc>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <SystemClock_Config+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a21      	ldr	r2, [pc, #132]	@ (800119c <SystemClock_Config+0xd0>)
 8001116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <SystemClock_Config+0xd0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800113c:	2308      	movs	r3, #8
 800113e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001140:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001144:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001146:	2302      	movs	r3, #2
 8001148:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800114a:	2307      	movs	r3, #7
 800114c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	4618      	mov	r0, r3
 8001154:	f003 ffc4 	bl	80050e0 <HAL_RCC_OscConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800115e:	f000 f9cd 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	2302      	movs	r3, #2
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001172:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2105      	movs	r1, #5
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fa25 	bl	80055d0 <HAL_RCC_ClockConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800118c:	f000 f9b6 	bl	80014fc <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	@ 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <MX_I2C1_Init+0x54>)
 80011a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011aa:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011ac:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <MX_I2C1_Init+0x58>)
 80011ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_I2C1_Init+0x50>)
 80011de:	f003 f875 	bl	80042cc <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e8:	f000 f988 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000a4 	.word	0x200000a4
 80011f4:	40005400 	.word	0x40005400
 80011f8:	000186a0 	.word	0x000186a0

080011fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <MX_I2S3_Init+0x58>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <MX_I2S3_Init+0x54>)
 800121c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001220:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001224:	4a0c      	ldr	r2, [pc, #48]	@ (8001258 <MX_I2S3_Init+0x5c>)
 8001226:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_I2S3_Init+0x54>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800122e:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_I2S3_Init+0x54>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_I2S3_Init+0x54>)
 800123c:	f003 f98a 	bl	8004554 <HAL_I2S_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001246:	f000 f959 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000f8 	.word	0x200000f8
 8001254:	40003c00 	.word	0x40003c00
 8001258:	00017700 	.word	0x00017700

0800125c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001262:	4a18      	ldr	r2, [pc, #96]	@ (80012c4 <MX_SPI1_Init+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001268:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800126c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127a:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <MX_SPI1_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_SPI1_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <MX_SPI1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_SPI1_Init+0x64>)
 80012a8:	220a      	movs	r2, #10
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_SPI1_Init+0x64>)
 80012ae:	f004 fcdd 	bl	8005c6c <HAL_SPI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012b8:	f000 f920 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000140 	.word	0x20000140
 80012c4:	40013000 	.word	0x40013000

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	@ 0x30
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	4b72      	ldr	r3, [pc, #456]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a71      	ldr	r2, [pc, #452]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b6f      	ldr	r3, [pc, #444]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	4b6b      	ldr	r3, [pc, #428]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a6a      	ldr	r2, [pc, #424]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b68      	ldr	r3, [pc, #416]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b64      	ldr	r3, [pc, #400]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a63      	ldr	r2, [pc, #396]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b61      	ldr	r3, [pc, #388]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b5d      	ldr	r3, [pc, #372]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a5c      	ldr	r2, [pc, #368]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b5a      	ldr	r3, [pc, #360]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b56      	ldr	r3, [pc, #344]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a55      	ldr	r2, [pc, #340]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b4f      	ldr	r3, [pc, #316]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a4e      	ldr	r2, [pc, #312]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b4c      	ldr	r3, [pc, #304]	@ (80014ac <MX_GPIO_Init+0x1e4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2108      	movs	r1, #8
 800138a:	4849      	ldr	r0, [pc, #292]	@ (80014b0 <MX_GPIO_Init+0x1e8>)
 800138c:	f000 fe36 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	4847      	ldr	r0, [pc, #284]	@ (80014b4 <MX_GPIO_Init+0x1ec>)
 8001396:	f000 fe31 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800139a:	2200      	movs	r2, #0
 800139c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80013a0:	4845      	ldr	r0, [pc, #276]	@ (80014b8 <MX_GPIO_Init+0x1f0>)
 80013a2:	f000 fe2b 	bl	8001ffc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80013a6:	2308      	movs	r3, #8
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	483c      	ldr	r0, [pc, #240]	@ (80014b0 <MX_GPIO_Init+0x1e8>)
 80013be:	f000 fc81 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4836      	ldr	r0, [pc, #216]	@ (80014b4 <MX_GPIO_Init+0x1ec>)
 80013da:	f000 fc73 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013de:	2308      	movs	r3, #8
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013ee:	2305      	movs	r3, #5
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	482e      	ldr	r0, [pc, #184]	@ (80014b4 <MX_GPIO_Init+0x1ec>)
 80013fa:	f000 fc63 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fe:	2301      	movs	r3, #1
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001402:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	482a      	ldr	r0, [pc, #168]	@ (80014bc <MX_GPIO_Init+0x1f4>)
 8001414:	f000 fc56 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001418:	2304      	movs	r3, #4
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4825      	ldr	r0, [pc, #148]	@ (80014c0 <MX_GPIO_Init+0x1f8>)
 800142c:	f000 fc4a 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001442:	2305      	movs	r3, #5
 8001444:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	481c      	ldr	r0, [pc, #112]	@ (80014c0 <MX_GPIO_Init+0x1f8>)
 800144e:	f000 fc39 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001452:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001456:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	4813      	ldr	r0, [pc, #76]	@ (80014b8 <MX_GPIO_Init+0x1f0>)
 800146c:	f000 fc2a 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001470:	2320      	movs	r3, #32
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_GPIO_Init+0x1f0>)
 8001484:	f000 fc1e 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001488:	2302      	movs	r3, #2
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800148c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001490:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <MX_GPIO_Init+0x1e8>)
 800149e:	f000 fc11 	bl	8001cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3730      	adds	r7, #48	@ 0x30
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400

080014c4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e009      	b.n	80014ea <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fcda 	bl	8000e98 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	dbf1      	blt.n	80014d6 <_write+0x12>
  }
  return len;
 80014f2:	687b      	ldr	r3, [r7, #4]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <Error_Handler+0x8>

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	@ 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001546:	2007      	movs	r0, #7
 8001548:	f000 fb7a 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a19      	ldr	r2, [pc, #100]	@ (80015dc <HAL_I2C_MspInit+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12c      	bne.n	80015d4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a17      	ldr	r2, [pc, #92]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001596:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159c:	2312      	movs	r3, #18
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a8:	2304      	movs	r3, #4
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <HAL_I2C_MspInit+0x8c>)
 80015b4:	f000 fb86 	bl	8001cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 80015c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_I2C_MspInit+0x88>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40005400 	.word	0x40005400
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020400 	.word	0x40020400

080015e8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	@ 0x38
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <HAL_I2S_MspInit+0xf0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d15a      	bne.n	80016ce <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800161c:	23c0      	movs	r3, #192	@ 0xc0
 800161e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4618      	mov	r0, r3
 800162a:	f004 f9dd 	bl	80059e8 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001634:	f7ff ff62 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a26      	ldr	r2, [pc, #152]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165c:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6313      	str	r3, [r2, #48]	@ 0x30
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <HAL_I2S_MspInit+0xf4>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800168c:	2310      	movs	r3, #16
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800169c:	2306      	movs	r3, #6
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <HAL_I2S_MspInit+0xf8>)
 80016a8:	f000 fb0c 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80016ac:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016be:	2306      	movs	r3, #6
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <HAL_I2S_MspInit+0xfc>)
 80016ca:	f000 fafb 	bl	8001cc4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80016ce:	bf00      	nop
 80016d0:	3738      	adds	r7, #56	@ 0x38
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40003c00 	.word	0x40003c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020800 	.word	0x40020800

080016e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	@ (800176c <HAL_SPI_MspInit+0x84>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12b      	bne.n	8001762 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001718:	6453      	str	r3, [r2, #68]	@ 0x44
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_SPI_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001742:	23e0      	movs	r3, #224	@ 0xe0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001752:	2305      	movs	r3, #5
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <HAL_SPI_MspInit+0x8c>)
 800175e:	f000 fab1 	bl	8001cc4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	@ 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40013000 	.word	0x40013000
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 f923 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <OTG_FS_IRQHandler+0x10>)
 80017de:	f000 ff21 	bl	8002624 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000057c 	.word	0x2000057c

080017ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
  }

  return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800184e:	605a      	str	r2, [r3, #4]
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f008 fa7a 	bl	8009db8 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20020000 	.word	0x20020000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	20000198 	.word	0x20000198
 80018f8:	20000aa8 	.word	0x20000aa8

080018fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001924:	f7ff ffea 	bl	80018fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	@ (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	@ (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	@ (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194e:	f008 fa39 	bl	8009dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff fac9 	bl	8000ee8 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001964:	0800b978 	.word	0x0800b978
  ldr r2, =_sbss
 8001968:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800196c:	20000aa8 	.word	0x20000aa8

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f94f 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fdae 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f967 	bl	8001caa <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f92f 	bl	8001c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	@ (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	2000019c 	.word	0x2000019c

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000019c 	.word	0x2000019c

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <__NVIC_SetPriorityGrouping>:
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_EnableIRQ>:
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	4907      	ldr	r1, [pc, #28]	@ (8001b3c <__NVIC_EnableIRQ+0x38>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2001      	movs	r0, #1
 8001b26:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	@ (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <SysTick_Config>:
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff8e 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff29 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff3e 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff8e 	bl	8001b94 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5d 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff31 	bl	8001b04 <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffa2 	bl	8001bfc <SysTick_Config>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	@ 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	e16b      	b.n	8001fb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f040 815a 	bne.w	8001fb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d005      	beq.n	8001d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d130      	bne.n	8001d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 0201 	and.w	r2, r3, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d017      	beq.n	8001db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d123      	bne.n	8001e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	220f      	movs	r2, #15
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3208      	adds	r2, #8
 8001e02:	69b9      	ldr	r1, [r7, #24]
 8001e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80b4 	beq.w	8001fb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b60      	ldr	r3, [pc, #384]	@ (8001fd0 <HAL_GPIO_Init+0x30c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd0 <HAL_GPIO_Init+0x30c>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd0 <HAL_GPIO_Init+0x30c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e66:	4a5b      	ldr	r2, [pc, #364]	@ (8001fd4 <HAL_GPIO_Init+0x310>)
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a52      	ldr	r2, [pc, #328]	@ (8001fd8 <HAL_GPIO_Init+0x314>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d02b      	beq.n	8001eea <HAL_GPIO_Init+0x226>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a51      	ldr	r2, [pc, #324]	@ (8001fdc <HAL_GPIO_Init+0x318>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x222>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a50      	ldr	r2, [pc, #320]	@ (8001fe0 <HAL_GPIO_Init+0x31c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x21e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4f      	ldr	r2, [pc, #316]	@ (8001fe4 <HAL_GPIO_Init+0x320>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x21a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4e      	ldr	r2, [pc, #312]	@ (8001fe8 <HAL_GPIO_Init+0x324>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x216>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4d      	ldr	r2, [pc, #308]	@ (8001fec <HAL_GPIO_Init+0x328>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x212>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff0 <HAL_GPIO_Init+0x32c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x20e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <HAL_GPIO_Init+0x330>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x20a>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e00e      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ece:	2308      	movs	r3, #8
 8001ed0:	e00c      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	e00a      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	e008      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x228>
 8001eea:	2300      	movs	r3, #0
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efc:	4935      	ldr	r1, [pc, #212]	@ (8001fd4 <HAL_GPIO_Init+0x310>)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2e:	4a32      	ldr	r2, [pc, #200]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f34:	4b30      	ldr	r3, [pc, #192]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f58:	4a27      	ldr	r2, [pc, #156]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fac:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <HAL_GPIO_Init+0x334>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f67f ae90 	bls.w	8001ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	@ 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40013c00 	.word	0x40013c00

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002040:	887a      	ldrh	r2, [r7, #2]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	041a      	lsls	r2, r3, #16
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43d9      	mvns	r1, r3
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	400b      	ands	r3, r1
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af02      	add	r7, sp, #8
 8002068:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e059      	b.n	8002128 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f007 f8c0 	bl	8009214 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2203      	movs	r2, #3
 8002098:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020a2:	d102      	bne.n	80020aa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 feda 	bl	8005e68 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7c1a      	ldrb	r2, [r3, #16]
 80020bc:	f88d 2000 	strb.w	r2, [sp]
 80020c0:	3304      	adds	r3, #4
 80020c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c4:	f003 fe5b 	bl	8005d7e <USB_CoreInit>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e026      	b.n	8002128 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fed2 	bl	8005e8a <USB_SetCurrentMode>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e017      	b.n	8002128 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7c1a      	ldrb	r2, [r3, #16]
 8002100:	f88d 2000 	strb.w	r2, [sp]
 8002104:	3304      	adds	r3, #4
 8002106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002108:	f004 f874 	bl	80061f4 <USB_HostInit>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e004      	b.n	8002128 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b08b      	sub	sp, #44	@ 0x2c
 8002134:	af04      	add	r7, sp, #16
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	70fb      	strb	r3, [r7, #3]
 8002142:	460b      	mov	r3, r1
 8002144:	70bb      	strb	r3, [r7, #2]
 8002146:	4613      	mov	r3, r2
 8002148:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800214a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800214c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_HCD_HC_Init+0x2c>
 8002158:	2302      	movs	r3, #2
 800215a:	e09d      	b.n	8002298 <HAL_HCD_HC_Init+0x168>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3319      	adds	r3, #25
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3314      	adds	r3, #20
 8002188:	787a      	ldrb	r2, [r7, #1]
 800218a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3315      	adds	r3, #21
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3326      	adds	r3, #38	@ 0x26
 80021b0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80021b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	78bb      	ldrb	r3, [r7, #2]
 80021ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021be:	b2d8      	uxtb	r0, r3
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	3316      	adds	r3, #22
 80021ce:	4602      	mov	r2, r0
 80021d0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fbc8 	bl	800296c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80021dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da0a      	bge.n	80021fa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3317      	adds	r3, #23
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e009      	b.n	800220e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	3317      	adds	r3, #23
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f004 f952 	bl	80064bc <USB_GetHostSpeed>
 8002218:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800221a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800221e:	2b01      	cmp	r3, #1
 8002220:	d10b      	bne.n	800223a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002222:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_HCD_HC_Init+0x10a>
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d104      	bne.n	800223a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2bbc      	cmp	r3, #188	@ 0xbc
 8002234:	d901      	bls.n	800223a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002236:	23bc      	movs	r3, #188	@ 0xbc
 8002238:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3318      	adds	r3, #24
 800224a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800224e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	b298      	uxth	r0, r3
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3328      	adds	r3, #40	@ 0x28
 8002264:	4602      	mov	r2, r0
 8002266:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	b29b      	uxth	r3, r3
 8002270:	787c      	ldrb	r4, [r7, #1]
 8002272:	78ba      	ldrb	r2, [r7, #2]
 8002274:	78f9      	ldrb	r1, [r7, #3]
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4623      	mov	r3, r4
 8002286:	f004 f941 	bl	800650c <USB_HC_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	371c      	adds	r7, #28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd90      	pop	{r4, r7, pc}

080022a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_HCD_HC_Halt+0x1e>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e00f      	b.n	80022de <HAL_HCD_HC_Halt+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fcd3 	bl	8006c7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	70fb      	strb	r3, [r7, #3]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70bb      	strb	r3, [r7, #2]
 80022fe:	4613      	mov	r3, r2
 8002300:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3317      	adds	r3, #23
 8002312:	78ba      	ldrb	r2, [r7, #2]
 8002314:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	3326      	adds	r3, #38	@ 0x26
 8002326:	787a      	ldrb	r2, [r7, #1]
 8002328:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800232a:	7c3b      	ldrb	r3, [r7, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d114      	bne.n	800235a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	332a      	adds	r3, #42	@ 0x2a
 8002340:	2203      	movs	r2, #3
 8002342:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3319      	adds	r3, #25
 8002354:	7f3a      	ldrb	r2, [r7, #28]
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e009      	b.n	800236e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	332a      	adds	r3, #42	@ 0x2a
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800236e:	787b      	ldrb	r3, [r7, #1]
 8002370:	2b03      	cmp	r3, #3
 8002372:	f200 8102 	bhi.w	800257a <HAL_HCD_HC_SubmitRequest+0x292>
 8002376:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	08002565 	.word	0x08002565
 8002384:	08002451 	.word	0x08002451
 8002388:	080024db 	.word	0x080024db
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800238c:	7c3b      	ldrb	r3, [r7, #16]
 800238e:	2b01      	cmp	r3, #1
 8002390:	f040 80f5 	bne.w	800257e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002394:	78bb      	ldrb	r3, [r7, #2]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d12d      	bne.n	80023f6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800239a:	8b3b      	ldrh	r3, [r7, #24]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	333d      	adds	r3, #61	@ 0x3d
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	333d      	adds	r3, #61	@ 0x3d
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	332a      	adds	r3, #42	@ 0x2a
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80023de:	e0ce      	b.n	800257e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	332a      	adds	r3, #42	@ 0x2a
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]
      break;
 80023f4:	e0c3      	b.n	800257e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	331a      	adds	r3, #26
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	f040 80b8 	bne.w	800257e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	333c      	adds	r3, #60	@ 0x3c
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	332a      	adds	r3, #42	@ 0x2a
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
      break;
 8002438:	e0a1      	b.n	800257e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	332a      	adds	r3, #42	@ 0x2a
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
      break;
 800244e:	e096      	b.n	800257e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d120      	bne.n	8002498 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	333d      	adds	r3, #61	@ 0x3d
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	332a      	adds	r3, #42	@ 0x2a
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002480:	e07e      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	332a      	adds	r3, #42	@ 0x2a
 8002492:	2202      	movs	r2, #2
 8002494:	701a      	strb	r2, [r3, #0]
      break;
 8002496:	e073      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	333c      	adds	r3, #60	@ 0x3c
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	332a      	adds	r3, #42	@ 0x2a
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
      break;
 80024c2:	e05d      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	332a      	adds	r3, #42	@ 0x2a
 80024d4:	2202      	movs	r2, #2
 80024d6:	701a      	strb	r2, [r3, #0]
      break;
 80024d8:	e052      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024da:	78bb      	ldrb	r3, [r7, #2]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d120      	bne.n	8002522 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	333d      	adds	r3, #61	@ 0x3d
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	332a      	adds	r3, #42	@ 0x2a
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800250a:	e039      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	332a      	adds	r3, #42	@ 0x2a
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]
      break;
 8002520:	e02e      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	333c      	adds	r3, #60	@ 0x3c
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	332a      	adds	r3, #42	@ 0x2a
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
      break;
 800254c:	e018      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	332a      	adds	r3, #42	@ 0x2a
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
      break;
 8002562:	e00d      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	332a      	adds	r3, #42	@ 0x2a
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
      break;
 8002578:	e002      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800257e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	332c      	adds	r3, #44	@ 0x2c
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	8b39      	ldrh	r1, [r7, #24]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4403      	add	r3, r0
 80025a4:	3334      	adds	r3, #52	@ 0x34
 80025a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	334c      	adds	r3, #76	@ 0x4c
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3338      	adds	r3, #56	@ 0x38
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3315      	adds	r3, #21
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	334d      	adds	r3, #77	@ 0x4d
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	3310      	adds	r3, #16
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	1d19      	adds	r1, r3, #4
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	799b      	ldrb	r3, [r3, #6]
 8002612:	461a      	mov	r2, r3
 8002614:	f004 f8a6 	bl	8006764 <USB_HC_StartXfer>
 8002618:	4603      	mov	r3, r0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop

08002624 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f003 fd9b 	bl	8006176 <USB_GetMode>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	f040 80fb 	bne.w	800283e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fd5e 	bl	800610e <USB_ReadInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80f1 	beq.w	800283c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fd55 	bl	800610e <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800266e:	d104      	bne.n	800267a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002678:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 fd45 	bl	800610e <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800268e:	d104      	bne.n	800269a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002698:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fd35 	bl	800610e <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026ae:	d104      	bne.n	80026ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 fd25 	bl	800610e <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d103      	bne.n	80026d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2202      	movs	r2, #2
 80026d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fd17 	bl	800610e <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026ea:	d120      	bne.n	800272e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80026f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d113      	bne.n	800272e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002706:	2110      	movs	r1, #16
 8002708:	6938      	ldr	r0, [r7, #16]
 800270a:	f003 fc0a 	bl	8005f22 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800270e:	6938      	ldr	r0, [r7, #16]
 8002710:	f003 fc39 	bl	8005f86 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7a5b      	ldrb	r3, [r3, #9]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d105      	bne.n	8002728 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fe2a 	bl	800637c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f006 fdf1 	bl	8009310 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fceb 	bl	800610e <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800273e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002742:	d102      	bne.n	800274a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f001 fd4d 	bl	80041e4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fcdd 	bl	800610e <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b08      	cmp	r3, #8
 800275c:	d106      	bne.n	800276c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f006 fdba 	bl	80092d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2208      	movs	r2, #8
 800276a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fccc 	bl	800610e <USB_ReadInterrupts>
 8002776:	4603      	mov	r3, r0
 8002778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002780:	d139      	bne.n	80027f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fa66 	bl	8006c58 <USB_HC_ReadInterrupt>
 800278c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e025      	b.n	80027e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d018      	beq.n	80027da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027be:	d106      	bne.n	80027ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f905 	bl	80029d6 <HCD_HC_IN_IRQHandler>
 80027cc:	e005      	b.n	80027da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 ff67 	bl	80036a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	795b      	ldrb	r3, [r3, #5]
 80027e4:	461a      	mov	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d3d3      	bcc.n	8002794 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 fc87 	bl	800610e <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b10      	cmp	r3, #16
 8002808:	d101      	bne.n	800280e <HAL_HCD_IRQHandler+0x1ea>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_HCD_IRQHandler+0x1ec>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d014      	beq.n	800283e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0210 	bic.w	r2, r2, #16
 8002822:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f001 fbfe 	bl	8004026 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0210 	orr.w	r2, r2, #16
 8002838:	619a      	str	r2, [r3, #24]
 800283a:	e000      	b.n	800283e <HAL_HCD_IRQHandler+0x21a>
      return;
 800283c:	bf00      	nop
    }
  }
}
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_HCD_Start+0x16>
 8002856:	2302      	movs	r3, #2
 8002858:	e013      	b.n	8002882 <HAL_HCD_Start+0x3e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fdee 	bl	800644a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fae7 	bl	8005e46 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_HCD_Stop+0x16>
 800289c:	2302      	movs	r3, #2
 800289e:	e00d      	b.n	80028bc <HAL_HCD_Stop+0x32>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f004 fb41 	bl	8006f34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fd90 	bl	80063f6 <USB_ResetPort>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	334c      	adds	r3, #76	@ 0x4c
 80028fc:	781b      	ldrb	r3, [r3, #0]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3338      	adds	r3, #56	@ 0x38
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fdd2 	bl	80064ea <USB_GetCurrentFrame>
 8002946:	4603      	mov	r3, r0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fdad 	bl	80064bc <USB_GetHostSpeed>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	331a      	adds	r3, #26
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	331b      	adds	r3, #27
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3325      	adds	r3, #37	@ 0x25
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3324      	adds	r3, #36	@ 0x24
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fb9d 	bl	8006134 <USB_ReadChInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d11a      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	2304      	movs	r3, #4
 8002a14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	334d      	adds	r3, #77	@ 0x4d
 8002a26:	2207      	movs	r2, #7
 8002a28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f004 f921 	bl	8006c7a <USB_HC_Halt>
 8002a38:	e09e      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fb76 	bl	8006134 <USB_ReadChInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a52:	d11b      	bne.n	8002a8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	334d      	adds	r3, #77	@ 0x4d
 8002a78:	2208      	movs	r2, #8
 8002a7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 f8f8 	bl	8006c7a <USB_HC_Halt>
 8002a8a:	e075      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fb4d 	bl	8006134 <USB_ReadChInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d11a      	bne.n	8002ada <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002aa4:	78fb      	ldrb	r3, [r7, #3]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	334d      	adds	r3, #77	@ 0x4d
 8002ac6:	2206      	movs	r2, #6
 8002ac8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 f8d1 	bl	8006c7a <USB_HC_Halt>
 8002ad8:	e04e      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 fb26 	bl	8006134 <USB_ReadChInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af2:	d11b      	bne.n	8002b2c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	334d      	adds	r3, #77	@ 0x4d
 8002b18:	2209      	movs	r2, #9
 8002b1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 f8a8 	bl	8006c7a <USB_HC_Halt>
 8002b2a:	e025      	b.n	8002b78 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fafd 	bl	8006134 <USB_ReadChInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b40:	2b80      	cmp	r3, #128	@ 0x80
 8002b42:	d119      	bne.n	8002b78 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	334d      	adds	r3, #77	@ 0x4d
 8002b66:	2207      	movs	r2, #7
 8002b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 f881 	bl	8006c7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 fad7 	bl	8006134 <USB_ReadChInterrupts>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b90:	d112      	bne.n	8002bb8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 f86d 	bl	8006c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bb2:	6093      	str	r3, [r2, #8]
 8002bb4:	f000 bd75 	b.w	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fab7 	bl	8006134 <USB_ReadChInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	f040 8128 	bne.w	8002e22 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bde:	461a      	mov	r2, r3
 8002be0:	2320      	movs	r3, #32
 8002be2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d119      	bne.n	8002c2e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	331b      	adds	r3, #27
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	0151      	lsls	r1, r2, #5
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	440a      	add	r2, r1
 8002c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	799b      	ldrb	r3, [r3, #6]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01b      	beq.n	8002c6e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3330      	adds	r3, #48	@ 0x30
 8002c46:	6819      	ldr	r1, [r3, #0]
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	1ac9      	subs	r1, r1, r3
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4403      	add	r3, r0
 8002c6a:	3338      	adds	r3, #56	@ 0x38
 8002c6c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	334d      	adds	r3, #77	@ 0x4d
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	3344      	adds	r3, #68	@ 0x44
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	3326      	adds	r3, #38	@ 0x26
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3326      	adds	r3, #38	@ 0x26
 8002cce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d110      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 ffcc 	bl	8006c7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	6093      	str	r3, [r2, #8]
 8002cf4:	e03d      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3326      	adds	r3, #38	@ 0x26
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d00a      	beq.n	8002d22 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3326      	adds	r3, #38	@ 0x26
 8002d1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d127      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	0151      	lsls	r1, r2, #5
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	440a      	add	r2, r1
 8002d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d40:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	334c      	adds	r3, #76	@ 0x4c
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	334c      	adds	r3, #76	@ 0x4c
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f006 fadd 	bl	800932c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	799b      	ldrb	r3, [r3, #6]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d13b      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	3338      	adds	r3, #56	@ 0x38
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4403      	add	r3, r0
 8002d9a:	3328      	adds	r3, #40	@ 0x28
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	440b      	add	r3, r1
 8002da0:	1e59      	subs	r1, r3, #1
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4403      	add	r3, r0
 8002db0:	3328      	adds	r3, #40	@ 0x28
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8470 	beq.w	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	333c      	adds	r3, #60	@ 0x3c
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	333c      	adds	r3, #60	@ 0x3c
 8002dea:	4602      	mov	r2, r0
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	f000 bc58 	b.w	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	333c      	adds	r3, #60	@ 0x3c
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2d8      	uxtb	r0, r3
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	333c      	adds	r3, #60	@ 0x3c
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	f000 bc40 	b.w	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 f982 	bl	8006134 <USB_ReadChInterrupts>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d131      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	2320      	movs	r3, #32
 8002e4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	331a      	adds	r3, #26
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 841f 	bne.w	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	331b      	adds	r3, #27
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	334d      	adds	r3, #77	@ 0x4d
 8002e88:	2203      	movs	r2, #3
 8002e8a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fef0 	bl	8006c7a <USB_HC_Halt>
 8002e9a:	f000 bc02 	b.w	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 f944 	bl	8006134 <USB_ReadChInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	f040 8305 	bne.w	80034c2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334d      	adds	r3, #77	@ 0x4d
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d114      	bne.n	8002f0a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	334d      	adds	r3, #77	@ 0x4d
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334c      	adds	r3, #76	@ 0x4c
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e2cc      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	334d      	adds	r3, #77	@ 0x4d
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b06      	cmp	r3, #6
 8002f1e:	d114      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	334d      	adds	r3, #77	@ 0x4d
 8002f30:	2202      	movs	r2, #2
 8002f32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	334c      	adds	r3, #76	@ 0x4c
 8002f44:	2205      	movs	r2, #5
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e2ac      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	334d      	adds	r3, #77	@ 0x4d
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b07      	cmp	r3, #7
 8002f5e:	d00b      	beq.n	8002f78 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	334d      	adds	r3, #77	@ 0x4d
 8002f70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f72:	2b09      	cmp	r3, #9
 8002f74:	f040 80a6 	bne.w	80030c4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3344      	adds	r3, #68	@ 0x44
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4403      	add	r3, r0
 8002fac:	3344      	adds	r3, #68	@ 0x44
 8002fae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3344      	adds	r3, #68	@ 0x44
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d943      	bls.n	800304e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3344      	adds	r3, #68	@ 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	331a      	adds	r3, #26
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d123      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	331b      	adds	r3, #27
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	331c      	adds	r3, #28
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	0151      	lsls	r1, r2, #5
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	440a      	add	r2, r1
 800302e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003036:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	1a9b      	subs	r3, r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	334c      	adds	r3, #76	@ 0x4c
 8003048:	2204      	movs	r2, #4
 800304a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800304c:	e229      	b.n	80034a2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	334c      	adds	r3, #76	@ 0x4c
 800305e:	2202      	movs	r2, #2
 8003060:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3326      	adds	r3, #38	@ 0x26
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3326      	adds	r3, #38	@ 0x26
 8003088:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800308a:	2b02      	cmp	r3, #2
 800308c:	f040 8209 	bne.w	80034a2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030c2:	e1ee      	b.n	80034a2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	334d      	adds	r3, #77	@ 0x4d
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	f040 80c8 	bne.w	800326c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334d      	adds	r3, #77	@ 0x4d
 80030ec:	2202      	movs	r2, #2
 80030ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	331b      	adds	r3, #27
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	f040 81ce 	bne.w	80034a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	3326      	adds	r3, #38	@ 0x26
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d16b      	bne.n	80031f6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	3348      	adds	r3, #72	@ 0x48
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1c59      	adds	r1, r3, #1
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4403      	add	r3, r0
 800313e:	3348      	adds	r3, #72	@ 0x48
 8003140:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3348      	adds	r3, #72	@ 0x48
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d943      	bls.n	80031e0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3348      	adds	r3, #72	@ 0x48
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	331b      	adds	r3, #27
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3344      	adds	r3, #68	@ 0x44
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d809      	bhi.n	80031aa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	331c      	adds	r3, #28
 80031a6:	2201      	movs	r2, #1
 80031a8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	0151      	lsls	r1, r2, #5
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	440a      	add	r2, r1
 80031c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334c      	adds	r3, #76	@ 0x4c
 80031da:	2204      	movs	r2, #4
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e014      	b.n	800320a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	334c      	adds	r3, #76	@ 0x4c
 80031f0:	2202      	movs	r2, #2
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e009      	b.n	800320a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334c      	adds	r3, #76	@ 0x4c
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3326      	adds	r3, #38	@ 0x26
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3326      	adds	r3, #38	@ 0x26
 8003230:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003232:	2b02      	cmp	r3, #2
 8003234:	f040 8136 	bne.w	80034a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800324e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003256:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003264:	461a      	mov	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e11b      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	334d      	adds	r3, #77	@ 0x4d
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b03      	cmp	r3, #3
 8003280:	f040 8081 	bne.w	8003386 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	331b      	adds	r3, #27
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	f040 80fa 	bne.w	80034a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334c      	adds	r3, #76	@ 0x4c
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	0151      	lsls	r1, r2, #5
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	440a      	add	r2, r1
 80032da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	0151      	lsls	r1, r2, #5
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	440a      	add	r2, r1
 80032fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003302:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	440a      	add	r2, r1
 800331a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800331e:	f023 0320 	bic.w	r3, r3, #32
 8003322:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3326      	adds	r3, #38	@ 0x26
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3326      	adds	r3, #38	@ 0x26
 800334a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800334c:	2b02      	cmp	r3, #2
 800334e:	f040 80a9 	bne.w	80034a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003352:	78fb      	ldrb	r3, [r7, #3]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003368:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003370:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	e08e      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334d      	adds	r3, #77	@ 0x4d
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d143      	bne.n	8003424 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334d      	adds	r3, #77	@ 0x4d
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	334c      	adds	r3, #76	@ 0x4c
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3326      	adds	r3, #38	@ 0x26
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3326      	adds	r3, #38	@ 0x26
 80033ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d159      	bne.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003406:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800340e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e03f      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	334d      	adds	r3, #77	@ 0x4d
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b08      	cmp	r3, #8
 8003438:	d126      	bne.n	8003488 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334d      	adds	r3, #77	@ 0x4d
 800344a:	2202      	movs	r2, #2
 800344c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3344      	adds	r3, #68	@ 0x44
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1c59      	adds	r1, r3, #1
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4403      	add	r3, r0
 800346e:	3344      	adds	r3, #68	@ 0x44
 8003470:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	334c      	adds	r3, #76	@ 0x4c
 8003482:	2204      	movs	r2, #4
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e00d      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b02      	cmp	r3, #2
 800349c:	f000 8100 	beq.w	80036a0 <HCD_HC_IN_IRQHandler+0xcca>
 80034a0:	e000      	b.n	80034a4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334c      	adds	r3, #76	@ 0x4c
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f005 ff36 	bl	800932c <HAL_HCD_HC_NotifyURBChange_Callback>
 80034c0:	e0ef      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fe32 	bl	8006134 <USB_ReadChInterrupts>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d6:	2b40      	cmp	r3, #64	@ 0x40
 80034d8:	d12f      	bne.n	800353a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e6:	461a      	mov	r2, r3
 80034e8:	2340      	movs	r3, #64	@ 0x40
 80034ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334d      	adds	r3, #77	@ 0x4d
 80034fc:	2205      	movs	r2, #5
 80034fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	331a      	adds	r3, #26
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3344      	adds	r3, #68	@ 0x44
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fba1 	bl	8006c7a <USB_HC_Halt>
 8003538:	e0b3      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f002 fdf6 	bl	8006134 <USB_ReadChInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b10      	cmp	r3, #16
 8003550:	f040 80a7 	bne.w	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3326      	adds	r3, #38	@ 0x26
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d11b      	bne.n	80035a2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3344      	adds	r3, #68	@ 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	334d      	adds	r3, #77	@ 0x4d
 800358e:	2204      	movs	r2, #4
 8003590:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fb6d 	bl	8006c7a <USB_HC_Halt>
 80035a0:	e03f      	b.n	8003622 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3326      	adds	r3, #38	@ 0x26
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3326      	adds	r3, #38	@ 0x26
 80035c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d129      	bne.n	8003622 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3344      	adds	r3, #68	@ 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	799b      	ldrb	r3, [r3, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HCD_HC_IN_IRQHandler+0xc2a>
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	331b      	adds	r3, #27
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d110      	bne.n	8003622 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	334d      	adds	r3, #77	@ 0x4d
 8003610:	2204      	movs	r2, #4
 8003612:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fb2c 	bl	8006c7a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	331b      	adds	r3, #27
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d129      	bne.n	800368c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	331b      	adds	r3, #27
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4413      	add	r3, r2
 8003654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	0151      	lsls	r1, r2, #5
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	440a      	add	r2, r1
 8003662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4413      	add	r3, r2
 8003674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	0151      	lsls	r1, r2, #5
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	440a      	add	r2, r1
 8003682:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003686:	f043 0320 	orr.w	r3, r3, #32
 800368a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003698:	461a      	mov	r2, r3
 800369a:	2310      	movs	r3, #16
 800369c:	6093      	str	r3, [r2, #8]
 800369e:	e000      	b.n	80036a2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80036a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 fd34 	bl	8006134 <USB_ReadChInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d11b      	bne.n	800370e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e2:	461a      	mov	r2, r3
 80036e4:	2304      	movs	r3, #4
 80036e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	334d      	adds	r3, #77	@ 0x4d
 80036f8:	2207      	movs	r2, #7
 80036fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fab8 	bl	8006c7a <USB_HC_Halt>
 800370a:	f000 bc89 	b.w	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f002 fd0c 	bl	8006134 <USB_ReadChInterrupts>
 800371c:	4603      	mov	r3, r0
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b20      	cmp	r3, #32
 8003724:	f040 8082 	bne.w	800382c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	2320      	movs	r3, #32
 8003738:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3319      	adds	r3, #25
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d124      	bne.n	800379a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3319      	adds	r3, #25
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334c      	adds	r3, #76	@ 0x4c
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	2203      	movs	r2, #3
 800378a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f003 fa70 	bl	8006c7a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	331a      	adds	r3, #26
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f040 8437 	bne.w	8004020 <HCD_HC_OUT_IRQHandler+0x978>
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	331b      	adds	r3, #27
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 842b 	bne.w	8004020 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3326      	adds	r3, #38	@ 0x26
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d009      	beq.n	80037f4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	331b      	adds	r3, #27
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	334d      	adds	r3, #77	@ 0x4d
 8003804:	2203      	movs	r2, #3
 8003806:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f003 fa32 	bl	8006c7a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3344      	adds	r3, #68	@ 0x44
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e3f9      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fc7d 	bl	8006134 <USB_ReadChInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003844:	d111      	bne.n	800386a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003852:	461a      	mov	r2, r3
 8003854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003858:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f003 fa09 	bl	8006c7a <USB_HC_Halt>
 8003868:	e3da      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f002 fc5e 	bl	8006134 <USB_ReadChInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d168      	bne.n	8003954 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3344      	adds	r3, #68	@ 0x44
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 fc48 	bl	8006134 <USB_ReadChInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d112      	bne.n	80038d4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	3319      	adds	r3, #25
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ce:	461a      	mov	r2, r3
 80038d0:	2340      	movs	r3, #64	@ 0x40
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	331b      	adds	r3, #27
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d019      	beq.n	800391e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	331b      	adds	r3, #27
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	440a      	add	r2, r1
 8003914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003918:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800391c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392a:	461a      	mov	r2, r3
 800392c:	2301      	movs	r3, #1
 800392e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	334d      	adds	r3, #77	@ 0x4d
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f003 f994 	bl	8006c7a <USB_HC_Halt>
 8003952:	e365      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f002 fbe9 	bl	8006134 <USB_ReadChInterrupts>
 8003962:	4603      	mov	r3, r0
 8003964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d139      	bne.n	80039e0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	334d      	adds	r3, #77	@ 0x4d
 800397c:	2205      	movs	r2, #5
 800397e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	331a      	adds	r3, #26
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3319      	adds	r3, #25
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3344      	adds	r3, #68	@ 0x44
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 f957 	bl	8006c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	2340      	movs	r3, #64	@ 0x40
 80039dc:	6093      	str	r3, [r2, #8]
 80039de:	e31f      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f002 fba3 	bl	8006134 <USB_ReadChInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d11a      	bne.n	8003a2e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a04:	461a      	mov	r2, r3
 8003a06:	2308      	movs	r3, #8
 8003a08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	334d      	adds	r3, #77	@ 0x4d
 8003a1a:	2206      	movs	r2, #6
 8003a1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f003 f927 	bl	8006c7a <USB_HC_Halt>
 8003a2c:	e2f8      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f002 fb7c 	bl	8006134 <USB_ReadChInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d144      	bne.n	8003ad0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3344      	adds	r3, #68	@ 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	334d      	adds	r3, #77	@ 0x4d
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3319      	adds	r3, #25
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d114      	bne.n	8003aae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3318      	adds	r3, #24
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3319      	adds	r3, #25
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 f8df 	bl	8006c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2310      	movs	r3, #16
 8003acc:	6093      	str	r3, [r2, #8]
 8003ace:	e2a7      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f002 fb2b 	bl	8006134 <USB_ReadChInterrupts>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	2b80      	cmp	r3, #128	@ 0x80
 8003ae6:	f040 8083 	bne.w	8003bf0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	799b      	ldrb	r3, [r3, #6]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d111      	bne.n	8003b16 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	334d      	adds	r3, #77	@ 0x4d
 8003b02:	2207      	movs	r2, #7
 8003b04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 f8b3 	bl	8006c7a <USB_HC_Halt>
 8003b14:	e062      	b.n	8003bdc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	3344      	adds	r3, #68	@ 0x44
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1c59      	adds	r1, r3, #1
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4403      	add	r3, r0
 8003b36:	3344      	adds	r3, #68	@ 0x44
 8003b38:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3344      	adds	r3, #68	@ 0x44
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d922      	bls.n	8003b96 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3344      	adds	r3, #68	@ 0x44
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	334c      	adds	r3, #76	@ 0x4c
 8003b74:	2204      	movs	r2, #4
 8003b76:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	334c      	adds	r3, #76	@ 0x4c
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f005 fbcc 	bl	800932c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b94:	e022      	b.n	8003bdc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	334c      	adds	r3, #76	@ 0x4c
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bc0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bc8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be8:	461a      	mov	r2, r3
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	6093      	str	r3, [r2, #8]
 8003bee:	e217      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f002 fa9b 	bl	8006134 <USB_ReadChInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c08:	d11b      	bne.n	8003c42 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	334d      	adds	r3, #77	@ 0x4d
 8003c1a:	2209      	movs	r2, #9
 8003c1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 f827 	bl	8006c7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c3e:	6093      	str	r3, [r2, #8]
 8003c40:	e1ee      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 fa72 	bl	8006134 <USB_ReadChInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	f040 81df 	bne.w	800401a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	334d      	adds	r3, #77	@ 0x4d
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	f040 8093 	bne.w	8003dac <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	334d      	adds	r3, #77	@ 0x4d
 8003c96:	2202      	movs	r2, #2
 8003c98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	334c      	adds	r3, #76	@ 0x4c
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3326      	adds	r3, #38	@ 0x26
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d00b      	beq.n	8003cdc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3326      	adds	r3, #38	@ 0x26
 8003cd4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	f040 8190 	bne.w	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	799b      	ldrb	r3, [r3, #6]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d115      	bne.n	8003d10 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	333d      	adds	r3, #61	@ 0x3d
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	f083 0301 	eor.w	r3, r3, #1
 8003cfc:	b2d8      	uxtb	r0, r3
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	333d      	adds	r3, #61	@ 0x3d
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	799b      	ldrb	r3, [r3, #6]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f040 8171 	bne.w	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3334      	adds	r3, #52	@ 0x34
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8165 	beq.w	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3334      	adds	r3, #52	@ 0x34
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4403      	add	r3, r0
 8003d52:	3328      	adds	r3, #40	@ 0x28
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	440b      	add	r3, r1
 8003d58:	1e59      	subs	r1, r3, #1
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4403      	add	r3, r0
 8003d68:	3328      	adds	r3, #40	@ 0x28
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d70:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 813f 	beq.w	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	333d      	adds	r3, #61	@ 0x3d
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	f083 0301 	eor.w	r3, r3, #1
 8003d96:	b2d8      	uxtb	r0, r3
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	333d      	adds	r3, #61	@ 0x3d
 8003da6:	4602      	mov	r2, r0
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e127      	b.n	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003dac:	78fa      	ldrb	r2, [r7, #3]
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	334d      	adds	r3, #77	@ 0x4d
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d120      	bne.n	8003e04 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	334d      	adds	r3, #77	@ 0x4d
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	331b      	adds	r3, #27
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 8107 	bne.w	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	334c      	adds	r3, #76	@ 0x4c
 8003dfe:	2202      	movs	r2, #2
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e0fb      	b.n	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	334d      	adds	r3, #77	@ 0x4d
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d13a      	bne.n	8003e90 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	334d      	adds	r3, #77	@ 0x4d
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	334c      	adds	r3, #76	@ 0x4c
 8003e3e:	2202      	movs	r2, #2
 8003e40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	331b      	adds	r3, #27
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	f040 80d1 	bne.w	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	331b      	adds	r3, #27
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	0151      	lsls	r1, r2, #5
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	440a      	add	r2, r1
 8003e84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6053      	str	r3, [r2, #4]
 8003e8e:	e0b5      	b.n	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	334d      	adds	r3, #77	@ 0x4d
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d114      	bne.n	8003ed0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	334d      	adds	r3, #77	@ 0x4d
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	334c      	adds	r3, #76	@ 0x4c
 8003eca:	2202      	movs	r2, #2
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	e095      	b.n	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	334d      	adds	r3, #77	@ 0x4d
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d114      	bne.n	8003f10 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	334d      	adds	r3, #77	@ 0x4d
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	334c      	adds	r3, #76	@ 0x4c
 8003f0a:	2205      	movs	r2, #5
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e075      	b.n	8003ffc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	334d      	adds	r3, #77	@ 0x4d
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b07      	cmp	r3, #7
 8003f24:	d00a      	beq.n	8003f3c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	334d      	adds	r3, #77	@ 0x4d
 8003f36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	d170      	bne.n	800401e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334d      	adds	r3, #77	@ 0x4d
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3344      	adds	r3, #68	@ 0x44
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1c59      	adds	r1, r3, #1
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4403      	add	r3, r0
 8003f70:	3344      	adds	r3, #68	@ 0x44
 8003f72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3344      	adds	r3, #68	@ 0x44
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d914      	bls.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3344      	adds	r3, #68	@ 0x44
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	334c      	adds	r3, #76	@ 0x4c
 8003fae:	2204      	movs	r2, #4
 8003fb0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fb2:	e022      	b.n	8003ffa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	334c      	adds	r3, #76	@ 0x4c
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fde:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fe6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ffa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334c      	adds	r3, #76	@ 0x4c
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f005 f98a 	bl	800932c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004018:	e002      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800401e:	bf00      	nop
  }
}
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b08a      	sub	sp, #40	@ 0x28
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	0c5b      	lsrs	r3, r3, #17
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800405a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d004      	beq.n	800406c <HCD_RXQLVL_IRQHandler+0x46>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b05      	cmp	r3, #5
 8004066:	f000 80b6 	beq.w	80041d6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800406a:	e0b7      	b.n	80041dc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80b3 	beq.w	80041da <HCD_RXQLVL_IRQHandler+0x1b4>
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	332c      	adds	r3, #44	@ 0x2c
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a7 	beq.w	80041da <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	3338      	adds	r3, #56	@ 0x38
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	18d1      	adds	r1, r2, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4403      	add	r3, r0
 80040b0:	3334      	adds	r3, #52	@ 0x34
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4299      	cmp	r1, r3
 80040b6:	f200 8083 	bhi.w	80041c0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	332c      	adds	r3, #44	@ 0x2c
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	b292      	uxth	r2, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	f001 ffc2 	bl	800605e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	332c      	adds	r3, #44	@ 0x2c
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	18d1      	adds	r1, r2, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4403      	add	r3, r0
 80040fe:	332c      	adds	r3, #44	@ 0x2c
 8004100:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3338      	adds	r3, #56	@ 0x38
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	18d1      	adds	r1, r2, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4403      	add	r3, r0
 8004126:	3338      	adds	r3, #56	@ 0x38
 8004128:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	4413      	add	r3, r2
 8004132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	0cdb      	lsrs	r3, r3, #19
 800413a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3328      	adds	r3, #40	@ 0x28
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4293      	cmp	r3, r2
 8004158:	d13f      	bne.n	80041da <HCD_RXQLVL_IRQHandler+0x1b4>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03c      	beq.n	80041da <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004176:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800417e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	333c      	adds	r3, #60	@ 0x3c
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	f083 0301 	eor.w	r3, r3, #1
 80041a8:	b2d8      	uxtb	r0, r3
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	333c      	adds	r3, #60	@ 0x3c
 80041ba:	4602      	mov	r2, r0
 80041bc:	701a      	strb	r2, [r3, #0]
      break;
 80041be:	e00c      	b.n	80041da <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334c      	adds	r3, #76	@ 0x4c
 80041d0:	2204      	movs	r2, #4
 80041d2:	701a      	strb	r2, [r3, #0]
      break;
 80041d4:	e001      	b.n	80041da <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80041da:	bf00      	nop
  }
}
 80041dc:	bf00      	nop
 80041de:	3728      	adds	r7, #40	@ 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004210:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d10b      	bne.n	8004234 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f005 f864 	bl	80092f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b08      	cmp	r3, #8
 800423c:	d132      	bne.n	80042a4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f043 0308 	orr.w	r3, r3, #8
 8004244:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d126      	bne.n	800429e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7a5b      	ldrb	r3, [r3, #9]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d113      	bne.n	8004280 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800425e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004262:	d106      	bne.n	8004272 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f002 f886 	bl	800637c <USB_InitFSLSPClkSel>
 8004270:	e011      	b.n	8004296 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2101      	movs	r1, #1
 8004278:	4618      	mov	r0, r3
 800427a:	f002 f87f 	bl	800637c <USB_InitFSLSPClkSel>
 800427e:	e00a      	b.n	8004296 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	79db      	ldrb	r3, [r3, #7]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d106      	bne.n	8004296 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800428e:	461a      	mov	r2, r3
 8004290:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004294:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f005 f856 	bl	8009348 <HAL_HCD_PortEnabled_Callback>
 800429c:	e002      	b.n	80042a4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f005 f860 	bl	8009364 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d103      	bne.n	80042b6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f043 0320 	orr.w	r3, r3, #32
 80042b4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6013      	str	r3, [r2, #0]
}
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e12b      	b.n	8004536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fd f930 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800431e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800432e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004330:	f001 fb46 	bl	80059c0 <HAL_RCC_GetPCLK1Freq>
 8004334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4a81      	ldr	r2, [pc, #516]	@ (8004540 <HAL_I2C_Init+0x274>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d807      	bhi.n	8004350 <HAL_I2C_Init+0x84>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a80      	ldr	r2, [pc, #512]	@ (8004544 <HAL_I2C_Init+0x278>)
 8004344:	4293      	cmp	r3, r2
 8004346:	bf94      	ite	ls
 8004348:	2301      	movls	r3, #1
 800434a:	2300      	movhi	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e006      	b.n	800435e <HAL_I2C_Init+0x92>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a7d      	ldr	r2, [pc, #500]	@ (8004548 <HAL_I2C_Init+0x27c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	bf94      	ite	ls
 8004358:	2301      	movls	r3, #1
 800435a:	2300      	movhi	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0e7      	b.n	8004536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a78      	ldr	r2, [pc, #480]	@ (800454c <HAL_I2C_Init+0x280>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0c9b      	lsrs	r3, r3, #18
 8004370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4a6a      	ldr	r2, [pc, #424]	@ (8004540 <HAL_I2C_Init+0x274>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d802      	bhi.n	80043a0 <HAL_I2C_Init+0xd4>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	3301      	adds	r3, #1
 800439e:	e009      	b.n	80043b4 <HAL_I2C_Init+0xe8>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043a6:	fb02 f303 	mul.w	r3, r2, r3
 80043aa:	4a69      	ldr	r2, [pc, #420]	@ (8004550 <HAL_I2C_Init+0x284>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	099b      	lsrs	r3, r3, #6
 80043b2:	3301      	adds	r3, #1
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	495c      	ldr	r1, [pc, #368]	@ (8004540 <HAL_I2C_Init+0x274>)
 80043d0:	428b      	cmp	r3, r1
 80043d2:	d819      	bhi.n	8004408 <HAL_I2C_Init+0x13c>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e59      	subs	r1, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043e8:	400b      	ands	r3, r1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_I2C_Init+0x138>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e59      	subs	r1, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004402:	e051      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004404:	2304      	movs	r3, #4
 8004406:	e04f      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d111      	bne.n	8004434 <HAL_I2C_Init+0x168>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1e58      	subs	r0, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6859      	ldr	r1, [r3, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e012      	b.n	800445a <HAL_I2C_Init+0x18e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1e58      	subs	r0, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	0099      	lsls	r1, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	fbb0 f3f3 	udiv	r3, r0, r3
 800444a:	3301      	adds	r3, #1
 800444c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Init+0x196>
 800445e:	2301      	movs	r3, #1
 8004460:	e022      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10e      	bne.n	8004488 <HAL_I2C_Init+0x1bc>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1e58      	subs	r0, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	440b      	add	r3, r1
 8004478:	fbb0 f3f3 	udiv	r3, r0, r3
 800447c:	3301      	adds	r3, #1
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004486:	e00f      	b.n	80044a8 <HAL_I2C_Init+0x1dc>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e58      	subs	r0, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	0099      	lsls	r1, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	6809      	ldr	r1, [r1, #0]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6911      	ldr	r1, [r2, #16]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68d2      	ldr	r2, [r2, #12]
 80044e2:	4311      	orrs	r1, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	000186a0 	.word	0x000186a0
 8004544:	001e847f 	.word	0x001e847f
 8004548:	003d08ff 	.word	0x003d08ff
 800454c:	431bde83 	.word	0x431bde83
 8004550:	10624dd3 	.word	0x10624dd3

08004554 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e128      	b.n	80047b8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a90      	ldr	r2, [pc, #576]	@ (80047c0 <HAL_I2S_Init+0x26c>)
 800457e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fd f831 	bl	80015e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800459c:	f023 030f 	bic.w	r3, r3, #15
 80045a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2202      	movs	r2, #2
 80045a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d060      	beq.n	8004674 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80045ba:	2310      	movs	r3, #16
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e001      	b.n	80045c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80045c0:	2320      	movs	r3, #32
 80045c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d802      	bhi.n	80045d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80045d2:	2001      	movs	r0, #1
 80045d4:	f001 faea 	bl	8005bac <HAL_RCCEx_GetPeriphCLKFreq>
 80045d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e2:	d125      	bne.n	8004630 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d010      	beq.n	800460e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	461a      	mov	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	3305      	adds	r3, #5
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	e01f      	b.n	800464e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	fbb2 f2f3 	udiv	r2, r2, r3
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	461a      	mov	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	3305      	adds	r3, #5
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	e00e      	b.n	800464e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fbb2 f2f3 	udiv	r2, r2, r3
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	461a      	mov	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	3305      	adds	r3, #5
 800464c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4a5c      	ldr	r2, [pc, #368]	@ (80047c4 <HAL_I2S_Init+0x270>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	08db      	lsrs	r3, r3, #3
 8004658:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	e003      	b.n	800467c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004674:	2302      	movs	r3, #2
 8004676:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d902      	bls.n	8004688 <HAL_I2S_Init+0x134>
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2bff      	cmp	r3, #255	@ 0xff
 8004686:	d907      	bls.n	8004698 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468c:	f043 0210 	orr.w	r2, r3, #16
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e08f      	b.n	80047b8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	ea42 0103 	orr.w	r1, r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80046b6:	f023 030f 	bic.w	r3, r3, #15
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6851      	ldr	r1, [r2, #4]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6892      	ldr	r2, [r2, #8]
 80046c2:	4311      	orrs	r1, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68d2      	ldr	r2, [r2, #12]
 80046c8:	4311      	orrs	r1, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6992      	ldr	r2, [r2, #24]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d161      	bne.n	80047a8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a38      	ldr	r2, [pc, #224]	@ (80047c8 <HAL_I2S_Init+0x274>)
 80046e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a37      	ldr	r2, [pc, #220]	@ (80047cc <HAL_I2S_Init+0x278>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d101      	bne.n	80046f8 <HAL_I2S_Init+0x1a4>
 80046f4:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <HAL_I2S_Init+0x27c>)
 80046f6:	e001      	b.n	80046fc <HAL_I2S_Init+0x1a8>
 80046f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	4932      	ldr	r1, [pc, #200]	@ (80047cc <HAL_I2S_Init+0x278>)
 8004704:	428a      	cmp	r2, r1
 8004706:	d101      	bne.n	800470c <HAL_I2S_Init+0x1b8>
 8004708:	4a31      	ldr	r2, [pc, #196]	@ (80047d0 <HAL_I2S_Init+0x27c>)
 800470a:	e001      	b.n	8004710 <HAL_I2S_Init+0x1bc>
 800470c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004710:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004714:	f023 030f 	bic.w	r3, r3, #15
 8004718:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2b      	ldr	r2, [pc, #172]	@ (80047cc <HAL_I2S_Init+0x278>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d101      	bne.n	8004728 <HAL_I2S_Init+0x1d4>
 8004724:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <HAL_I2S_Init+0x27c>)
 8004726:	e001      	b.n	800472c <HAL_I2S_Init+0x1d8>
 8004728:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472c:	2202      	movs	r2, #2
 800472e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a25      	ldr	r2, [pc, #148]	@ (80047cc <HAL_I2S_Init+0x278>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d101      	bne.n	800473e <HAL_I2S_Init+0x1ea>
 800473a:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <HAL_I2S_Init+0x27c>)
 800473c:	e001      	b.n	8004742 <HAL_I2S_Init+0x1ee>
 800473e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800474e:	d003      	beq.n	8004758 <HAL_I2S_Init+0x204>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e001      	b.n	8004764 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800476e:	4313      	orrs	r3, r2
 8004770:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004778:	4313      	orrs	r3, r2
 800477a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004782:	4313      	orrs	r3, r2
 8004784:	b29a      	uxth	r2, r3
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	4313      	orrs	r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004790:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a0d      	ldr	r2, [pc, #52]	@ (80047cc <HAL_I2S_Init+0x278>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <HAL_I2S_Init+0x24c>
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_I2S_Init+0x27c>)
 800479e:	e001      	b.n	80047a4 <HAL_I2S_Init+0x250>
 80047a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047a4:	897a      	ldrh	r2, [r7, #10]
 80047a6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	08004aa5 	.word	0x08004aa5
 80047c4:	cccccccd 	.word	0xcccccccd
 80047c8:	08004c2d 	.word	0x08004c2d
 80047cc:	40003800 	.word	0x40003800
 80047d0:	40003400 	.word	0x40003400

080047d4 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_I2S_Transmit+0x1c>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0d8      	b.n	80049a6 <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d001      	beq.n	8004804 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
 8004802:	e0d0      	b.n	80049a6 <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_I2S_Transmit+0x40>
 8004810:	2302      	movs	r3, #2
 8004812:	e0c8      	b.n	80049a6 <HAL_I2S_Transmit+0x1d2>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2203      	movs	r2, #3
 8004820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d002      	beq.n	8004848 <HAL_I2S_Transmit+0x74>
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b05      	cmp	r3, #5
 8004846:	d10a      	bne.n	800485e <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800485c:	e005      	b.n	800486a <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	88fa      	ldrh	r2, [r7, #6]
 8004862:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004880:	d007      	beq.n	8004892 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004890:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	2102      	movs	r1, #2
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f98d 	bl	8004bb8 <I2S_WaitFlagStateUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d04e      	beq.n	8004942 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e070      	b.n	80049a6 <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2201      	movs	r2, #1
 80048ec:	2102      	movs	r1, #2
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f962 	bl	8004bb8 <I2S_WaitFlagStateUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00f      	beq.n	800491a <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e045      	b.n	80049a6 <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b08      	cmp	r3, #8
 8004926:	d10c      	bne.n	8004942 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	f043 0204 	orr.w	r2, r3, #4
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1bb      	bne.n	80048c4 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004960:	d118      	bne.n	8004994 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2200      	movs	r2, #0
 8004966:	2180      	movs	r1, #128	@ 0x80
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f925 	bl	8004bb8 <I2S_WaitFlagStateUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00f      	beq.n	8004994 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	f043 0201 	orr.w	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e008      	b.n	80049a6 <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	881a      	ldrh	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	1c9a      	adds	r2, r3, #2
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10e      	bne.n	8004a3e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ffb8 	bl	80049ae <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a60:	1c9a      	adds	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10e      	bne.n	8004a9c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ff93 	bl	80049c2 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d13a      	bne.n	8004b36 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d109      	bne.n	8004ade <I2S_IRQHandler+0x3a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d102      	bne.n	8004ade <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ffb4 	bl	8004a46 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae4:	2b40      	cmp	r3, #64	@ 0x40
 8004ae6:	d126      	bne.n	8004b36 <I2S_IRQHandler+0x92>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d11f      	bne.n	8004b36 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b04:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b28:	f043 0202 	orr.w	r2, r3, #2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff ff50 	bl	80049d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d136      	bne.n	8004bb0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d109      	bne.n	8004b60 <I2S_IRQHandler+0xbc>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b56:	2b80      	cmp	r3, #128	@ 0x80
 8004b58:	d102      	bne.n	8004b60 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ff45 	bl	80049ea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d122      	bne.n	8004bb0 <I2S_IRQHandler+0x10c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d11b      	bne.n	8004bb0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b86:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff ff13 	bl	80049d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bc8:	f7fc ff3a 	bl	8001a40 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004bce:	e018      	b.n	8004c02 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d014      	beq.n	8004c02 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004bd8:	f7fc ff32 	bl	8001a40 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d902      	bls.n	8004bee <I2S_WaitFlagStateUntilTimeout+0x36>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d109      	bne.n	8004c02 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e00f      	b.n	8004c22 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d1d7      	bne.n	8004bd0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a92      	ldr	r2, [pc, #584]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c46:	4b92      	ldr	r3, [pc, #584]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c48:	e001      	b.n	8004c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a8b      	ldr	r2, [pc, #556]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d101      	bne.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c64:	4b8a      	ldr	r3, [pc, #552]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c66:	e001      	b.n	8004c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c78:	d004      	beq.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 8099 	bne.w	8004db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d107      	bne.n	8004c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f925 	bl	8004ee8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9c8 	bl	8005048 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b40      	cmp	r3, #64	@ 0x40
 8004cc0:	d13a      	bne.n	8004d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d035      	beq.n	8004d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cd8:	e001      	b.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4969      	ldr	r1, [pc, #420]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ce6:	428b      	cmp	r3, r1
 8004ce8:	d101      	bne.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cea:	4b69      	ldr	r3, [pc, #420]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cec:	e001      	b.n	8004cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cf6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f043 0202 	orr.w	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff fe4f 	bl	80049d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	f040 80c3 	bne.w	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 80bd 	beq.w	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a49      	ldr	r2, [pc, #292]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d101      	bne.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d6a:	4b49      	ldr	r3, [pc, #292]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d6c:	e001      	b.n	8004d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4944      	ldr	r1, [pc, #272]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d7a:	428b      	cmp	r3, r1
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d7e:	4b44      	ldr	r3, [pc, #272]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d80:	e001      	b.n	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d8a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f043 0204 	orr.w	r2, r3, #4
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fe11 	bl	80049d6 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004db4:	e089      	b.n	8004eca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d107      	bne.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8be 	bl	8004f4c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f8fd 	bl	8004fe4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d12f      	bne.n	8004e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02a      	beq.n	8004e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e0c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d101      	bne.n	8004e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004e18:	4b1d      	ldr	r3, [pc, #116]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e1a:	e001      	b.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4919      	ldr	r1, [pc, #100]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	d101      	bne.n	8004e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e2c:	4b18      	ldr	r3, [pc, #96]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e2e:	e001      	b.n	8004e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e38:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f043 0202 	orr.w	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fdc1 	bl	80049d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d136      	bne.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d031      	beq.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a07      	ldr	r2, [pc, #28]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d101      	bne.n	8004e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e72:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e74:	e001      	b.n	8004e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4902      	ldr	r1, [pc, #8]	@ (8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e82:	428b      	cmp	r3, r1
 8004e84:	d106      	bne.n	8004e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e86:	4b02      	ldr	r3, [pc, #8]	@ (8004e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e88:	e006      	b.n	8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e8a:	bf00      	nop
 8004e8c:	40003800 	.word	0x40003800
 8004e90:	40003400 	.word	0x40003400
 8004e94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e9c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fd87 	bl	80049d6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec8:	e000      	b.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eca:	bf00      	nop
}
 8004ecc:	bf00      	nop
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	1c99      	adds	r1, r3, #2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6251      	str	r1, [r2, #36]	@ 0x24
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d113      	bne.n	8004f42 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ffc9 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f42:	bf00      	nop
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	1c99      	adds	r1, r3, #2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004f5e:	8819      	ldrh	r1, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x90>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <I2SEx_TxISR_I2SExt+0x22>
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f6c:	e001      	b.n	8004f72 <I2SEx_TxISR_I2SExt+0x26>
 8004f6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f72:	460a      	mov	r2, r1
 8004f74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d121      	bne.n	8004fd2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a12      	ldr	r2, [pc, #72]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x90>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <I2SEx_TxISR_I2SExt+0x50>
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f9a:	e001      	b.n	8004fa0 <I2SEx_TxISR_I2SExt+0x54>
 8004f9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	490d      	ldr	r1, [pc, #52]	@ (8004fdc <I2SEx_TxISR_I2SExt+0x90>)
 8004fa8:	428b      	cmp	r3, r1
 8004faa:	d101      	bne.n	8004fb0 <I2SEx_TxISR_I2SExt+0x64>
 8004fac:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe0 <I2SEx_TxISR_I2SExt+0x94>)
 8004fae:	e001      	b.n	8004fb4 <I2SEx_TxISR_I2SExt+0x68>
 8004fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fb8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d106      	bne.n	8004fd2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff81 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40003800 	.word	0x40003800
 8004fe0:	40003400 	.word	0x40003400

08004fe4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68d8      	ldr	r0, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	1c99      	adds	r1, r3, #2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ffc:	b282      	uxth	r2, r0
 8004ffe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d113      	bne.n	8005040 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005026:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff ff4a 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a20      	ldr	r2, [pc, #128]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x90>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d101      	bne.n	800505e <I2SEx_RxISR_I2SExt+0x16>
 800505a:	4b20      	ldr	r3, [pc, #128]	@ (80050dc <I2SEx_RxISR_I2SExt+0x94>)
 800505c:	e001      	b.n	8005062 <I2SEx_RxISR_I2SExt+0x1a>
 800505e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005062:	68d8      	ldr	r0, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	1c99      	adds	r1, r3, #2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800506e:	b282      	uxth	r2, r0
 8005070:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d121      	bne.n	80050ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a12      	ldr	r2, [pc, #72]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x90>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d101      	bne.n	8005098 <I2SEx_RxISR_I2SExt+0x50>
 8005094:	4b11      	ldr	r3, [pc, #68]	@ (80050dc <I2SEx_RxISR_I2SExt+0x94>)
 8005096:	e001      	b.n	800509c <I2SEx_RxISR_I2SExt+0x54>
 8005098:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	490d      	ldr	r1, [pc, #52]	@ (80050d8 <I2SEx_RxISR_I2SExt+0x90>)
 80050a4:	428b      	cmp	r3, r1
 80050a6:	d101      	bne.n	80050ac <I2SEx_RxISR_I2SExt+0x64>
 80050a8:	4b0c      	ldr	r3, [pc, #48]	@ (80050dc <I2SEx_RxISR_I2SExt+0x94>)
 80050aa:	e001      	b.n	80050b0 <I2SEx_RxISR_I2SExt+0x68>
 80050ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff03 	bl	8004ed4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40003800 	.word	0x40003800
 80050dc:	40003400 	.word	0x40003400

080050e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e267      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d075      	beq.n	80051ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050fe:	4b88      	ldr	r3, [pc, #544]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b04      	cmp	r3, #4
 8005108:	d00c      	beq.n	8005124 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510a:	4b85      	ldr	r3, [pc, #532]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005112:	2b08      	cmp	r3, #8
 8005114:	d112      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005116:	4b82      	ldr	r3, [pc, #520]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005122:	d10b      	bne.n	800513c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	4b7e      	ldr	r3, [pc, #504]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05b      	beq.n	80051e8 <HAL_RCC_OscConfig+0x108>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d157      	bne.n	80051e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e242      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005144:	d106      	bne.n	8005154 <HAL_RCC_OscConfig+0x74>
 8005146:	4b76      	ldr	r3, [pc, #472]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a75      	ldr	r2, [pc, #468]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e01d      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800515c:	d10c      	bne.n	8005178 <HAL_RCC_OscConfig+0x98>
 800515e:	4b70      	ldr	r3, [pc, #448]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a6f      	ldr	r2, [pc, #444]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b6d      	ldr	r3, [pc, #436]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a6c      	ldr	r2, [pc, #432]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e00b      	b.n	8005190 <HAL_RCC_OscConfig+0xb0>
 8005178:	4b69      	ldr	r3, [pc, #420]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a68      	ldr	r2, [pc, #416]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b66      	ldr	r3, [pc, #408]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a65      	ldr	r2, [pc, #404]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005198:	f7fc fc52 	bl	8001a40 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a0:	f7fc fc4e 	bl	8001a40 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	@ 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e207      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0xc0>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c0:	f7fc fc3e 	bl	8001a40 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fc fc3a 	bl	8001a40 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	@ 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e1f3      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051da:	4b51      	ldr	r3, [pc, #324]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0xe8>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005202:	4b47      	ldr	r3, [pc, #284]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11c      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520e:	4b44      	ldr	r3, [pc, #272]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d116      	bne.n	8005248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e1c7      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005232:	4b3b      	ldr	r3, [pc, #236]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4937      	ldr	r1, [pc, #220]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005246:	e03a      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d020      	beq.n	8005292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005250:	4b34      	ldr	r3, [pc, #208]	@ (8005324 <HAL_RCC_OscConfig+0x244>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fc fbf3 	bl	8001a40 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525e:	f7fc fbef 	bl	8001a40 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e1a8      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005270:	4b2b      	ldr	r3, [pc, #172]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800527c:	4b28      	ldr	r3, [pc, #160]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4925      	ldr	r1, [pc, #148]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]
 8005290:	e015      	b.n	80052be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005292:	4b24      	ldr	r3, [pc, #144]	@ (8005324 <HAL_RCC_OscConfig+0x244>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fc fbd2 	bl	8001a40 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fc fbce 	bl	8001a40 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e187      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d036      	beq.n	8005338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d016      	beq.n	8005300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d2:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <HAL_RCC_OscConfig+0x248>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fc fbb2 	bl	8001a40 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e0:	f7fc fbae 	bl	8001a40 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e167      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <HAL_RCC_OscConfig+0x240>)
 80052f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x200>
 80052fe:	e01b      	b.n	8005338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005300:	4b09      	ldr	r3, [pc, #36]	@ (8005328 <HAL_RCC_OscConfig+0x248>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005306:	f7fc fb9b 	bl	8001a40 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530c:	e00e      	b.n	800532c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800530e:	f7fc fb97 	bl	8001a40 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d907      	bls.n	800532c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e150      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
 8005320:	40023800 	.word	0x40023800
 8005324:	42470000 	.word	0x42470000
 8005328:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800532c:	4b88      	ldr	r3, [pc, #544]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800532e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ea      	bne.n	800530e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8097 	beq.w	8005474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800534a:	4b81      	ldr	r3, [pc, #516]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10f      	bne.n	8005376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	4b7d      	ldr	r3, [pc, #500]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	4a7c      	ldr	r2, [pc, #496]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005364:	6413      	str	r3, [r2, #64]	@ 0x40
 8005366:	4b7a      	ldr	r3, [pc, #488]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005372:	2301      	movs	r3, #1
 8005374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	4b77      	ldr	r3, [pc, #476]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d118      	bne.n	80053b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005382:	4b74      	ldr	r3, [pc, #464]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a73      	ldr	r2, [pc, #460]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 8005388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800538c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538e:	f7fc fb57 	bl	8001a40 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005396:	f7fc fb53 	bl	8001a40 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e10c      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005554 <HAL_RCC_OscConfig+0x474>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0x2ea>
 80053bc:	4b64      	ldr	r3, [pc, #400]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c0:	4a63      	ldr	r2, [pc, #396]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c8:	e01c      	b.n	8005404 <HAL_RCC_OscConfig+0x324>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x30c>
 80053d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80053de:	4b5c      	ldr	r3, [pc, #368]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0x324>
 80053ec:	4b58      	ldr	r3, [pc, #352]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f0:	4a57      	ldr	r2, [pc, #348]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f8:	4b55      	ldr	r3, [pc, #340]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fc:	4a54      	ldr	r2, [pc, #336]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80053fe:	f023 0304 	bic.w	r3, r3, #4
 8005402:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d015      	beq.n	8005438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540c:	f7fc fb18 	bl	8001a40 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005412:	e00a      	b.n	800542a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005414:	f7fc fb14 	bl	8001a40 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0cb      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800542a:	4b49      	ldr	r3, [pc, #292]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0ee      	beq.n	8005414 <HAL_RCC_OscConfig+0x334>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005438:	f7fc fb02 	bl	8001a40 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543e:	e00a      	b.n	8005456 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005440:	f7fc fafe 	bl	8001a40 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544e:	4293      	cmp	r3, r2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e0b5      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005456:	4b3e      	ldr	r3, [pc, #248]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ee      	bne.n	8005440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b39      	ldr	r3, [pc, #228]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	4a38      	ldr	r2, [pc, #224]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005472:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80a1 	beq.w	80055c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800547e:	4b34      	ldr	r3, [pc, #208]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b08      	cmp	r3, #8
 8005488:	d05c      	beq.n	8005544 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d141      	bne.n	8005516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b31      	ldr	r3, [pc, #196]	@ (8005558 <HAL_RCC_OscConfig+0x478>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fc fad2 	bl	8001a40 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fc face 	bl	8001a40 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e087      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054b2:	4b27      	ldr	r3, [pc, #156]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f0      	bne.n	80054a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	019b      	lsls	r3, r3, #6
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	3b01      	subs	r3, #1
 80054d8:	041b      	lsls	r3, r3, #16
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	491b      	ldr	r1, [pc, #108]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005558 <HAL_RCC_OscConfig+0x478>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fc faa7 	bl	8001a40 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f6:	f7fc faa3 	bl	8001a40 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e05c      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005508:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x416>
 8005514:	e054      	b.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	4b10      	ldr	r3, [pc, #64]	@ (8005558 <HAL_RCC_OscConfig+0x478>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fc fa90 	bl	8001a40 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fc fa8c 	bl	8001a40 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e045      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <HAL_RCC_OscConfig+0x470>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x444>
 8005542:	e03d      	b.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e038      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
 8005550:	40023800 	.word	0x40023800
 8005554:	40007000 	.word	0x40007000
 8005558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <HAL_RCC_OscConfig+0x4ec>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d028      	beq.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005574:	429a      	cmp	r2, r3
 8005576:	d121      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d11a      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800558c:	4013      	ands	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005594:	4293      	cmp	r3, r2
 8005596:	d111      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	3b01      	subs	r3, #1
 80055a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d107      	bne.n	80055bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800

080055d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0cc      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b68      	ldr	r3, [pc, #416]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d90c      	bls.n	800560c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b65      	ldr	r3, [pc, #404]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055fa:	4b63      	ldr	r3, [pc, #396]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d001      	beq.n	800560c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0b8      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d020      	beq.n	800565a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005624:	4b59      	ldr	r3, [pc, #356]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4a58      	ldr	r2, [pc, #352]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800562e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800563c:	4b53      	ldr	r3, [pc, #332]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4a52      	ldr	r2, [pc, #328]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005648:	4b50      	ldr	r3, [pc, #320]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	494d      	ldr	r1, [pc, #308]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d044      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d107      	bne.n	800567e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	4b47      	ldr	r3, [pc, #284]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d119      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e07f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d003      	beq.n	800568e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568a:	2b03      	cmp	r3, #3
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b3f      	ldr	r3, [pc, #252]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e06f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b3b      	ldr	r3, [pc, #236]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e067      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ae:	4b37      	ldr	r3, [pc, #220]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 0203 	bic.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4934      	ldr	r1, [pc, #208]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c0:	f7fc f9be 	bl	8001a40 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fc f9ba 	bl	8001a40 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e04f      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	4b2b      	ldr	r3, [pc, #172]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 020c 	and.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1eb      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f0:	4b25      	ldr	r3, [pc, #148]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d20c      	bcs.n	8005718 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b22      	ldr	r3, [pc, #136]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b20      	ldr	r3, [pc, #128]	@ (8005788 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e032      	b.n	800577e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005724:	4b19      	ldr	r3, [pc, #100]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4916      	ldr	r1, [pc, #88]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005742:	4b12      	ldr	r3, [pc, #72]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	490e      	ldr	r1, [pc, #56]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	4313      	orrs	r3, r2
 8005754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005756:	f000 f821 	bl	800579c <HAL_RCC_GetSysClockFreq>
 800575a:	4602      	mov	r2, r0
 800575c:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	490a      	ldr	r1, [pc, #40]	@ (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005768:	5ccb      	ldrb	r3, [r1, r3]
 800576a:	fa22 f303 	lsr.w	r3, r2, r3
 800576e:	4a09      	ldr	r2, [pc, #36]	@ (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <HAL_RCC_ClockConfig+0x1c8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fc f91e 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40023c00 	.word	0x40023c00
 800578c:	40023800 	.word	0x40023800
 8005790:	0800b744 	.word	0x0800b744
 8005794:	20000000 	.word	0x20000000
 8005798:	20000004 	.word	0x20000004

0800579c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800579c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057a0:	b094      	sub	sp, #80	@ 0x50
 80057a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b4:	4b79      	ldr	r3, [pc, #484]	@ (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d00d      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x40>
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	f200 80e1 	bhi.w	8005988 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x34>
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d003      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ce:	e0db      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b73      	ldr	r3, [pc, #460]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80057d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057d4:	e0db      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d6:	4b73      	ldr	r3, [pc, #460]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80057d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057da:	e0d8      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057dc:	4b6f      	ldr	r3, [pc, #444]	@ (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057e6:	4b6d      	ldr	r3, [pc, #436]	@ (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d063      	beq.n	80058ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f2:	4b6a      	ldr	r3, [pc, #424]	@ (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	2200      	movs	r2, #0
 80057fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
 8005806:	2300      	movs	r3, #0
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
 800580a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800580e:	4622      	mov	r2, r4
 8005810:	462b      	mov	r3, r5
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	0159      	lsls	r1, r3, #5
 800581c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005820:	0150      	lsls	r0, r2, #5
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4621      	mov	r1, r4
 8005828:	1a51      	subs	r1, r2, r1
 800582a:	6139      	str	r1, [r7, #16]
 800582c:	4629      	mov	r1, r5
 800582e:	eb63 0301 	sbc.w	r3, r3, r1
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005840:	4659      	mov	r1, fp
 8005842:	018b      	lsls	r3, r1, #6
 8005844:	4651      	mov	r1, sl
 8005846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800584a:	4651      	mov	r1, sl
 800584c:	018a      	lsls	r2, r1, #6
 800584e:	4651      	mov	r1, sl
 8005850:	ebb2 0801 	subs.w	r8, r2, r1
 8005854:	4659      	mov	r1, fp
 8005856:	eb63 0901 	sbc.w	r9, r3, r1
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800586a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800586e:	4690      	mov	r8, r2
 8005870:	4699      	mov	r9, r3
 8005872:	4623      	mov	r3, r4
 8005874:	eb18 0303 	adds.w	r3, r8, r3
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	462b      	mov	r3, r5
 800587c:	eb49 0303 	adc.w	r3, r9, r3
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800588e:	4629      	mov	r1, r5
 8005890:	024b      	lsls	r3, r1, #9
 8005892:	4621      	mov	r1, r4
 8005894:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005898:	4621      	mov	r1, r4
 800589a:	024a      	lsls	r2, r1, #9
 800589c:	4610      	mov	r0, r2
 800589e:	4619      	mov	r1, r3
 80058a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058a2:	2200      	movs	r2, #0
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058ac:	f7fb f95e 	bl	8000b6c <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4613      	mov	r3, r2
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b8:	e058      	b.n	800596c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ba:	4b38      	ldr	r3, [pc, #224]	@ (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	099b      	lsrs	r3, r3, #6
 80058c0:	2200      	movs	r2, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	4611      	mov	r1, r2
 80058c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	f04f 0000 	mov.w	r0, #0
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	0159      	lsls	r1, r3, #5
 80058e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058e6:	0150      	lsls	r0, r2, #5
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4641      	mov	r1, r8
 80058ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80058f2:	4649      	mov	r1, r9
 80058f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800590c:	ebb2 040a 	subs.w	r4, r2, sl
 8005910:	eb63 050b 	sbc.w	r5, r3, fp
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	00eb      	lsls	r3, r5, #3
 800591e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005922:	00e2      	lsls	r2, r4, #3
 8005924:	4614      	mov	r4, r2
 8005926:	461d      	mov	r5, r3
 8005928:	4643      	mov	r3, r8
 800592a:	18e3      	adds	r3, r4, r3
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	464b      	mov	r3, r9
 8005930:	eb45 0303 	adc.w	r3, r5, r3
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005942:	4629      	mov	r1, r5
 8005944:	028b      	lsls	r3, r1, #10
 8005946:	4621      	mov	r1, r4
 8005948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800594c:	4621      	mov	r1, r4
 800594e:	028a      	lsls	r2, r1, #10
 8005950:	4610      	mov	r0, r2
 8005952:	4619      	mov	r1, r3
 8005954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005956:	2200      	movs	r2, #0
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	61fa      	str	r2, [r7, #28]
 800595c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005960:	f7fb f904 	bl	8000b6c <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4613      	mov	r3, r2
 800596a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800596c:	4b0b      	ldr	r3, [pc, #44]	@ (800599c <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	3301      	adds	r3, #1
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800597c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800597e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005986:	e002      	b.n	800598e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005988:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800598a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800598c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800598e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005990:	4618      	mov	r0, r3
 8005992:	3750      	adds	r7, #80	@ 0x50
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800
 80059a0:	00f42400 	.word	0x00f42400
 80059a4:	007a1200 	.word	0x007a1200

080059a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059ac:	4b03      	ldr	r3, [pc, #12]	@ (80059bc <HAL_RCC_GetHCLKFreq+0x14>)
 80059ae:	681b      	ldr	r3, [r3, #0]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000000 	.word	0x20000000

080059c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059c4:	f7ff fff0 	bl	80059a8 <HAL_RCC_GetHCLKFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0a9b      	lsrs	r3, r3, #10
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	4903      	ldr	r1, [pc, #12]	@ (80059e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40023800 	.word	0x40023800
 80059e4:	0800b754 	.word	0x0800b754

080059e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d035      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a10:	4b62      	ldr	r3, [pc, #392]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a16:	f7fc f813 	bl	8001a40 <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a1e:	f7fc f80f 	bl	8001a40 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e0b0      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a30:	4b5b      	ldr	r3, [pc, #364]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f0      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	019a      	lsls	r2, r3, #6
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	071b      	lsls	r3, r3, #28
 8005a48:	4955      	ldr	r1, [pc, #340]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a50:	4b52      	ldr	r3, [pc, #328]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a56:	f7fb fff3 	bl	8001a40 <HAL_GetTick>
 8005a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a5e:	f7fb ffef 	bl	8001a40 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e090      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a70:	4b4b      	ldr	r3, [pc, #300]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8083 	beq.w	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	4b44      	ldr	r3, [pc, #272]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	4a43      	ldr	r2, [pc, #268]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a9a:	4b41      	ldr	r3, [pc, #260]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a3e      	ldr	r2, [pc, #248]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ab0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ab2:	f7fb ffc5 	bl	8001a40 <HAL_GetTick>
 8005ab6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005ab8:	e008      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aba:	f7fb ffc1 	bl	8001a40 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e062      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005acc:	4b35      	ldr	r3, [pc, #212]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0f0      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ad8:	4b31      	ldr	r3, [pc, #196]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005adc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d028      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af6:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b00:	4b29      	ldr	r3, [pc, #164]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b06:	4b28      	ldr	r3, [pc, #160]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b0c:	4a24      	ldr	r2, [pc, #144]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b12:	4b23      	ldr	r3, [pc, #140]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d114      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fb ff8f 	bl	8001a40 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fb ff8b 	bl	8001a40 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e02a      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3c:	4b18      	ldr	r3, [pc, #96]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ee      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b54:	d10d      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b56:	4b12      	ldr	r3, [pc, #72]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6a:	490d      	ldr	r1, [pc, #52]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	608b      	str	r3, [r1, #8]
 8005b70:	e005      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b78:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b7c:	6093      	str	r3, [r2, #8]
 8005b7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b8a:	4905      	ldr	r1, [pc, #20]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	42470068 	.word	0x42470068
 8005ba0:	40023800 	.word	0x40023800
 8005ba4:	40007000 	.word	0x40007000
 8005ba8:	42470e40 	.word	0x42470e40

08005bac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d13f      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005bca:	4b24      	ldr	r3, [pc, #144]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bd2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d006      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005be0:	d12f      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005be2:	4b1f      	ldr	r3, [pc, #124]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005be4:	617b      	str	r3, [r7, #20]
          break;
 8005be6:	e02f      	b.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005be8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bf4:	d108      	bne.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bf6:	4b19      	ldr	r3, [pc, #100]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bfe:	4a19      	ldr	r2, [pc, #100]	@ (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	e007      	b.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c08:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c10:	4a15      	ldr	r2, [pc, #84]	@ (8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c16:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c18:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c1e:	099b      	lsrs	r3, r3, #6
 8005c20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c32:	0f1b      	lsrs	r3, r3, #28
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3e:	617b      	str	r3, [r7, #20]
          break;
 8005c40:	e002      	b.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	617b      	str	r3, [r7, #20]
          break;
 8005c46:	bf00      	nop
        }
      }
      break;
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005c4a:	bf00      	nop
    }
  }
  return frequency;
 8005c4c:	697b      	ldr	r3, [r7, #20]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	00bb8000 	.word	0x00bb8000
 8005c64:	007a1200 	.word	0x007a1200
 8005c68:	00f42400 	.word	0x00f42400

08005c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07b      	b.n	8005d76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c8e:	d009      	beq.n	8005ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	61da      	str	r2, [r3, #28]
 8005c96:	e005      	b.n	8005ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fb fd12 	bl	80016e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d28:	ea42 0103 	orr.w	r1, r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d30:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 0104 	and.w	r1, r3, #4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	f003 0210 	and.w	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d7e:	b084      	sub	sp, #16
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	f107 001c 	add.w	r0, r7, #28
 8005d8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d90:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d123      	bne.n	8005de0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dc0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d105      	bne.n	8005dd4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f9dc 	bl	8006192 <USB_CoreReset>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	73fb      	strb	r3, [r7, #15]
 8005dde:	e01b      	b.n	8005e18 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f9d0 	bl	8006192 <USB_CoreReset>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005df6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e0a:	e005      	b.n	8005e18 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e18:	7fbb      	ldrb	r3, [r7, #30]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d10b      	bne.n	8005e36 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f043 0206 	orr.w	r2, r3, #6
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f043 0220 	orr.w	r2, r3, #32
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e42:	b004      	add	sp, #16
 8005e44:	4770      	bx	lr

08005e46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f043 0201 	orr.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f023 0201 	bic.w	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d115      	bne.n	8005ed8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005eb8:	200a      	movs	r0, #10
 8005eba:	f7fb fdcd 	bl	8001a58 <HAL_Delay>
      ms += 10U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	330a      	adds	r3, #10
 8005ec2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f956 	bl	8006176 <USB_GetMode>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d01e      	beq.n	8005f0e <USB_SetCurrentMode+0x84>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ed4:	d9f0      	bls.n	8005eb8 <USB_SetCurrentMode+0x2e>
 8005ed6:	e01a      	b.n	8005f0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d115      	bne.n	8005f0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005eea:	200a      	movs	r0, #10
 8005eec:	f7fb fdb4 	bl	8001a58 <HAL_Delay>
      ms += 10U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	330a      	adds	r3, #10
 8005ef4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f93d 	bl	8006176 <USB_GetMode>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d005      	beq.n	8005f0e <USB_SetCurrentMode+0x84>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f06:	d9f0      	bls.n	8005eea <USB_SetCurrentMode+0x60>
 8005f08:	e001      	b.n	8005f0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e005      	b.n	8005f1a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2bc8      	cmp	r3, #200	@ 0xc8
 8005f12:	d101      	bne.n	8005f18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f3c:	d901      	bls.n	8005f42 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e01b      	b.n	8005f7a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	daf2      	bge.n	8005f30 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	019b      	lsls	r3, r3, #6
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f66:	d901      	bls.n	8005f6c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e006      	b.n	8005f7a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d0f0      	beq.n	8005f5a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3301      	adds	r3, #1
 8005f96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f9e:	d901      	bls.n	8005fa4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e018      	b.n	8005fd6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	daf2      	bge.n	8005f92 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fc2:	d901      	bls.n	8005fc8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e006      	b.n	8005fd6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0310 	and.w	r3, r3, #16
 8005fd0:	2b10      	cmp	r3, #16
 8005fd2:	d0f0      	beq.n	8005fb6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b089      	sub	sp, #36	@ 0x24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	4611      	mov	r1, r2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	71fb      	strb	r3, [r7, #7]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006000:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006004:	2b00      	cmp	r3, #0
 8006006:	d123      	bne.n	8006050 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006008:	88bb      	ldrh	r3, [r7, #4]
 800600a:	3303      	adds	r3, #3
 800600c:	089b      	lsrs	r3, r3, #2
 800600e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006010:	2300      	movs	r3, #0
 8006012:	61bb      	str	r3, [r7, #24]
 8006014:	e018      	b.n	8006048 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	031a      	lsls	r2, r3, #12
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4413      	add	r3, r2
 800601e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006022:	461a      	mov	r2, r3
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6013      	str	r3, [r2, #0]
      pSrc++;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3301      	adds	r3, #1
 800602e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	3301      	adds	r3, #1
 8006034:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	3301      	adds	r3, #1
 800603a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	3301      	adds	r3, #1
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	429a      	cmp	r2, r3
 800604e:	d3e2      	bcc.n	8006016 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3724      	adds	r7, #36	@ 0x24
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800605e:	b480      	push	{r7}
 8006060:	b08b      	sub	sp, #44	@ 0x2c
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	089b      	lsrs	r3, r3, #2
 8006078:	b29b      	uxth	r3, r3
 800607a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006084:	2300      	movs	r3, #0
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	e014      	b.n	80060b4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	601a      	str	r2, [r3, #0]
    pDest++;
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	3301      	adds	r3, #1
 800609a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	3301      	adds	r3, #1
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	3301      	adds	r3, #1
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	3301      	adds	r3, #1
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	3301      	adds	r3, #1
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d3e6      	bcc.n	800608a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060bc:	8bfb      	ldrh	r3, [r7, #30]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01e      	beq.n	8006100 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060cc:	461a      	mov	r2, r3
 80060ce:	f107 0310 	add.w	r3, r7, #16
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	701a      	strb	r2, [r3, #0]
      i++;
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	3301      	adds	r3, #1
 80060ec:	623b      	str	r3, [r7, #32]
      pDest++;
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	3301      	adds	r3, #1
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80060f4:	8bfb      	ldrh	r3, [r7, #30]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060fa:	8bfb      	ldrh	r3, [r7, #30]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1ea      	bne.n	80060d6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006102:	4618      	mov	r0, r3
 8006104:	372c      	adds	r7, #44	@ 0x2c
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4013      	ands	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006126:	68fb      	ldr	r3, [r7, #12]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	4013      	ands	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006168:	68bb      	ldr	r3, [r7, #8]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f003 0301 	and.w	r3, r3, #1
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006192:	b480      	push	{r7}
 8006194:	b085      	sub	sp, #20
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061aa:	d901      	bls.n	80061b0 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e01b      	b.n	80061e8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	daf2      	bge.n	800619e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f043 0201 	orr.w	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061d4:	d901      	bls.n	80061da <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e006      	b.n	80061e8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d0f0      	beq.n	80061c8 <USB_CoreReset+0x36>

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061f4:	b084      	sub	sp, #16
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b086      	sub	sp, #24
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006214:	461a      	mov	r2, r3
 8006216:	2300      	movs	r3, #0
 8006218:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006236:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d119      	bne.n	800627e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800624a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800624e:	2b01      	cmp	r3, #1
 8006250:	d10a      	bne.n	8006268 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006260:	f043 0304 	orr.w	r3, r3, #4
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	e014      	b.n	8006292 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006276:	f023 0304 	bic.w	r3, r3, #4
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	e009      	b.n	8006292 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800628c:	f023 0304 	bic.w	r3, r3, #4
 8006290:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006292:	2110      	movs	r1, #16
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fe44 	bl	8005f22 <USB_FlushTxFifo>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fe6e 	bl	8005f86 <USB_FlushRxFifo>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80062b4:	2300      	movs	r3, #0
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	e015      	b.n	80062e6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c6:	461a      	mov	r2, r3
 80062c8:	f04f 33ff 	mov.w	r3, #4294967295
 80062cc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062da:	461a      	mov	r2, r3
 80062dc:	2300      	movs	r3, #0
 80062de:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	3301      	adds	r3, #1
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062ea:	461a      	mov	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d3e3      	bcc.n	80062ba <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f04f 32ff 	mov.w	r2, #4294967295
 80062fe:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a18      	ldr	r2, [pc, #96]	@ (8006364 <USB_HostInit+0x170>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10b      	bne.n	8006320 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800630e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a15      	ldr	r2, [pc, #84]	@ (8006368 <USB_HostInit+0x174>)
 8006314:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a14      	ldr	r2, [pc, #80]	@ (800636c <USB_HostInit+0x178>)
 800631a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800631e:	e009      	b.n	8006334 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2280      	movs	r2, #128	@ 0x80
 8006324:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a11      	ldr	r2, [pc, #68]	@ (8006370 <USB_HostInit+0x17c>)
 800632a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a11      	ldr	r2, [pc, #68]	@ (8006374 <USB_HostInit+0x180>)
 8006330:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006334:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f043 0210 	orr.w	r2, r3, #16
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <USB_HostInit+0x184>)
 800634e:	4313      	orrs	r3, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006360:	b004      	add	sp, #16
 8006362:	4770      	bx	lr
 8006364:	40040000 	.word	0x40040000
 8006368:	01000200 	.word	0x01000200
 800636c:	00e00300 	.word	0x00e00300
 8006370:	00600080 	.word	0x00600080
 8006374:	004000e0 	.word	0x004000e0
 8006378:	a3200008 	.word	0xa3200008

0800637c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	68f9      	ldr	r1, [r7, #12]
 80063b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d107      	bne.n	80063ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063c4:	461a      	mov	r2, r3
 80063c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80063ca:	6053      	str	r3, [r2, #4]
 80063cc:	e00c      	b.n	80063e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d107      	bne.n	80063e4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063da:	461a      	mov	r2, r3
 80063dc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80063e0:	6053      	str	r3, [r2, #4]
 80063e2:	e001      	b.n	80063e8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006416:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006424:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006426:	2064      	movs	r0, #100	@ 0x64
 8006428:	f7fb fb16 	bl	8001a58 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006438:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800643a:	200a      	movs	r0, #10
 800643c:	f7fb fb0c 	bl	8001a58 <HAL_Delay>

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800646e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <USB_DriveVbus+0x44>
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d106      	bne.n	800648e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006488:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800648c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006498:	d109      	bne.n	80064ae <USB_DriveVbus+0x64>
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d106      	bne.n	80064ae <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80064a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064ac:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	0c5b      	lsrs	r3, r3, #17
 80064da:	f003 0303 	and.w	r3, r3, #3
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	b29b      	uxth	r3, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	70fb      	strb	r3, [r7, #3]
 800651e:	460b      	mov	r3, r1
 8006520:	70bb      	strb	r3, [r7, #2]
 8006522:	4613      	mov	r3, r2
 8006524:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4413      	add	r3, r2
 8006536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653a:	461a      	mov	r2, r3
 800653c:	f04f 33ff 	mov.w	r3, #4294967295
 8006540:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006542:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006546:	2b03      	cmp	r3, #3
 8006548:	d87c      	bhi.n	8006644 <USB_HC_Init+0x138>
 800654a:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <USB_HC_Init+0x44>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006561 	.word	0x08006561
 8006554:	08006607 	.word	0x08006607
 8006558:	08006561 	.word	0x08006561
 800655c:	080065c9 	.word	0x080065c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4413      	add	r3, r2
 8006568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656c:	461a      	mov	r2, r3
 800656e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006572:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006574:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006578:	2b00      	cmp	r3, #0
 800657a:	da10      	bge.n	800659e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800659a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800659c:	e055      	b.n	800664a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a6f      	ldr	r2, [pc, #444]	@ (8006760 <USB_HC_Init+0x254>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d151      	bne.n	800664a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80065c4:	60d3      	str	r3, [r2, #12]
      break;
 80065c6:	e040      	b.n	800664a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d4:	461a      	mov	r2, r3
 80065d6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80065da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da34      	bge.n	800664e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006602:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006604:	e023      	b.n	800664e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006612:	461a      	mov	r2, r3
 8006614:	f240 2325 	movw	r3, #549	@ 0x225
 8006618:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800661a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800661e:	2b00      	cmp	r3, #0
 8006620:	da17      	bge.n	8006652 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	440a      	add	r2, r1
 8006638:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800663c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006640:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006642:	e006      	b.n	8006652 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	77fb      	strb	r3, [r7, #31]
      break;
 8006648:	e004      	b.n	8006654 <USB_HC_Init+0x148>
      break;
 800664a:	bf00      	nop
 800664c:	e002      	b.n	8006654 <USB_HC_Init+0x148>
      break;
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <USB_HC_Init+0x148>
      break;
 8006652:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	2300      	movs	r3, #0
 8006664:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	78fa      	ldrb	r2, [r7, #3]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	440a      	add	r2, r1
 800667c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	2101      	movs	r1, #1
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	6939      	ldr	r1, [r7, #16]
 800669c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80066a0:	4313      	orrs	r3, r2
 80066a2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80066b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da03      	bge.n	80066c0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80066b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e001      	b.n	80066c4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fef9 	bl	80064bc <USB_GetHostSpeed>
 80066ca:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80066cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d106      	bne.n	80066e2 <USB_HC_Init+0x1d6>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d003      	beq.n	80066e2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80066da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e001      	b.n	80066e6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066e6:	787b      	ldrb	r3, [r7, #1]
 80066e8:	059b      	lsls	r3, r3, #22
 80066ea:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066ee:	78bb      	ldrb	r3, [r7, #2]
 80066f0:	02db      	lsls	r3, r3, #11
 80066f2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066f6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80066fc:	049b      	lsls	r3, r3, #18
 80066fe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006702:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006704:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006706:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800670a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	431a      	orrs	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	440a      	add	r2, r1
 800671c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006724:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006726:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800672a:	2b03      	cmp	r3, #3
 800672c:	d003      	beq.n	8006736 <USB_HC_Init+0x22a>
 800672e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006732:	2b01      	cmp	r3, #1
 8006734:	d10f      	bne.n	8006756 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4413      	add	r3, r2
 800673e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	78fa      	ldrb	r2, [r7, #3]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	440a      	add	r2, r1
 800674c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006754:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006756:	7ffb      	ldrb	r3, [r7, #31]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	40040000 	.word	0x40040000

08006764 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	@ 0x30
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800677c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006780:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a5d      	ldr	r2, [pc, #372]	@ (80068fc <USB_HC_StartXfer+0x198>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d12f      	bne.n	80067ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d11c      	bne.n	80067ca <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	7c9b      	ldrb	r3, [r3, #18]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <USB_HC_StartXfer+0x3c>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	7c9b      	ldrb	r3, [r3, #18]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d124      	bne.n	80067ea <USB_HC_StartXfer+0x86>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	799b      	ldrb	r3, [r3, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d120      	bne.n	80067ea <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	6a3a      	ldr	r2, [r7, #32]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c6:	60d3      	str	r3, [r2, #12]
 80067c8:	e00f      	b.n	80067ea <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	791b      	ldrb	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <USB_HC_StartXfer+0x86>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	795b      	ldrb	r3, [r3, #5]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d107      	bne.n	80067ea <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	4619      	mov	r1, r3
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fb6b 	bl	8006ebc <USB_DoPing>
        return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e232      	b.n	8006c50 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	799b      	ldrb	r3, [r3, #6]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d158      	bne.n	80068a4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80067f2:	2301      	movs	r3, #1
 80067f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	8a92      	ldrh	r2, [r2, #20]
 8006804:	fb03 f202 	mul.w	r2, r3, r2
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	61da      	str	r2, [r3, #28]
 800680c:	e07c      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	7c9b      	ldrb	r3, [r3, #18]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d130      	bne.n	8006878 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	2bbc      	cmp	r3, #188	@ 0xbc
 800681c:	d918      	bls.n	8006850 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	8a9b      	ldrh	r3, [r3, #20]
 8006822:	461a      	mov	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	69da      	ldr	r2, [r3, #28]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d003      	beq.n	8006840 <USB_HC_StartXfer+0xdc>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d103      	bne.n	8006848 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2202      	movs	r2, #2
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	e05f      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2201      	movs	r2, #1
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	e05b      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6a1a      	ldr	r2, [r3, #32]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d007      	beq.n	8006870 <USB_HC_StartXfer+0x10c>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d003      	beq.n	8006870 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2204      	movs	r2, #4
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	e04b      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2203      	movs	r2, #3
 8006874:	60da      	str	r2, [r3, #12]
 8006876:	e047      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d10d      	bne.n	800689a <USB_HC_StartXfer+0x136>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	8a92      	ldrh	r2, [r2, #20]
 8006886:	4293      	cmp	r3, r2
 8006888:	d907      	bls.n	800689a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800688a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	8a92      	ldrh	r2, [r2, #20]
 8006890:	fb03 f202 	mul.w	r2, r3, r2
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	61da      	str	r2, [r3, #28]
 8006898:	e036      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6a1a      	ldr	r2, [r3, #32]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	61da      	str	r2, [r3, #28]
 80068a2:	e031      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d018      	beq.n	80068de <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	8a92      	ldrh	r2, [r2, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	3b01      	subs	r3, #1
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	8a92      	ldrh	r2, [r2, #20]
 80068bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80068c2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80068c4:	8b7b      	ldrh	r3, [r7, #26]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d90b      	bls.n	80068e2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80068ca:	8b7b      	ldrh	r3, [r7, #26]
 80068cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	8a92      	ldrh	r2, [r2, #20]
 80068d4:	fb03 f202 	mul.w	r2, r3, r2
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	61da      	str	r2, [r3, #28]
 80068dc:	e001      	b.n	80068e2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80068de:	2301      	movs	r3, #1
 80068e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	8a92      	ldrh	r2, [r2, #20]
 80068f0:	fb03 f202 	mul.w	r2, r3, r2
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	61da      	str	r2, [r3, #28]
 80068f8:	e006      	b.n	8006908 <USB_HC_StartXfer+0x1a4>
 80068fa:	bf00      	nop
 80068fc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006910:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006912:	04d9      	lsls	r1, r3, #19
 8006914:	4ba3      	ldr	r3, [pc, #652]	@ (8006ba4 <USB_HC_StartXfer+0x440>)
 8006916:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006918:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	7d9b      	ldrb	r3, [r3, #22]
 800691e:	075b      	lsls	r3, r3, #29
 8006920:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006924:	69f9      	ldr	r1, [r7, #28]
 8006926:	0148      	lsls	r0, r1, #5
 8006928:	6a39      	ldr	r1, [r7, #32]
 800692a:	4401      	add	r1, r0
 800692c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006930:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006932:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6999      	ldr	r1, [r3, #24]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694a:	460a      	mov	r2, r1
 800694c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf0c      	ite	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	2300      	movne	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	6a3a      	ldr	r2, [r7, #32]
 800697a:	440a      	add	r2, r1
 800697c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006980:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006984:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	4413      	add	r3, r2
 800698e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	7e7b      	ldrb	r3, [r7, #25]
 8006996:	075b      	lsls	r3, r3, #29
 8006998:	69f9      	ldr	r1, [r7, #28]
 800699a:	0148      	lsls	r0, r1, #5
 800699c:	6a39      	ldr	r1, [r7, #32]
 800699e:	4401      	add	r1, r0
 80069a0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80069a4:	4313      	orrs	r3, r2
 80069a6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	799b      	ldrb	r3, [r3, #6]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	f040 80c3 	bne.w	8006b38 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7c5b      	ldrb	r3, [r3, #17]
 80069b6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80069bc:	4313      	orrs	r3, r2
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80069ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80069ce:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	6a3a      	ldr	r2, [r7, #32]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80069ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	79db      	ldrb	r3, [r3, #7]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d123      	bne.n	8006a40 <USB_HC_StartXfer+0x2dc>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	78db      	ldrb	r3, [r3, #3]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d11f      	bne.n	8006a40 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	6a3a      	ldr	r2, [r7, #32]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a1e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a3e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	7c9b      	ldrb	r3, [r3, #18]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d003      	beq.n	8006a50 <USB_HC_StartXfer+0x2ec>
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	7c9b      	ldrb	r3, [r3, #18]
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d117      	bne.n	8006a80 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d113      	bne.n	8006a80 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	78db      	ldrb	r3, [r3, #3]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10f      	bne.n	8006a80 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	6a3a      	ldr	r2, [r7, #32]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a7e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	7c9b      	ldrb	r3, [r3, #18]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d162      	bne.n	8006b4e <USB_HC_StartXfer+0x3ea>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	78db      	ldrb	r3, [r3, #3]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d15e      	bne.n	8006b4e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d858      	bhi.n	8006b4c <USB_HC_StartXfer+0x3e8>
 8006a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <USB_HC_StartXfer+0x33c>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ab1 	.word	0x08006ab1
 8006aa4:	08006ad3 	.word	0x08006ad3
 8006aa8:	08006af5 	.word	0x08006af5
 8006aac:	08006b17 	.word	0x08006b17
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	6a3a      	ldr	r2, [r7, #32]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ace:	6053      	str	r3, [r2, #4]
          break;
 8006ad0:	e03d      	b.n	8006b4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006aec:	f043 030e 	orr.w	r3, r3, #14
 8006af0:	6053      	str	r3, [r2, #4]
          break;
 8006af2:	e02c      	b.n	8006b4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b12:	6053      	str	r3, [r2, #4]
          break;
 8006b14:	e01b      	b.n	8006b4e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	69fa      	ldr	r2, [r7, #28]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	6a3a      	ldr	r2, [r7, #32]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b34:	6053      	str	r3, [r2, #4]
          break;
 8006b36:	e00a      	b.n	8006b4e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b44:	461a      	mov	r2, r3
 8006b46:	2300      	movs	r3, #0
 8006b48:	6053      	str	r3, [r2, #4]
 8006b4a:	e000      	b.n	8006b4e <USB_HC_StartXfer+0x3ea>
          break;
 8006b4c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b64:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	78db      	ldrb	r3, [r3, #3]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	e003      	b.n	8006b80 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b7e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b86:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b94:	461a      	mov	r2, r3
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e055      	b.n	8006c50 <USB_HC_StartXfer+0x4ec>
 8006ba4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	78db      	ldrb	r3, [r3, #3]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d14e      	bne.n	8006c4e <USB_HC_StartXfer+0x4ea>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d04a      	beq.n	8006c4e <USB_HC_StartXfer+0x4ea>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	79db      	ldrb	r3, [r3, #7]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d146      	bne.n	8006c4e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	7c9b      	ldrb	r3, [r3, #18]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d831      	bhi.n	8006c2c <USB_HC_StartXfer+0x4c8>
 8006bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd0 <USB_HC_StartXfer+0x46c>)
 8006bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bce:	bf00      	nop
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006c05 	.word	0x08006c05
 8006bd8:	08006be1 	.word	0x08006be1
 8006bdc:	08006c05 	.word	0x08006c05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	3303      	adds	r3, #3
 8006be6:	089b      	lsrs	r3, r3, #2
 8006be8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006bea:	8afa      	ldrh	r2, [r7, #22]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d91c      	bls.n	8006c30 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f043 0220 	orr.w	r2, r3, #32
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c02:	e015      	b.n	8006c30 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	3303      	adds	r3, #3
 8006c0a:	089b      	lsrs	r3, r3, #2
 8006c0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c0e:	8afa      	ldrh	r2, [r7, #22]
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d90a      	bls.n	8006c34 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c2a:	e003      	b.n	8006c34 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006c2c:	bf00      	nop
 8006c2e:	e002      	b.n	8006c36 <USB_HC_StartXfer+0x4d2>
        break;
 8006c30:	bf00      	nop
 8006c32:	e000      	b.n	8006c36 <USB_HC_StartXfer+0x4d2>
        break;
 8006c34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6999      	ldr	r1, [r3, #24]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	785a      	ldrb	r2, [r3, #1]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2000      	movs	r0, #0
 8006c46:	9000      	str	r0, [sp, #0]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff f9ca 	bl	8005fe2 <USB_WritePacket>
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3728      	adds	r7, #40	@ 0x28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	b29b      	uxth	r3, r3
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b089      	sub	sp, #36	@ 0x24
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	0c9b      	lsrs	r3, r3, #18
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	0fdb      	lsrs	r3, r3, #31
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	0fdb      	lsrs	r3, r3, #31
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d10d      	bne.n	8006cfc <USB_HC_Halt+0x82>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <USB_HC_Halt+0x82>
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <USB_HC_Halt+0x7e>
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d101      	bne.n	8006cfc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e0d8      	b.n	8006eae <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <USB_HC_Halt+0x8e>
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d173      	bne.n	8006df0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	0151      	lsls	r1, r2, #5
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	440a      	add	r2, r1
 8006d1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d14a      	bne.n	8006dca <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d133      	bne.n	8006da8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d5e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006d7e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d8c:	d82e      	bhi.n	8006dec <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006da4:	d0ec      	beq.n	8006d80 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006da6:	e081      	b.n	8006eac <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dc6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dc8:	e070      	b.n	8006eac <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006de4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006de8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dea:	e05f      	b.n	8006eac <USB_HC_Halt+0x232>
            break;
 8006dec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dee:	e05d      	b.n	8006eac <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d133      	bne.n	8006e88 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e6c:	d81d      	bhi.n	8006eaa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e84:	d0ec      	beq.n	8006e60 <USB_HC_Halt+0x1e6>
 8006e86:	e011      	b.n	8006eac <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	e000      	b.n	8006eac <USB_HC_Halt+0x232>
          break;
 8006eaa:	bf00      	nop
    }
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3724      	adds	r7, #36	@ 0x24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
	...

08006ebc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006ecc:	78fb      	ldrb	r3, [r7, #3]
 8006ece:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	04da      	lsls	r2, r3, #19
 8006ed8:	4b15      	ldr	r3, [pc, #84]	@ (8006f30 <USB_DoPing+0x74>)
 8006eda:	4013      	ands	r3, r2
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ee8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006eec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	1ff80000 	.word	0x1ff80000

08006f34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fe ff8d 	bl	8005e68 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f4e:	2110      	movs	r1, #16
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fe ffe6 	bl	8005f22 <USB_FlushTxFifo>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff f810 	bl	8005f86 <USB_FlushRxFifo>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e01f      	b.n	8006fb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006faa:	461a      	mov	r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d9dc      	bls.n	8006f76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	e034      	b.n	800702c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fe0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fe8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007008:	d80c      	bhi.n	8007024 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800701c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007020:	d0ec      	beq.n	8006ffc <USB_StopHost+0xc8>
 8007022:	e000      	b.n	8007026 <USB_StopHost+0xf2>
        break;
 8007024:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	3301      	adds	r3, #1
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	2b0f      	cmp	r3, #15
 8007030:	d9c7      	bls.n	8006fc2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007038:	461a      	mov	r2, r3
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f04f 32ff 	mov.w	r2, #4294967295
 8007046:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fe fefc 	bl	8005e46 <USB_EnableGlobalInt>

  return ret;
 800704e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b089      	sub	sp, #36	@ 0x24
 800705c:	af04      	add	r7, sp, #16
 800705e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007060:	2301      	movs	r3, #1
 8007062:	2202      	movs	r2, #2
 8007064:	2102      	movs	r1, #2
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fc85 	bl	8007976 <USBH_FindInterface>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	2bff      	cmp	r3, #255	@ 0xff
 8007074:	d002      	beq.n	800707c <USBH_CDC_InterfaceInit+0x24>
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d901      	bls.n	8007080 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800707c:	2302      	movs	r3, #2
 800707e:	e13d      	b.n	80072fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fc5a 	bl	800793e <USBH_SelectInterface>
 800708a:	4603      	mov	r3, r0
 800708c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007094:	2302      	movs	r3, #2
 8007096:	e131      	b.n	80072fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800709e:	2050      	movs	r0, #80	@ 0x50
 80070a0:	f002 fb64 	bl	800976c <malloc>
 80070a4:	4603      	mov	r3, r0
 80070a6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80070b8:	2302      	movs	r3, #2
 80070ba:	e11f      	b.n	80072fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80070bc:	2250      	movs	r2, #80	@ 0x50
 80070be:	2100      	movs	r1, #0
 80070c0:	68b8      	ldr	r0, [r7, #8]
 80070c2:	f002 fe1b 	bl	8009cfc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	211a      	movs	r1, #26
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da15      	bge.n	800710a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	211a      	movs	r1, #26
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	211a      	movs	r1, #26
 80070fa:	fb01 f303 	mul.w	r3, r1, r3
 80070fe:	4413      	add	r3, r2
 8007100:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	785b      	ldrb	r3, [r3, #1]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 ffbe 	bl	8009092 <USBH_AllocPipe>
 8007116:	4603      	mov	r3, r0
 8007118:	461a      	mov	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	7819      	ldrb	r1, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	7858      	ldrb	r0, [r3, #1]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	8952      	ldrh	r2, [r2, #10]
 8007136:	9202      	str	r2, [sp, #8]
 8007138:	2203      	movs	r2, #3
 800713a:	9201      	str	r2, [sp, #4]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	4623      	mov	r3, r4
 8007140:	4602      	mov	r2, r0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 ff76 	bl	8009034 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f002 fa85 	bl	8009660 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007156:	2300      	movs	r3, #0
 8007158:	2200      	movs	r2, #0
 800715a:	210a      	movs	r1, #10
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fc0a 	bl	8007976 <USBH_FindInterface>
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	2bff      	cmp	r3, #255	@ 0xff
 800716a:	d002      	beq.n	8007172 <USBH_CDC_InterfaceInit+0x11a>
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d901      	bls.n	8007176 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007172:	2302      	movs	r3, #2
 8007174:	e0c2      	b.n	80072fc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	211a      	movs	r1, #26
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	b25b      	sxtb	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	da16      	bge.n	80071bc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	211a      	movs	r1, #26
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	211a      	movs	r1, #26
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	835a      	strh	r2, [r3, #26]
 80071ba:	e015      	b.n	80071e8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	211a      	movs	r1, #26
 80071c2:	fb01 f303 	mul.w	r3, r1, r3
 80071c6:	4413      	add	r3, r2
 80071c8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	211a      	movs	r1, #26
 80071d8:	fb01 f303 	mul.w	r3, r1, r3
 80071dc:	4413      	add	r3, r2
 80071de:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071e2:	881a      	ldrh	r2, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	211a      	movs	r1, #26
 80071ee:	fb01 f303 	mul.w	r3, r1, r3
 80071f2:	4413      	add	r3, r2
 80071f4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b25b      	sxtb	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	da16      	bge.n	800722e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	211a      	movs	r1, #26
 8007206:	fb01 f303 	mul.w	r3, r1, r3
 800720a:	4413      	add	r3, r2
 800720c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	211a      	movs	r1, #26
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	4413      	add	r3, r2
 8007222:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007226:	881a      	ldrh	r2, [r3, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	835a      	strh	r2, [r3, #26]
 800722c:	e015      	b.n	800725a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	211a      	movs	r1, #26
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	4413      	add	r3, r2
 800723a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	211a      	movs	r1, #26
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	7b9b      	ldrb	r3, [r3, #14]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 ff16 	bl	8009092 <USBH_AllocPipe>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	7bdb      	ldrb	r3, [r3, #15]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 ff0c 	bl	8009092 <USBH_AllocPipe>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	7b59      	ldrb	r1, [r3, #13]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	7b98      	ldrb	r0, [r3, #14]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	8b12      	ldrh	r2, [r2, #24]
 800729a:	9202      	str	r2, [sp, #8]
 800729c:	2202      	movs	r2, #2
 800729e:	9201      	str	r2, [sp, #4]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4623      	mov	r3, r4
 80072a4:	4602      	mov	r2, r0
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fec4 	bl	8009034 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	7b19      	ldrb	r1, [r3, #12]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	7bd8      	ldrb	r0, [r3, #15]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	8b52      	ldrh	r2, [r2, #26]
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	2202      	movs	r2, #2
 80072c8:	9201      	str	r2, [sp, #4]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4623      	mov	r3, r4
 80072ce:	4602      	mov	r2, r0
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 feaf 	bl	8009034 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	7b5b      	ldrb	r3, [r3, #13]
 80072e2:	2200      	movs	r2, #0
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f002 f9ba 	bl	8009660 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	7b1b      	ldrb	r3, [r3, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f002 f9b3 	bl	8009660 <USBH_LL_SetToggle>

  return USBH_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	bd90      	pop	{r4, r7, pc}

08007304 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00e      	beq.n	800733c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fea4 	bl	8009072 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 fecf 	bl	80090d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	7b1b      	ldrb	r3, [r3, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	7b1b      	ldrb	r3, [r3, #12]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 fe91 	bl	8009072 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	7b1b      	ldrb	r3, [r3, #12]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 febc 	bl	80090d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	7b5b      	ldrb	r3, [r3, #13]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00e      	beq.n	8007388 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	7b5b      	ldrb	r3, [r3, #13]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fe7e 	bl	8009072 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	7b5b      	ldrb	r3, [r3, #13]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 fea9 	bl	80090d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	4618      	mov	r0, r3
 800739e:	f002 f9ed 	bl	800977c <free>
    phost->pActiveClass->pData = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073a8:	2200      	movs	r2, #0
 80073aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3340      	adds	r3, #64	@ 0x40
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8b1 	bl	8007536 <GetLineCoding>
 80073d4:	4603      	mov	r3, r0
 80073d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80073d8:	7afb      	ldrb	r3, [r7, #11]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d105      	bne.n	80073ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073e4:	2102      	movs	r1, #2
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80073ea:	7afb      	ldrb	r3, [r7, #11]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007414:	2b04      	cmp	r3, #4
 8007416:	d877      	bhi.n	8007508 <USBH_CDC_Process+0x114>
 8007418:	a201      	add	r2, pc, #4	@ (adr r2, 8007420 <USBH_CDC_Process+0x2c>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007435 	.word	0x08007435
 8007424:	0800743b 	.word	0x0800743b
 8007428:	0800746b 	.word	0x0800746b
 800742c:	080074df 	.word	0x080074df
 8007430:	080074ed 	.word	0x080074ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
      break;
 8007438:	e06d      	b.n	8007516 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f897 	bl	8007574 <SetLineCoding>
 8007446:	4603      	mov	r3, r0
 8007448:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800744a:	7bbb      	ldrb	r3, [r7, #14]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d104      	bne.n	800745a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007458:	e058      	b.n	800750c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d055      	beq.n	800750c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2204      	movs	r2, #4
 8007464:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007468:	e050      	b.n	800750c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	3340      	adds	r3, #64	@ 0x40
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f860 	bl	8007536 <GetLineCoding>
 8007476:	4603      	mov	r3, r0
 8007478:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d126      	bne.n	80074ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007492:	791b      	ldrb	r3, [r3, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d13b      	bne.n	8007510 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d133      	bne.n	8007510 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d12b      	bne.n	8007510 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d124      	bne.n	8007510 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f958 	bl	800777c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074cc:	e020      	b.n	8007510 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d01d      	beq.n	8007510 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2204      	movs	r2, #4
 80074d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80074dc:	e018      	b.n	8007510 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f867 	bl	80075b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f8da 	bl	800769e <CDC_ProcessReception>
      break;
 80074ea:	e014      	b.n	8007516 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 f81a 	bl	8008528 <USBH_ClrFeature>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007506:	e005      	b.n	8007514 <USBH_CDC_Process+0x120>

    default:
      break;
 8007508:	bf00      	nop
 800750a:	e004      	b.n	8007516 <USBH_CDC_Process+0x122>
      break;
 800750c:	bf00      	nop
 800750e:	e002      	b.n	8007516 <USBH_CDC_Process+0x122>
      break;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <USBH_CDC_Process+0x122>
      break;
 8007514:	bf00      	nop

  }

  return status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	22a1      	movs	r2, #161	@ 0xa1
 8007544:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2221      	movs	r2, #33	@ 0x21
 800754a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2207      	movs	r2, #7
 800755c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2207      	movs	r2, #7
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f001 fb14 	bl	8008b92 <USBH_CtlReq>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2221      	movs	r2, #33	@ 0x21
 8007582:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2207      	movs	r2, #7
 800759a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2207      	movs	r2, #7
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 faf5 	bl	8008b92 <USBH_CtlReq>
 80075a8:	4603      	mov	r3, r0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af02      	add	r7, sp, #8
 80075b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d002      	beq.n	80075d8 <CDC_ProcessTransmission+0x26>
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d023      	beq.n	800761e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80075d6:	e05e      	b.n	8007696 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	8b12      	ldrh	r2, [r2, #24]
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d90b      	bls.n	80075fc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	69d9      	ldr	r1, [r3, #28]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8b1a      	ldrh	r2, [r3, #24]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	7b5b      	ldrb	r3, [r3, #13]
 80075f0:	2001      	movs	r0, #1
 80075f2:	9000      	str	r0, [sp, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fcda 	bl	8008fae <USBH_BulkSendData>
 80075fa:	e00b      	b.n	8007614 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	7b5b      	ldrb	r3, [r3, #13]
 800760a:	2001      	movs	r0, #1
 800760c:	9000      	str	r0, [sp, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fccd 	bl	8008fae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800761c:	e03b      	b.n	8007696 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	7b5b      	ldrb	r3, [r3, #13]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 fff1 	bl	800960c <USBH_LL_GetURBState>
 800762a:	4603      	mov	r3, r0
 800762c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800762e:	7afb      	ldrb	r3, [r7, #11]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d128      	bne.n	8007686 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	8b12      	ldrh	r2, [r2, #24]
 800763c:	4293      	cmp	r3, r2
 800763e:	d90e      	bls.n	800765e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	8b12      	ldrh	r2, [r2, #24]
 8007648:	1a9a      	subs	r2, r3, r2
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	8b12      	ldrh	r2, [r2, #24]
 8007656:	441a      	add	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	61da      	str	r2, [r3, #28]
 800765c:	e002      	b.n	8007664 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007674:	e00e      	b.n	8007694 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f868 	bl	8007754 <USBH_CDC_TransmitCallback>
      break;
 8007684:	e006      	b.n	8007694 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d103      	bne.n	8007694 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007694:	bf00      	nop
  }
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b086      	sub	sp, #24
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d002      	beq.n	80076c4 <CDC_ProcessReception+0x26>
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d00e      	beq.n	80076e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80076c2:	e043      	b.n	800774c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	6a19      	ldr	r1, [r3, #32]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	8b5a      	ldrh	r2, [r3, #26]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 fc91 	bl	8008ff8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2204      	movs	r2, #4
 80076da:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80076de:	e035      	b.n	800774c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	7b1b      	ldrb	r3, [r3, #12]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 ff90 	bl	800960c <USBH_LL_GetURBState>
 80076ec:	4603      	mov	r3, r0
 80076ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80076f0:	7cfb      	ldrb	r3, [r7, #19]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d129      	bne.n	800774a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	7b1b      	ldrb	r3, [r3, #12]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 fef3 	bl	80094e8 <USBH_LL_GetLastXferSize>
 8007702:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	429a      	cmp	r2, r3
 800770c:	d016      	beq.n	800773c <CDC_ProcessReception+0x9e>
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	8b5b      	ldrh	r3, [r3, #26]
 8007712:	461a      	mov	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4293      	cmp	r3, r2
 8007718:	d110      	bne.n	800773c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1ad2      	subs	r2, r2, r3
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6a1a      	ldr	r2, [r3, #32]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	441a      	add	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2203      	movs	r2, #3
 8007736:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800773a:	e006      	b.n	800774a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f80f 	bl	8007768 <USBH_CDC_ReceiveCallback>
      break;
 800774a:	bf00      	nop
  }
}
 800774c:	bf00      	nop
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80077a4:	2302      	movs	r3, #2
 80077a6:	e029      	b.n	80077fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	79fa      	ldrb	r2, [r7, #7]
 80077ac:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f81f 	bl	8007804 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f001 fdc3 	bl	8009380 <USBH_LL_Init>

  return USBH_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e009      	b.n	800782a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	33e0      	adds	r3, #224	@ 0xe0
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	2200      	movs	r2, #0
 8007822:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b0f      	cmp	r3, #15
 800782e:	d9f2      	bls.n	8007816 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e009      	b.n	800784a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007850:	d3f1      	bcc.n	8007836 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2240      	movs	r2, #64	@ 0x40
 8007876:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	331c      	adds	r3, #28
 80078a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f002 fa27 	bl	8009cfc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80078b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f002 fa1e 	bl	8009cfc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80078c6:	2212      	movs	r2, #18
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f002 fa16 	bl	8009cfc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078d6:	223e      	movs	r2, #62	@ 0x3e
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f002 fa0e 	bl	8009cfc <memset>

  return USBH_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d016      	beq.n	800792c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10e      	bne.n	8007926 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800790e:	1c59      	adds	r1, r3, #1
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	33de      	adds	r3, #222	@ 0xde
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
 8007924:	e004      	b.n	8007930 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007926:	2302      	movs	r3, #2
 8007928:	73fb      	strb	r3, [r7, #15]
 800792a:	e001      	b.n	8007930 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800792c:	2302      	movs	r3, #2
 800792e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800793e:	b480      	push	{r7}
 8007940:	b085      	sub	sp, #20
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	429a      	cmp	r2, r3
 8007958:	d204      	bcs.n	8007964 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	78fa      	ldrb	r2, [r7, #3]
 800795e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007962:	e001      	b.n	8007968 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007964:	2302      	movs	r3, #2
 8007966:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007976:	b480      	push	{r7}
 8007978:	b087      	sub	sp, #28
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	461a      	mov	r2, r3
 8007984:	4603      	mov	r3, r0
 8007986:	70fb      	strb	r3, [r7, #3]
 8007988:	460b      	mov	r3, r1
 800798a:	70bb      	strb	r3, [r7, #2]
 800798c:	4613      	mov	r3, r2
 800798e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800799e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079a0:	e025      	b.n	80079ee <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	221a      	movs	r2, #26
 80079a6:	fb02 f303 	mul.w	r3, r2, r3
 80079aa:	3308      	adds	r3, #8
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	3302      	adds	r3, #2
 80079b2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	795b      	ldrb	r3, [r3, #5]
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d002      	beq.n	80079c4 <USBH_FindInterface+0x4e>
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	2bff      	cmp	r3, #255	@ 0xff
 80079c2:	d111      	bne.n	80079e8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80079c8:	78ba      	ldrb	r2, [r7, #2]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d002      	beq.n	80079d4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079ce:	78bb      	ldrb	r3, [r7, #2]
 80079d0:	2bff      	cmp	r3, #255	@ 0xff
 80079d2:	d109      	bne.n	80079e8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80079d8:	787a      	ldrb	r2, [r7, #1]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d002      	beq.n	80079e4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80079de:	787b      	ldrb	r3, [r7, #1]
 80079e0:	2bff      	cmp	r3, #255	@ 0xff
 80079e2:	d101      	bne.n	80079e8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	e006      	b.n	80079f6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	3301      	adds	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d9d6      	bls.n	80079a2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80079f4:	23ff      	movs	r3, #255	@ 0xff
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fcf4 	bl	80093f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a10:	2101      	movs	r1, #1
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fe0d 	bl	8009632 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af04      	add	r7, sp, #16
 8007a2a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d102      	bne.n	8007a46 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2203      	movs	r2, #3
 8007a44:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b0b      	cmp	r3, #11
 8007a4e:	f200 81bb 	bhi.w	8007dc8 <USBH_Process+0x3a4>
 8007a52:	a201      	add	r2, pc, #4	@ (adr r2, 8007a58 <USBH_Process+0x34>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a89 	.word	0x08007a89
 8007a5c:	08007abb 	.word	0x08007abb
 8007a60:	08007b23 	.word	0x08007b23
 8007a64:	08007d63 	.word	0x08007d63
 8007a68:	08007dc9 	.word	0x08007dc9
 8007a6c:	08007bc3 	.word	0x08007bc3
 8007a70:	08007d09 	.word	0x08007d09
 8007a74:	08007bf9 	.word	0x08007bf9
 8007a78:	08007c19 	.word	0x08007c19
 8007a7c:	08007c37 	.word	0x08007c37
 8007a80:	08007c7b 	.word	0x08007c7b
 8007a84:	08007d4b 	.word	0x08007d4b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 819b 	beq.w	8007dcc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007a9c:	20c8      	movs	r0, #200	@ 0xc8
 8007a9e:	f001 fe12 	bl	80096c6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fd05 	bl	80094b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ab8:	e188      	b.n	8007dcc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d107      	bne.n	8007ad4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ad2:	e18a      	b.n	8007dea <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007ada:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ade:	d914      	bls.n	8007b0a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d903      	bls.n	8007b02 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	220d      	movs	r2, #13
 8007afe:	701a      	strb	r2, [r3, #0]
      break;
 8007b00:	e173      	b.n	8007dea <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
      break;
 8007b08:	e16f      	b.n	8007dea <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007b10:	f103 020a 	add.w	r2, r3, #10
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007b1a:	200a      	movs	r0, #10
 8007b1c:	f001 fdd3 	bl	80096c6 <USBH_Delay>
      break;
 8007b20:	e163      	b.n	8007dea <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b32:	2104      	movs	r1, #4
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b38:	2064      	movs	r0, #100	@ 0x64
 8007b3a:	f001 fdc4 	bl	80096c6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 fc90 	bl	8009464 <USBH_LL_GetSpeed>
 8007b44:	4603      	mov	r3, r0
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2205      	movs	r2, #5
 8007b52:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fa9b 	bl	8009092 <USBH_AllocPipe>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007b64:	2180      	movs	r1, #128	@ 0x80
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fa93 	bl	8009092 <USBH_AllocPipe>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	461a      	mov	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7919      	ldrb	r1, [r3, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007b88:	9202      	str	r2, [sp, #8]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	9201      	str	r2, [sp, #4]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4603      	mov	r3, r0
 8007b92:	2280      	movs	r2, #128	@ 0x80
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fa4d 	bl	8009034 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7959      	ldrb	r1, [r3, #5]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bae:	9202      	str	r2, [sp, #8]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	9201      	str	r2, [sp, #4]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2200      	movs	r2, #0
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 fa3a 	bl	8009034 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bc0:	e113      	b.n	8007dea <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f916 	bl	8007df4 <USBH_HandleEnum>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f040 80fd 	bne.w	8007dd0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d103      	bne.n	8007bf0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2208      	movs	r2, #8
 8007bec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bee:	e0ef      	b.n	8007dd0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2207      	movs	r2, #7
 8007bf4:	701a      	strb	r2, [r3, #0]
      break;
 8007bf6:	e0eb      	b.n	8007dd0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80e8 	beq.w	8007dd4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2208      	movs	r2, #8
 8007c14:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c16:	e0dd      	b.n	8007dd4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fc3a 	bl	800849a <USBH_SetCfg>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f040 80d5 	bne.w	8007dd8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2209      	movs	r2, #9
 8007c32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c34:	e0d0      	b.n	8007dd8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d016      	beq.n	8007c72 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007c44:	2101      	movs	r1, #1
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fc4a 	bl	80084e0 <USBH_SetFeature>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	220a      	movs	r2, #10
 8007c5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c5e:	e0bd      	b.n	8007ddc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	f040 80b9 	bne.w	8007ddc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	701a      	strb	r2, [r3, #0]
      break;
 8007c70:	e0b4      	b.n	8007ddc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	220a      	movs	r2, #10
 8007c76:	701a      	strb	r2, [r3, #0]
      break;
 8007c78:	e0b0      	b.n	8007ddc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80ad 	beq.w	8007de0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	e016      	b.n	8007cc2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007c94:	7bfa      	ldrb	r2, [r7, #15]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	32de      	adds	r2, #222	@ 0xde
 8007c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9e:	791a      	ldrb	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d108      	bne.n	8007cbc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007caa:	7bfa      	ldrb	r2, [r7, #15]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	32de      	adds	r2, #222	@ 0xde
 8007cb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007cba:	e005      	b.n	8007cc8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	73fb      	strb	r3, [r7, #15]
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0e5      	beq.n	8007c94 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d016      	beq.n	8007d00 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d109      	bne.n	8007cf8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2206      	movs	r2, #6
 8007ce8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cf0:	2103      	movs	r1, #3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cf6:	e073      	b.n	8007de0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	220d      	movs	r2, #13
 8007cfc:	701a      	strb	r2, [r3, #0]
      break;
 8007cfe:	e06f      	b.n	8007de0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	220d      	movs	r2, #13
 8007d04:	701a      	strb	r2, [r3, #0]
      break;
 8007d06:	e06b      	b.n	8007de0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d017      	beq.n	8007d42 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	4798      	blx	r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	220b      	movs	r2, #11
 8007d2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d30:	e058      	b.n	8007de4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d154      	bne.n	8007de4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	220d      	movs	r2, #13
 8007d3e:	701a      	strb	r2, [r3, #0]
      break;
 8007d40:	e050      	b.n	8007de4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	220d      	movs	r2, #13
 8007d46:	701a      	strb	r2, [r3, #0]
      break;
 8007d48:	e04c      	b.n	8007de4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d049      	beq.n	8007de8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      }
      break;
 8007d60:	e042      	b.n	8007de8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fd4a 	bl	8007804 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d9e:	2105      	movs	r1, #5
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d107      	bne.n	8007dc0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff fe22 	bl	8007a02 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dbe:	e014      	b.n	8007dea <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fb19 	bl	80093f8 <USBH_LL_Start>
      break;
 8007dc6:	e010      	b.n	8007dea <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007dc8:	bf00      	nop
 8007dca:	e00e      	b.n	8007dea <USBH_Process+0x3c6>
      break;
 8007dcc:	bf00      	nop
 8007dce:	e00c      	b.n	8007dea <USBH_Process+0x3c6>
      break;
 8007dd0:	bf00      	nop
 8007dd2:	e00a      	b.n	8007dea <USBH_Process+0x3c6>
    break;
 8007dd4:	bf00      	nop
 8007dd6:	e008      	b.n	8007dea <USBH_Process+0x3c6>
      break;
 8007dd8:	bf00      	nop
 8007dda:	e006      	b.n	8007dea <USBH_Process+0x3c6>
      break;
 8007ddc:	bf00      	nop
 8007dde:	e004      	b.n	8007dea <USBH_Process+0x3c6>
      break;
 8007de0:	bf00      	nop
 8007de2:	e002      	b.n	8007dea <USBH_Process+0x3c6>
      break;
 8007de4:	bf00      	nop
 8007de6:	e000      	b.n	8007dea <USBH_Process+0x3c6>
      break;
 8007de8:	bf00      	nop
  }
  return USBH_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af04      	add	r7, sp, #16
 8007dfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e00:	2301      	movs	r3, #1
 8007e02:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b07      	cmp	r3, #7
 8007e0a:	f200 81bd 	bhi.w	8008188 <USBH_HandleEnum+0x394>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <USBH_HandleEnum+0x20>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e35 	.word	0x08007e35
 8007e18:	08007eef 	.word	0x08007eef
 8007e1c:	08007f59 	.word	0x08007f59
 8007e20:	08007fe3 	.word	0x08007fe3
 8007e24:	0800804d 	.word	0x0800804d
 8007e28:	080080bd 	.word	0x080080bd
 8007e2c:	08008103 	.word	0x08008103
 8007e30:	08008149 	.word	0x08008149
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e34:	2108      	movs	r1, #8
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa4c 	bl	80082d4 <USBH_Get_DevDesc>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d12e      	bne.n	8007ea4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	7919      	ldrb	r1, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007e6a:	9202      	str	r2, [sp, #8]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	9201      	str	r2, [sp, #4]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	4603      	mov	r3, r0
 8007e74:	2280      	movs	r2, #128	@ 0x80
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 f8dc 	bl	8009034 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	7959      	ldrb	r1, [r3, #5]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e90:	9202      	str	r2, [sp, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	9201      	str	r2, [sp, #4]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 f8c9 	bl	8009034 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ea2:	e173      	b.n	800818c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	f040 8170 	bne.w	800818c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d903      	bls.n	8007ece <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	220d      	movs	r2, #13
 8007eca:	701a      	strb	r2, [r3, #0]
      break;
 8007ecc:	e15e      	b.n	800818c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	795b      	ldrb	r3, [r3, #5]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f8fd 	bl	80090d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	791b      	ldrb	r3, [r3, #4]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f8f7 	bl	80090d4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
      break;
 8007eec:	e14e      	b.n	800818c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007eee:	2112      	movs	r1, #18
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9ef 	bl	80082d4 <USBH_Get_DevDesc>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f06:	e143      	b.n	8008190 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	f040 8140 	bne.w	8008190 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f16:	3301      	adds	r3, #1
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d903      	bls.n	8007f32 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	220d      	movs	r2, #13
 8007f2e:	701a      	strb	r2, [r3, #0]
      break;
 8007f30:	e12e      	b.n	8008190 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	795b      	ldrb	r3, [r3, #5]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f8cb 	bl	80090d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	791b      	ldrb	r3, [r3, #4]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f8c5 	bl	80090d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	701a      	strb	r2, [r3, #0]
      break;
 8007f56:	e11b      	b.n	8008190 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007f58:	2101      	movs	r1, #1
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fa79 	bl	8008452 <USBH_SetAddress>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d130      	bne.n	8007fcc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007f6a:	2002      	movs	r0, #2
 8007f6c:	f001 fbab 	bl	80096c6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7919      	ldrb	r1, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007f92:	9202      	str	r2, [sp, #8]
 8007f94:	2200      	movs	r2, #0
 8007f96:	9201      	str	r2, [sp, #4]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2280      	movs	r2, #128	@ 0x80
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f848 	bl	8009034 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	7959      	ldrb	r1, [r3, #5]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fb8:	9202      	str	r2, [sp, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	9201      	str	r2, [sp, #4]
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 f835 	bl	8009034 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fca:	e0e3      	b.n	8008194 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	f040 80e0 	bne.w	8008194 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	220d      	movs	r2, #13
 8007fd8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	705a      	strb	r2, [r3, #1]
      break;
 8007fe0:	e0d8      	b.n	8008194 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007fe2:	2109      	movs	r1, #9
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f9a1 	bl	800832c <USBH_Get_CfgDesc>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ffa:	e0cd      	b.n	8008198 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	f040 80ca 	bne.w	8008198 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800800a:	3301      	adds	r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800801a:	2b03      	cmp	r3, #3
 800801c:	d903      	bls.n	8008026 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	220d      	movs	r2, #13
 8008022:	701a      	strb	r2, [r3, #0]
      break;
 8008024:	e0b8      	b.n	8008198 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	795b      	ldrb	r3, [r3, #5]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f851 	bl	80090d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	791b      	ldrb	r3, [r3, #4]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 f84b 	bl	80090d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
      break;
 800804a:	e0a5      	b.n	8008198 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f969 	bl	800832c <USBH_Get_CfgDesc>
 800805a:	4603      	mov	r3, r0
 800805c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2205      	movs	r2, #5
 8008068:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800806a:	e097      	b.n	800819c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b03      	cmp	r3, #3
 8008070:	f040 8094 	bne.w	800819c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800807a:	3301      	adds	r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800808a:	2b03      	cmp	r3, #3
 800808c:	d903      	bls.n	8008096 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	220d      	movs	r2, #13
 8008092:	701a      	strb	r2, [r3, #0]
      break;
 8008094:	e082      	b.n	800819c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f819 	bl	80090d4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	791b      	ldrb	r3, [r3, #4]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 f813 	bl	80090d4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
      break;
 80080ba:	e06f      	b.n	800819c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d019      	beq.n	80080fa <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80080d2:	23ff      	movs	r3, #255	@ 0xff
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f953 	bl	8008380 <USBH_Get_StringDesc>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80080de:	7bbb      	ldrb	r3, [r7, #14]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d103      	bne.n	80080ec <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2206      	movs	r2, #6
 80080e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080ea:	e059      	b.n	80081a0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d156      	bne.n	80081a0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2206      	movs	r2, #6
 80080f6:	705a      	strb	r2, [r3, #1]
      break;
 80080f8:	e052      	b.n	80081a0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2206      	movs	r2, #6
 80080fe:	705a      	strb	r2, [r3, #1]
      break;
 8008100:	e04e      	b.n	80081a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008108:	2b00      	cmp	r3, #0
 800810a:	d019      	beq.n	8008140 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008118:	23ff      	movs	r3, #255	@ 0xff
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f930 	bl	8008380 <USBH_Get_StringDesc>
 8008120:	4603      	mov	r3, r0
 8008122:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2207      	movs	r2, #7
 800812e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008130:	e038      	b.n	80081a4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	2b03      	cmp	r3, #3
 8008136:	d135      	bne.n	80081a4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2207      	movs	r2, #7
 800813c:	705a      	strb	r2, [r3, #1]
      break;
 800813e:	e031      	b.n	80081a4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2207      	movs	r2, #7
 8008144:	705a      	strb	r2, [r3, #1]
      break;
 8008146:	e02d      	b.n	80081a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800814e:	2b00      	cmp	r3, #0
 8008150:	d017      	beq.n	8008182 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800815e:	23ff      	movs	r3, #255	@ 0xff
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f90d 	bl	8008380 <USBH_Get_StringDesc>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008174:	e018      	b.n	80081a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	2b03      	cmp	r3, #3
 800817a:	d115      	bne.n	80081a8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
      break;
 8008180:	e012      	b.n	80081a8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]
      break;
 8008186:	e00f      	b.n	80081a8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008188:	bf00      	nop
 800818a:	e00e      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 800818c:	bf00      	nop
 800818e:	e00c      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 8008190:	bf00      	nop
 8008192:	e00a      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 8008194:	bf00      	nop
 8008196:	e008      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 8008198:	bf00      	nop
 800819a:	e006      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 800819c:	bf00      	nop
 800819e:	e004      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 80081a0:	bf00      	nop
 80081a2:	e002      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <USBH_HandleEnum+0x3b6>
      break;
 80081a8:	bf00      	nop
  }
  return Status;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f804 	bl	80081f6 <USBH_HandleSof>
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b0b      	cmp	r3, #11
 8008206:	d10a      	bne.n	800821e <USBH_HandleSof+0x28>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
  }
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008236:	bf00      	nop
}
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008252:	bf00      	nop
}
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 f8be 	bl	800942e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	791b      	ldrb	r3, [r3, #4]
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 ff0b 	bl	80090d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	795b      	ldrb	r3, [r3, #5]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 ff05 	bl	80090d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af02      	add	r7, sp, #8
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e6:	d901      	bls.n	80082ec <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e01b      	b.n	8008324 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80082f2:	887b      	ldrh	r3, [r7, #2]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	4613      	mov	r3, r2
 80082f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082fc:	2100      	movs	r1, #0
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f872 	bl	80083e8 <USBH_GetDescriptor>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008314:	887a      	ldrh	r2, [r7, #2]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f929 	bl	8008570 <USBH_ParseDevDesc>
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af02      	add	r7, sp, #8
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	331c      	adds	r3, #28
 800833c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800833e:	887b      	ldrh	r3, [r7, #2]
 8008340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008344:	d901      	bls.n	800834a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008346:	2303      	movs	r3, #3
 8008348:	e016      	b.n	8008378 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800834a:	887b      	ldrh	r3, [r7, #2]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008354:	2100      	movs	r1, #0
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f846 	bl	80083e8 <USBH_GetDescriptor>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d107      	bne.n	8008376 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008366:	887b      	ldrh	r3, [r7, #2]
 8008368:	461a      	mov	r2, r3
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f9af 	bl	80086d0 <USBH_ParseCfgDesc>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	607a      	str	r2, [r7, #4]
 800838a:	461a      	mov	r2, r3
 800838c:	460b      	mov	r3, r1
 800838e:	72fb      	strb	r3, [r7, #11]
 8008390:	4613      	mov	r3, r2
 8008392:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008394:	893b      	ldrh	r3, [r7, #8]
 8008396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800839a:	d802      	bhi.n	80083a2 <USBH_Get_StringDesc+0x22>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e01c      	b.n	80083e0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80083a6:	7afb      	ldrb	r3, [r7, #11]
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80083ae:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80083b6:	893b      	ldrh	r3, [r7, #8]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	460b      	mov	r3, r1
 80083bc:	2100      	movs	r1, #0
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 f812 	bl	80083e8 <USBH_GetDescriptor>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80083d4:	893a      	ldrh	r2, [r7, #8]
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fb8d 	bl	8008af8 <USBH_ParseStringDesc>
  }

  return status;
 80083de:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	72fb      	strb	r3, [r7, #11]
 80083f6:	4613      	mov	r3, r2
 80083f8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	789b      	ldrb	r3, [r3, #2]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d11c      	bne.n	800843c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008402:	7afb      	ldrb	r3, [r7, #11]
 8008404:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008408:	b2da      	uxtb	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2206      	movs	r2, #6
 8008412:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	893a      	ldrh	r2, [r7, #8]
 8008418:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800841a:	893b      	ldrh	r3, [r7, #8]
 800841c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008420:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008424:	d104      	bne.n	8008430 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f240 4209 	movw	r2, #1033	@ 0x409
 800842c:	829a      	strh	r2, [r3, #20]
 800842e:	e002      	b.n	8008436 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8b3a      	ldrh	r2, [r7, #24]
 800843a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800843c:	8b3b      	ldrh	r3, [r7, #24]
 800843e:	461a      	mov	r2, r3
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 fba5 	bl	8008b92 <USBH_CtlReq>
 8008448:	4603      	mov	r3, r0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	460b      	mov	r3, r1
 800845c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	789b      	ldrb	r3, [r3, #2]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d10f      	bne.n	8008486 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2205      	movs	r2, #5
 8008470:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	b29a      	uxth	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008486:	2200      	movs	r2, #0
 8008488:	2100      	movs	r1, #0
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb81 	bl	8008b92 <USBH_CtlReq>
 8008490:	4603      	mov	r3, r0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	789b      	ldrb	r3, [r3, #2]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d10e      	bne.n	80084cc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2209      	movs	r2, #9
 80084b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	887a      	ldrh	r2, [r7, #2]
 80084be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fb5e 	bl	8008b92 <USBH_CtlReq>
 80084d6:	4603      	mov	r3, r0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	789b      	ldrb	r3, [r3, #2]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d10f      	bne.n	8008514 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2203      	movs	r2, #3
 80084fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008514:	2200      	movs	r2, #0
 8008516:	2100      	movs	r1, #0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fb3a 	bl	8008b92 <USBH_CtlReq>
 800851e:	4603      	mov	r3, r0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	789b      	ldrb	r3, [r3, #2]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d10f      	bne.n	800855c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fb16 	bl	8008b92 <USBH_CtlReq>
 8008566:	4603      	mov	r3, r0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008584:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008590:	2302      	movs	r3, #2
 8008592:	e094      	b.n	80086be <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	781a      	ldrb	r2, [r3, #0]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	785a      	ldrb	r2, [r3, #1]
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3302      	adds	r3, #2
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	3303      	adds	r3, #3
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4313      	orrs	r3, r2
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	791a      	ldrb	r2, [r3, #4]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	795a      	ldrb	r2, [r3, #5]
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	799a      	ldrb	r2, [r3, #6]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	79da      	ldrb	r2, [r3, #7]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d11b      	bne.n	800862a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	79db      	ldrb	r3, [r3, #7]
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	dc0f      	bgt.n	800861a <USBH_ParseDevDesc+0xaa>
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	db0f      	blt.n	800861e <USBH_ParseDevDesc+0xae>
 80085fe:	3b08      	subs	r3, #8
 8008600:	4a32      	ldr	r2, [pc, #200]	@ (80086cc <USBH_ParseDevDesc+0x15c>)
 8008602:	fa22 f303 	lsr.w	r3, r2, r3
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	bf14      	ite	ne
 800860e:	2301      	movne	r3, #1
 8008610:	2300      	moveq	r3, #0
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <USBH_ParseDevDesc+0xb6>
 8008618:	e001      	b.n	800861e <USBH_ParseDevDesc+0xae>
 800861a:	2b40      	cmp	r3, #64	@ 0x40
 800861c:	d003      	beq.n	8008626 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2208      	movs	r2, #8
 8008622:	71da      	strb	r2, [r3, #7]
        break;
 8008624:	e000      	b.n	8008628 <USBH_ParseDevDesc+0xb8>
        break;
 8008626:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008628:	e00e      	b.n	8008648 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008630:	2b02      	cmp	r3, #2
 8008632:	d107      	bne.n	8008644 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	79db      	ldrb	r3, [r3, #7]
 8008638:	2b08      	cmp	r3, #8
 800863a:	d005      	beq.n	8008648 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	2208      	movs	r2, #8
 8008640:	71da      	strb	r2, [r3, #7]
 8008642:	e001      	b.n	8008648 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008644:	2303      	movs	r3, #3
 8008646:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	2b08      	cmp	r3, #8
 800864c:	d936      	bls.n	80086bc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	3308      	adds	r3, #8
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	3309      	adds	r3, #9
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	b29b      	uxth	r3, r3
 8008660:	4313      	orrs	r3, r2
 8008662:	b29a      	uxth	r2, r3
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	330a      	adds	r3, #10
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	330b      	adds	r3, #11
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	b29b      	uxth	r3, r3
 800867a:	4313      	orrs	r3, r2
 800867c:	b29a      	uxth	r2, r3
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	330c      	adds	r3, #12
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	330d      	adds	r3, #13
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	b29b      	uxth	r3, r3
 8008694:	4313      	orrs	r3, r2
 8008696:	b29a      	uxth	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	7b9a      	ldrb	r2, [r3, #14]
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	7bda      	ldrb	r2, [r3, #15]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	7c1a      	ldrb	r2, [r3, #16]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	7c5a      	ldrb	r2, [r3, #17]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	01000101 	.word	0x01000101

080086d0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	@ 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	4613      	mov	r3, r2
 80086dc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80086e4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80086fe:	2302      	movs	r3, #2
 8008700:	e0da      	b.n	80088b8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b09      	cmp	r3, #9
 800870c:	d002      	beq.n	8008714 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	2209      	movs	r2, #9
 8008712:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	781a      	ldrb	r2, [r3, #0]
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	785a      	ldrb	r2, [r3, #1]
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	3302      	adds	r3, #2
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	3303      	adds	r3, #3
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	b29b      	uxth	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	b29b      	uxth	r3, r3
 800873a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800873e:	bf28      	it	cs
 8008740:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008744:	b29a      	uxth	r2, r3
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	791a      	ldrb	r2, [r3, #4]
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	795a      	ldrb	r2, [r3, #5]
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	799a      	ldrb	r2, [r3, #6]
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	79da      	ldrb	r2, [r3, #7]
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	7a1a      	ldrb	r2, [r3, #8]
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	2b09      	cmp	r3, #9
 8008776:	f240 809d 	bls.w	80088b4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800877a:	2309      	movs	r3, #9
 800877c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008782:	e081      	b.n	8008888 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008784:	f107 0316 	add.w	r3, r7, #22
 8008788:	4619      	mov	r1, r3
 800878a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800878c:	f000 f9e7 	bl	8008b5e <USBH_GetNextDesc>
 8008790:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b04      	cmp	r3, #4
 8008798:	d176      	bne.n	8008888 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800879a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d002      	beq.n	80087a8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	2209      	movs	r2, #9
 80087a6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80087a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087ac:	221a      	movs	r2, #26
 80087ae:	fb02 f303 	mul.w	r3, r2, r3
 80087b2:	3308      	adds	r3, #8
 80087b4:	6a3a      	ldr	r2, [r7, #32]
 80087b6:	4413      	add	r3, r2
 80087b8:	3302      	adds	r3, #2
 80087ba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80087bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087be:	69f8      	ldr	r0, [r7, #28]
 80087c0:	f000 f87e 	bl	80088c0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087ce:	e043      	b.n	8008858 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087d0:	f107 0316 	add.w	r3, r7, #22
 80087d4:	4619      	mov	r1, r3
 80087d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087d8:	f000 f9c1 	bl	8008b5e <USBH_GetNextDesc>
 80087dc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	2b05      	cmp	r3, #5
 80087e4:	d138      	bne.n	8008858 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	795b      	ldrb	r3, [r3, #5]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d113      	bne.n	8008816 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d003      	beq.n	80087fe <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	799b      	ldrb	r3, [r3, #6]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d10b      	bne.n	8008816 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	79db      	ldrb	r3, [r3, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <USBH_ParseCfgDesc+0x14e>
 8008806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b09      	cmp	r3, #9
 800880c:	d007      	beq.n	800881e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008810:	2209      	movs	r2, #9
 8008812:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008814:	e003      	b.n	800881e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	2207      	movs	r2, #7
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	e000      	b.n	8008820 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800881e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008824:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008828:	3201      	adds	r2, #1
 800882a:	00d2      	lsls	r2, r2, #3
 800882c:	211a      	movs	r1, #26
 800882e:	fb01 f303 	mul.w	r3, r1, r3
 8008832:	4413      	add	r3, r2
 8008834:	3308      	adds	r3, #8
 8008836:	6a3a      	ldr	r2, [r7, #32]
 8008838:	4413      	add	r3, r2
 800883a:	3304      	adds	r3, #4
 800883c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800883e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008840:	69b9      	ldr	r1, [r7, #24]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 f870 	bl	8008928 <USBH_ParseEPDesc>
 8008848:	4603      	mov	r3, r0
 800884a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800884e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008852:	3301      	adds	r3, #1
 8008854:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	791b      	ldrb	r3, [r3, #4]
 800885c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008860:	429a      	cmp	r2, r3
 8008862:	d204      	bcs.n	800886e <USBH_ParseCfgDesc+0x19e>
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	885a      	ldrh	r2, [r3, #2]
 8008868:	8afb      	ldrh	r3, [r7, #22]
 800886a:	429a      	cmp	r2, r3
 800886c:	d8b0      	bhi.n	80087d0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	791b      	ldrb	r3, [r3, #4]
 8008872:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008876:	429a      	cmp	r2, r3
 8008878:	d201      	bcs.n	800887e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800887a:	2303      	movs	r3, #3
 800887c:	e01c      	b.n	80088b8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800887e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008882:	3301      	adds	r3, #1
 8008884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800888c:	2b01      	cmp	r3, #1
 800888e:	d805      	bhi.n	800889c <USBH_ParseCfgDesc+0x1cc>
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	885a      	ldrh	r2, [r3, #2]
 8008894:	8afb      	ldrh	r3, [r7, #22]
 8008896:	429a      	cmp	r2, r3
 8008898:	f63f af74 	bhi.w	8008784 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	791b      	ldrb	r3, [r3, #4]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	bf28      	it	cs
 80088a4:	2302      	movcs	r3, #2
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d201      	bcs.n	80088b4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e001      	b.n	80088b8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80088b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3730      	adds	r7, #48	@ 0x30
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	785a      	ldrb	r2, [r3, #1]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	789a      	ldrb	r2, [r3, #2]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	78da      	ldrb	r2, [r3, #3]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	3304      	adds	r3, #4
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	bf28      	it	cs
 80088f4:	2302      	movcs	r3, #2
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	795a      	ldrb	r2, [r3, #5]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	799a      	ldrb	r2, [r3, #6]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	79da      	ldrb	r2, [r3, #7]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	7a1a      	ldrb	r2, [r3, #8]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	721a      	strb	r2, [r3, #8]
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	785a      	ldrb	r2, [r3, #1]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	789a      	ldrb	r2, [r3, #2]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	78da      	ldrb	r2, [r3, #3]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3304      	adds	r3, #4
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3305      	adds	r3, #5
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	4313      	orrs	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	799a      	ldrb	r2, [r3, #6]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	889b      	ldrh	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800898a:	d804      	bhi.n	8008996 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008994:	d901      	bls.n	800899a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008996:	2303      	movs	r3, #3
 8008998:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d136      	bne.n	8008a12 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	78db      	ldrb	r3, [r3, #3]
 80089a8:	f003 0303 	and.w	r3, r3, #3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d108      	bne.n	80089c2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	889b      	ldrh	r3, [r3, #4]
 80089b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b8:	f240 8097 	bls.w	8008aea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80089bc:	2303      	movs	r3, #3
 80089be:	75fb      	strb	r3, [r7, #23]
 80089c0:	e093      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	78db      	ldrb	r3, [r3, #3]
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d107      	bne.n	80089de <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	889b      	ldrh	r3, [r3, #4]
 80089d2:	2b40      	cmp	r3, #64	@ 0x40
 80089d4:	f240 8089 	bls.w	8008aea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80089d8:	2303      	movs	r3, #3
 80089da:	75fb      	strb	r3, [r7, #23]
 80089dc:	e085      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	78db      	ldrb	r3, [r3, #3]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d005      	beq.n	80089f6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	78db      	ldrb	r3, [r3, #3]
 80089ee:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d10a      	bne.n	8008a0c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	799b      	ldrb	r3, [r3, #6]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <USBH_ParseEPDesc+0xde>
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	799b      	ldrb	r3, [r3, #6]
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d970      	bls.n	8008ae8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008a06:	2303      	movs	r3, #3
 8008a08:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a0a:	e06d      	b.n	8008ae8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	75fb      	strb	r3, [r7, #23]
 8008a10:	e06b      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d13c      	bne.n	8008a96 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	78db      	ldrb	r3, [r3, #3]
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d005      	beq.n	8008a34 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	78db      	ldrb	r3, [r3, #3]
 8008a2c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	889b      	ldrh	r3, [r3, #4]
 8008a38:	2b40      	cmp	r3, #64	@ 0x40
 8008a3a:	d956      	bls.n	8008aea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008a40:	e053      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	78db      	ldrb	r3, [r3, #3]
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d10e      	bne.n	8008a6c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	799b      	ldrb	r3, [r3, #6]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d007      	beq.n	8008a66 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008a5a:	2b10      	cmp	r3, #16
 8008a5c:	d803      	bhi.n	8008a66 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008a62:	2b40      	cmp	r3, #64	@ 0x40
 8008a64:	d941      	bls.n	8008aea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a66:	2303      	movs	r3, #3
 8008a68:	75fb      	strb	r3, [r7, #23]
 8008a6a:	e03e      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	78db      	ldrb	r3, [r3, #3]
 8008a70:	f003 0303 	and.w	r3, r3, #3
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d10b      	bne.n	8008a90 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	799b      	ldrb	r3, [r3, #6]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d004      	beq.n	8008a8a <USBH_ParseEPDesc+0x162>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	889b      	ldrh	r3, [r3, #4]
 8008a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a88:	d32f      	bcc.n	8008aea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	75fb      	strb	r3, [r7, #23]
 8008a8e:	e02c      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008a90:	2303      	movs	r3, #3
 8008a92:	75fb      	strb	r3, [r7, #23]
 8008a94:	e029      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d120      	bne.n	8008ae2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	78db      	ldrb	r3, [r3, #3]
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d106      	bne.n	8008aba <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	889b      	ldrh	r3, [r3, #4]
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d01a      	beq.n	8008aea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	75fb      	strb	r3, [r7, #23]
 8008ab8:	e017      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	78db      	ldrb	r3, [r3, #3]
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d10a      	bne.n	8008adc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	799b      	ldrb	r3, [r3, #6]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <USBH_ParseEPDesc+0x1ae>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	889b      	ldrh	r3, [r3, #4]
 8008ad2:	2b08      	cmp	r3, #8
 8008ad4:	d909      	bls.n	8008aea <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	75fb      	strb	r3, [r7, #23]
 8008ada:	e006      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008adc:	2303      	movs	r3, #3
 8008ade:	75fb      	strb	r3, [r7, #23]
 8008ae0:	e003      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	75fb      	strb	r3, [r7, #23]
 8008ae6:	e000      	b.n	8008aea <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ae8:	bf00      	nop
  }

  return status;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d120      	bne.n	8008b52 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	1e9a      	subs	r2, r3, #2
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	bf28      	it	cs
 8008b1c:	4613      	movcs	r3, r2
 8008b1e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3302      	adds	r3, #2
 8008b24:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b26:	2300      	movs	r3, #0
 8008b28:	82fb      	strh	r3, [r7, #22]
 8008b2a:	e00b      	b.n	8008b44 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b2c:	8afb      	ldrh	r3, [r7, #22]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4413      	add	r3, r2
 8008b32:	781a      	ldrb	r2, [r3, #0]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b3e:	8afb      	ldrh	r3, [r7, #22]
 8008b40:	3302      	adds	r3, #2
 8008b42:	82fb      	strh	r3, [r7, #22]
 8008b44:	8afa      	ldrh	r2, [r7, #22]
 8008b46:	8abb      	ldrh	r3, [r7, #20]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d3ef      	bcc.n	8008b2c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
  }
}
 8008b52:	bf00      	nop
 8008b54:	371c      	adds	r7, #28
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b085      	sub	sp, #20
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	7812      	ldrb	r2, [r2, #0]
 8008b70:	4413      	add	r3, r2
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4413      	add	r3, r2
 8008b82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b84:	68fb      	ldr	r3, [r7, #12]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	789b      	ldrb	r3, [r3, #2]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d002      	beq.n	8008bb2 <USBH_CtlReq+0x20>
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d00f      	beq.n	8008bd0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008bb0:	e027      	b.n	8008c02 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	88fa      	ldrh	r2, [r7, #6]
 8008bbc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8008bce:	e018      	b.n	8008c02 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f000 f81b 	bl	8008c0c <USBH_HandleControl>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <USBH_CtlReq+0x54>
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d106      	bne.n	8008bf4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2201      	movs	r2, #1
 8008bea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	761a      	strb	r2, [r3, #24]
      break;
 8008bf2:	e005      	b.n	8008c00 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d102      	bne.n	8008c00 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	709a      	strb	r2, [r3, #2]
      break;
 8008c00:	bf00      	nop
  }
  return status;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7e1b      	ldrb	r3, [r3, #24]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	2b0a      	cmp	r3, #10
 8008c24:	f200 8156 	bhi.w	8008ed4 <USBH_HandleControl+0x2c8>
 8008c28:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <USBH_HandleControl+0x24>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c5d 	.word	0x08008c5d
 8008c34:	08008c77 	.word	0x08008c77
 8008c38:	08008ce1 	.word	0x08008ce1
 8008c3c:	08008d07 	.word	0x08008d07
 8008c40:	08008d3f 	.word	0x08008d3f
 8008c44:	08008d69 	.word	0x08008d69
 8008c48:	08008dbb 	.word	0x08008dbb
 8008c4c:	08008ddd 	.word	0x08008ddd
 8008c50:	08008e19 	.word	0x08008e19
 8008c54:	08008e3f 	.word	0x08008e3f
 8008c58:	08008e7d 	.word	0x08008e7d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f103 0110 	add.w	r1, r3, #16
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	795b      	ldrb	r3, [r3, #5]
 8008c66:	461a      	mov	r2, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f943 	bl	8008ef4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2202      	movs	r2, #2
 8008c72:	761a      	strb	r2, [r3, #24]
      break;
 8008c74:	e139      	b.n	8008eea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	795b      	ldrb	r3, [r3, #5]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fcc5 	bl	800960c <USBH_LL_GetURBState>
 8008c82:	4603      	mov	r3, r0
 8008c84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d11e      	bne.n	8008cca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	7c1b      	ldrb	r3, [r3, #16]
 8008c90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	8adb      	ldrh	r3, [r3, #22]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008c9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ca0:	2b80      	cmp	r3, #128	@ 0x80
 8008ca2:	d103      	bne.n	8008cac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008caa:	e115      	b.n	8008ed8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2205      	movs	r2, #5
 8008cb0:	761a      	strb	r2, [r3, #24]
      break;
 8008cb2:	e111      	b.n	8008ed8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008cb4:	7b7b      	ldrb	r3, [r7, #13]
 8008cb6:	2b80      	cmp	r3, #128	@ 0x80
 8008cb8:	d103      	bne.n	8008cc2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2209      	movs	r2, #9
 8008cbe:	761a      	strb	r2, [r3, #24]
      break;
 8008cc0:	e10a      	b.n	8008ed8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2207      	movs	r2, #7
 8008cc6:	761a      	strb	r2, [r3, #24]
      break;
 8008cc8:	e106      	b.n	8008ed8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d003      	beq.n	8008cd8 <USBH_HandleControl+0xcc>
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	f040 8100 	bne.w	8008ed8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	220b      	movs	r2, #11
 8008cdc:	761a      	strb	r2, [r3, #24]
      break;
 8008cde:	e0fb      	b.n	8008ed8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6899      	ldr	r1, [r3, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	899a      	ldrh	r2, [r3, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	791b      	ldrb	r3, [r3, #4]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f93a 	bl	8008f72 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2204      	movs	r2, #4
 8008d02:	761a      	strb	r2, [r3, #24]
      break;
 8008d04:	e0f1      	b.n	8008eea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	791b      	ldrb	r3, [r3, #4]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fc7d 	bl	800960c <USBH_LL_GetURBState>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d102      	bne.n	8008d22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2209      	movs	r2, #9
 8008d20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b05      	cmp	r3, #5
 8008d26:	d102      	bne.n	8008d2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d2c:	e0d6      	b.n	8008edc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	f040 80d3 	bne.w	8008edc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	220b      	movs	r2, #11
 8008d3a:	761a      	strb	r2, [r3, #24]
      break;
 8008d3c:	e0ce      	b.n	8008edc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6899      	ldr	r1, [r3, #8]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	899a      	ldrh	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	795b      	ldrb	r3, [r3, #5]
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	9000      	str	r0, [sp, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f8ea 	bl	8008f28 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2206      	movs	r2, #6
 8008d64:	761a      	strb	r2, [r3, #24]
      break;
 8008d66:	e0c0      	b.n	8008eea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	795b      	ldrb	r3, [r3, #5]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fc4c 	bl	800960c <USBH_LL_GetURBState>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d103      	bne.n	8008d86 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2207      	movs	r2, #7
 8008d82:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d84:	e0ac      	b.n	8008ee0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b05      	cmp	r3, #5
 8008d8a:	d105      	bne.n	8008d98 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	220c      	movs	r2, #12
 8008d90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008d92:	2303      	movs	r3, #3
 8008d94:	73fb      	strb	r3, [r7, #15]
      break;
 8008d96:	e0a3      	b.n	8008ee0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d103      	bne.n	8008da6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2205      	movs	r2, #5
 8008da2:	761a      	strb	r2, [r3, #24]
      break;
 8008da4:	e09c      	b.n	8008ee0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	f040 8099 	bne.w	8008ee0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	220b      	movs	r2, #11
 8008db2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008db4:	2302      	movs	r3, #2
 8008db6:	73fb      	strb	r3, [r7, #15]
      break;
 8008db8:	e092      	b.n	8008ee0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	791b      	ldrb	r3, [r3, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f8d5 	bl	8008f72 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	761a      	strb	r2, [r3, #24]

      break;
 8008dda:	e086      	b.n	8008eea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fc12 	bl	800960c <USBH_LL_GetURBState>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d105      	bne.n	8008dfe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	220d      	movs	r2, #13
 8008df6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008dfc:	e072      	b.n	8008ee4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b04      	cmp	r3, #4
 8008e02:	d103      	bne.n	8008e0c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	220b      	movs	r2, #11
 8008e08:	761a      	strb	r2, [r3, #24]
      break;
 8008e0a:	e06b      	b.n	8008ee4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	2b05      	cmp	r3, #5
 8008e10:	d168      	bne.n	8008ee4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e12:	2303      	movs	r3, #3
 8008e14:	73fb      	strb	r3, [r7, #15]
      break;
 8008e16:	e065      	b.n	8008ee4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	795b      	ldrb	r3, [r3, #5]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	9200      	str	r2, [sp, #0]
 8008e20:	2200      	movs	r2, #0
 8008e22:	2100      	movs	r1, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f87f 	bl	8008f28 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	220a      	movs	r2, #10
 8008e3a:	761a      	strb	r2, [r3, #24]
      break;
 8008e3c:	e055      	b.n	8008eea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	795b      	ldrb	r3, [r3, #5]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fbe1 	bl	800960c <USBH_LL_GetURBState>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d105      	bne.n	8008e60 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	220d      	movs	r2, #13
 8008e5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e5e:	e043      	b.n	8008ee8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d103      	bne.n	8008e6e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2209      	movs	r2, #9
 8008e6a:	761a      	strb	r2, [r3, #24]
      break;
 8008e6c:	e03c      	b.n	8008ee8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b04      	cmp	r3, #4
 8008e72:	d139      	bne.n	8008ee8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	220b      	movs	r2, #11
 8008e78:	761a      	strb	r2, [r3, #24]
      break;
 8008e7a:	e035      	b.n	8008ee8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	7e5b      	ldrb	r3, [r3, #25]
 8008e80:	3301      	adds	r3, #1
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	765a      	strb	r2, [r3, #25]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7e5b      	ldrb	r3, [r3, #25]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d806      	bhi.n	8008e9e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008e9c:	e025      	b.n	8008eea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ea4:	2106      	movs	r1, #6
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	795b      	ldrb	r3, [r3, #5]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f90c 	bl	80090d4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	791b      	ldrb	r3, [r3, #4]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f906 	bl	80090d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ed2:	e00a      	b.n	8008eea <USBH_HandleControl+0x2de>

    default:
      break;
 8008ed4:	bf00      	nop
 8008ed6:	e008      	b.n	8008eea <USBH_HandleControl+0x2de>
      break;
 8008ed8:	bf00      	nop
 8008eda:	e006      	b.n	8008eea <USBH_HandleControl+0x2de>
      break;
 8008edc:	bf00      	nop
 8008ede:	e004      	b.n	8008eea <USBH_HandleControl+0x2de>
      break;
 8008ee0:	bf00      	nop
 8008ee2:	e002      	b.n	8008eea <USBH_HandleControl+0x2de>
      break;
 8008ee4:	bf00      	nop
 8008ee6:	e000      	b.n	8008eea <USBH_HandleControl+0x2de>
      break;
 8008ee8:	bf00      	nop
  }

  return status;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af04      	add	r7, sp, #16
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f02:	79f9      	ldrb	r1, [r7, #7]
 8008f04:	2300      	movs	r3, #0
 8008f06:	9303      	str	r3, [sp, #12]
 8008f08:	2308      	movs	r3, #8
 8008f0a:	9302      	str	r3, [sp, #8]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	2300      	movs	r3, #0
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	2300      	movs	r3, #0
 8008f16:	2200      	movs	r2, #0
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fb46 	bl	80095aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af04      	add	r7, sp, #16
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4611      	mov	r1, r2
 8008f34:	461a      	mov	r2, r3
 8008f36:	460b      	mov	r3, r1
 8008f38:	80fb      	strh	r3, [r7, #6]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f4c:	7979      	ldrb	r1, [r7, #5]
 8008f4e:	7e3b      	ldrb	r3, [r7, #24]
 8008f50:	9303      	str	r3, [sp, #12]
 8008f52:	88fb      	ldrh	r3, [r7, #6]
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2200      	movs	r2, #0
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 fb21 	bl	80095aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b088      	sub	sp, #32
 8008f76:	af04      	add	r7, sp, #16
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	461a      	mov	r2, r3
 8008f80:	460b      	mov	r3, r1
 8008f82:	80fb      	strh	r3, [r7, #6]
 8008f84:	4613      	mov	r3, r2
 8008f86:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f88:	7979      	ldrb	r1, [r7, #5]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	88fb      	ldrh	r3, [r7, #6]
 8008f90:	9302      	str	r3, [sp, #8]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	2301      	movs	r3, #1
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fb03 	bl	80095aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008fa4:	2300      	movs	r3, #0

}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b088      	sub	sp, #32
 8008fb2:	af04      	add	r7, sp, #16
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	4611      	mov	r1, r2
 8008fba:	461a      	mov	r2, r3
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	80fb      	strh	r3, [r7, #6]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fd2:	7979      	ldrb	r1, [r7, #5]
 8008fd4:	7e3b      	ldrb	r3, [r7, #24]
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	9302      	str	r3, [sp, #8]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 fade 	bl	80095aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af04      	add	r7, sp, #16
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4611      	mov	r1, r2
 8009004:	461a      	mov	r2, r3
 8009006:	460b      	mov	r3, r1
 8009008:	80fb      	strh	r3, [r7, #6]
 800900a:	4613      	mov	r3, r2
 800900c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800900e:	7979      	ldrb	r1, [r7, #5]
 8009010:	2300      	movs	r3, #0
 8009012:	9303      	str	r3, [sp, #12]
 8009014:	88fb      	ldrh	r3, [r7, #6]
 8009016:	9302      	str	r3, [sp, #8]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	2301      	movs	r3, #1
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	2302      	movs	r3, #2
 8009022:	2201      	movs	r2, #1
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f000 fac0 	bl	80095aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af04      	add	r7, sp, #16
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	4608      	mov	r0, r1
 800903e:	4611      	mov	r1, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4603      	mov	r3, r0
 8009044:	70fb      	strb	r3, [r7, #3]
 8009046:	460b      	mov	r3, r1
 8009048:	70bb      	strb	r3, [r7, #2]
 800904a:	4613      	mov	r3, r2
 800904c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800904e:	7878      	ldrb	r0, [r7, #1]
 8009050:	78ba      	ldrb	r2, [r7, #2]
 8009052:	78f9      	ldrb	r1, [r7, #3]
 8009054:	8b3b      	ldrh	r3, [r7, #24]
 8009056:	9302      	str	r3, [sp, #8]
 8009058:	7d3b      	ldrb	r3, [r7, #20]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	7c3b      	ldrb	r3, [r7, #16]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	4603      	mov	r3, r0
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa53 	bl	800950e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b082      	sub	sp, #8
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800907e:	78fb      	ldrb	r3, [r7, #3]
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa72 	bl	800956c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f836 	bl	8009110 <USBH_GetFreePipe>
 80090a4:	4603      	mov	r3, r0
 80090a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80090a8:	89fb      	ldrh	r3, [r7, #14]
 80090aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00a      	beq.n	80090c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80090b2:	78fa      	ldrb	r2, [r7, #3]
 80090b4:	89fb      	ldrh	r3, [r7, #14]
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	33e0      	adds	r3, #224	@ 0xe0
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	440b      	add	r3, r1
 80090c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80090c8:	89fb      	ldrh	r3, [r7, #14]
 80090ca:	b2db      	uxtb	r3, r3
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	d80d      	bhi.n	8009102 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	33e0      	adds	r3, #224	@ 0xe0
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80090f8:	6879      	ldr	r1, [r7, #4]
 80090fa:	33e0      	adds	r3, #224	@ 0xe0
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	440b      	add	r3, r1
 8009100:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
 8009120:	e00f      	b.n	8009142 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	33e0      	adds	r3, #224	@ 0xe0
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d102      	bne.n	800913c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	b29b      	uxth	r3, r3
 800913a:	e007      	b.n	800914c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	3301      	adds	r3, #1
 8009140:	73fb      	strb	r3, [r7, #15]
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	2b0f      	cmp	r3, #15
 8009146:	d9ec      	bls.n	8009122 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009148:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800915c:	2201      	movs	r2, #1
 800915e:	490e      	ldr	r1, [pc, #56]	@ (8009198 <MX_USB_HOST_Init+0x40>)
 8009160:	480e      	ldr	r0, [pc, #56]	@ (800919c <MX_USB_HOST_Init+0x44>)
 8009162:	f7fe fb15 	bl	8007790 <USBH_Init>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800916c:	f7f8 f9c6 	bl	80014fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009170:	490b      	ldr	r1, [pc, #44]	@ (80091a0 <MX_USB_HOST_Init+0x48>)
 8009172:	480a      	ldr	r0, [pc, #40]	@ (800919c <MX_USB_HOST_Init+0x44>)
 8009174:	f7fe fbb9 	bl	80078ea <USBH_RegisterClass>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800917e:	f7f8 f9bd 	bl	80014fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009182:	4806      	ldr	r0, [pc, #24]	@ (800919c <MX_USB_HOST_Init+0x44>)
 8009184:	f7fe fc3d 	bl	8007a02 <USBH_Start>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800918e:	f7f8 f9b5 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009192:	bf00      	nop
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	080091b9 	.word	0x080091b9
 800919c:	200001a0 	.word	0x200001a0
 80091a0:	2000000c 	.word	0x2000000c

080091a4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80091a8:	4802      	ldr	r0, [pc, #8]	@ (80091b4 <MX_USB_HOST_Process+0x10>)
 80091aa:	f7fe fc3b 	bl	8007a24 <USBH_Process>
}
 80091ae:	bf00      	nop
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	200001a0 	.word	0x200001a0

080091b8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d819      	bhi.n	8009200 <USBH_UserProcess+0x48>
 80091cc:	a201      	add	r2, pc, #4	@ (adr r2, 80091d4 <USBH_UserProcess+0x1c>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	08009201 	.word	0x08009201
 80091d8:	080091f1 	.word	0x080091f1
 80091dc:	08009201 	.word	0x08009201
 80091e0:	080091f9 	.word	0x080091f9
 80091e4:	080091e9 	.word	0x080091e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80091e8:	4b09      	ldr	r3, [pc, #36]	@ (8009210 <USBH_UserProcess+0x58>)
 80091ea:	2203      	movs	r2, #3
 80091ec:	701a      	strb	r2, [r3, #0]
  break;
 80091ee:	e008      	b.n	8009202 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80091f0:	4b07      	ldr	r3, [pc, #28]	@ (8009210 <USBH_UserProcess+0x58>)
 80091f2:	2202      	movs	r2, #2
 80091f4:	701a      	strb	r2, [r3, #0]
  break;
 80091f6:	e004      	b.n	8009202 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80091f8:	4b05      	ldr	r3, [pc, #20]	@ (8009210 <USBH_UserProcess+0x58>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	701a      	strb	r2, [r3, #0]
  break;
 80091fe:	e000      	b.n	8009202 <USBH_UserProcess+0x4a>

  default:
  break;
 8009200:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	20000578 	.word	0x20000578

08009214 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08a      	sub	sp, #40	@ 0x28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	605a      	str	r2, [r3, #4]
 8009226:	609a      	str	r2, [r3, #8]
 8009228:	60da      	str	r2, [r3, #12]
 800922a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009234:	d147      	bne.n	80092c6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009236:	2300      	movs	r3, #0
 8009238:	613b      	str	r3, [r7, #16]
 800923a:	4b25      	ldr	r3, [pc, #148]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 800923c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800923e:	4a24      	ldr	r2, [pc, #144]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 8009240:	f043 0301 	orr.w	r3, r3, #1
 8009244:	6313      	str	r3, [r2, #48]	@ 0x30
 8009246:	4b22      	ldr	r3, [pc, #136]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 8009248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	613b      	str	r3, [r7, #16]
 8009250:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009258:	2300      	movs	r3, #0
 800925a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800925c:	2300      	movs	r3, #0
 800925e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009260:	f107 0314 	add.w	r3, r7, #20
 8009264:	4619      	mov	r1, r3
 8009266:	481b      	ldr	r0, [pc, #108]	@ (80092d4 <HAL_HCD_MspInit+0xc0>)
 8009268:	f7f8 fd2c 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800926c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009272:	2302      	movs	r3, #2
 8009274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800927a:	2300      	movs	r3, #0
 800927c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800927e:	230a      	movs	r3, #10
 8009280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009282:	f107 0314 	add.w	r3, r7, #20
 8009286:	4619      	mov	r1, r3
 8009288:	4812      	ldr	r0, [pc, #72]	@ (80092d4 <HAL_HCD_MspInit+0xc0>)
 800928a:	f7f8 fd1b 	bl	8001cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800928e:	4b10      	ldr	r3, [pc, #64]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 8009290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009292:	4a0f      	ldr	r2, [pc, #60]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 8009294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009298:	6353      	str	r3, [r2, #52]	@ 0x34
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
 800929e:	4b0c      	ldr	r3, [pc, #48]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 80092a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a2:	4a0b      	ldr	r2, [pc, #44]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 80092a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80092aa:	4b09      	ldr	r3, [pc, #36]	@ (80092d0 <HAL_HCD_MspInit+0xbc>)
 80092ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092b6:	2200      	movs	r2, #0
 80092b8:	2100      	movs	r1, #0
 80092ba:	2043      	movs	r0, #67	@ 0x43
 80092bc:	f7f8 fccb 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092c0:	2043      	movs	r0, #67	@ 0x43
 80092c2:	f7f8 fce4 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092c6:	bf00      	nop
 80092c8:	3728      	adds	r7, #40	@ 0x28
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	40023800 	.word	0x40023800
 80092d4:	40020000 	.word	0x40020000

080092d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe ff73 	bl	80081d2 <USBH_LL_IncTimer>
}
 80092ec:	bf00      	nop
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe ffab 	bl	800825e <USBH_LL_Connect>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe ffb4 	bl	800828c <USBH_LL_Disconnect>
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
 8009338:	4613      	mov	r3, r2
 800933a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe ff65 	bl	8008226 <USBH_LL_PortEnabled>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe ff65 	bl	8008242 <USBH_LL_PortDisabled>
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800938e:	2b01      	cmp	r3, #1
 8009390:	d12a      	bne.n	80093e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009392:	4a18      	ldr	r2, [pc, #96]	@ (80093f4 <USBH_LL_Init+0x74>)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a15      	ldr	r2, [pc, #84]	@ (80093f4 <USBH_LL_Init+0x74>)
 800939e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093a2:	4b14      	ldr	r3, [pc, #80]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80093a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80093aa:	4b12      	ldr	r3, [pc, #72]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093ac:	2208      	movs	r2, #8
 80093ae:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80093b0:	4b10      	ldr	r3, [pc, #64]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093b6:	4b0f      	ldr	r3, [pc, #60]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80093bc:	4b0d      	ldr	r3, [pc, #52]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093be:	2202      	movs	r2, #2
 80093c0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093c2:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80093c8:	480a      	ldr	r0, [pc, #40]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093ca:	f7f8 fe4a 	bl	8002062 <HAL_HCD_Init>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80093d4:	f7f8 f892 	bl	80014fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80093d8:	4806      	ldr	r0, [pc, #24]	@ (80093f4 <USBH_LL_Init+0x74>)
 80093da:	f7f9 faab 	bl	8002934 <HAL_HCD_GetCurrentFrame>
 80093de:	4603      	mov	r3, r0
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7fe fee6 	bl	80081b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	2000057c 	.word	0x2000057c

080093f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800940e:	4618      	mov	r0, r3
 8009410:	f7f9 fa18 	bl	8002844 <HAL_HCD_Start>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f95e 	bl	80096dc <USBH_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009424:	7bbb      	ldrb	r3, [r7, #14]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009444:	4618      	mov	r0, r3
 8009446:	f7f9 fa20 	bl	800288a <HAL_HCD_Stop>
 800944a:	4603      	mov	r3, r0
 800944c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800944e:	7bfb      	ldrb	r3, [r7, #15]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 f943 	bl	80096dc <USBH_Get_USB_Status>
 8009456:	4603      	mov	r3, r0
 8009458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800945a:	7bbb      	ldrb	r3, [r7, #14]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800946c:	2301      	movs	r3, #1
 800946e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009476:	4618      	mov	r0, r3
 8009478:	f7f9 fa6a 	bl	8002950 <HAL_HCD_GetCurrentSpeed>
 800947c:	4603      	mov	r3, r0
 800947e:	2b02      	cmp	r3, #2
 8009480:	d00c      	beq.n	800949c <USBH_LL_GetSpeed+0x38>
 8009482:	2b02      	cmp	r3, #2
 8009484:	d80d      	bhi.n	80094a2 <USBH_LL_GetSpeed+0x3e>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <USBH_LL_GetSpeed+0x2c>
 800948a:	2b01      	cmp	r3, #1
 800948c:	d003      	beq.n	8009496 <USBH_LL_GetSpeed+0x32>
 800948e:	e008      	b.n	80094a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
    break;
 8009494:	e008      	b.n	80094a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009496:	2301      	movs	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
    break;
 800949a:	e005      	b.n	80094a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800949c:	2302      	movs	r3, #2
 800949e:	73fb      	strb	r3, [r7, #15]
    break;
 80094a0:	e002      	b.n	80094a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80094a2:	2301      	movs	r3, #1
 80094a4:	73fb      	strb	r3, [r7, #15]
    break;
 80094a6:	bf00      	nop
  }
  return  speed;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f9 f9fb 	bl	80028c4 <HAL_HCD_ResetPort>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f901 	bl	80096dc <USBH_Get_USB_Status>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094de:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094fa:	78fa      	ldrb	r2, [r7, #3]
 80094fc:	4611      	mov	r1, r2
 80094fe:	4618      	mov	r0, r3
 8009500:	f7f9 fa03 	bl	800290a <HAL_HCD_HC_GetXferCount>
 8009504:	4603      	mov	r3, r0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800950e:	b590      	push	{r4, r7, lr}
 8009510:	b089      	sub	sp, #36	@ 0x24
 8009512:	af04      	add	r7, sp, #16
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	4608      	mov	r0, r1
 8009518:	4611      	mov	r1, r2
 800951a:	461a      	mov	r2, r3
 800951c:	4603      	mov	r3, r0
 800951e:	70fb      	strb	r3, [r7, #3]
 8009520:	460b      	mov	r3, r1
 8009522:	70bb      	strb	r3, [r7, #2]
 8009524:	4613      	mov	r3, r2
 8009526:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009536:	787c      	ldrb	r4, [r7, #1]
 8009538:	78ba      	ldrb	r2, [r7, #2]
 800953a:	78f9      	ldrb	r1, [r7, #3]
 800953c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800953e:	9302      	str	r3, [sp, #8]
 8009540:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	4623      	mov	r3, r4
 800954e:	f7f8 fdef 	bl	8002130 <HAL_HCD_HC_Init>
 8009552:	4603      	mov	r3, r0
 8009554:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f8bf 	bl	80096dc <USBH_Get_USB_Status>
 800955e:	4603      	mov	r3, r0
 8009560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009562:	7bbb      	ldrb	r3, [r7, #14]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	bd90      	pop	{r4, r7, pc}

0800956c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009586:	78fa      	ldrb	r2, [r7, #3]
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f7f8 fe88 	bl	80022a0 <HAL_HCD_HC_Halt>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 f8a0 	bl	80096dc <USBH_Get_USB_Status>
 800959c:	4603      	mov	r3, r0
 800959e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80095aa:	b590      	push	{r4, r7, lr}
 80095ac:	b089      	sub	sp, #36	@ 0x24
 80095ae:	af04      	add	r7, sp, #16
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	4608      	mov	r0, r1
 80095b4:	4611      	mov	r1, r2
 80095b6:	461a      	mov	r2, r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	70fb      	strb	r3, [r7, #3]
 80095bc:	460b      	mov	r3, r1
 80095be:	70bb      	strb	r3, [r7, #2]
 80095c0:	4613      	mov	r3, r2
 80095c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80095d2:	787c      	ldrb	r4, [r7, #1]
 80095d4:	78ba      	ldrb	r2, [r7, #2]
 80095d6:	78f9      	ldrb	r1, [r7, #3]
 80095d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80095dc:	9303      	str	r3, [sp, #12]
 80095de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80095e0:	9302      	str	r3, [sp, #8]
 80095e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	4623      	mov	r3, r4
 80095ee:	f7f8 fe7b 	bl	80022e8 <HAL_HCD_HC_SubmitRequest>
 80095f2:	4603      	mov	r3, r0
 80095f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 f86f 	bl	80096dc <USBH_Get_USB_Status>
 80095fe:	4603      	mov	r3, r0
 8009600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009602:	7bbb      	ldrb	r3, [r7, #14]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	bd90      	pop	{r4, r7, pc}

0800960c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f7f9 f95c 	bl	80028e0 <HAL_HCD_HC_GetURBState>
 8009628:	4603      	mov	r3, r0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009644:	2b01      	cmp	r3, #1
 8009646:	d103      	bne.n	8009650 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009648:	78fb      	ldrb	r3, [r7, #3]
 800964a:	4618      	mov	r0, r3
 800964c:	f000 f872 	bl	8009734 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009650:	20c8      	movs	r0, #200	@ 0xc8
 8009652:	f7f8 fa01 	bl	8001a58 <HAL_Delay>
  return USBH_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
 800966c:	4613      	mov	r3, r2
 800966e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009676:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009678:	78fa      	ldrb	r2, [r7, #3]
 800967a:	68f9      	ldr	r1, [r7, #12]
 800967c:	4613      	mov	r3, r2
 800967e:	011b      	lsls	r3, r3, #4
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	3317      	adds	r3, #23
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00a      	beq.n	80096a4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	68f9      	ldr	r1, [r7, #12]
 8009692:	4613      	mov	r3, r2
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	1a9b      	subs	r3, r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	440b      	add	r3, r1
 800969c:	333c      	adds	r3, #60	@ 0x3c
 800969e:	78ba      	ldrb	r2, [r7, #2]
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e009      	b.n	80096b8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80096a4:	78fa      	ldrb	r2, [r7, #3]
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	4613      	mov	r3, r2
 80096aa:	011b      	lsls	r3, r3, #4
 80096ac:	1a9b      	subs	r3, r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	333d      	adds	r3, #61	@ 0x3d
 80096b4:	78ba      	ldrb	r2, [r7, #2]
 80096b6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7f8 f9c2 	bl	8001a58 <HAL_Delay>
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	2b03      	cmp	r3, #3
 80096ee:	d817      	bhi.n	8009720 <USBH_Get_USB_Status+0x44>
 80096f0:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <USBH_Get_USB_Status+0x1c>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009709 	.word	0x08009709
 80096fc:	0800970f 	.word	0x0800970f
 8009700:	08009715 	.word	0x08009715
 8009704:	0800971b 	.word	0x0800971b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
    break;
 800970c:	e00b      	b.n	8009726 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800970e:	2302      	movs	r3, #2
 8009710:	73fb      	strb	r3, [r7, #15]
    break;
 8009712:	e008      	b.n	8009726 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009714:	2301      	movs	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
    break;
 8009718:	e005      	b.n	8009726 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800971a:	2302      	movs	r3, #2
 800971c:	73fb      	strb	r3, [r7, #15]
    break;
 800971e:	e002      	b.n	8009726 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009720:	2302      	movs	r3, #2
 8009722:	73fb      	strb	r3, [r7, #15]
    break;
 8009724:	bf00      	nop
  }
  return usb_status;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	e001      	b.n	8009752 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800974e:	2301      	movs	r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	461a      	mov	r2, r3
 8009756:	2101      	movs	r1, #1
 8009758:	4803      	ldr	r0, [pc, #12]	@ (8009768 <MX_DriverVbusFS+0x34>)
 800975a:	f7f8 fc4f 	bl	8001ffc <HAL_GPIO_WritePin>
}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40020800 	.word	0x40020800

0800976c <malloc>:
 800976c:	4b02      	ldr	r3, [pc, #8]	@ (8009778 <malloc+0xc>)
 800976e:	4601      	mov	r1, r0
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	f000 b82d 	b.w	80097d0 <_malloc_r>
 8009776:	bf00      	nop
 8009778:	20000038 	.word	0x20000038

0800977c <free>:
 800977c:	4b02      	ldr	r3, [pc, #8]	@ (8009788 <free+0xc>)
 800977e:	4601      	mov	r1, r0
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	f000 bb47 	b.w	8009e14 <_free_r>
 8009786:	bf00      	nop
 8009788:	20000038 	.word	0x20000038

0800978c <sbrk_aligned>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	4e0f      	ldr	r6, [pc, #60]	@ (80097cc <sbrk_aligned+0x40>)
 8009790:	460c      	mov	r4, r1
 8009792:	6831      	ldr	r1, [r6, #0]
 8009794:	4605      	mov	r5, r0
 8009796:	b911      	cbnz	r1, 800979e <sbrk_aligned+0x12>
 8009798:	f000 faec 	bl	8009d74 <_sbrk_r>
 800979c:	6030      	str	r0, [r6, #0]
 800979e:	4621      	mov	r1, r4
 80097a0:	4628      	mov	r0, r5
 80097a2:	f000 fae7 	bl	8009d74 <_sbrk_r>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d103      	bne.n	80097b2 <sbrk_aligned+0x26>
 80097aa:	f04f 34ff 	mov.w	r4, #4294967295
 80097ae:	4620      	mov	r0, r4
 80097b0:	bd70      	pop	{r4, r5, r6, pc}
 80097b2:	1cc4      	adds	r4, r0, #3
 80097b4:	f024 0403 	bic.w	r4, r4, #3
 80097b8:	42a0      	cmp	r0, r4
 80097ba:	d0f8      	beq.n	80097ae <sbrk_aligned+0x22>
 80097bc:	1a21      	subs	r1, r4, r0
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 fad8 	bl	8009d74 <_sbrk_r>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d1f2      	bne.n	80097ae <sbrk_aligned+0x22>
 80097c8:	e7ef      	b.n	80097aa <sbrk_aligned+0x1e>
 80097ca:	bf00      	nop
 80097cc:	2000095c 	.word	0x2000095c

080097d0 <_malloc_r>:
 80097d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	1ccd      	adds	r5, r1, #3
 80097d6:	f025 0503 	bic.w	r5, r5, #3
 80097da:	3508      	adds	r5, #8
 80097dc:	2d0c      	cmp	r5, #12
 80097de:	bf38      	it	cc
 80097e0:	250c      	movcc	r5, #12
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	4606      	mov	r6, r0
 80097e6:	db01      	blt.n	80097ec <_malloc_r+0x1c>
 80097e8:	42a9      	cmp	r1, r5
 80097ea:	d904      	bls.n	80097f6 <_malloc_r+0x26>
 80097ec:	230c      	movs	r3, #12
 80097ee:	6033      	str	r3, [r6, #0]
 80097f0:	2000      	movs	r0, #0
 80097f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098cc <_malloc_r+0xfc>
 80097fa:	f000 f869 	bl	80098d0 <__malloc_lock>
 80097fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009802:	461c      	mov	r4, r3
 8009804:	bb44      	cbnz	r4, 8009858 <_malloc_r+0x88>
 8009806:	4629      	mov	r1, r5
 8009808:	4630      	mov	r0, r6
 800980a:	f7ff ffbf 	bl	800978c <sbrk_aligned>
 800980e:	1c43      	adds	r3, r0, #1
 8009810:	4604      	mov	r4, r0
 8009812:	d158      	bne.n	80098c6 <_malloc_r+0xf6>
 8009814:	f8d8 4000 	ldr.w	r4, [r8]
 8009818:	4627      	mov	r7, r4
 800981a:	2f00      	cmp	r7, #0
 800981c:	d143      	bne.n	80098a6 <_malloc_r+0xd6>
 800981e:	2c00      	cmp	r4, #0
 8009820:	d04b      	beq.n	80098ba <_malloc_r+0xea>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	4639      	mov	r1, r7
 8009826:	4630      	mov	r0, r6
 8009828:	eb04 0903 	add.w	r9, r4, r3
 800982c:	f000 faa2 	bl	8009d74 <_sbrk_r>
 8009830:	4581      	cmp	r9, r0
 8009832:	d142      	bne.n	80098ba <_malloc_r+0xea>
 8009834:	6821      	ldr	r1, [r4, #0]
 8009836:	1a6d      	subs	r5, r5, r1
 8009838:	4629      	mov	r1, r5
 800983a:	4630      	mov	r0, r6
 800983c:	f7ff ffa6 	bl	800978c <sbrk_aligned>
 8009840:	3001      	adds	r0, #1
 8009842:	d03a      	beq.n	80098ba <_malloc_r+0xea>
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	442b      	add	r3, r5
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	f8d8 3000 	ldr.w	r3, [r8]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	bb62      	cbnz	r2, 80098ac <_malloc_r+0xdc>
 8009852:	f8c8 7000 	str.w	r7, [r8]
 8009856:	e00f      	b.n	8009878 <_malloc_r+0xa8>
 8009858:	6822      	ldr	r2, [r4, #0]
 800985a:	1b52      	subs	r2, r2, r5
 800985c:	d420      	bmi.n	80098a0 <_malloc_r+0xd0>
 800985e:	2a0b      	cmp	r2, #11
 8009860:	d917      	bls.n	8009892 <_malloc_r+0xc2>
 8009862:	1961      	adds	r1, r4, r5
 8009864:	42a3      	cmp	r3, r4
 8009866:	6025      	str	r5, [r4, #0]
 8009868:	bf18      	it	ne
 800986a:	6059      	strne	r1, [r3, #4]
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	bf08      	it	eq
 8009870:	f8c8 1000 	streq.w	r1, [r8]
 8009874:	5162      	str	r2, [r4, r5]
 8009876:	604b      	str	r3, [r1, #4]
 8009878:	4630      	mov	r0, r6
 800987a:	f000 f82f 	bl	80098dc <__malloc_unlock>
 800987e:	f104 000b 	add.w	r0, r4, #11
 8009882:	1d23      	adds	r3, r4, #4
 8009884:	f020 0007 	bic.w	r0, r0, #7
 8009888:	1ac2      	subs	r2, r0, r3
 800988a:	bf1c      	itt	ne
 800988c:	1a1b      	subne	r3, r3, r0
 800988e:	50a3      	strne	r3, [r4, r2]
 8009890:	e7af      	b.n	80097f2 <_malloc_r+0x22>
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	42a3      	cmp	r3, r4
 8009896:	bf0c      	ite	eq
 8009898:	f8c8 2000 	streq.w	r2, [r8]
 800989c:	605a      	strne	r2, [r3, #4]
 800989e:	e7eb      	b.n	8009878 <_malloc_r+0xa8>
 80098a0:	4623      	mov	r3, r4
 80098a2:	6864      	ldr	r4, [r4, #4]
 80098a4:	e7ae      	b.n	8009804 <_malloc_r+0x34>
 80098a6:	463c      	mov	r4, r7
 80098a8:	687f      	ldr	r7, [r7, #4]
 80098aa:	e7b6      	b.n	800981a <_malloc_r+0x4a>
 80098ac:	461a      	mov	r2, r3
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d1fb      	bne.n	80098ac <_malloc_r+0xdc>
 80098b4:	2300      	movs	r3, #0
 80098b6:	6053      	str	r3, [r2, #4]
 80098b8:	e7de      	b.n	8009878 <_malloc_r+0xa8>
 80098ba:	230c      	movs	r3, #12
 80098bc:	6033      	str	r3, [r6, #0]
 80098be:	4630      	mov	r0, r6
 80098c0:	f000 f80c 	bl	80098dc <__malloc_unlock>
 80098c4:	e794      	b.n	80097f0 <_malloc_r+0x20>
 80098c6:	6005      	str	r5, [r0, #0]
 80098c8:	e7d6      	b.n	8009878 <_malloc_r+0xa8>
 80098ca:	bf00      	nop
 80098cc:	20000960 	.word	0x20000960

080098d0 <__malloc_lock>:
 80098d0:	4801      	ldr	r0, [pc, #4]	@ (80098d8 <__malloc_lock+0x8>)
 80098d2:	f000 ba9c 	b.w	8009e0e <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	20000aa4 	.word	0x20000aa4

080098dc <__malloc_unlock>:
 80098dc:	4801      	ldr	r0, [pc, #4]	@ (80098e4 <__malloc_unlock+0x8>)
 80098de:	f000 ba97 	b.w	8009e10 <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	20000aa4 	.word	0x20000aa4

080098e8 <std>:
 80098e8:	2300      	movs	r3, #0
 80098ea:	b510      	push	{r4, lr}
 80098ec:	4604      	mov	r4, r0
 80098ee:	e9c0 3300 	strd	r3, r3, [r0]
 80098f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098f6:	6083      	str	r3, [r0, #8]
 80098f8:	8181      	strh	r1, [r0, #12]
 80098fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80098fc:	81c2      	strh	r2, [r0, #14]
 80098fe:	6183      	str	r3, [r0, #24]
 8009900:	4619      	mov	r1, r3
 8009902:	2208      	movs	r2, #8
 8009904:	305c      	adds	r0, #92	@ 0x5c
 8009906:	f000 f9f9 	bl	8009cfc <memset>
 800990a:	4b0d      	ldr	r3, [pc, #52]	@ (8009940 <std+0x58>)
 800990c:	6263      	str	r3, [r4, #36]	@ 0x24
 800990e:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <std+0x5c>)
 8009910:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <std+0x60>)
 8009914:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009916:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <std+0x64>)
 8009918:	6323      	str	r3, [r4, #48]	@ 0x30
 800991a:	4b0d      	ldr	r3, [pc, #52]	@ (8009950 <std+0x68>)
 800991c:	6224      	str	r4, [r4, #32]
 800991e:	429c      	cmp	r4, r3
 8009920:	d006      	beq.n	8009930 <std+0x48>
 8009922:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009926:	4294      	cmp	r4, r2
 8009928:	d002      	beq.n	8009930 <std+0x48>
 800992a:	33d0      	adds	r3, #208	@ 0xd0
 800992c:	429c      	cmp	r4, r3
 800992e:	d105      	bne.n	800993c <std+0x54>
 8009930:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009938:	f000 ba68 	b.w	8009e0c <__retarget_lock_init_recursive>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	08009b4d 	.word	0x08009b4d
 8009944:	08009b6f 	.word	0x08009b6f
 8009948:	08009ba7 	.word	0x08009ba7
 800994c:	08009bcb 	.word	0x08009bcb
 8009950:	20000964 	.word	0x20000964

08009954 <stdio_exit_handler>:
 8009954:	4a02      	ldr	r2, [pc, #8]	@ (8009960 <stdio_exit_handler+0xc>)
 8009956:	4903      	ldr	r1, [pc, #12]	@ (8009964 <stdio_exit_handler+0x10>)
 8009958:	4803      	ldr	r0, [pc, #12]	@ (8009968 <stdio_exit_handler+0x14>)
 800995a:	f000 b869 	b.w	8009a30 <_fwalk_sglue>
 800995e:	bf00      	nop
 8009960:	2000002c 	.word	0x2000002c
 8009964:	0800a54d 	.word	0x0800a54d
 8009968:	2000003c 	.word	0x2000003c

0800996c <cleanup_stdio>:
 800996c:	6841      	ldr	r1, [r0, #4]
 800996e:	4b0c      	ldr	r3, [pc, #48]	@ (80099a0 <cleanup_stdio+0x34>)
 8009970:	4299      	cmp	r1, r3
 8009972:	b510      	push	{r4, lr}
 8009974:	4604      	mov	r4, r0
 8009976:	d001      	beq.n	800997c <cleanup_stdio+0x10>
 8009978:	f000 fde8 	bl	800a54c <_fflush_r>
 800997c:	68a1      	ldr	r1, [r4, #8]
 800997e:	4b09      	ldr	r3, [pc, #36]	@ (80099a4 <cleanup_stdio+0x38>)
 8009980:	4299      	cmp	r1, r3
 8009982:	d002      	beq.n	800998a <cleanup_stdio+0x1e>
 8009984:	4620      	mov	r0, r4
 8009986:	f000 fde1 	bl	800a54c <_fflush_r>
 800998a:	68e1      	ldr	r1, [r4, #12]
 800998c:	4b06      	ldr	r3, [pc, #24]	@ (80099a8 <cleanup_stdio+0x3c>)
 800998e:	4299      	cmp	r1, r3
 8009990:	d004      	beq.n	800999c <cleanup_stdio+0x30>
 8009992:	4620      	mov	r0, r4
 8009994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009998:	f000 bdd8 	b.w	800a54c <_fflush_r>
 800999c:	bd10      	pop	{r4, pc}
 800999e:	bf00      	nop
 80099a0:	20000964 	.word	0x20000964
 80099a4:	200009cc 	.word	0x200009cc
 80099a8:	20000a34 	.word	0x20000a34

080099ac <global_stdio_init.part.0>:
 80099ac:	b510      	push	{r4, lr}
 80099ae:	4b0b      	ldr	r3, [pc, #44]	@ (80099dc <global_stdio_init.part.0+0x30>)
 80099b0:	4c0b      	ldr	r4, [pc, #44]	@ (80099e0 <global_stdio_init.part.0+0x34>)
 80099b2:	4a0c      	ldr	r2, [pc, #48]	@ (80099e4 <global_stdio_init.part.0+0x38>)
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	4620      	mov	r0, r4
 80099b8:	2200      	movs	r2, #0
 80099ba:	2104      	movs	r1, #4
 80099bc:	f7ff ff94 	bl	80098e8 <std>
 80099c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099c4:	2201      	movs	r2, #1
 80099c6:	2109      	movs	r1, #9
 80099c8:	f7ff ff8e 	bl	80098e8 <std>
 80099cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099d0:	2202      	movs	r2, #2
 80099d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d6:	2112      	movs	r1, #18
 80099d8:	f7ff bf86 	b.w	80098e8 <std>
 80099dc:	20000a9c 	.word	0x20000a9c
 80099e0:	20000964 	.word	0x20000964
 80099e4:	08009955 	.word	0x08009955

080099e8 <__sfp_lock_acquire>:
 80099e8:	4801      	ldr	r0, [pc, #4]	@ (80099f0 <__sfp_lock_acquire+0x8>)
 80099ea:	f000 ba10 	b.w	8009e0e <__retarget_lock_acquire_recursive>
 80099ee:	bf00      	nop
 80099f0:	20000aa5 	.word	0x20000aa5

080099f4 <__sfp_lock_release>:
 80099f4:	4801      	ldr	r0, [pc, #4]	@ (80099fc <__sfp_lock_release+0x8>)
 80099f6:	f000 ba0b 	b.w	8009e10 <__retarget_lock_release_recursive>
 80099fa:	bf00      	nop
 80099fc:	20000aa5 	.word	0x20000aa5

08009a00 <__sinit>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	4604      	mov	r4, r0
 8009a04:	f7ff fff0 	bl	80099e8 <__sfp_lock_acquire>
 8009a08:	6a23      	ldr	r3, [r4, #32]
 8009a0a:	b11b      	cbz	r3, 8009a14 <__sinit+0x14>
 8009a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a10:	f7ff bff0 	b.w	80099f4 <__sfp_lock_release>
 8009a14:	4b04      	ldr	r3, [pc, #16]	@ (8009a28 <__sinit+0x28>)
 8009a16:	6223      	str	r3, [r4, #32]
 8009a18:	4b04      	ldr	r3, [pc, #16]	@ (8009a2c <__sinit+0x2c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1f5      	bne.n	8009a0c <__sinit+0xc>
 8009a20:	f7ff ffc4 	bl	80099ac <global_stdio_init.part.0>
 8009a24:	e7f2      	b.n	8009a0c <__sinit+0xc>
 8009a26:	bf00      	nop
 8009a28:	0800996d 	.word	0x0800996d
 8009a2c:	20000a9c 	.word	0x20000a9c

08009a30 <_fwalk_sglue>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	4607      	mov	r7, r0
 8009a36:	4688      	mov	r8, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a40:	f1b9 0901 	subs.w	r9, r9, #1
 8009a44:	d505      	bpl.n	8009a52 <_fwalk_sglue+0x22>
 8009a46:	6824      	ldr	r4, [r4, #0]
 8009a48:	2c00      	cmp	r4, #0
 8009a4a:	d1f7      	bne.n	8009a3c <_fwalk_sglue+0xc>
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d907      	bls.n	8009a68 <_fwalk_sglue+0x38>
 8009a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	d003      	beq.n	8009a68 <_fwalk_sglue+0x38>
 8009a60:	4629      	mov	r1, r5
 8009a62:	4638      	mov	r0, r7
 8009a64:	47c0      	blx	r8
 8009a66:	4306      	orrs	r6, r0
 8009a68:	3568      	adds	r5, #104	@ 0x68
 8009a6a:	e7e9      	b.n	8009a40 <_fwalk_sglue+0x10>

08009a6c <iprintf>:
 8009a6c:	b40f      	push	{r0, r1, r2, r3}
 8009a6e:	b507      	push	{r0, r1, r2, lr}
 8009a70:	4906      	ldr	r1, [pc, #24]	@ (8009a8c <iprintf+0x20>)
 8009a72:	ab04      	add	r3, sp, #16
 8009a74:	6808      	ldr	r0, [r1, #0]
 8009a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7a:	6881      	ldr	r1, [r0, #8]
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	f000 fa3d 	bl	8009efc <_vfiprintf_r>
 8009a82:	b003      	add	sp, #12
 8009a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a88:	b004      	add	sp, #16
 8009a8a:	4770      	bx	lr
 8009a8c:	20000038 	.word	0x20000038

08009a90 <_puts_r>:
 8009a90:	6a03      	ldr	r3, [r0, #32]
 8009a92:	b570      	push	{r4, r5, r6, lr}
 8009a94:	6884      	ldr	r4, [r0, #8]
 8009a96:	4605      	mov	r5, r0
 8009a98:	460e      	mov	r6, r1
 8009a9a:	b90b      	cbnz	r3, 8009aa0 <_puts_r+0x10>
 8009a9c:	f7ff ffb0 	bl	8009a00 <__sinit>
 8009aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aa2:	07db      	lsls	r3, r3, #31
 8009aa4:	d405      	bmi.n	8009ab2 <_puts_r+0x22>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	0598      	lsls	r0, r3, #22
 8009aaa:	d402      	bmi.n	8009ab2 <_puts_r+0x22>
 8009aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aae:	f000 f9ae 	bl	8009e0e <__retarget_lock_acquire_recursive>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	0719      	lsls	r1, r3, #28
 8009ab6:	d502      	bpl.n	8009abe <_puts_r+0x2e>
 8009ab8:	6923      	ldr	r3, [r4, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d135      	bne.n	8009b2a <_puts_r+0x9a>
 8009abe:	4621      	mov	r1, r4
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	f000 f8c5 	bl	8009c50 <__swsetup_r>
 8009ac6:	b380      	cbz	r0, 8009b2a <_puts_r+0x9a>
 8009ac8:	f04f 35ff 	mov.w	r5, #4294967295
 8009acc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ace:	07da      	lsls	r2, r3, #31
 8009ad0:	d405      	bmi.n	8009ade <_puts_r+0x4e>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	059b      	lsls	r3, r3, #22
 8009ad6:	d402      	bmi.n	8009ade <_puts_r+0x4e>
 8009ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ada:	f000 f999 	bl	8009e10 <__retarget_lock_release_recursive>
 8009ade:	4628      	mov	r0, r5
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da04      	bge.n	8009af0 <_puts_r+0x60>
 8009ae6:	69a2      	ldr	r2, [r4, #24]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	dc17      	bgt.n	8009b1c <_puts_r+0x8c>
 8009aec:	290a      	cmp	r1, #10
 8009aee:	d015      	beq.n	8009b1c <_puts_r+0x8c>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	6022      	str	r2, [r4, #0]
 8009af6:	7019      	strb	r1, [r3, #0]
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009afe:	3b01      	subs	r3, #1
 8009b00:	60a3      	str	r3, [r4, #8]
 8009b02:	2900      	cmp	r1, #0
 8009b04:	d1ed      	bne.n	8009ae2 <_puts_r+0x52>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	da11      	bge.n	8009b2e <_puts_r+0x9e>
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	210a      	movs	r1, #10
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f85f 	bl	8009bd2 <__swbuf_r>
 8009b14:	3001      	adds	r0, #1
 8009b16:	d0d7      	beq.n	8009ac8 <_puts_r+0x38>
 8009b18:	250a      	movs	r5, #10
 8009b1a:	e7d7      	b.n	8009acc <_puts_r+0x3c>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f000 f857 	bl	8009bd2 <__swbuf_r>
 8009b24:	3001      	adds	r0, #1
 8009b26:	d1e7      	bne.n	8009af8 <_puts_r+0x68>
 8009b28:	e7ce      	b.n	8009ac8 <_puts_r+0x38>
 8009b2a:	3e01      	subs	r6, #1
 8009b2c:	e7e4      	b.n	8009af8 <_puts_r+0x68>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	220a      	movs	r2, #10
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	e7ee      	b.n	8009b18 <_puts_r+0x88>
	...

08009b3c <puts>:
 8009b3c:	4b02      	ldr	r3, [pc, #8]	@ (8009b48 <puts+0xc>)
 8009b3e:	4601      	mov	r1, r0
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	f7ff bfa5 	b.w	8009a90 <_puts_r>
 8009b46:	bf00      	nop
 8009b48:	20000038 	.word	0x20000038

08009b4c <__sread>:
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	460c      	mov	r4, r1
 8009b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b54:	f000 f8fc 	bl	8009d50 <_read_r>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	bfab      	itete	ge
 8009b5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b60:	181b      	addge	r3, r3, r0
 8009b62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b66:	bfac      	ite	ge
 8009b68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b6a:	81a3      	strhlt	r3, [r4, #12]
 8009b6c:	bd10      	pop	{r4, pc}

08009b6e <__swrite>:
 8009b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b72:	461f      	mov	r7, r3
 8009b74:	898b      	ldrh	r3, [r1, #12]
 8009b76:	05db      	lsls	r3, r3, #23
 8009b78:	4605      	mov	r5, r0
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	4616      	mov	r6, r2
 8009b7e:	d505      	bpl.n	8009b8c <__swrite+0x1e>
 8009b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b84:	2302      	movs	r3, #2
 8009b86:	2200      	movs	r2, #0
 8009b88:	f000 f8d0 	bl	8009d2c <_lseek_r>
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b96:	81a3      	strh	r3, [r4, #12]
 8009b98:	4632      	mov	r2, r6
 8009b9a:	463b      	mov	r3, r7
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba2:	f000 b8f7 	b.w	8009d94 <_write_r>

08009ba6 <__sseek>:
 8009ba6:	b510      	push	{r4, lr}
 8009ba8:	460c      	mov	r4, r1
 8009baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bae:	f000 f8bd 	bl	8009d2c <_lseek_r>
 8009bb2:	1c43      	adds	r3, r0, #1
 8009bb4:	89a3      	ldrh	r3, [r4, #12]
 8009bb6:	bf15      	itete	ne
 8009bb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bc2:	81a3      	strheq	r3, [r4, #12]
 8009bc4:	bf18      	it	ne
 8009bc6:	81a3      	strhne	r3, [r4, #12]
 8009bc8:	bd10      	pop	{r4, pc}

08009bca <__sclose>:
 8009bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bce:	f000 b89d 	b.w	8009d0c <_close_r>

08009bd2 <__swbuf_r>:
 8009bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd4:	460e      	mov	r6, r1
 8009bd6:	4614      	mov	r4, r2
 8009bd8:	4605      	mov	r5, r0
 8009bda:	b118      	cbz	r0, 8009be4 <__swbuf_r+0x12>
 8009bdc:	6a03      	ldr	r3, [r0, #32]
 8009bde:	b90b      	cbnz	r3, 8009be4 <__swbuf_r+0x12>
 8009be0:	f7ff ff0e 	bl	8009a00 <__sinit>
 8009be4:	69a3      	ldr	r3, [r4, #24]
 8009be6:	60a3      	str	r3, [r4, #8]
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	071a      	lsls	r2, r3, #28
 8009bec:	d501      	bpl.n	8009bf2 <__swbuf_r+0x20>
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	b943      	cbnz	r3, 8009c04 <__swbuf_r+0x32>
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f000 f82b 	bl	8009c50 <__swsetup_r>
 8009bfa:	b118      	cbz	r0, 8009c04 <__swbuf_r+0x32>
 8009bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8009c00:	4638      	mov	r0, r7
 8009c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	6922      	ldr	r2, [r4, #16]
 8009c08:	1a98      	subs	r0, r3, r2
 8009c0a:	6963      	ldr	r3, [r4, #20]
 8009c0c:	b2f6      	uxtb	r6, r6
 8009c0e:	4283      	cmp	r3, r0
 8009c10:	4637      	mov	r7, r6
 8009c12:	dc05      	bgt.n	8009c20 <__swbuf_r+0x4e>
 8009c14:	4621      	mov	r1, r4
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 fc98 	bl	800a54c <_fflush_r>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d1ed      	bne.n	8009bfc <__swbuf_r+0x2a>
 8009c20:	68a3      	ldr	r3, [r4, #8]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	60a3      	str	r3, [r4, #8]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	6022      	str	r2, [r4, #0]
 8009c2c:	701e      	strb	r6, [r3, #0]
 8009c2e:	6962      	ldr	r2, [r4, #20]
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d004      	beq.n	8009c40 <__swbuf_r+0x6e>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	07db      	lsls	r3, r3, #31
 8009c3a:	d5e1      	bpl.n	8009c00 <__swbuf_r+0x2e>
 8009c3c:	2e0a      	cmp	r6, #10
 8009c3e:	d1df      	bne.n	8009c00 <__swbuf_r+0x2e>
 8009c40:	4621      	mov	r1, r4
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 fc82 	bl	800a54c <_fflush_r>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d0d9      	beq.n	8009c00 <__swbuf_r+0x2e>
 8009c4c:	e7d6      	b.n	8009bfc <__swbuf_r+0x2a>
	...

08009c50 <__swsetup_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	4b29      	ldr	r3, [pc, #164]	@ (8009cf8 <__swsetup_r+0xa8>)
 8009c54:	4605      	mov	r5, r0
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	460c      	mov	r4, r1
 8009c5a:	b118      	cbz	r0, 8009c64 <__swsetup_r+0x14>
 8009c5c:	6a03      	ldr	r3, [r0, #32]
 8009c5e:	b90b      	cbnz	r3, 8009c64 <__swsetup_r+0x14>
 8009c60:	f7ff fece 	bl	8009a00 <__sinit>
 8009c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c68:	0719      	lsls	r1, r3, #28
 8009c6a:	d422      	bmi.n	8009cb2 <__swsetup_r+0x62>
 8009c6c:	06da      	lsls	r2, r3, #27
 8009c6e:	d407      	bmi.n	8009c80 <__swsetup_r+0x30>
 8009c70:	2209      	movs	r2, #9
 8009c72:	602a      	str	r2, [r5, #0]
 8009c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7e:	e033      	b.n	8009ce8 <__swsetup_r+0x98>
 8009c80:	0758      	lsls	r0, r3, #29
 8009c82:	d512      	bpl.n	8009caa <__swsetup_r+0x5a>
 8009c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c86:	b141      	cbz	r1, 8009c9a <__swsetup_r+0x4a>
 8009c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d002      	beq.n	8009c96 <__swsetup_r+0x46>
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f8bf 	bl	8009e14 <_free_r>
 8009c96:	2300      	movs	r3, #0
 8009c98:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	f043 0308 	orr.w	r3, r3, #8
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	b94b      	cbnz	r3, 8009cca <__swsetup_r+0x7a>
 8009cb6:	89a3      	ldrh	r3, [r4, #12]
 8009cb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc0:	d003      	beq.n	8009cca <__swsetup_r+0x7a>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f000 fc8f 	bl	800a5e8 <__smakebuf_r>
 8009cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cce:	f013 0201 	ands.w	r2, r3, #1
 8009cd2:	d00a      	beq.n	8009cea <__swsetup_r+0x9a>
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	60a2      	str	r2, [r4, #8]
 8009cd8:	6962      	ldr	r2, [r4, #20]
 8009cda:	4252      	negs	r2, r2
 8009cdc:	61a2      	str	r2, [r4, #24]
 8009cde:	6922      	ldr	r2, [r4, #16]
 8009ce0:	b942      	cbnz	r2, 8009cf4 <__swsetup_r+0xa4>
 8009ce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ce6:	d1c5      	bne.n	8009c74 <__swsetup_r+0x24>
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
 8009cea:	0799      	lsls	r1, r3, #30
 8009cec:	bf58      	it	pl
 8009cee:	6962      	ldrpl	r2, [r4, #20]
 8009cf0:	60a2      	str	r2, [r4, #8]
 8009cf2:	e7f4      	b.n	8009cde <__swsetup_r+0x8e>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e7f7      	b.n	8009ce8 <__swsetup_r+0x98>
 8009cf8:	20000038 	.word	0x20000038

08009cfc <memset>:
 8009cfc:	4402      	add	r2, r0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d100      	bne.n	8009d06 <memset+0xa>
 8009d04:	4770      	bx	lr
 8009d06:	f803 1b01 	strb.w	r1, [r3], #1
 8009d0a:	e7f9      	b.n	8009d00 <memset+0x4>

08009d0c <_close_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d06      	ldr	r5, [pc, #24]	@ (8009d28 <_close_r+0x1c>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	602b      	str	r3, [r5, #0]
 8009d18:	f7f7 fd85 	bl	8001826 <_close>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_close_r+0x1a>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_close_r+0x1a>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20000aa0 	.word	0x20000aa0

08009d2c <_lseek_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	@ (8009d4c <_lseek_r+0x20>)
 8009d30:	4604      	mov	r4, r0
 8009d32:	4608      	mov	r0, r1
 8009d34:	4611      	mov	r1, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f7 fd9a 	bl	8001874 <_lseek>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_lseek_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_lseek_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20000aa0 	.word	0x20000aa0

08009d50 <_read_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d07      	ldr	r5, [pc, #28]	@ (8009d70 <_read_r+0x20>)
 8009d54:	4604      	mov	r4, r0
 8009d56:	4608      	mov	r0, r1
 8009d58:	4611      	mov	r1, r2
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	602a      	str	r2, [r5, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f7f7 fd44 	bl	80017ec <_read>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_read_r+0x1e>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_read_r+0x1e>
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	20000aa0 	.word	0x20000aa0

08009d74 <_sbrk_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d06      	ldr	r5, [pc, #24]	@ (8009d90 <_sbrk_r+0x1c>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	f7f7 fd86 	bl	8001890 <_sbrk>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_sbrk_r+0x1a>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_sbrk_r+0x1a>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	20000aa0 	.word	0x20000aa0

08009d94 <_write_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d07      	ldr	r5, [pc, #28]	@ (8009db4 <_write_r+0x20>)
 8009d98:	4604      	mov	r4, r0
 8009d9a:	4608      	mov	r0, r1
 8009d9c:	4611      	mov	r1, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	602a      	str	r2, [r5, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	f7f7 fb8e 	bl	80014c4 <_write>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_write_r+0x1e>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_write_r+0x1e>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	20000aa0 	.word	0x20000aa0

08009db8 <__errno>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	@ (8009dc0 <__errno+0x8>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000038 	.word	0x20000038

08009dc4 <__libc_init_array>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8009dfc <__libc_init_array+0x38>)
 8009dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8009e00 <__libc_init_array+0x3c>)
 8009dca:	1b64      	subs	r4, r4, r5
 8009dcc:	10a4      	asrs	r4, r4, #2
 8009dce:	2600      	movs	r6, #0
 8009dd0:	42a6      	cmp	r6, r4
 8009dd2:	d109      	bne.n	8009de8 <__libc_init_array+0x24>
 8009dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8009e04 <__libc_init_array+0x40>)
 8009dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8009e08 <__libc_init_array+0x44>)
 8009dd8:	f001 fc8a 	bl	800b6f0 <_init>
 8009ddc:	1b64      	subs	r4, r4, r5
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	2600      	movs	r6, #0
 8009de2:	42a6      	cmp	r6, r4
 8009de4:	d105      	bne.n	8009df2 <__libc_init_array+0x2e>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dec:	4798      	blx	r3
 8009dee:	3601      	adds	r6, #1
 8009df0:	e7ee      	b.n	8009dd0 <__libc_init_array+0xc>
 8009df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df6:	4798      	blx	r3
 8009df8:	3601      	adds	r6, #1
 8009dfa:	e7f2      	b.n	8009de2 <__libc_init_array+0x1e>
 8009dfc:	0800b970 	.word	0x0800b970
 8009e00:	0800b970 	.word	0x0800b970
 8009e04:	0800b970 	.word	0x0800b970
 8009e08:	0800b974 	.word	0x0800b974

08009e0c <__retarget_lock_init_recursive>:
 8009e0c:	4770      	bx	lr

08009e0e <__retarget_lock_acquire_recursive>:
 8009e0e:	4770      	bx	lr

08009e10 <__retarget_lock_release_recursive>:
 8009e10:	4770      	bx	lr
	...

08009e14 <_free_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4605      	mov	r5, r0
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	d041      	beq.n	8009ea0 <_free_r+0x8c>
 8009e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e20:	1f0c      	subs	r4, r1, #4
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfb8      	it	lt
 8009e26:	18e4      	addlt	r4, r4, r3
 8009e28:	f7ff fd52 	bl	80098d0 <__malloc_lock>
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea4 <_free_r+0x90>)
 8009e2e:	6813      	ldr	r3, [r2, #0]
 8009e30:	b933      	cbnz	r3, 8009e40 <_free_r+0x2c>
 8009e32:	6063      	str	r3, [r4, #4]
 8009e34:	6014      	str	r4, [r2, #0]
 8009e36:	4628      	mov	r0, r5
 8009e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3c:	f7ff bd4e 	b.w	80098dc <__malloc_unlock>
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	d908      	bls.n	8009e56 <_free_r+0x42>
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	1821      	adds	r1, r4, r0
 8009e48:	428b      	cmp	r3, r1
 8009e4a:	bf01      	itttt	eq
 8009e4c:	6819      	ldreq	r1, [r3, #0]
 8009e4e:	685b      	ldreq	r3, [r3, #4]
 8009e50:	1809      	addeq	r1, r1, r0
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	e7ed      	b.n	8009e32 <_free_r+0x1e>
 8009e56:	461a      	mov	r2, r3
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	b10b      	cbz	r3, 8009e60 <_free_r+0x4c>
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	d9fa      	bls.n	8009e56 <_free_r+0x42>
 8009e60:	6811      	ldr	r1, [r2, #0]
 8009e62:	1850      	adds	r0, r2, r1
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d10b      	bne.n	8009e80 <_free_r+0x6c>
 8009e68:	6820      	ldr	r0, [r4, #0]
 8009e6a:	4401      	add	r1, r0
 8009e6c:	1850      	adds	r0, r2, r1
 8009e6e:	4283      	cmp	r3, r0
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	d1e0      	bne.n	8009e36 <_free_r+0x22>
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	6053      	str	r3, [r2, #4]
 8009e7a:	4408      	add	r0, r1
 8009e7c:	6010      	str	r0, [r2, #0]
 8009e7e:	e7da      	b.n	8009e36 <_free_r+0x22>
 8009e80:	d902      	bls.n	8009e88 <_free_r+0x74>
 8009e82:	230c      	movs	r3, #12
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	e7d6      	b.n	8009e36 <_free_r+0x22>
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	1821      	adds	r1, r4, r0
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	bf04      	itt	eq
 8009e90:	6819      	ldreq	r1, [r3, #0]
 8009e92:	685b      	ldreq	r3, [r3, #4]
 8009e94:	6063      	str	r3, [r4, #4]
 8009e96:	bf04      	itt	eq
 8009e98:	1809      	addeq	r1, r1, r0
 8009e9a:	6021      	streq	r1, [r4, #0]
 8009e9c:	6054      	str	r4, [r2, #4]
 8009e9e:	e7ca      	b.n	8009e36 <_free_r+0x22>
 8009ea0:	bd38      	pop	{r3, r4, r5, pc}
 8009ea2:	bf00      	nop
 8009ea4:	20000960 	.word	0x20000960

08009ea8 <__sfputc_r>:
 8009ea8:	6893      	ldr	r3, [r2, #8]
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	b410      	push	{r4}
 8009eb0:	6093      	str	r3, [r2, #8]
 8009eb2:	da08      	bge.n	8009ec6 <__sfputc_r+0x1e>
 8009eb4:	6994      	ldr	r4, [r2, #24]
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	db01      	blt.n	8009ebe <__sfputc_r+0x16>
 8009eba:	290a      	cmp	r1, #10
 8009ebc:	d103      	bne.n	8009ec6 <__sfputc_r+0x1e>
 8009ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ec2:	f7ff be86 	b.w	8009bd2 <__swbuf_r>
 8009ec6:	6813      	ldr	r3, [r2, #0]
 8009ec8:	1c58      	adds	r0, r3, #1
 8009eca:	6010      	str	r0, [r2, #0]
 8009ecc:	7019      	strb	r1, [r3, #0]
 8009ece:	4608      	mov	r0, r1
 8009ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <__sfputs_r>:
 8009ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed8:	4606      	mov	r6, r0
 8009eda:	460f      	mov	r7, r1
 8009edc:	4614      	mov	r4, r2
 8009ede:	18d5      	adds	r5, r2, r3
 8009ee0:	42ac      	cmp	r4, r5
 8009ee2:	d101      	bne.n	8009ee8 <__sfputs_r+0x12>
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e007      	b.n	8009ef8 <__sfputs_r+0x22>
 8009ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eec:	463a      	mov	r2, r7
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ffda 	bl	8009ea8 <__sfputc_r>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d1f3      	bne.n	8009ee0 <__sfputs_r+0xa>
 8009ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009efc <_vfiprintf_r>:
 8009efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	460d      	mov	r5, r1
 8009f02:	b09d      	sub	sp, #116	@ 0x74
 8009f04:	4614      	mov	r4, r2
 8009f06:	4698      	mov	r8, r3
 8009f08:	4606      	mov	r6, r0
 8009f0a:	b118      	cbz	r0, 8009f14 <_vfiprintf_r+0x18>
 8009f0c:	6a03      	ldr	r3, [r0, #32]
 8009f0e:	b90b      	cbnz	r3, 8009f14 <_vfiprintf_r+0x18>
 8009f10:	f7ff fd76 	bl	8009a00 <__sinit>
 8009f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f16:	07d9      	lsls	r1, r3, #31
 8009f18:	d405      	bmi.n	8009f26 <_vfiprintf_r+0x2a>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	059a      	lsls	r2, r3, #22
 8009f1e:	d402      	bmi.n	8009f26 <_vfiprintf_r+0x2a>
 8009f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f22:	f7ff ff74 	bl	8009e0e <__retarget_lock_acquire_recursive>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	071b      	lsls	r3, r3, #28
 8009f2a:	d501      	bpl.n	8009f30 <_vfiprintf_r+0x34>
 8009f2c:	692b      	ldr	r3, [r5, #16]
 8009f2e:	b99b      	cbnz	r3, 8009f58 <_vfiprintf_r+0x5c>
 8009f30:	4629      	mov	r1, r5
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff fe8c 	bl	8009c50 <__swsetup_r>
 8009f38:	b170      	cbz	r0, 8009f58 <_vfiprintf_r+0x5c>
 8009f3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f3c:	07dc      	lsls	r4, r3, #31
 8009f3e:	d504      	bpl.n	8009f4a <_vfiprintf_r+0x4e>
 8009f40:	f04f 30ff 	mov.w	r0, #4294967295
 8009f44:	b01d      	add	sp, #116	@ 0x74
 8009f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	0598      	lsls	r0, r3, #22
 8009f4e:	d4f7      	bmi.n	8009f40 <_vfiprintf_r+0x44>
 8009f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f52:	f7ff ff5d 	bl	8009e10 <__retarget_lock_release_recursive>
 8009f56:	e7f3      	b.n	8009f40 <_vfiprintf_r+0x44>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f66:	2330      	movs	r3, #48	@ 0x30
 8009f68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a118 <_vfiprintf_r+0x21c>
 8009f6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f70:	f04f 0901 	mov.w	r9, #1
 8009f74:	4623      	mov	r3, r4
 8009f76:	469a      	mov	sl, r3
 8009f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7c:	b10a      	cbz	r2, 8009f82 <_vfiprintf_r+0x86>
 8009f7e:	2a25      	cmp	r2, #37	@ 0x25
 8009f80:	d1f9      	bne.n	8009f76 <_vfiprintf_r+0x7a>
 8009f82:	ebba 0b04 	subs.w	fp, sl, r4
 8009f86:	d00b      	beq.n	8009fa0 <_vfiprintf_r+0xa4>
 8009f88:	465b      	mov	r3, fp
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ffa1 	bl	8009ed6 <__sfputs_r>
 8009f94:	3001      	adds	r0, #1
 8009f96:	f000 80a7 	beq.w	800a0e8 <_vfiprintf_r+0x1ec>
 8009f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f9c:	445a      	add	r2, fp
 8009f9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 809f 	beq.w	800a0e8 <_vfiprintf_r+0x1ec>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb4:	f10a 0a01 	add.w	sl, sl, #1
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	9307      	str	r3, [sp, #28]
 8009fbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fc2:	4654      	mov	r4, sl
 8009fc4:	2205      	movs	r2, #5
 8009fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fca:	4853      	ldr	r0, [pc, #332]	@ (800a118 <_vfiprintf_r+0x21c>)
 8009fcc:	f7f6 f900 	bl	80001d0 <memchr>
 8009fd0:	9a04      	ldr	r2, [sp, #16]
 8009fd2:	b9d8      	cbnz	r0, 800a00c <_vfiprintf_r+0x110>
 8009fd4:	06d1      	lsls	r1, r2, #27
 8009fd6:	bf44      	itt	mi
 8009fd8:	2320      	movmi	r3, #32
 8009fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fde:	0713      	lsls	r3, r2, #28
 8009fe0:	bf44      	itt	mi
 8009fe2:	232b      	movmi	r3, #43	@ 0x2b
 8009fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fee:	d015      	beq.n	800a01c <_vfiprintf_r+0x120>
 8009ff0:	9a07      	ldr	r2, [sp, #28]
 8009ff2:	4654      	mov	r4, sl
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	f04f 0c0a 	mov.w	ip, #10
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a000:	3b30      	subs	r3, #48	@ 0x30
 800a002:	2b09      	cmp	r3, #9
 800a004:	d94b      	bls.n	800a09e <_vfiprintf_r+0x1a2>
 800a006:	b1b0      	cbz	r0, 800a036 <_vfiprintf_r+0x13a>
 800a008:	9207      	str	r2, [sp, #28]
 800a00a:	e014      	b.n	800a036 <_vfiprintf_r+0x13a>
 800a00c:	eba0 0308 	sub.w	r3, r0, r8
 800a010:	fa09 f303 	lsl.w	r3, r9, r3
 800a014:	4313      	orrs	r3, r2
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	46a2      	mov	sl, r4
 800a01a:	e7d2      	b.n	8009fc2 <_vfiprintf_r+0xc6>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	1d19      	adds	r1, r3, #4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	9103      	str	r1, [sp, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	bfbb      	ittet	lt
 800a028:	425b      	neglt	r3, r3
 800a02a:	f042 0202 	orrlt.w	r2, r2, #2
 800a02e:	9307      	strge	r3, [sp, #28]
 800a030:	9307      	strlt	r3, [sp, #28]
 800a032:	bfb8      	it	lt
 800a034:	9204      	strlt	r2, [sp, #16]
 800a036:	7823      	ldrb	r3, [r4, #0]
 800a038:	2b2e      	cmp	r3, #46	@ 0x2e
 800a03a:	d10a      	bne.n	800a052 <_vfiprintf_r+0x156>
 800a03c:	7863      	ldrb	r3, [r4, #1]
 800a03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a040:	d132      	bne.n	800a0a8 <_vfiprintf_r+0x1ac>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	1d1a      	adds	r2, r3, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	9203      	str	r2, [sp, #12]
 800a04a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a04e:	3402      	adds	r4, #2
 800a050:	9305      	str	r3, [sp, #20]
 800a052:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a128 <_vfiprintf_r+0x22c>
 800a056:	7821      	ldrb	r1, [r4, #0]
 800a058:	2203      	movs	r2, #3
 800a05a:	4650      	mov	r0, sl
 800a05c:	f7f6 f8b8 	bl	80001d0 <memchr>
 800a060:	b138      	cbz	r0, 800a072 <_vfiprintf_r+0x176>
 800a062:	9b04      	ldr	r3, [sp, #16]
 800a064:	eba0 000a 	sub.w	r0, r0, sl
 800a068:	2240      	movs	r2, #64	@ 0x40
 800a06a:	4082      	lsls	r2, r0
 800a06c:	4313      	orrs	r3, r2
 800a06e:	3401      	adds	r4, #1
 800a070:	9304      	str	r3, [sp, #16]
 800a072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a076:	4829      	ldr	r0, [pc, #164]	@ (800a11c <_vfiprintf_r+0x220>)
 800a078:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a07c:	2206      	movs	r2, #6
 800a07e:	f7f6 f8a7 	bl	80001d0 <memchr>
 800a082:	2800      	cmp	r0, #0
 800a084:	d03f      	beq.n	800a106 <_vfiprintf_r+0x20a>
 800a086:	4b26      	ldr	r3, [pc, #152]	@ (800a120 <_vfiprintf_r+0x224>)
 800a088:	bb1b      	cbnz	r3, 800a0d2 <_vfiprintf_r+0x1d6>
 800a08a:	9b03      	ldr	r3, [sp, #12]
 800a08c:	3307      	adds	r3, #7
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	3308      	adds	r3, #8
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a098:	443b      	add	r3, r7
 800a09a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a09c:	e76a      	b.n	8009f74 <_vfiprintf_r+0x78>
 800a09e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	e7a8      	b.n	8009ffa <_vfiprintf_r+0xfe>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	3401      	adds	r4, #1
 800a0ac:	9305      	str	r3, [sp, #20]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	f04f 0c0a 	mov.w	ip, #10
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ba:	3a30      	subs	r2, #48	@ 0x30
 800a0bc:	2a09      	cmp	r2, #9
 800a0be:	d903      	bls.n	800a0c8 <_vfiprintf_r+0x1cc>
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0c6      	beq.n	800a052 <_vfiprintf_r+0x156>
 800a0c4:	9105      	str	r1, [sp, #20]
 800a0c6:	e7c4      	b.n	800a052 <_vfiprintf_r+0x156>
 800a0c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e7f0      	b.n	800a0b4 <_vfiprintf_r+0x1b8>
 800a0d2:	ab03      	add	r3, sp, #12
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	462a      	mov	r2, r5
 800a0d8:	4b12      	ldr	r3, [pc, #72]	@ (800a124 <_vfiprintf_r+0x228>)
 800a0da:	a904      	add	r1, sp, #16
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f3af 8000 	nop.w
 800a0e2:	4607      	mov	r7, r0
 800a0e4:	1c78      	adds	r0, r7, #1
 800a0e6:	d1d6      	bne.n	800a096 <_vfiprintf_r+0x19a>
 800a0e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0ea:	07d9      	lsls	r1, r3, #31
 800a0ec:	d405      	bmi.n	800a0fa <_vfiprintf_r+0x1fe>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	059a      	lsls	r2, r3, #22
 800a0f2:	d402      	bmi.n	800a0fa <_vfiprintf_r+0x1fe>
 800a0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0f6:	f7ff fe8b 	bl	8009e10 <__retarget_lock_release_recursive>
 800a0fa:	89ab      	ldrh	r3, [r5, #12]
 800a0fc:	065b      	lsls	r3, r3, #25
 800a0fe:	f53f af1f 	bmi.w	8009f40 <_vfiprintf_r+0x44>
 800a102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a104:	e71e      	b.n	8009f44 <_vfiprintf_r+0x48>
 800a106:	ab03      	add	r3, sp, #12
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	462a      	mov	r2, r5
 800a10c:	4b05      	ldr	r3, [pc, #20]	@ (800a124 <_vfiprintf_r+0x228>)
 800a10e:	a904      	add	r1, sp, #16
 800a110:	4630      	mov	r0, r6
 800a112:	f000 f879 	bl	800a208 <_printf_i>
 800a116:	e7e4      	b.n	800a0e2 <_vfiprintf_r+0x1e6>
 800a118:	0800b75c 	.word	0x0800b75c
 800a11c:	0800b766 	.word	0x0800b766
 800a120:	00000000 	.word	0x00000000
 800a124:	08009ed7 	.word	0x08009ed7
 800a128:	0800b762 	.word	0x0800b762

0800a12c <_printf_common>:
 800a12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	4616      	mov	r6, r2
 800a132:	4698      	mov	r8, r3
 800a134:	688a      	ldr	r2, [r1, #8]
 800a136:	690b      	ldr	r3, [r1, #16]
 800a138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a13c:	4293      	cmp	r3, r2
 800a13e:	bfb8      	it	lt
 800a140:	4613      	movlt	r3, r2
 800a142:	6033      	str	r3, [r6, #0]
 800a144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a148:	4607      	mov	r7, r0
 800a14a:	460c      	mov	r4, r1
 800a14c:	b10a      	cbz	r2, 800a152 <_printf_common+0x26>
 800a14e:	3301      	adds	r3, #1
 800a150:	6033      	str	r3, [r6, #0]
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	0699      	lsls	r1, r3, #26
 800a156:	bf42      	ittt	mi
 800a158:	6833      	ldrmi	r3, [r6, #0]
 800a15a:	3302      	addmi	r3, #2
 800a15c:	6033      	strmi	r3, [r6, #0]
 800a15e:	6825      	ldr	r5, [r4, #0]
 800a160:	f015 0506 	ands.w	r5, r5, #6
 800a164:	d106      	bne.n	800a174 <_printf_common+0x48>
 800a166:	f104 0a19 	add.w	sl, r4, #25
 800a16a:	68e3      	ldr	r3, [r4, #12]
 800a16c:	6832      	ldr	r2, [r6, #0]
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	42ab      	cmp	r3, r5
 800a172:	dc26      	bgt.n	800a1c2 <_printf_common+0x96>
 800a174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a178:	6822      	ldr	r2, [r4, #0]
 800a17a:	3b00      	subs	r3, #0
 800a17c:	bf18      	it	ne
 800a17e:	2301      	movne	r3, #1
 800a180:	0692      	lsls	r2, r2, #26
 800a182:	d42b      	bmi.n	800a1dc <_printf_common+0xb0>
 800a184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a188:	4641      	mov	r1, r8
 800a18a:	4638      	mov	r0, r7
 800a18c:	47c8      	blx	r9
 800a18e:	3001      	adds	r0, #1
 800a190:	d01e      	beq.n	800a1d0 <_printf_common+0xa4>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	6922      	ldr	r2, [r4, #16]
 800a196:	f003 0306 	and.w	r3, r3, #6
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	bf02      	ittt	eq
 800a19e:	68e5      	ldreq	r5, [r4, #12]
 800a1a0:	6833      	ldreq	r3, [r6, #0]
 800a1a2:	1aed      	subeq	r5, r5, r3
 800a1a4:	68a3      	ldr	r3, [r4, #8]
 800a1a6:	bf0c      	ite	eq
 800a1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1ac:	2500      	movne	r5, #0
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	bfc4      	itt	gt
 800a1b2:	1a9b      	subgt	r3, r3, r2
 800a1b4:	18ed      	addgt	r5, r5, r3
 800a1b6:	2600      	movs	r6, #0
 800a1b8:	341a      	adds	r4, #26
 800a1ba:	42b5      	cmp	r5, r6
 800a1bc:	d11a      	bne.n	800a1f4 <_printf_common+0xc8>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e008      	b.n	800a1d4 <_printf_common+0xa8>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4652      	mov	r2, sl
 800a1c6:	4641      	mov	r1, r8
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	47c8      	blx	r9
 800a1cc:	3001      	adds	r0, #1
 800a1ce:	d103      	bne.n	800a1d8 <_printf_common+0xac>
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d8:	3501      	adds	r5, #1
 800a1da:	e7c6      	b.n	800a16a <_printf_common+0x3e>
 800a1dc:	18e1      	adds	r1, r4, r3
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	2030      	movs	r0, #48	@ 0x30
 800a1e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1e6:	4422      	add	r2, r4
 800a1e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1f0:	3302      	adds	r3, #2
 800a1f2:	e7c7      	b.n	800a184 <_printf_common+0x58>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	47c8      	blx	r9
 800a1fe:	3001      	adds	r0, #1
 800a200:	d0e6      	beq.n	800a1d0 <_printf_common+0xa4>
 800a202:	3601      	adds	r6, #1
 800a204:	e7d9      	b.n	800a1ba <_printf_common+0x8e>
	...

0800a208 <_printf_i>:
 800a208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	7e0f      	ldrb	r7, [r1, #24]
 800a20e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a210:	2f78      	cmp	r7, #120	@ 0x78
 800a212:	4691      	mov	r9, r2
 800a214:	4680      	mov	r8, r0
 800a216:	460c      	mov	r4, r1
 800a218:	469a      	mov	sl, r3
 800a21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a21e:	d807      	bhi.n	800a230 <_printf_i+0x28>
 800a220:	2f62      	cmp	r7, #98	@ 0x62
 800a222:	d80a      	bhi.n	800a23a <_printf_i+0x32>
 800a224:	2f00      	cmp	r7, #0
 800a226:	f000 80d1 	beq.w	800a3cc <_printf_i+0x1c4>
 800a22a:	2f58      	cmp	r7, #88	@ 0x58
 800a22c:	f000 80b8 	beq.w	800a3a0 <_printf_i+0x198>
 800a230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a238:	e03a      	b.n	800a2b0 <_printf_i+0xa8>
 800a23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a23e:	2b15      	cmp	r3, #21
 800a240:	d8f6      	bhi.n	800a230 <_printf_i+0x28>
 800a242:	a101      	add	r1, pc, #4	@ (adr r1, 800a248 <_printf_i+0x40>)
 800a244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a248:	0800a2a1 	.word	0x0800a2a1
 800a24c:	0800a2b5 	.word	0x0800a2b5
 800a250:	0800a231 	.word	0x0800a231
 800a254:	0800a231 	.word	0x0800a231
 800a258:	0800a231 	.word	0x0800a231
 800a25c:	0800a231 	.word	0x0800a231
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a231 	.word	0x0800a231
 800a268:	0800a231 	.word	0x0800a231
 800a26c:	0800a231 	.word	0x0800a231
 800a270:	0800a231 	.word	0x0800a231
 800a274:	0800a3b3 	.word	0x0800a3b3
 800a278:	0800a2df 	.word	0x0800a2df
 800a27c:	0800a36d 	.word	0x0800a36d
 800a280:	0800a231 	.word	0x0800a231
 800a284:	0800a231 	.word	0x0800a231
 800a288:	0800a3d5 	.word	0x0800a3d5
 800a28c:	0800a231 	.word	0x0800a231
 800a290:	0800a2df 	.word	0x0800a2df
 800a294:	0800a231 	.word	0x0800a231
 800a298:	0800a231 	.word	0x0800a231
 800a29c:	0800a375 	.word	0x0800a375
 800a2a0:	6833      	ldr	r3, [r6, #0]
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6032      	str	r2, [r6, #0]
 800a2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e09c      	b.n	800a3ee <_printf_i+0x1e6>
 800a2b4:	6833      	ldr	r3, [r6, #0]
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	1d19      	adds	r1, r3, #4
 800a2ba:	6031      	str	r1, [r6, #0]
 800a2bc:	0606      	lsls	r6, r0, #24
 800a2be:	d501      	bpl.n	800a2c4 <_printf_i+0xbc>
 800a2c0:	681d      	ldr	r5, [r3, #0]
 800a2c2:	e003      	b.n	800a2cc <_printf_i+0xc4>
 800a2c4:	0645      	lsls	r5, r0, #25
 800a2c6:	d5fb      	bpl.n	800a2c0 <_printf_i+0xb8>
 800a2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2cc:	2d00      	cmp	r5, #0
 800a2ce:	da03      	bge.n	800a2d8 <_printf_i+0xd0>
 800a2d0:	232d      	movs	r3, #45	@ 0x2d
 800a2d2:	426d      	negs	r5, r5
 800a2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d8:	4858      	ldr	r0, [pc, #352]	@ (800a43c <_printf_i+0x234>)
 800a2da:	230a      	movs	r3, #10
 800a2dc:	e011      	b.n	800a302 <_printf_i+0xfa>
 800a2de:	6821      	ldr	r1, [r4, #0]
 800a2e0:	6833      	ldr	r3, [r6, #0]
 800a2e2:	0608      	lsls	r0, r1, #24
 800a2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2e8:	d402      	bmi.n	800a2f0 <_printf_i+0xe8>
 800a2ea:	0649      	lsls	r1, r1, #25
 800a2ec:	bf48      	it	mi
 800a2ee:	b2ad      	uxthmi	r5, r5
 800a2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2f2:	4852      	ldr	r0, [pc, #328]	@ (800a43c <_printf_i+0x234>)
 800a2f4:	6033      	str	r3, [r6, #0]
 800a2f6:	bf14      	ite	ne
 800a2f8:	230a      	movne	r3, #10
 800a2fa:	2308      	moveq	r3, #8
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a302:	6866      	ldr	r6, [r4, #4]
 800a304:	60a6      	str	r6, [r4, #8]
 800a306:	2e00      	cmp	r6, #0
 800a308:	db05      	blt.n	800a316 <_printf_i+0x10e>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	432e      	orrs	r6, r5
 800a30e:	f021 0104 	bic.w	r1, r1, #4
 800a312:	6021      	str	r1, [r4, #0]
 800a314:	d04b      	beq.n	800a3ae <_printf_i+0x1a6>
 800a316:	4616      	mov	r6, r2
 800a318:	fbb5 f1f3 	udiv	r1, r5, r3
 800a31c:	fb03 5711 	mls	r7, r3, r1, r5
 800a320:	5dc7      	ldrb	r7, [r0, r7]
 800a322:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a326:	462f      	mov	r7, r5
 800a328:	42bb      	cmp	r3, r7
 800a32a:	460d      	mov	r5, r1
 800a32c:	d9f4      	bls.n	800a318 <_printf_i+0x110>
 800a32e:	2b08      	cmp	r3, #8
 800a330:	d10b      	bne.n	800a34a <_printf_i+0x142>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	07df      	lsls	r7, r3, #31
 800a336:	d508      	bpl.n	800a34a <_printf_i+0x142>
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	6861      	ldr	r1, [r4, #4]
 800a33c:	4299      	cmp	r1, r3
 800a33e:	bfde      	ittt	le
 800a340:	2330      	movle	r3, #48	@ 0x30
 800a342:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a346:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a34a:	1b92      	subs	r2, r2, r6
 800a34c:	6122      	str	r2, [r4, #16]
 800a34e:	f8cd a000 	str.w	sl, [sp]
 800a352:	464b      	mov	r3, r9
 800a354:	aa03      	add	r2, sp, #12
 800a356:	4621      	mov	r1, r4
 800a358:	4640      	mov	r0, r8
 800a35a:	f7ff fee7 	bl	800a12c <_printf_common>
 800a35e:	3001      	adds	r0, #1
 800a360:	d14a      	bne.n	800a3f8 <_printf_i+0x1f0>
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	b004      	add	sp, #16
 800a368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	f043 0320 	orr.w	r3, r3, #32
 800a372:	6023      	str	r3, [r4, #0]
 800a374:	4832      	ldr	r0, [pc, #200]	@ (800a440 <_printf_i+0x238>)
 800a376:	2778      	movs	r7, #120	@ 0x78
 800a378:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	6831      	ldr	r1, [r6, #0]
 800a380:	061f      	lsls	r7, r3, #24
 800a382:	f851 5b04 	ldr.w	r5, [r1], #4
 800a386:	d402      	bmi.n	800a38e <_printf_i+0x186>
 800a388:	065f      	lsls	r7, r3, #25
 800a38a:	bf48      	it	mi
 800a38c:	b2ad      	uxthmi	r5, r5
 800a38e:	6031      	str	r1, [r6, #0]
 800a390:	07d9      	lsls	r1, r3, #31
 800a392:	bf44      	itt	mi
 800a394:	f043 0320 	orrmi.w	r3, r3, #32
 800a398:	6023      	strmi	r3, [r4, #0]
 800a39a:	b11d      	cbz	r5, 800a3a4 <_printf_i+0x19c>
 800a39c:	2310      	movs	r3, #16
 800a39e:	e7ad      	b.n	800a2fc <_printf_i+0xf4>
 800a3a0:	4826      	ldr	r0, [pc, #152]	@ (800a43c <_printf_i+0x234>)
 800a3a2:	e7e9      	b.n	800a378 <_printf_i+0x170>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	f023 0320 	bic.w	r3, r3, #32
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	e7f6      	b.n	800a39c <_printf_i+0x194>
 800a3ae:	4616      	mov	r6, r2
 800a3b0:	e7bd      	b.n	800a32e <_printf_i+0x126>
 800a3b2:	6833      	ldr	r3, [r6, #0]
 800a3b4:	6825      	ldr	r5, [r4, #0]
 800a3b6:	6961      	ldr	r1, [r4, #20]
 800a3b8:	1d18      	adds	r0, r3, #4
 800a3ba:	6030      	str	r0, [r6, #0]
 800a3bc:	062e      	lsls	r6, r5, #24
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	d501      	bpl.n	800a3c6 <_printf_i+0x1be>
 800a3c2:	6019      	str	r1, [r3, #0]
 800a3c4:	e002      	b.n	800a3cc <_printf_i+0x1c4>
 800a3c6:	0668      	lsls	r0, r5, #25
 800a3c8:	d5fb      	bpl.n	800a3c2 <_printf_i+0x1ba>
 800a3ca:	8019      	strh	r1, [r3, #0]
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	6123      	str	r3, [r4, #16]
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	e7bc      	b.n	800a34e <_printf_i+0x146>
 800a3d4:	6833      	ldr	r3, [r6, #0]
 800a3d6:	1d1a      	adds	r2, r3, #4
 800a3d8:	6032      	str	r2, [r6, #0]
 800a3da:	681e      	ldr	r6, [r3, #0]
 800a3dc:	6862      	ldr	r2, [r4, #4]
 800a3de:	2100      	movs	r1, #0
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7f5 fef5 	bl	80001d0 <memchr>
 800a3e6:	b108      	cbz	r0, 800a3ec <_printf_i+0x1e4>
 800a3e8:	1b80      	subs	r0, r0, r6
 800a3ea:	6060      	str	r0, [r4, #4]
 800a3ec:	6863      	ldr	r3, [r4, #4]
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3f6:	e7aa      	b.n	800a34e <_printf_i+0x146>
 800a3f8:	6923      	ldr	r3, [r4, #16]
 800a3fa:	4632      	mov	r2, r6
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	4640      	mov	r0, r8
 800a400:	47d0      	blx	sl
 800a402:	3001      	adds	r0, #1
 800a404:	d0ad      	beq.n	800a362 <_printf_i+0x15a>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	079b      	lsls	r3, r3, #30
 800a40a:	d413      	bmi.n	800a434 <_printf_i+0x22c>
 800a40c:	68e0      	ldr	r0, [r4, #12]
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	4298      	cmp	r0, r3
 800a412:	bfb8      	it	lt
 800a414:	4618      	movlt	r0, r3
 800a416:	e7a6      	b.n	800a366 <_printf_i+0x15e>
 800a418:	2301      	movs	r3, #1
 800a41a:	4632      	mov	r2, r6
 800a41c:	4649      	mov	r1, r9
 800a41e:	4640      	mov	r0, r8
 800a420:	47d0      	blx	sl
 800a422:	3001      	adds	r0, #1
 800a424:	d09d      	beq.n	800a362 <_printf_i+0x15a>
 800a426:	3501      	adds	r5, #1
 800a428:	68e3      	ldr	r3, [r4, #12]
 800a42a:	9903      	ldr	r1, [sp, #12]
 800a42c:	1a5b      	subs	r3, r3, r1
 800a42e:	42ab      	cmp	r3, r5
 800a430:	dcf2      	bgt.n	800a418 <_printf_i+0x210>
 800a432:	e7eb      	b.n	800a40c <_printf_i+0x204>
 800a434:	2500      	movs	r5, #0
 800a436:	f104 0619 	add.w	r6, r4, #25
 800a43a:	e7f5      	b.n	800a428 <_printf_i+0x220>
 800a43c:	0800b76d 	.word	0x0800b76d
 800a440:	0800b77e 	.word	0x0800b77e

0800a444 <__sflush_r>:
 800a444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	0716      	lsls	r6, r2, #28
 800a44e:	4605      	mov	r5, r0
 800a450:	460c      	mov	r4, r1
 800a452:	d454      	bmi.n	800a4fe <__sflush_r+0xba>
 800a454:	684b      	ldr	r3, [r1, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	dc02      	bgt.n	800a460 <__sflush_r+0x1c>
 800a45a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd48      	ble.n	800a4f2 <__sflush_r+0xae>
 800a460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a462:	2e00      	cmp	r6, #0
 800a464:	d045      	beq.n	800a4f2 <__sflush_r+0xae>
 800a466:	2300      	movs	r3, #0
 800a468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a46c:	682f      	ldr	r7, [r5, #0]
 800a46e:	6a21      	ldr	r1, [r4, #32]
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	d030      	beq.n	800a4d6 <__sflush_r+0x92>
 800a474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	0759      	lsls	r1, r3, #29
 800a47a:	d505      	bpl.n	800a488 <__sflush_r+0x44>
 800a47c:	6863      	ldr	r3, [r4, #4]
 800a47e:	1ad2      	subs	r2, r2, r3
 800a480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a482:	b10b      	cbz	r3, 800a488 <__sflush_r+0x44>
 800a484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a486:	1ad2      	subs	r2, r2, r3
 800a488:	2300      	movs	r3, #0
 800a48a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a48c:	6a21      	ldr	r1, [r4, #32]
 800a48e:	4628      	mov	r0, r5
 800a490:	47b0      	blx	r6
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	d106      	bne.n	800a4a6 <__sflush_r+0x62>
 800a498:	6829      	ldr	r1, [r5, #0]
 800a49a:	291d      	cmp	r1, #29
 800a49c:	d82b      	bhi.n	800a4f6 <__sflush_r+0xb2>
 800a49e:	4a2a      	ldr	r2, [pc, #168]	@ (800a548 <__sflush_r+0x104>)
 800a4a0:	40ca      	lsrs	r2, r1
 800a4a2:	07d6      	lsls	r6, r2, #31
 800a4a4:	d527      	bpl.n	800a4f6 <__sflush_r+0xb2>
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	6062      	str	r2, [r4, #4]
 800a4aa:	04d9      	lsls	r1, r3, #19
 800a4ac:	6922      	ldr	r2, [r4, #16]
 800a4ae:	6022      	str	r2, [r4, #0]
 800a4b0:	d504      	bpl.n	800a4bc <__sflush_r+0x78>
 800a4b2:	1c42      	adds	r2, r0, #1
 800a4b4:	d101      	bne.n	800a4ba <__sflush_r+0x76>
 800a4b6:	682b      	ldr	r3, [r5, #0]
 800a4b8:	b903      	cbnz	r3, 800a4bc <__sflush_r+0x78>
 800a4ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4be:	602f      	str	r7, [r5, #0]
 800a4c0:	b1b9      	cbz	r1, 800a4f2 <__sflush_r+0xae>
 800a4c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4c6:	4299      	cmp	r1, r3
 800a4c8:	d002      	beq.n	800a4d0 <__sflush_r+0x8c>
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f7ff fca2 	bl	8009e14 <_free_r>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4d4:	e00d      	b.n	800a4f2 <__sflush_r+0xae>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b0      	blx	r6
 800a4dc:	4602      	mov	r2, r0
 800a4de:	1c50      	adds	r0, r2, #1
 800a4e0:	d1c9      	bne.n	800a476 <__sflush_r+0x32>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d0c6      	beq.n	800a476 <__sflush_r+0x32>
 800a4e8:	2b1d      	cmp	r3, #29
 800a4ea:	d001      	beq.n	800a4f0 <__sflush_r+0xac>
 800a4ec:	2b16      	cmp	r3, #22
 800a4ee:	d11e      	bne.n	800a52e <__sflush_r+0xea>
 800a4f0:	602f      	str	r7, [r5, #0]
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	e022      	b.n	800a53c <__sflush_r+0xf8>
 800a4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4fa:	b21b      	sxth	r3, r3
 800a4fc:	e01b      	b.n	800a536 <__sflush_r+0xf2>
 800a4fe:	690f      	ldr	r7, [r1, #16]
 800a500:	2f00      	cmp	r7, #0
 800a502:	d0f6      	beq.n	800a4f2 <__sflush_r+0xae>
 800a504:	0793      	lsls	r3, r2, #30
 800a506:	680e      	ldr	r6, [r1, #0]
 800a508:	bf08      	it	eq
 800a50a:	694b      	ldreq	r3, [r1, #20]
 800a50c:	600f      	str	r7, [r1, #0]
 800a50e:	bf18      	it	ne
 800a510:	2300      	movne	r3, #0
 800a512:	eba6 0807 	sub.w	r8, r6, r7
 800a516:	608b      	str	r3, [r1, #8]
 800a518:	f1b8 0f00 	cmp.w	r8, #0
 800a51c:	dde9      	ble.n	800a4f2 <__sflush_r+0xae>
 800a51e:	6a21      	ldr	r1, [r4, #32]
 800a520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a522:	4643      	mov	r3, r8
 800a524:	463a      	mov	r2, r7
 800a526:	4628      	mov	r0, r5
 800a528:	47b0      	blx	r6
 800a52a:	2800      	cmp	r0, #0
 800a52c:	dc08      	bgt.n	800a540 <__sflush_r+0xfc>
 800a52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	f04f 30ff 	mov.w	r0, #4294967295
 800a53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a540:	4407      	add	r7, r0
 800a542:	eba8 0800 	sub.w	r8, r8, r0
 800a546:	e7e7      	b.n	800a518 <__sflush_r+0xd4>
 800a548:	20400001 	.word	0x20400001

0800a54c <_fflush_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	690b      	ldr	r3, [r1, #16]
 800a550:	4605      	mov	r5, r0
 800a552:	460c      	mov	r4, r1
 800a554:	b913      	cbnz	r3, 800a55c <_fflush_r+0x10>
 800a556:	2500      	movs	r5, #0
 800a558:	4628      	mov	r0, r5
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	b118      	cbz	r0, 800a566 <_fflush_r+0x1a>
 800a55e:	6a03      	ldr	r3, [r0, #32]
 800a560:	b90b      	cbnz	r3, 800a566 <_fflush_r+0x1a>
 800a562:	f7ff fa4d 	bl	8009a00 <__sinit>
 800a566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0f3      	beq.n	800a556 <_fflush_r+0xa>
 800a56e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a570:	07d0      	lsls	r0, r2, #31
 800a572:	d404      	bmi.n	800a57e <_fflush_r+0x32>
 800a574:	0599      	lsls	r1, r3, #22
 800a576:	d402      	bmi.n	800a57e <_fflush_r+0x32>
 800a578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a57a:	f7ff fc48 	bl	8009e0e <__retarget_lock_acquire_recursive>
 800a57e:	4628      	mov	r0, r5
 800a580:	4621      	mov	r1, r4
 800a582:	f7ff ff5f 	bl	800a444 <__sflush_r>
 800a586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a588:	07da      	lsls	r2, r3, #31
 800a58a:	4605      	mov	r5, r0
 800a58c:	d4e4      	bmi.n	800a558 <_fflush_r+0xc>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	059b      	lsls	r3, r3, #22
 800a592:	d4e1      	bmi.n	800a558 <_fflush_r+0xc>
 800a594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a596:	f7ff fc3b 	bl	8009e10 <__retarget_lock_release_recursive>
 800a59a:	e7dd      	b.n	800a558 <_fflush_r+0xc>

0800a59c <__swhatbuf_r>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	460c      	mov	r4, r1
 800a5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5a4:	2900      	cmp	r1, #0
 800a5a6:	b096      	sub	sp, #88	@ 0x58
 800a5a8:	4615      	mov	r5, r2
 800a5aa:	461e      	mov	r6, r3
 800a5ac:	da0d      	bge.n	800a5ca <__swhatbuf_r+0x2e>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5b4:	f04f 0100 	mov.w	r1, #0
 800a5b8:	bf14      	ite	ne
 800a5ba:	2340      	movne	r3, #64	@ 0x40
 800a5bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	6031      	str	r1, [r6, #0]
 800a5c4:	602b      	str	r3, [r5, #0]
 800a5c6:	b016      	add	sp, #88	@ 0x58
 800a5c8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ca:	466a      	mov	r2, sp
 800a5cc:	f000 f848 	bl	800a660 <_fstat_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	dbec      	blt.n	800a5ae <__swhatbuf_r+0x12>
 800a5d4:	9901      	ldr	r1, [sp, #4]
 800a5d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5de:	4259      	negs	r1, r3
 800a5e0:	4159      	adcs	r1, r3
 800a5e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e6:	e7eb      	b.n	800a5c0 <__swhatbuf_r+0x24>

0800a5e8 <__smakebuf_r>:
 800a5e8:	898b      	ldrh	r3, [r1, #12]
 800a5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ec:	079d      	lsls	r5, r3, #30
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	d507      	bpl.n	800a604 <__smakebuf_r+0x1c>
 800a5f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	6163      	str	r3, [r4, #20]
 800a600:	b003      	add	sp, #12
 800a602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a604:	ab01      	add	r3, sp, #4
 800a606:	466a      	mov	r2, sp
 800a608:	f7ff ffc8 	bl	800a59c <__swhatbuf_r>
 800a60c:	9f00      	ldr	r7, [sp, #0]
 800a60e:	4605      	mov	r5, r0
 800a610:	4639      	mov	r1, r7
 800a612:	4630      	mov	r0, r6
 800a614:	f7ff f8dc 	bl	80097d0 <_malloc_r>
 800a618:	b948      	cbnz	r0, 800a62e <__smakebuf_r+0x46>
 800a61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61e:	059a      	lsls	r2, r3, #22
 800a620:	d4ee      	bmi.n	800a600 <__smakebuf_r+0x18>
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	f043 0302 	orr.w	r3, r3, #2
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	e7e2      	b.n	800a5f4 <__smakebuf_r+0xc>
 800a62e:	89a3      	ldrh	r3, [r4, #12]
 800a630:	6020      	str	r0, [r4, #0]
 800a632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a636:	81a3      	strh	r3, [r4, #12]
 800a638:	9b01      	ldr	r3, [sp, #4]
 800a63a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a63e:	b15b      	cbz	r3, 800a658 <__smakebuf_r+0x70>
 800a640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a644:	4630      	mov	r0, r6
 800a646:	f000 f81d 	bl	800a684 <_isatty_r>
 800a64a:	b128      	cbz	r0, 800a658 <__smakebuf_r+0x70>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f023 0303 	bic.w	r3, r3, #3
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	431d      	orrs	r5, r3
 800a65c:	81a5      	strh	r5, [r4, #12]
 800a65e:	e7cf      	b.n	800a600 <__smakebuf_r+0x18>

0800a660 <_fstat_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	@ (800a680 <_fstat_r+0x20>)
 800a664:	2300      	movs	r3, #0
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	f7f7 f8e6 	bl	800183e <_fstat>
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	d102      	bne.n	800a67c <_fstat_r+0x1c>
 800a676:	682b      	ldr	r3, [r5, #0]
 800a678:	b103      	cbz	r3, 800a67c <_fstat_r+0x1c>
 800a67a:	6023      	str	r3, [r4, #0]
 800a67c:	bd38      	pop	{r3, r4, r5, pc}
 800a67e:	bf00      	nop
 800a680:	20000aa0 	.word	0x20000aa0

0800a684 <_isatty_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d06      	ldr	r5, [pc, #24]	@ (800a6a0 <_isatty_r+0x1c>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	f7f7 f8e5 	bl	800185e <_isatty>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_isatty_r+0x1a>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_isatty_r+0x1a>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000aa0 	.word	0x20000aa0
 800a6a4:	00000000 	.word	0x00000000

0800a6a8 <sin>:
 800a6a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6aa:	ec53 2b10 	vmov	r2, r3, d0
 800a6ae:	4826      	ldr	r0, [pc, #152]	@ (800a748 <sin+0xa0>)
 800a6b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6b4:	4281      	cmp	r1, r0
 800a6b6:	d807      	bhi.n	800a6c8 <sin+0x20>
 800a6b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a740 <sin+0x98>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	b005      	add	sp, #20
 800a6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c4:	f000 b90c 	b.w	800a8e0 <__kernel_sin>
 800a6c8:	4820      	ldr	r0, [pc, #128]	@ (800a74c <sin+0xa4>)
 800a6ca:	4281      	cmp	r1, r0
 800a6cc:	d908      	bls.n	800a6e0 <sin+0x38>
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	f7f5 fdd1 	bl	8000278 <__aeabi_dsub>
 800a6d6:	ec41 0b10 	vmov	d0, r0, r1
 800a6da:	b005      	add	sp, #20
 800a6dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6e0:	4668      	mov	r0, sp
 800a6e2:	f000 f9b9 	bl	800aa58 <__ieee754_rem_pio2>
 800a6e6:	f000 0003 	and.w	r0, r0, #3
 800a6ea:	2801      	cmp	r0, #1
 800a6ec:	d00c      	beq.n	800a708 <sin+0x60>
 800a6ee:	2802      	cmp	r0, #2
 800a6f0:	d011      	beq.n	800a716 <sin+0x6e>
 800a6f2:	b9e8      	cbnz	r0, 800a730 <sin+0x88>
 800a6f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6f8:	ed9d 0b00 	vldr	d0, [sp]
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	f000 f8ef 	bl	800a8e0 <__kernel_sin>
 800a702:	ec51 0b10 	vmov	r0, r1, d0
 800a706:	e7e6      	b.n	800a6d6 <sin+0x2e>
 800a708:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a70c:	ed9d 0b00 	vldr	d0, [sp]
 800a710:	f000 f81e 	bl	800a750 <__kernel_cos>
 800a714:	e7f5      	b.n	800a702 <sin+0x5a>
 800a716:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a71a:	ed9d 0b00 	vldr	d0, [sp]
 800a71e:	2001      	movs	r0, #1
 800a720:	f000 f8de 	bl	800a8e0 <__kernel_sin>
 800a724:	ec53 2b10 	vmov	r2, r3, d0
 800a728:	4610      	mov	r0, r2
 800a72a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a72e:	e7d2      	b.n	800a6d6 <sin+0x2e>
 800a730:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a734:	ed9d 0b00 	vldr	d0, [sp]
 800a738:	f000 f80a 	bl	800a750 <__kernel_cos>
 800a73c:	e7f2      	b.n	800a724 <sin+0x7c>
 800a73e:	bf00      	nop
	...
 800a748:	3fe921fb 	.word	0x3fe921fb
 800a74c:	7fefffff 	.word	0x7fefffff

0800a750 <__kernel_cos>:
 800a750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	ec57 6b10 	vmov	r6, r7, d0
 800a758:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a75c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a760:	ed8d 1b00 	vstr	d1, [sp]
 800a764:	d206      	bcs.n	800a774 <__kernel_cos+0x24>
 800a766:	4630      	mov	r0, r6
 800a768:	4639      	mov	r1, r7
 800a76a:	f7f6 f9d7 	bl	8000b1c <__aeabi_d2iz>
 800a76e:	2800      	cmp	r0, #0
 800a770:	f000 8088 	beq.w	800a884 <__kernel_cos+0x134>
 800a774:	4632      	mov	r2, r6
 800a776:	463b      	mov	r3, r7
 800a778:	4630      	mov	r0, r6
 800a77a:	4639      	mov	r1, r7
 800a77c:	f7f5 ff34 	bl	80005e8 <__aeabi_dmul>
 800a780:	4b51      	ldr	r3, [pc, #324]	@ (800a8c8 <__kernel_cos+0x178>)
 800a782:	2200      	movs	r2, #0
 800a784:	4604      	mov	r4, r0
 800a786:	460d      	mov	r5, r1
 800a788:	f7f5 ff2e 	bl	80005e8 <__aeabi_dmul>
 800a78c:	a340      	add	r3, pc, #256	@ (adr r3, 800a890 <__kernel_cos+0x140>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	4682      	mov	sl, r0
 800a794:	468b      	mov	fp, r1
 800a796:	4620      	mov	r0, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	f7f5 ff25 	bl	80005e8 <__aeabi_dmul>
 800a79e:	a33e      	add	r3, pc, #248	@ (adr r3, 800a898 <__kernel_cos+0x148>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fd6a 	bl	800027c <__adddf3>
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	462b      	mov	r3, r5
 800a7ac:	f7f5 ff1c 	bl	80005e8 <__aeabi_dmul>
 800a7b0:	a33b      	add	r3, pc, #236	@ (adr r3, 800a8a0 <__kernel_cos+0x150>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 fd5f 	bl	8000278 <__aeabi_dsub>
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	462b      	mov	r3, r5
 800a7be:	f7f5 ff13 	bl	80005e8 <__aeabi_dmul>
 800a7c2:	a339      	add	r3, pc, #228	@ (adr r3, 800a8a8 <__kernel_cos+0x158>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 fd58 	bl	800027c <__adddf3>
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	f7f5 ff0a 	bl	80005e8 <__aeabi_dmul>
 800a7d4:	a336      	add	r3, pc, #216	@ (adr r3, 800a8b0 <__kernel_cos+0x160>)
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	f7f5 fd4d 	bl	8000278 <__aeabi_dsub>
 800a7de:	4622      	mov	r2, r4
 800a7e0:	462b      	mov	r3, r5
 800a7e2:	f7f5 ff01 	bl	80005e8 <__aeabi_dmul>
 800a7e6:	a334      	add	r3, pc, #208	@ (adr r3, 800a8b8 <__kernel_cos+0x168>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f7f5 fd46 	bl	800027c <__adddf3>
 800a7f0:	4622      	mov	r2, r4
 800a7f2:	462b      	mov	r3, r5
 800a7f4:	f7f5 fef8 	bl	80005e8 <__aeabi_dmul>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	462b      	mov	r3, r5
 800a7fc:	f7f5 fef4 	bl	80005e8 <__aeabi_dmul>
 800a800:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a804:	4604      	mov	r4, r0
 800a806:	460d      	mov	r5, r1
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f5 feec 	bl	80005e8 <__aeabi_dmul>
 800a810:	460b      	mov	r3, r1
 800a812:	4602      	mov	r2, r0
 800a814:	4629      	mov	r1, r5
 800a816:	4620      	mov	r0, r4
 800a818:	f7f5 fd2e 	bl	8000278 <__aeabi_dsub>
 800a81c:	4b2b      	ldr	r3, [pc, #172]	@ (800a8cc <__kernel_cos+0x17c>)
 800a81e:	4598      	cmp	r8, r3
 800a820:	4606      	mov	r6, r0
 800a822:	460f      	mov	r7, r1
 800a824:	d810      	bhi.n	800a848 <__kernel_cos+0xf8>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4650      	mov	r0, sl
 800a82c:	4659      	mov	r1, fp
 800a82e:	f7f5 fd23 	bl	8000278 <__aeabi_dsub>
 800a832:	460b      	mov	r3, r1
 800a834:	4926      	ldr	r1, [pc, #152]	@ (800a8d0 <__kernel_cos+0x180>)
 800a836:	4602      	mov	r2, r0
 800a838:	2000      	movs	r0, #0
 800a83a:	f7f5 fd1d 	bl	8000278 <__aeabi_dsub>
 800a83e:	ec41 0b10 	vmov	d0, r0, r1
 800a842:	b003      	add	sp, #12
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	4b22      	ldr	r3, [pc, #136]	@ (800a8d4 <__kernel_cos+0x184>)
 800a84a:	4921      	ldr	r1, [pc, #132]	@ (800a8d0 <__kernel_cos+0x180>)
 800a84c:	4598      	cmp	r8, r3
 800a84e:	bf8c      	ite	hi
 800a850:	4d21      	ldrhi	r5, [pc, #132]	@ (800a8d8 <__kernel_cos+0x188>)
 800a852:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a856:	2400      	movs	r4, #0
 800a858:	4622      	mov	r2, r4
 800a85a:	462b      	mov	r3, r5
 800a85c:	2000      	movs	r0, #0
 800a85e:	f7f5 fd0b 	bl	8000278 <__aeabi_dsub>
 800a862:	4622      	mov	r2, r4
 800a864:	4680      	mov	r8, r0
 800a866:	4689      	mov	r9, r1
 800a868:	462b      	mov	r3, r5
 800a86a:	4650      	mov	r0, sl
 800a86c:	4659      	mov	r1, fp
 800a86e:	f7f5 fd03 	bl	8000278 <__aeabi_dsub>
 800a872:	4632      	mov	r2, r6
 800a874:	463b      	mov	r3, r7
 800a876:	f7f5 fcff 	bl	8000278 <__aeabi_dsub>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4640      	mov	r0, r8
 800a880:	4649      	mov	r1, r9
 800a882:	e7da      	b.n	800a83a <__kernel_cos+0xea>
 800a884:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a8c0 <__kernel_cos+0x170>
 800a888:	e7db      	b.n	800a842 <__kernel_cos+0xf2>
 800a88a:	bf00      	nop
 800a88c:	f3af 8000 	nop.w
 800a890:	be8838d4 	.word	0xbe8838d4
 800a894:	bda8fae9 	.word	0xbda8fae9
 800a898:	bdb4b1c4 	.word	0xbdb4b1c4
 800a89c:	3e21ee9e 	.word	0x3e21ee9e
 800a8a0:	809c52ad 	.word	0x809c52ad
 800a8a4:	3e927e4f 	.word	0x3e927e4f
 800a8a8:	19cb1590 	.word	0x19cb1590
 800a8ac:	3efa01a0 	.word	0x3efa01a0
 800a8b0:	16c15177 	.word	0x16c15177
 800a8b4:	3f56c16c 	.word	0x3f56c16c
 800a8b8:	5555554c 	.word	0x5555554c
 800a8bc:	3fa55555 	.word	0x3fa55555
 800a8c0:	00000000 	.word	0x00000000
 800a8c4:	3ff00000 	.word	0x3ff00000
 800a8c8:	3fe00000 	.word	0x3fe00000
 800a8cc:	3fd33332 	.word	0x3fd33332
 800a8d0:	3ff00000 	.word	0x3ff00000
 800a8d4:	3fe90000 	.word	0x3fe90000
 800a8d8:	3fd20000 	.word	0x3fd20000
 800a8dc:	00000000 	.word	0x00000000

0800a8e0 <__kernel_sin>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	ec55 4b10 	vmov	r4, r5, d0
 800a8e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a8f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	d205      	bcs.n	800a906 <__kernel_sin+0x26>
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	f7f6 f90d 	bl	8000b1c <__aeabi_d2iz>
 800a902:	2800      	cmp	r0, #0
 800a904:	d052      	beq.n	800a9ac <__kernel_sin+0xcc>
 800a906:	4622      	mov	r2, r4
 800a908:	462b      	mov	r3, r5
 800a90a:	4620      	mov	r0, r4
 800a90c:	4629      	mov	r1, r5
 800a90e:	f7f5 fe6b 	bl	80005e8 <__aeabi_dmul>
 800a912:	4682      	mov	sl, r0
 800a914:	468b      	mov	fp, r1
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4620      	mov	r0, r4
 800a91c:	4629      	mov	r1, r5
 800a91e:	f7f5 fe63 	bl	80005e8 <__aeabi_dmul>
 800a922:	a342      	add	r3, pc, #264	@ (adr r3, 800aa2c <__kernel_sin+0x14c>)
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	e9cd 0100 	strd	r0, r1, [sp]
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fe5a 	bl	80005e8 <__aeabi_dmul>
 800a934:	a33f      	add	r3, pc, #252	@ (adr r3, 800aa34 <__kernel_sin+0x154>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f7f5 fc9d 	bl	8000278 <__aeabi_dsub>
 800a93e:	4652      	mov	r2, sl
 800a940:	465b      	mov	r3, fp
 800a942:	f7f5 fe51 	bl	80005e8 <__aeabi_dmul>
 800a946:	a33d      	add	r3, pc, #244	@ (adr r3, 800aa3c <__kernel_sin+0x15c>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f7f5 fc96 	bl	800027c <__adddf3>
 800a950:	4652      	mov	r2, sl
 800a952:	465b      	mov	r3, fp
 800a954:	f7f5 fe48 	bl	80005e8 <__aeabi_dmul>
 800a958:	a33a      	add	r3, pc, #232	@ (adr r3, 800aa44 <__kernel_sin+0x164>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	f7f5 fc8b 	bl	8000278 <__aeabi_dsub>
 800a962:	4652      	mov	r2, sl
 800a964:	465b      	mov	r3, fp
 800a966:	f7f5 fe3f 	bl	80005e8 <__aeabi_dmul>
 800a96a:	a338      	add	r3, pc, #224	@ (adr r3, 800aa4c <__kernel_sin+0x16c>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f7f5 fc84 	bl	800027c <__adddf3>
 800a974:	4606      	mov	r6, r0
 800a976:	460f      	mov	r7, r1
 800a978:	f1b8 0f00 	cmp.w	r8, #0
 800a97c:	d11b      	bne.n	800a9b6 <__kernel_sin+0xd6>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4650      	mov	r0, sl
 800a984:	4659      	mov	r1, fp
 800a986:	f7f5 fe2f 	bl	80005e8 <__aeabi_dmul>
 800a98a:	a325      	add	r3, pc, #148	@ (adr r3, 800aa20 <__kernel_sin+0x140>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fc72 	bl	8000278 <__aeabi_dsub>
 800a994:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a998:	f7f5 fe26 	bl	80005e8 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f5 fc6a 	bl	800027c <__adddf3>
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	460d      	mov	r5, r1
 800a9ac:	ec45 4b10 	vmov	d0, r4, r5
 800a9b0:	b005      	add	sp, #20
 800a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ba:	4b1b      	ldr	r3, [pc, #108]	@ (800aa28 <__kernel_sin+0x148>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f7f5 fe13 	bl	80005e8 <__aeabi_dmul>
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	4680      	mov	r8, r0
 800a9c6:	4689      	mov	r9, r1
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ce:	f7f5 fe0b 	bl	80005e8 <__aeabi_dmul>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7f5 fc4d 	bl	8000278 <__aeabi_dsub>
 800a9de:	4652      	mov	r2, sl
 800a9e0:	465b      	mov	r3, fp
 800a9e2:	f7f5 fe01 	bl	80005e8 <__aeabi_dmul>
 800a9e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9ea:	f7f5 fc45 	bl	8000278 <__aeabi_dsub>
 800a9ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa20 <__kernel_sin+0x140>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	460f      	mov	r7, r1
 800a9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9fc:	f7f5 fdf4 	bl	80005e8 <__aeabi_dmul>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4630      	mov	r0, r6
 800aa06:	4639      	mov	r1, r7
 800aa08:	f7f5 fc38 	bl	800027c <__adddf3>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4620      	mov	r0, r4
 800aa12:	4629      	mov	r1, r5
 800aa14:	f7f5 fc30 	bl	8000278 <__aeabi_dsub>
 800aa18:	e7c6      	b.n	800a9a8 <__kernel_sin+0xc8>
 800aa1a:	bf00      	nop
 800aa1c:	f3af 8000 	nop.w
 800aa20:	55555549 	.word	0x55555549
 800aa24:	3fc55555 	.word	0x3fc55555
 800aa28:	3fe00000 	.word	0x3fe00000
 800aa2c:	5acfd57c 	.word	0x5acfd57c
 800aa30:	3de5d93a 	.word	0x3de5d93a
 800aa34:	8a2b9ceb 	.word	0x8a2b9ceb
 800aa38:	3e5ae5e6 	.word	0x3e5ae5e6
 800aa3c:	57b1fe7d 	.word	0x57b1fe7d
 800aa40:	3ec71de3 	.word	0x3ec71de3
 800aa44:	19c161d5 	.word	0x19c161d5
 800aa48:	3f2a01a0 	.word	0x3f2a01a0
 800aa4c:	1110f8a6 	.word	0x1110f8a6
 800aa50:	3f811111 	.word	0x3f811111
 800aa54:	00000000 	.word	0x00000000

0800aa58 <__ieee754_rem_pio2>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	ec57 6b10 	vmov	r6, r7, d0
 800aa60:	4bc5      	ldr	r3, [pc, #788]	@ (800ad78 <__ieee754_rem_pio2+0x320>)
 800aa62:	b08d      	sub	sp, #52	@ 0x34
 800aa64:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800aa68:	4598      	cmp	r8, r3
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	9704      	str	r7, [sp, #16]
 800aa6e:	d807      	bhi.n	800aa80 <__ieee754_rem_pio2+0x28>
 800aa70:	2200      	movs	r2, #0
 800aa72:	2300      	movs	r3, #0
 800aa74:	ed80 0b00 	vstr	d0, [r0]
 800aa78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aa7c:	2500      	movs	r5, #0
 800aa7e:	e028      	b.n	800aad2 <__ieee754_rem_pio2+0x7a>
 800aa80:	4bbe      	ldr	r3, [pc, #760]	@ (800ad7c <__ieee754_rem_pio2+0x324>)
 800aa82:	4598      	cmp	r8, r3
 800aa84:	d878      	bhi.n	800ab78 <__ieee754_rem_pio2+0x120>
 800aa86:	9b04      	ldr	r3, [sp, #16]
 800aa88:	4dbd      	ldr	r5, [pc, #756]	@ (800ad80 <__ieee754_rem_pio2+0x328>)
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ad40 <__ieee754_rem_pio2+0x2e8>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	4639      	mov	r1, r7
 800aa96:	dd38      	ble.n	800ab0a <__ieee754_rem_pio2+0xb2>
 800aa98:	f7f5 fbee 	bl	8000278 <__aeabi_dsub>
 800aa9c:	45a8      	cmp	r8, r5
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	d01a      	beq.n	800aada <__ieee754_rem_pio2+0x82>
 800aaa4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ad48 <__ieee754_rem_pio2+0x2f0>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f7f5 fbe5 	bl	8000278 <__aeabi_dsub>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4680      	mov	r8, r0
 800aab4:	4689      	mov	r9, r1
 800aab6:	4630      	mov	r0, r6
 800aab8:	4639      	mov	r1, r7
 800aaba:	f7f5 fbdd 	bl	8000278 <__aeabi_dsub>
 800aabe:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ad48 <__ieee754_rem_pio2+0x2f0>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f7f5 fbd8 	bl	8000278 <__aeabi_dsub>
 800aac8:	e9c4 8900 	strd	r8, r9, [r4]
 800aacc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aad0:	2501      	movs	r5, #1
 800aad2:	4628      	mov	r0, r5
 800aad4:	b00d      	add	sp, #52	@ 0x34
 800aad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aada:	a39d      	add	r3, pc, #628	@ (adr r3, 800ad50 <__ieee754_rem_pio2+0x2f8>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f7f5 fbca 	bl	8000278 <__aeabi_dsub>
 800aae4:	a39c      	add	r3, pc, #624	@ (adr r3, 800ad58 <__ieee754_rem_pio2+0x300>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	f7f5 fbc3 	bl	8000278 <__aeabi_dsub>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4680      	mov	r8, r0
 800aaf8:	4689      	mov	r9, r1
 800aafa:	4630      	mov	r0, r6
 800aafc:	4639      	mov	r1, r7
 800aafe:	f7f5 fbbb 	bl	8000278 <__aeabi_dsub>
 800ab02:	a395      	add	r3, pc, #596	@ (adr r3, 800ad58 <__ieee754_rem_pio2+0x300>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	e7dc      	b.n	800aac4 <__ieee754_rem_pio2+0x6c>
 800ab0a:	f7f5 fbb7 	bl	800027c <__adddf3>
 800ab0e:	45a8      	cmp	r8, r5
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	d018      	beq.n	800ab48 <__ieee754_rem_pio2+0xf0>
 800ab16:	a38c      	add	r3, pc, #560	@ (adr r3, 800ad48 <__ieee754_rem_pio2+0x2f0>)
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	f7f5 fbae 	bl	800027c <__adddf3>
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f5 fba4 	bl	8000278 <__aeabi_dsub>
 800ab30:	a385      	add	r3, pc, #532	@ (adr r3, 800ad48 <__ieee754_rem_pio2+0x2f0>)
 800ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab36:	f7f5 fba1 	bl	800027c <__adddf3>
 800ab3a:	f04f 35ff 	mov.w	r5, #4294967295
 800ab3e:	e9c4 8900 	strd	r8, r9, [r4]
 800ab42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab46:	e7c4      	b.n	800aad2 <__ieee754_rem_pio2+0x7a>
 800ab48:	a381      	add	r3, pc, #516	@ (adr r3, 800ad50 <__ieee754_rem_pio2+0x2f8>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb95 	bl	800027c <__adddf3>
 800ab52:	a381      	add	r3, pc, #516	@ (adr r3, 800ad58 <__ieee754_rem_pio2+0x300>)
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	4606      	mov	r6, r0
 800ab5a:	460f      	mov	r7, r1
 800ab5c:	f7f5 fb8e 	bl	800027c <__adddf3>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 fb84 	bl	8000278 <__aeabi_dsub>
 800ab70:	a379      	add	r3, pc, #484	@ (adr r3, 800ad58 <__ieee754_rem_pio2+0x300>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	e7de      	b.n	800ab36 <__ieee754_rem_pio2+0xde>
 800ab78:	4b82      	ldr	r3, [pc, #520]	@ (800ad84 <__ieee754_rem_pio2+0x32c>)
 800ab7a:	4598      	cmp	r8, r3
 800ab7c:	f200 80d1 	bhi.w	800ad22 <__ieee754_rem_pio2+0x2ca>
 800ab80:	f000 f966 	bl	800ae50 <fabs>
 800ab84:	ec57 6b10 	vmov	r6, r7, d0
 800ab88:	a375      	add	r3, pc, #468	@ (adr r3, 800ad60 <__ieee754_rem_pio2+0x308>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	4630      	mov	r0, r6
 800ab90:	4639      	mov	r1, r7
 800ab92:	f7f5 fd29 	bl	80005e8 <__aeabi_dmul>
 800ab96:	4b7c      	ldr	r3, [pc, #496]	@ (800ad88 <__ieee754_rem_pio2+0x330>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f7f5 fb6f 	bl	800027c <__adddf3>
 800ab9e:	f7f5 ffbd 	bl	8000b1c <__aeabi_d2iz>
 800aba2:	4605      	mov	r5, r0
 800aba4:	f7f5 fcb6 	bl	8000514 <__aeabi_i2d>
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abb0:	a363      	add	r3, pc, #396	@ (adr r3, 800ad40 <__ieee754_rem_pio2+0x2e8>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fd17 	bl	80005e8 <__aeabi_dmul>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 fb59 	bl	8000278 <__aeabi_dsub>
 800abc6:	a360      	add	r3, pc, #384	@ (adr r3, 800ad48 <__ieee754_rem_pio2+0x2f0>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	4682      	mov	sl, r0
 800abce:	468b      	mov	fp, r1
 800abd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd4:	f7f5 fd08 	bl	80005e8 <__aeabi_dmul>
 800abd8:	2d1f      	cmp	r5, #31
 800abda:	4606      	mov	r6, r0
 800abdc:	460f      	mov	r7, r1
 800abde:	dc0c      	bgt.n	800abfa <__ieee754_rem_pio2+0x1a2>
 800abe0:	4b6a      	ldr	r3, [pc, #424]	@ (800ad8c <__ieee754_rem_pio2+0x334>)
 800abe2:	1e6a      	subs	r2, r5, #1
 800abe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe8:	4543      	cmp	r3, r8
 800abea:	d006      	beq.n	800abfa <__ieee754_rem_pio2+0x1a2>
 800abec:	4632      	mov	r2, r6
 800abee:	463b      	mov	r3, r7
 800abf0:	4650      	mov	r0, sl
 800abf2:	4659      	mov	r1, fp
 800abf4:	f7f5 fb40 	bl	8000278 <__aeabi_dsub>
 800abf8:	e00e      	b.n	800ac18 <__ieee754_rem_pio2+0x1c0>
 800abfa:	463b      	mov	r3, r7
 800abfc:	4632      	mov	r2, r6
 800abfe:	4650      	mov	r0, sl
 800ac00:	4659      	mov	r1, fp
 800ac02:	f7f5 fb39 	bl	8000278 <__aeabi_dsub>
 800ac06:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ac0a:	9305      	str	r3, [sp, #20]
 800ac0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac10:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ac14:	2b10      	cmp	r3, #16
 800ac16:	dc02      	bgt.n	800ac1e <__ieee754_rem_pio2+0x1c6>
 800ac18:	e9c4 0100 	strd	r0, r1, [r4]
 800ac1c:	e039      	b.n	800ac92 <__ieee754_rem_pio2+0x23a>
 800ac1e:	a34c      	add	r3, pc, #304	@ (adr r3, 800ad50 <__ieee754_rem_pio2+0x2f8>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac28:	f7f5 fcde 	bl	80005e8 <__aeabi_dmul>
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	460f      	mov	r7, r1
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4650      	mov	r0, sl
 800ac36:	4659      	mov	r1, fp
 800ac38:	f7f5 fb1e 	bl	8000278 <__aeabi_dsub>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4680      	mov	r8, r0
 800ac42:	4689      	mov	r9, r1
 800ac44:	4650      	mov	r0, sl
 800ac46:	4659      	mov	r1, fp
 800ac48:	f7f5 fb16 	bl	8000278 <__aeabi_dsub>
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	463b      	mov	r3, r7
 800ac50:	f7f5 fb12 	bl	8000278 <__aeabi_dsub>
 800ac54:	a340      	add	r3, pc, #256	@ (adr r3, 800ad58 <__ieee754_rem_pio2+0x300>)
 800ac56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	460f      	mov	r7, r1
 800ac5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac62:	f7f5 fcc1 	bl	80005e8 <__aeabi_dmul>
 800ac66:	4632      	mov	r2, r6
 800ac68:	463b      	mov	r3, r7
 800ac6a:	f7f5 fb05 	bl	8000278 <__aeabi_dsub>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4606      	mov	r6, r0
 800ac74:	460f      	mov	r7, r1
 800ac76:	4640      	mov	r0, r8
 800ac78:	4649      	mov	r1, r9
 800ac7a:	f7f5 fafd 	bl	8000278 <__aeabi_dsub>
 800ac7e:	9a05      	ldr	r2, [sp, #20]
 800ac80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	2b31      	cmp	r3, #49	@ 0x31
 800ac88:	dc20      	bgt.n	800accc <__ieee754_rem_pio2+0x274>
 800ac8a:	e9c4 0100 	strd	r0, r1, [r4]
 800ac8e:	46c2      	mov	sl, r8
 800ac90:	46cb      	mov	fp, r9
 800ac92:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ac96:	4650      	mov	r0, sl
 800ac98:	4642      	mov	r2, r8
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	4659      	mov	r1, fp
 800ac9e:	f7f5 faeb 	bl	8000278 <__aeabi_dsub>
 800aca2:	463b      	mov	r3, r7
 800aca4:	4632      	mov	r2, r6
 800aca6:	f7f5 fae7 	bl	8000278 <__aeabi_dsub>
 800acaa:	9b04      	ldr	r3, [sp, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acb2:	f6bf af0e 	bge.w	800aad2 <__ieee754_rem_pio2+0x7a>
 800acb6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800acba:	6063      	str	r3, [r4, #4]
 800acbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acc0:	f8c4 8000 	str.w	r8, [r4]
 800acc4:	60a0      	str	r0, [r4, #8]
 800acc6:	60e3      	str	r3, [r4, #12]
 800acc8:	426d      	negs	r5, r5
 800acca:	e702      	b.n	800aad2 <__ieee754_rem_pio2+0x7a>
 800accc:	a326      	add	r3, pc, #152	@ (adr r3, 800ad68 <__ieee754_rem_pio2+0x310>)
 800acce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acd6:	f7f5 fc87 	bl	80005e8 <__aeabi_dmul>
 800acda:	4606      	mov	r6, r0
 800acdc:	460f      	mov	r7, r1
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f7f5 fac7 	bl	8000278 <__aeabi_dsub>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4682      	mov	sl, r0
 800acf0:	468b      	mov	fp, r1
 800acf2:	4640      	mov	r0, r8
 800acf4:	4649      	mov	r1, r9
 800acf6:	f7f5 fabf 	bl	8000278 <__aeabi_dsub>
 800acfa:	4632      	mov	r2, r6
 800acfc:	463b      	mov	r3, r7
 800acfe:	f7f5 fabb 	bl	8000278 <__aeabi_dsub>
 800ad02:	a31b      	add	r3, pc, #108	@ (adr r3, 800ad70 <__ieee754_rem_pio2+0x318>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	4606      	mov	r6, r0
 800ad0a:	460f      	mov	r7, r1
 800ad0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad10:	f7f5 fc6a 	bl	80005e8 <__aeabi_dmul>
 800ad14:	4632      	mov	r2, r6
 800ad16:	463b      	mov	r3, r7
 800ad18:	f7f5 faae 	bl	8000278 <__aeabi_dsub>
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	460f      	mov	r7, r1
 800ad20:	e764      	b.n	800abec <__ieee754_rem_pio2+0x194>
 800ad22:	4b1b      	ldr	r3, [pc, #108]	@ (800ad90 <__ieee754_rem_pio2+0x338>)
 800ad24:	4598      	cmp	r8, r3
 800ad26:	d935      	bls.n	800ad94 <__ieee754_rem_pio2+0x33c>
 800ad28:	4632      	mov	r2, r6
 800ad2a:	463b      	mov	r3, r7
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 faa2 	bl	8000278 <__aeabi_dsub>
 800ad34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad38:	e9c4 0100 	strd	r0, r1, [r4]
 800ad3c:	e69e      	b.n	800aa7c <__ieee754_rem_pio2+0x24>
 800ad3e:	bf00      	nop
 800ad40:	54400000 	.word	0x54400000
 800ad44:	3ff921fb 	.word	0x3ff921fb
 800ad48:	1a626331 	.word	0x1a626331
 800ad4c:	3dd0b461 	.word	0x3dd0b461
 800ad50:	1a600000 	.word	0x1a600000
 800ad54:	3dd0b461 	.word	0x3dd0b461
 800ad58:	2e037073 	.word	0x2e037073
 800ad5c:	3ba3198a 	.word	0x3ba3198a
 800ad60:	6dc9c883 	.word	0x6dc9c883
 800ad64:	3fe45f30 	.word	0x3fe45f30
 800ad68:	2e000000 	.word	0x2e000000
 800ad6c:	3ba3198a 	.word	0x3ba3198a
 800ad70:	252049c1 	.word	0x252049c1
 800ad74:	397b839a 	.word	0x397b839a
 800ad78:	3fe921fb 	.word	0x3fe921fb
 800ad7c:	4002d97b 	.word	0x4002d97b
 800ad80:	3ff921fb 	.word	0x3ff921fb
 800ad84:	413921fb 	.word	0x413921fb
 800ad88:	3fe00000 	.word	0x3fe00000
 800ad8c:	0800b790 	.word	0x0800b790
 800ad90:	7fefffff 	.word	0x7fefffff
 800ad94:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ad98:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ad9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ada0:	4630      	mov	r0, r6
 800ada2:	460f      	mov	r7, r1
 800ada4:	f7f5 feba 	bl	8000b1c <__aeabi_d2iz>
 800ada8:	f7f5 fbb4 	bl	8000514 <__aeabi_i2d>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4630      	mov	r0, r6
 800adb2:	4639      	mov	r1, r7
 800adb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800adb8:	f7f5 fa5e 	bl	8000278 <__aeabi_dsub>
 800adbc:	4b22      	ldr	r3, [pc, #136]	@ (800ae48 <__ieee754_rem_pio2+0x3f0>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	f7f5 fc12 	bl	80005e8 <__aeabi_dmul>
 800adc4:	460f      	mov	r7, r1
 800adc6:	4606      	mov	r6, r0
 800adc8:	f7f5 fea8 	bl	8000b1c <__aeabi_d2iz>
 800adcc:	f7f5 fba2 	bl	8000514 <__aeabi_i2d>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4630      	mov	r0, r6
 800add6:	4639      	mov	r1, r7
 800add8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800addc:	f7f5 fa4c 	bl	8000278 <__aeabi_dsub>
 800ade0:	4b19      	ldr	r3, [pc, #100]	@ (800ae48 <__ieee754_rem_pio2+0x3f0>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	f7f5 fc00 	bl	80005e8 <__aeabi_dmul>
 800ade8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800adec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800adf0:	f04f 0803 	mov.w	r8, #3
 800adf4:	2600      	movs	r6, #0
 800adf6:	2700      	movs	r7, #0
 800adf8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800adfc:	4632      	mov	r2, r6
 800adfe:	463b      	mov	r3, r7
 800ae00:	46c2      	mov	sl, r8
 800ae02:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae06:	f7f5 fe57 	bl	8000ab8 <__aeabi_dcmpeq>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d1f4      	bne.n	800adf8 <__ieee754_rem_pio2+0x3a0>
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae4c <__ieee754_rem_pio2+0x3f4>)
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	2302      	movs	r3, #2
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	462a      	mov	r2, r5
 800ae18:	4653      	mov	r3, sl
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	a806      	add	r0, sp, #24
 800ae1e:	f000 f81f 	bl	800ae60 <__kernel_rem_pio2>
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	4605      	mov	r5, r0
 800ae28:	f6bf ae53 	bge.w	800aad2 <__ieee754_rem_pio2+0x7a>
 800ae2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ae30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae34:	e9c4 2300 	strd	r2, r3, [r4]
 800ae38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ae3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ae44:	e740      	b.n	800acc8 <__ieee754_rem_pio2+0x270>
 800ae46:	bf00      	nop
 800ae48:	41700000 	.word	0x41700000
 800ae4c:	0800b810 	.word	0x0800b810

0800ae50 <fabs>:
 800ae50:	ec51 0b10 	vmov	r0, r1, d0
 800ae54:	4602      	mov	r2, r0
 800ae56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae5a:	ec43 2b10 	vmov	d0, r2, r3
 800ae5e:	4770      	bx	lr

0800ae60 <__kernel_rem_pio2>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	ed2d 8b02 	vpush	{d8}
 800ae68:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ae6c:	f112 0f14 	cmn.w	r2, #20
 800ae70:	9306      	str	r3, [sp, #24]
 800ae72:	9104      	str	r1, [sp, #16]
 800ae74:	4bc2      	ldr	r3, [pc, #776]	@ (800b180 <__kernel_rem_pio2+0x320>)
 800ae76:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ae78:	9008      	str	r0, [sp, #32]
 800ae7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	9b06      	ldr	r3, [sp, #24]
 800ae82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae86:	bfa8      	it	ge
 800ae88:	1ed4      	subge	r4, r2, #3
 800ae8a:	9305      	str	r3, [sp, #20]
 800ae8c:	bfb2      	itee	lt
 800ae8e:	2400      	movlt	r4, #0
 800ae90:	2318      	movge	r3, #24
 800ae92:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae96:	f06f 0317 	mvn.w	r3, #23
 800ae9a:	fb04 3303 	mla	r3, r4, r3, r3
 800ae9e:	eb03 0b02 	add.w	fp, r3, r2
 800aea2:	9b00      	ldr	r3, [sp, #0]
 800aea4:	9a05      	ldr	r2, [sp, #20]
 800aea6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800b170 <__kernel_rem_pio2+0x310>
 800aeaa:	eb03 0802 	add.w	r8, r3, r2
 800aeae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800aeb0:	1aa7      	subs	r7, r4, r2
 800aeb2:	ae20      	add	r6, sp, #128	@ 0x80
 800aeb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aeb8:	2500      	movs	r5, #0
 800aeba:	4545      	cmp	r5, r8
 800aebc:	dd12      	ble.n	800aee4 <__kernel_rem_pio2+0x84>
 800aebe:	9b06      	ldr	r3, [sp, #24]
 800aec0:	aa20      	add	r2, sp, #128	@ 0x80
 800aec2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aec6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800aeca:	2700      	movs	r7, #0
 800aecc:	9b00      	ldr	r3, [sp, #0]
 800aece:	429f      	cmp	r7, r3
 800aed0:	dc2e      	bgt.n	800af30 <__kernel_rem_pio2+0xd0>
 800aed2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800b170 <__kernel_rem_pio2+0x310>
 800aed6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aeda:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aede:	46a8      	mov	r8, r5
 800aee0:	2600      	movs	r6, #0
 800aee2:	e01b      	b.n	800af1c <__kernel_rem_pio2+0xbc>
 800aee4:	42ef      	cmn	r7, r5
 800aee6:	d407      	bmi.n	800aef8 <__kernel_rem_pio2+0x98>
 800aee8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aeec:	f7f5 fb12 	bl	8000514 <__aeabi_i2d>
 800aef0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aef4:	3501      	adds	r5, #1
 800aef6:	e7e0      	b.n	800aeba <__kernel_rem_pio2+0x5a>
 800aef8:	ec51 0b18 	vmov	r0, r1, d8
 800aefc:	e7f8      	b.n	800aef0 <__kernel_rem_pio2+0x90>
 800aefe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800af02:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af06:	f7f5 fb6f 	bl	80005e8 <__aeabi_dmul>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af12:	f7f5 f9b3 	bl	800027c <__adddf3>
 800af16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af1a:	3601      	adds	r6, #1
 800af1c:	9b05      	ldr	r3, [sp, #20]
 800af1e:	429e      	cmp	r6, r3
 800af20:	dded      	ble.n	800aefe <__kernel_rem_pio2+0x9e>
 800af22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af26:	3701      	adds	r7, #1
 800af28:	ecaa 7b02 	vstmia	sl!, {d7}
 800af2c:	3508      	adds	r5, #8
 800af2e:	e7cd      	b.n	800aecc <__kernel_rem_pio2+0x6c>
 800af30:	9b00      	ldr	r3, [sp, #0]
 800af32:	f8dd 8000 	ldr.w	r8, [sp]
 800af36:	aa0c      	add	r2, sp, #48	@ 0x30
 800af38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800af40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af44:	9309      	str	r3, [sp, #36]	@ 0x24
 800af46:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800af4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af4c:	ab98      	add	r3, sp, #608	@ 0x260
 800af4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af52:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800af56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af5a:	ac0c      	add	r4, sp, #48	@ 0x30
 800af5c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af5e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800af62:	46a1      	mov	r9, r4
 800af64:	46c2      	mov	sl, r8
 800af66:	f1ba 0f00 	cmp.w	sl, #0
 800af6a:	dc77      	bgt.n	800b05c <__kernel_rem_pio2+0x1fc>
 800af6c:	4658      	mov	r0, fp
 800af6e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800af72:	f000 fac5 	bl	800b500 <scalbn>
 800af76:	ec57 6b10 	vmov	r6, r7, d0
 800af7a:	2200      	movs	r2, #0
 800af7c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800af80:	4630      	mov	r0, r6
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 fb30 	bl	80005e8 <__aeabi_dmul>
 800af88:	ec41 0b10 	vmov	d0, r0, r1
 800af8c:	f000 fb34 	bl	800b5f8 <floor>
 800af90:	4b7c      	ldr	r3, [pc, #496]	@ (800b184 <__kernel_rem_pio2+0x324>)
 800af92:	ec51 0b10 	vmov	r0, r1, d0
 800af96:	2200      	movs	r2, #0
 800af98:	f7f5 fb26 	bl	80005e8 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 f968 	bl	8000278 <__aeabi_dsub>
 800afa8:	460f      	mov	r7, r1
 800afaa:	4606      	mov	r6, r0
 800afac:	f7f5 fdb6 	bl	8000b1c <__aeabi_d2iz>
 800afb0:	9002      	str	r0, [sp, #8]
 800afb2:	f7f5 faaf 	bl	8000514 <__aeabi_i2d>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 f95b 	bl	8000278 <__aeabi_dsub>
 800afc2:	f1bb 0f00 	cmp.w	fp, #0
 800afc6:	4606      	mov	r6, r0
 800afc8:	460f      	mov	r7, r1
 800afca:	dd6c      	ble.n	800b0a6 <__kernel_rem_pio2+0x246>
 800afcc:	f108 31ff 	add.w	r1, r8, #4294967295
 800afd0:	ab0c      	add	r3, sp, #48	@ 0x30
 800afd2:	9d02      	ldr	r5, [sp, #8]
 800afd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afd8:	f1cb 0018 	rsb	r0, fp, #24
 800afdc:	fa43 f200 	asr.w	r2, r3, r0
 800afe0:	4415      	add	r5, r2
 800afe2:	4082      	lsls	r2, r0
 800afe4:	1a9b      	subs	r3, r3, r2
 800afe6:	aa0c      	add	r2, sp, #48	@ 0x30
 800afe8:	9502      	str	r5, [sp, #8]
 800afea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800afee:	f1cb 0217 	rsb	r2, fp, #23
 800aff2:	fa43 f902 	asr.w	r9, r3, r2
 800aff6:	f1b9 0f00 	cmp.w	r9, #0
 800affa:	dd64      	ble.n	800b0c6 <__kernel_rem_pio2+0x266>
 800affc:	9b02      	ldr	r3, [sp, #8]
 800affe:	2200      	movs	r2, #0
 800b000:	3301      	adds	r3, #1
 800b002:	9302      	str	r3, [sp, #8]
 800b004:	4615      	mov	r5, r2
 800b006:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b00a:	4590      	cmp	r8, r2
 800b00c:	f300 80a1 	bgt.w	800b152 <__kernel_rem_pio2+0x2f2>
 800b010:	f1bb 0f00 	cmp.w	fp, #0
 800b014:	dd07      	ble.n	800b026 <__kernel_rem_pio2+0x1c6>
 800b016:	f1bb 0f01 	cmp.w	fp, #1
 800b01a:	f000 80c1 	beq.w	800b1a0 <__kernel_rem_pio2+0x340>
 800b01e:	f1bb 0f02 	cmp.w	fp, #2
 800b022:	f000 80c8 	beq.w	800b1b6 <__kernel_rem_pio2+0x356>
 800b026:	f1b9 0f02 	cmp.w	r9, #2
 800b02a:	d14c      	bne.n	800b0c6 <__kernel_rem_pio2+0x266>
 800b02c:	4632      	mov	r2, r6
 800b02e:	463b      	mov	r3, r7
 800b030:	4955      	ldr	r1, [pc, #340]	@ (800b188 <__kernel_rem_pio2+0x328>)
 800b032:	2000      	movs	r0, #0
 800b034:	f7f5 f920 	bl	8000278 <__aeabi_dsub>
 800b038:	4606      	mov	r6, r0
 800b03a:	460f      	mov	r7, r1
 800b03c:	2d00      	cmp	r5, #0
 800b03e:	d042      	beq.n	800b0c6 <__kernel_rem_pio2+0x266>
 800b040:	4658      	mov	r0, fp
 800b042:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800b178 <__kernel_rem_pio2+0x318>
 800b046:	f000 fa5b 	bl	800b500 <scalbn>
 800b04a:	4630      	mov	r0, r6
 800b04c:	4639      	mov	r1, r7
 800b04e:	ec53 2b10 	vmov	r2, r3, d0
 800b052:	f7f5 f911 	bl	8000278 <__aeabi_dsub>
 800b056:	4606      	mov	r6, r0
 800b058:	460f      	mov	r7, r1
 800b05a:	e034      	b.n	800b0c6 <__kernel_rem_pio2+0x266>
 800b05c:	4b4b      	ldr	r3, [pc, #300]	@ (800b18c <__kernel_rem_pio2+0x32c>)
 800b05e:	2200      	movs	r2, #0
 800b060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b064:	f7f5 fac0 	bl	80005e8 <__aeabi_dmul>
 800b068:	f7f5 fd58 	bl	8000b1c <__aeabi_d2iz>
 800b06c:	f7f5 fa52 	bl	8000514 <__aeabi_i2d>
 800b070:	4b47      	ldr	r3, [pc, #284]	@ (800b190 <__kernel_rem_pio2+0x330>)
 800b072:	2200      	movs	r2, #0
 800b074:	4606      	mov	r6, r0
 800b076:	460f      	mov	r7, r1
 800b078:	f7f5 fab6 	bl	80005e8 <__aeabi_dmul>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b084:	f7f5 f8f8 	bl	8000278 <__aeabi_dsub>
 800b088:	f7f5 fd48 	bl	8000b1c <__aeabi_d2iz>
 800b08c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b090:	f849 0b04 	str.w	r0, [r9], #4
 800b094:	4639      	mov	r1, r7
 800b096:	4630      	mov	r0, r6
 800b098:	f7f5 f8f0 	bl	800027c <__adddf3>
 800b09c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0a4:	e75f      	b.n	800af66 <__kernel_rem_pio2+0x106>
 800b0a6:	d107      	bne.n	800b0b8 <__kernel_rem_pio2+0x258>
 800b0a8:	f108 33ff 	add.w	r3, r8, #4294967295
 800b0ac:	aa0c      	add	r2, sp, #48	@ 0x30
 800b0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0b2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b0b6:	e79e      	b.n	800aff6 <__kernel_rem_pio2+0x196>
 800b0b8:	4b36      	ldr	r3, [pc, #216]	@ (800b194 <__kernel_rem_pio2+0x334>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f7f5 fd1a 	bl	8000af4 <__aeabi_dcmpge>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d143      	bne.n	800b14c <__kernel_rem_pio2+0x2ec>
 800b0c4:	4681      	mov	r9, r0
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	4639      	mov	r1, r7
 800b0ce:	f7f5 fcf3 	bl	8000ab8 <__aeabi_dcmpeq>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	f000 80c1 	beq.w	800b25a <__kernel_rem_pio2+0x3fa>
 800b0d8:	f108 33ff 	add.w	r3, r8, #4294967295
 800b0dc:	2200      	movs	r2, #0
 800b0de:	9900      	ldr	r1, [sp, #0]
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	da70      	bge.n	800b1c6 <__kernel_rem_pio2+0x366>
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	f000 808b 	beq.w	800b200 <__kernel_rem_pio2+0x3a0>
 800b0ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0f0:	f1ab 0b18 	sub.w	fp, fp, #24
 800b0f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d0f6      	beq.n	800b0ea <__kernel_rem_pio2+0x28a>
 800b0fc:	4658      	mov	r0, fp
 800b0fe:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800b178 <__kernel_rem_pio2+0x318>
 800b102:	f000 f9fd 	bl	800b500 <scalbn>
 800b106:	f108 0301 	add.w	r3, r8, #1
 800b10a:	00da      	lsls	r2, r3, #3
 800b10c:	9205      	str	r2, [sp, #20]
 800b10e:	ec55 4b10 	vmov	r4, r5, d0
 800b112:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b114:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800b18c <__kernel_rem_pio2+0x32c>
 800b118:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b11c:	4646      	mov	r6, r8
 800b11e:	f04f 0a00 	mov.w	sl, #0
 800b122:	2e00      	cmp	r6, #0
 800b124:	f280 80d1 	bge.w	800b2ca <__kernel_rem_pio2+0x46a>
 800b128:	4644      	mov	r4, r8
 800b12a:	2c00      	cmp	r4, #0
 800b12c:	f2c0 80ff 	blt.w	800b32e <__kernel_rem_pio2+0x4ce>
 800b130:	4b19      	ldr	r3, [pc, #100]	@ (800b198 <__kernel_rem_pio2+0x338>)
 800b132:	461f      	mov	r7, r3
 800b134:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b136:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b13a:	9306      	str	r3, [sp, #24]
 800b13c:	f04f 0a00 	mov.w	sl, #0
 800b140:	f04f 0b00 	mov.w	fp, #0
 800b144:	2600      	movs	r6, #0
 800b146:	eba8 0504 	sub.w	r5, r8, r4
 800b14a:	e0e4      	b.n	800b316 <__kernel_rem_pio2+0x4b6>
 800b14c:	f04f 0902 	mov.w	r9, #2
 800b150:	e754      	b.n	800affc <__kernel_rem_pio2+0x19c>
 800b152:	f854 3b04 	ldr.w	r3, [r4], #4
 800b156:	bb0d      	cbnz	r5, 800b19c <__kernel_rem_pio2+0x33c>
 800b158:	b123      	cbz	r3, 800b164 <__kernel_rem_pio2+0x304>
 800b15a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b15e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b162:	2301      	movs	r3, #1
 800b164:	3201      	adds	r2, #1
 800b166:	461d      	mov	r5, r3
 800b168:	e74f      	b.n	800b00a <__kernel_rem_pio2+0x1aa>
 800b16a:	bf00      	nop
 800b16c:	f3af 8000 	nop.w
	...
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	0800b958 	.word	0x0800b958
 800b184:	40200000 	.word	0x40200000
 800b188:	3ff00000 	.word	0x3ff00000
 800b18c:	3e700000 	.word	0x3e700000
 800b190:	41700000 	.word	0x41700000
 800b194:	3fe00000 	.word	0x3fe00000
 800b198:	0800b918 	.word	0x0800b918
 800b19c:	1acb      	subs	r3, r1, r3
 800b19e:	e7de      	b.n	800b15e <__kernel_rem_pio2+0x2fe>
 800b1a0:	f108 32ff 	add.w	r2, r8, #4294967295
 800b1a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1ae:	a90c      	add	r1, sp, #48	@ 0x30
 800b1b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b1b4:	e737      	b.n	800b026 <__kernel_rem_pio2+0x1c6>
 800b1b6:	f108 32ff 	add.w	r2, r8, #4294967295
 800b1ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b1c4:	e7f3      	b.n	800b1ae <__kernel_rem_pio2+0x34e>
 800b1c6:	a90c      	add	r1, sp, #48	@ 0x30
 800b1c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	e785      	b.n	800b0de <__kernel_rem_pio2+0x27e>
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	d0fa      	beq.n	800b1d2 <__kernel_rem_pio2+0x372>
 800b1dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b1e2:	eb0d 0503 	add.w	r5, sp, r3
 800b1e6:	9b06      	ldr	r3, [sp, #24]
 800b1e8:	aa20      	add	r2, sp, #128	@ 0x80
 800b1ea:	4443      	add	r3, r8
 800b1ec:	f108 0701 	add.w	r7, r8, #1
 800b1f0:	3d98      	subs	r5, #152	@ 0x98
 800b1f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b1f6:	4444      	add	r4, r8
 800b1f8:	42bc      	cmp	r4, r7
 800b1fa:	da04      	bge.n	800b206 <__kernel_rem_pio2+0x3a6>
 800b1fc:	46a0      	mov	r8, r4
 800b1fe:	e6a2      	b.n	800af46 <__kernel_rem_pio2+0xe6>
 800b200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b202:	2401      	movs	r4, #1
 800b204:	e7e6      	b.n	800b1d4 <__kernel_rem_pio2+0x374>
 800b206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b208:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b20c:	f7f5 f982 	bl	8000514 <__aeabi_i2d>
 800b210:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800b4d0 <__kernel_rem_pio2+0x670>
 800b214:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b21c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b220:	46b2      	mov	sl, r6
 800b222:	f04f 0800 	mov.w	r8, #0
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	4598      	cmp	r8, r3
 800b22a:	dd05      	ble.n	800b238 <__kernel_rem_pio2+0x3d8>
 800b22c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b230:	3701      	adds	r7, #1
 800b232:	eca5 7b02 	vstmia	r5!, {d7}
 800b236:	e7df      	b.n	800b1f8 <__kernel_rem_pio2+0x398>
 800b238:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b23c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b240:	f7f5 f9d2 	bl	80005e8 <__aeabi_dmul>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b24c:	f7f5 f816 	bl	800027c <__adddf3>
 800b250:	f108 0801 	add.w	r8, r8, #1
 800b254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b258:	e7e5      	b.n	800b226 <__kernel_rem_pio2+0x3c6>
 800b25a:	f1cb 0000 	rsb	r0, fp, #0
 800b25e:	ec47 6b10 	vmov	d0, r6, r7
 800b262:	f000 f94d 	bl	800b500 <scalbn>
 800b266:	ec55 4b10 	vmov	r4, r5, d0
 800b26a:	4b9b      	ldr	r3, [pc, #620]	@ (800b4d8 <__kernel_rem_pio2+0x678>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	4620      	mov	r0, r4
 800b270:	4629      	mov	r1, r5
 800b272:	f7f5 fc3f 	bl	8000af4 <__aeabi_dcmpge>
 800b276:	b300      	cbz	r0, 800b2ba <__kernel_rem_pio2+0x45a>
 800b278:	4b98      	ldr	r3, [pc, #608]	@ (800b4dc <__kernel_rem_pio2+0x67c>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	4620      	mov	r0, r4
 800b27e:	4629      	mov	r1, r5
 800b280:	f7f5 f9b2 	bl	80005e8 <__aeabi_dmul>
 800b284:	f7f5 fc4a 	bl	8000b1c <__aeabi_d2iz>
 800b288:	4606      	mov	r6, r0
 800b28a:	f7f5 f943 	bl	8000514 <__aeabi_i2d>
 800b28e:	4b92      	ldr	r3, [pc, #584]	@ (800b4d8 <__kernel_rem_pio2+0x678>)
 800b290:	2200      	movs	r2, #0
 800b292:	f7f5 f9a9 	bl	80005e8 <__aeabi_dmul>
 800b296:	460b      	mov	r3, r1
 800b298:	4602      	mov	r2, r0
 800b29a:	4629      	mov	r1, r5
 800b29c:	4620      	mov	r0, r4
 800b29e:	f7f4 ffeb 	bl	8000278 <__aeabi_dsub>
 800b2a2:	f7f5 fc3b 	bl	8000b1c <__aeabi_d2iz>
 800b2a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2a8:	f10b 0b18 	add.w	fp, fp, #24
 800b2ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b2b0:	f108 0801 	add.w	r8, r8, #1
 800b2b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b2b8:	e720      	b.n	800b0fc <__kernel_rem_pio2+0x29c>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	4629      	mov	r1, r5
 800b2be:	f7f5 fc2d 	bl	8000b1c <__aeabi_d2iz>
 800b2c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b2c8:	e718      	b.n	800b0fc <__kernel_rem_pio2+0x29c>
 800b2ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b2d0:	f7f5 f920 	bl	8000514 <__aeabi_i2d>
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	f7f5 f986 	bl	80005e8 <__aeabi_dmul>
 800b2dc:	4652      	mov	r2, sl
 800b2de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 f97e 	bl	80005e8 <__aeabi_dmul>
 800b2ec:	3e01      	subs	r6, #1
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	e716      	b.n	800b122 <__kernel_rem_pio2+0x2c2>
 800b2f4:	9906      	ldr	r1, [sp, #24]
 800b2f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b2fa:	9106      	str	r1, [sp, #24]
 800b2fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b300:	f7f5 f972 	bl	80005e8 <__aeabi_dmul>
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	4650      	mov	r0, sl
 800b30a:	4659      	mov	r1, fp
 800b30c:	f7f4 ffb6 	bl	800027c <__adddf3>
 800b310:	3601      	adds	r6, #1
 800b312:	4682      	mov	sl, r0
 800b314:	468b      	mov	fp, r1
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	429e      	cmp	r6, r3
 800b31a:	dc01      	bgt.n	800b320 <__kernel_rem_pio2+0x4c0>
 800b31c:	42ae      	cmp	r6, r5
 800b31e:	dde9      	ble.n	800b2f4 <__kernel_rem_pio2+0x494>
 800b320:	ab48      	add	r3, sp, #288	@ 0x120
 800b322:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b326:	e9c5 ab00 	strd	sl, fp, [r5]
 800b32a:	3c01      	subs	r4, #1
 800b32c:	e6fd      	b.n	800b12a <__kernel_rem_pio2+0x2ca>
 800b32e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b330:	2b02      	cmp	r3, #2
 800b332:	dc0b      	bgt.n	800b34c <__kernel_rem_pio2+0x4ec>
 800b334:	2b00      	cmp	r3, #0
 800b336:	dc35      	bgt.n	800b3a4 <__kernel_rem_pio2+0x544>
 800b338:	d059      	beq.n	800b3ee <__kernel_rem_pio2+0x58e>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	f003 0007 	and.w	r0, r3, #7
 800b340:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b344:	ecbd 8b02 	vpop	{d8}
 800b348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d1f3      	bne.n	800b33a <__kernel_rem_pio2+0x4da>
 800b352:	9b05      	ldr	r3, [sp, #20]
 800b354:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b358:	eb0d 0403 	add.w	r4, sp, r3
 800b35c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b360:	4625      	mov	r5, r4
 800b362:	46c2      	mov	sl, r8
 800b364:	f1ba 0f00 	cmp.w	sl, #0
 800b368:	dc69      	bgt.n	800b43e <__kernel_rem_pio2+0x5de>
 800b36a:	4645      	mov	r5, r8
 800b36c:	2d01      	cmp	r5, #1
 800b36e:	f300 8087 	bgt.w	800b480 <__kernel_rem_pio2+0x620>
 800b372:	9c05      	ldr	r4, [sp, #20]
 800b374:	ab48      	add	r3, sp, #288	@ 0x120
 800b376:	441c      	add	r4, r3
 800b378:	2000      	movs	r0, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	f1b8 0f01 	cmp.w	r8, #1
 800b380:	f300 809c 	bgt.w	800b4bc <__kernel_rem_pio2+0x65c>
 800b384:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800b388:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800b38c:	f1b9 0f00 	cmp.w	r9, #0
 800b390:	f040 80a6 	bne.w	800b4e0 <__kernel_rem_pio2+0x680>
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	e9c3 5600 	strd	r5, r6, [r3]
 800b39a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b39e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b3a2:	e7ca      	b.n	800b33a <__kernel_rem_pio2+0x4da>
 800b3a4:	9d05      	ldr	r5, [sp, #20]
 800b3a6:	ab48      	add	r3, sp, #288	@ 0x120
 800b3a8:	441d      	add	r5, r3
 800b3aa:	4644      	mov	r4, r8
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	2c00      	cmp	r4, #0
 800b3b2:	da35      	bge.n	800b420 <__kernel_rem_pio2+0x5c0>
 800b3b4:	f1b9 0f00 	cmp.w	r9, #0
 800b3b8:	d038      	beq.n	800b42c <__kernel_rem_pio2+0x5cc>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3c0:	9c04      	ldr	r4, [sp, #16]
 800b3c2:	e9c4 2300 	strd	r2, r3, [r4]
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b3ce:	f7f4 ff53 	bl	8000278 <__aeabi_dsub>
 800b3d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800b3d4:	2401      	movs	r4, #1
 800b3d6:	45a0      	cmp	r8, r4
 800b3d8:	da2b      	bge.n	800b432 <__kernel_rem_pio2+0x5d2>
 800b3da:	f1b9 0f00 	cmp.w	r9, #0
 800b3de:	d002      	beq.n	800b3e6 <__kernel_rem_pio2+0x586>
 800b3e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	9b04      	ldr	r3, [sp, #16]
 800b3e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b3ec:	e7a5      	b.n	800b33a <__kernel_rem_pio2+0x4da>
 800b3ee:	9c05      	ldr	r4, [sp, #20]
 800b3f0:	ab48      	add	r3, sp, #288	@ 0x120
 800b3f2:	441c      	add	r4, r3
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	f1b8 0f00 	cmp.w	r8, #0
 800b3fc:	da09      	bge.n	800b412 <__kernel_rem_pio2+0x5b2>
 800b3fe:	f1b9 0f00 	cmp.w	r9, #0
 800b402:	d002      	beq.n	800b40a <__kernel_rem_pio2+0x5aa>
 800b404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b408:	4619      	mov	r1, r3
 800b40a:	9b04      	ldr	r3, [sp, #16]
 800b40c:	e9c3 0100 	strd	r0, r1, [r3]
 800b410:	e793      	b.n	800b33a <__kernel_rem_pio2+0x4da>
 800b412:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b416:	f7f4 ff31 	bl	800027c <__adddf3>
 800b41a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b41e:	e7eb      	b.n	800b3f8 <__kernel_rem_pio2+0x598>
 800b420:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b424:	f7f4 ff2a 	bl	800027c <__adddf3>
 800b428:	3c01      	subs	r4, #1
 800b42a:	e7c1      	b.n	800b3b0 <__kernel_rem_pio2+0x550>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	e7c6      	b.n	800b3c0 <__kernel_rem_pio2+0x560>
 800b432:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b436:	f7f4 ff21 	bl	800027c <__adddf3>
 800b43a:	3401      	adds	r4, #1
 800b43c:	e7cb      	b.n	800b3d6 <__kernel_rem_pio2+0x576>
 800b43e:	ed35 7b02 	vldmdb	r5!, {d7}
 800b442:	ed8d 7b00 	vstr	d7, [sp]
 800b446:	ed95 7b02 	vldr	d7, [r5, #8]
 800b44a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b44e:	ec53 2b17 	vmov	r2, r3, d7
 800b452:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b456:	f7f4 ff11 	bl	800027c <__adddf3>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b466:	f7f4 ff07 	bl	8000278 <__aeabi_dsub>
 800b46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b46e:	f7f4 ff05 	bl	800027c <__adddf3>
 800b472:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b476:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b47a:	e9c5 6700 	strd	r6, r7, [r5]
 800b47e:	e771      	b.n	800b364 <__kernel_rem_pio2+0x504>
 800b480:	ed34 7b02 	vldmdb	r4!, {d7}
 800b484:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b488:	ec51 0b17 	vmov	r0, r1, d7
 800b48c:	4652      	mov	r2, sl
 800b48e:	465b      	mov	r3, fp
 800b490:	ed8d 7b00 	vstr	d7, [sp]
 800b494:	f7f4 fef2 	bl	800027c <__adddf3>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4606      	mov	r6, r0
 800b49e:	460f      	mov	r7, r1
 800b4a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4a4:	f7f4 fee8 	bl	8000278 <__aeabi_dsub>
 800b4a8:	4652      	mov	r2, sl
 800b4aa:	465b      	mov	r3, fp
 800b4ac:	f7f4 fee6 	bl	800027c <__adddf3>
 800b4b0:	3d01      	subs	r5, #1
 800b4b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4b6:	e9c4 6700 	strd	r6, r7, [r4]
 800b4ba:	e757      	b.n	800b36c <__kernel_rem_pio2+0x50c>
 800b4bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b4c0:	f7f4 fedc 	bl	800027c <__adddf3>
 800b4c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4c8:	e758      	b.n	800b37c <__kernel_rem_pio2+0x51c>
 800b4ca:	bf00      	nop
 800b4cc:	f3af 8000 	nop.w
	...
 800b4d8:	41700000 	.word	0x41700000
 800b4dc:	3e700000 	.word	0x3e700000
 800b4e0:	9b04      	ldr	r3, [sp, #16]
 800b4e2:	9a04      	ldr	r2, [sp, #16]
 800b4e4:	601d      	str	r5, [r3, #0]
 800b4e6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800b4ea:	605c      	str	r4, [r3, #4]
 800b4ec:	609f      	str	r7, [r3, #8]
 800b4ee:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800b4f2:	60d3      	str	r3, [r2, #12]
 800b4f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4f8:	6110      	str	r0, [r2, #16]
 800b4fa:	6153      	str	r3, [r2, #20]
 800b4fc:	e71d      	b.n	800b33a <__kernel_rem_pio2+0x4da>
 800b4fe:	bf00      	nop

0800b500 <scalbn>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	ec55 4b10 	vmov	r4, r5, d0
 800b506:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b50a:	4606      	mov	r6, r0
 800b50c:	462b      	mov	r3, r5
 800b50e:	b991      	cbnz	r1, 800b536 <scalbn+0x36>
 800b510:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b514:	4323      	orrs	r3, r4
 800b516:	d03b      	beq.n	800b590 <scalbn+0x90>
 800b518:	4b33      	ldr	r3, [pc, #204]	@ (800b5e8 <scalbn+0xe8>)
 800b51a:	4620      	mov	r0, r4
 800b51c:	4629      	mov	r1, r5
 800b51e:	2200      	movs	r2, #0
 800b520:	f7f5 f862 	bl	80005e8 <__aeabi_dmul>
 800b524:	4b31      	ldr	r3, [pc, #196]	@ (800b5ec <scalbn+0xec>)
 800b526:	429e      	cmp	r6, r3
 800b528:	4604      	mov	r4, r0
 800b52a:	460d      	mov	r5, r1
 800b52c:	da0f      	bge.n	800b54e <scalbn+0x4e>
 800b52e:	a326      	add	r3, pc, #152	@ (adr r3, 800b5c8 <scalbn+0xc8>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	e01e      	b.n	800b574 <scalbn+0x74>
 800b536:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b53a:	4291      	cmp	r1, r2
 800b53c:	d10b      	bne.n	800b556 <scalbn+0x56>
 800b53e:	4622      	mov	r2, r4
 800b540:	4620      	mov	r0, r4
 800b542:	4629      	mov	r1, r5
 800b544:	f7f4 fe9a 	bl	800027c <__adddf3>
 800b548:	4604      	mov	r4, r0
 800b54a:	460d      	mov	r5, r1
 800b54c:	e020      	b.n	800b590 <scalbn+0x90>
 800b54e:	460b      	mov	r3, r1
 800b550:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b554:	3936      	subs	r1, #54	@ 0x36
 800b556:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b55a:	4296      	cmp	r6, r2
 800b55c:	dd0d      	ble.n	800b57a <scalbn+0x7a>
 800b55e:	2d00      	cmp	r5, #0
 800b560:	a11b      	add	r1, pc, #108	@ (adr r1, 800b5d0 <scalbn+0xd0>)
 800b562:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b566:	da02      	bge.n	800b56e <scalbn+0x6e>
 800b568:	a11b      	add	r1, pc, #108	@ (adr r1, 800b5d8 <scalbn+0xd8>)
 800b56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56e:	a318      	add	r3, pc, #96	@ (adr r3, 800b5d0 <scalbn+0xd0>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f7f5 f838 	bl	80005e8 <__aeabi_dmul>
 800b578:	e7e6      	b.n	800b548 <scalbn+0x48>
 800b57a:	1872      	adds	r2, r6, r1
 800b57c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b580:	428a      	cmp	r2, r1
 800b582:	dcec      	bgt.n	800b55e <scalbn+0x5e>
 800b584:	2a00      	cmp	r2, #0
 800b586:	dd06      	ble.n	800b596 <scalbn+0x96>
 800b588:	f36f 531e 	bfc	r3, #20, #11
 800b58c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b590:	ec45 4b10 	vmov	d0, r4, r5
 800b594:	bd70      	pop	{r4, r5, r6, pc}
 800b596:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b59a:	da08      	bge.n	800b5ae <scalbn+0xae>
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b5c8 <scalbn+0xc8>)
 800b5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a4:	dac3      	bge.n	800b52e <scalbn+0x2e>
 800b5a6:	a10e      	add	r1, pc, #56	@ (adr r1, 800b5e0 <scalbn+0xe0>)
 800b5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5ac:	e7bf      	b.n	800b52e <scalbn+0x2e>
 800b5ae:	3236      	adds	r2, #54	@ 0x36
 800b5b0:	f36f 531e 	bfc	r3, #20, #11
 800b5b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f0 <scalbn+0xf0>)
 800b5bc:	4629      	mov	r1, r5
 800b5be:	2200      	movs	r2, #0
 800b5c0:	e7d8      	b.n	800b574 <scalbn+0x74>
 800b5c2:	bf00      	nop
 800b5c4:	f3af 8000 	nop.w
 800b5c8:	c2f8f359 	.word	0xc2f8f359
 800b5cc:	01a56e1f 	.word	0x01a56e1f
 800b5d0:	8800759c 	.word	0x8800759c
 800b5d4:	7e37e43c 	.word	0x7e37e43c
 800b5d8:	8800759c 	.word	0x8800759c
 800b5dc:	fe37e43c 	.word	0xfe37e43c
 800b5e0:	c2f8f359 	.word	0xc2f8f359
 800b5e4:	81a56e1f 	.word	0x81a56e1f
 800b5e8:	43500000 	.word	0x43500000
 800b5ec:	ffff3cb0 	.word	0xffff3cb0
 800b5f0:	3c900000 	.word	0x3c900000
 800b5f4:	00000000 	.word	0x00000000

0800b5f8 <floor>:
 800b5f8:	ec51 0b10 	vmov	r0, r1, d0
 800b5fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b604:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b608:	2e13      	cmp	r6, #19
 800b60a:	460c      	mov	r4, r1
 800b60c:	4605      	mov	r5, r0
 800b60e:	4680      	mov	r8, r0
 800b610:	dc34      	bgt.n	800b67c <floor+0x84>
 800b612:	2e00      	cmp	r6, #0
 800b614:	da17      	bge.n	800b646 <floor+0x4e>
 800b616:	a332      	add	r3, pc, #200	@ (adr r3, 800b6e0 <floor+0xe8>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	f7f4 fe2e 	bl	800027c <__adddf3>
 800b620:	2200      	movs	r2, #0
 800b622:	2300      	movs	r3, #0
 800b624:	f7f5 fa70 	bl	8000b08 <__aeabi_dcmpgt>
 800b628:	b150      	cbz	r0, 800b640 <floor+0x48>
 800b62a:	2c00      	cmp	r4, #0
 800b62c:	da55      	bge.n	800b6da <floor+0xe2>
 800b62e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b632:	432c      	orrs	r4, r5
 800b634:	2500      	movs	r5, #0
 800b636:	42ac      	cmp	r4, r5
 800b638:	4c2b      	ldr	r4, [pc, #172]	@ (800b6e8 <floor+0xf0>)
 800b63a:	bf08      	it	eq
 800b63c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b640:	4621      	mov	r1, r4
 800b642:	4628      	mov	r0, r5
 800b644:	e023      	b.n	800b68e <floor+0x96>
 800b646:	4f29      	ldr	r7, [pc, #164]	@ (800b6ec <floor+0xf4>)
 800b648:	4137      	asrs	r7, r6
 800b64a:	ea01 0307 	and.w	r3, r1, r7
 800b64e:	4303      	orrs	r3, r0
 800b650:	d01d      	beq.n	800b68e <floor+0x96>
 800b652:	a323      	add	r3, pc, #140	@ (adr r3, 800b6e0 <floor+0xe8>)
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f7f4 fe10 	bl	800027c <__adddf3>
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	f7f5 fa52 	bl	8000b08 <__aeabi_dcmpgt>
 800b664:	2800      	cmp	r0, #0
 800b666:	d0eb      	beq.n	800b640 <floor+0x48>
 800b668:	2c00      	cmp	r4, #0
 800b66a:	bfbe      	ittt	lt
 800b66c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b670:	4133      	asrlt	r3, r6
 800b672:	18e4      	addlt	r4, r4, r3
 800b674:	ea24 0407 	bic.w	r4, r4, r7
 800b678:	2500      	movs	r5, #0
 800b67a:	e7e1      	b.n	800b640 <floor+0x48>
 800b67c:	2e33      	cmp	r6, #51	@ 0x33
 800b67e:	dd0a      	ble.n	800b696 <floor+0x9e>
 800b680:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b684:	d103      	bne.n	800b68e <floor+0x96>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	f7f4 fdf7 	bl	800027c <__adddf3>
 800b68e:	ec41 0b10 	vmov	d0, r0, r1
 800b692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b696:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b69a:	f04f 37ff 	mov.w	r7, #4294967295
 800b69e:	40df      	lsrs	r7, r3
 800b6a0:	4207      	tst	r7, r0
 800b6a2:	d0f4      	beq.n	800b68e <floor+0x96>
 800b6a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6e0 <floor+0xe8>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	f7f4 fde7 	bl	800027c <__adddf3>
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f7f5 fa29 	bl	8000b08 <__aeabi_dcmpgt>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d0c2      	beq.n	800b640 <floor+0x48>
 800b6ba:	2c00      	cmp	r4, #0
 800b6bc:	da0a      	bge.n	800b6d4 <floor+0xdc>
 800b6be:	2e14      	cmp	r6, #20
 800b6c0:	d101      	bne.n	800b6c6 <floor+0xce>
 800b6c2:	3401      	adds	r4, #1
 800b6c4:	e006      	b.n	800b6d4 <floor+0xdc>
 800b6c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	40b3      	lsls	r3, r6
 800b6ce:	441d      	add	r5, r3
 800b6d0:	4545      	cmp	r5, r8
 800b6d2:	d3f6      	bcc.n	800b6c2 <floor+0xca>
 800b6d4:	ea25 0507 	bic.w	r5, r5, r7
 800b6d8:	e7b2      	b.n	800b640 <floor+0x48>
 800b6da:	2500      	movs	r5, #0
 800b6dc:	462c      	mov	r4, r5
 800b6de:	e7af      	b.n	800b640 <floor+0x48>
 800b6e0:	8800759c 	.word	0x8800759c
 800b6e4:	7e37e43c 	.word	0x7e37e43c
 800b6e8:	bff00000 	.word	0xbff00000
 800b6ec:	000fffff 	.word	0x000fffff

0800b6f0 <_init>:
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f2:	bf00      	nop
 800b6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6f6:	bc08      	pop	{r3}
 800b6f8:	469e      	mov	lr, r3
 800b6fa:	4770      	bx	lr

0800b6fc <_fini>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	bf00      	nop
 800b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b702:	bc08      	pop	{r3}
 800b704:	469e      	mov	lr, r3
 800b706:	4770      	bx	lr
