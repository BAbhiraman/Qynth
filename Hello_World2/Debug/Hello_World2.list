
Hello_World2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800c568  0800c568  0000d568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c830  0800c830  0000e088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c830  0800c830  0000d830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c838  0800c838  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c838  0800c838  0000d838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c83c  0800c83c  0000d83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c840  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000a20  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa8  20000aa8  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001546f  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b15  00000000  00000000  00023527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00027040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da5  00000000  00000000  00028238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cab  00000000  00000000  00028fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c62  00000000  00000000  0004dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdda9  00000000  00000000  000668ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134693  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005608  00000000  00000000  001346d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00139ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c550 	.word	0x0800c550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c550 	.word	0x0800c550

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ea0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ea4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d013      	beq.n	8000ed8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000eb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eb4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000eb8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00b      	beq.n	8000ed8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ec0:	e000      	b.n	8000ec4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ec2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f9      	beq.n	8000ec2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ece:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	f5ad 4d00 	sub.w	sp, sp, #32768	@ 0x8000
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f000 fdb9 	bl	8001a68 <HAL_Init>
  uint8_t buf[12];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f955 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 fa51 	bl	80013a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000efe:	f000 f9bb 	bl	8001278 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f02:	f000 f9e7 	bl	80012d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f06:	f000 fa15 	bl	8001334 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f0a:	f009 f855 	bl	8009fb8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  // DAC Reset is active low, so pull the pin high.
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2110      	movs	r1, #16
 8000f12:	489b      	ldr	r0, [pc, #620]	@ (8001180 <main+0x298>)
 8000f14:	f001 f8ec 	bl	80020f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4898      	ldr	r0, [pc, #608]	@ (8001180 <main+0x298>)
 8000f1e:	f001 f8e7 	bl	80020f0 <HAL_GPIO_WritePin>
  printf("Hello world \r\n");
 8000f22:	4898      	ldr	r0, [pc, #608]	@ (8001184 <main+0x29c>)
 8000f24:	f009 fd3a 	bl	800a99c <puts>
  HAL_Delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fe0f 	bl	8001b4c <HAL_Delay>

  HAL_StatusTypeDef res;
  int16_t signal[16384]; //was 46876
  int nsamples = sizeof(signal) / sizeof(signal[0]);
 8000f2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f32:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8000f36:	f102 0220 	add.w	r2, r2, #32
 8000f3a:	6013      	str	r3, [r2, #0]

  int i = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8000f42:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8000f46:	6013      	str	r3, [r2, #0]
  while(i < nsamples) {
 8000f48:	e07a      	b.n	8001040 <main+0x158>
      double t = ((double)i/2.0)/((double)nsamples);
 8000f4a:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000f4e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f7ff fade 	bl	8000514 <__aeabi_i2d>
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f60:	f7ff fc6c 	bl	800083c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4614      	mov	r4, r2
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000f70:	f103 0320 	add.w	r3, r3, #32
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f7ff facd 	bl	8000514 <__aeabi_i2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4620      	mov	r0, r4
 8000f80:	4629      	mov	r1, r5
 8000f82:	f7ff fc5b 	bl	800083c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	f507 4100 	add.w	r1, r7, #32768	@ 0x8000
 8000f8e:	f101 0110 	add.w	r1, r1, #16
 8000f92:	e9c1 2300 	strd	r2, r3, [r1]
      signal[i] = 32767*sin(100.0 * TAU * t); // left
 8000f96:	a376      	add	r3, pc, #472	@ (adr r3, 8001170 <main+0x288>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f507 4100 	add.w	r1, r7, #32768	@ 0x8000
 8000fa0:	f101 0110 	add.w	r1, r1, #16
 8000fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fa8:	f7ff fb1e 	bl	80005e8 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	ec43 2b17 	vmov	d7, r2, r3
 8000fb4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb8:	eef0 0a67 	vmov.f32	s1, s15
 8000fbc:	f00a faa4 	bl	800b508 <sin>
 8000fc0:	ec51 0b10 	vmov	r0, r1, d0
 8000fc4:	a36c      	add	r3, pc, #432	@ (adr r3, 8001178 <main+0x290>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb0d 	bl	80005e8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fda1 	bl	8000b1c <__aeabi_d2iz>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000fe8:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	440b      	add	r3, r1
 8000ff2:	f823 2c24 	strh.w	r2, [r3, #-36]
      signal[i+1] = signal[i]; // right
 8000ff6:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8000ffa:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001006:	4619      	mov	r1, r3
 8001008:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 800100c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	440b      	add	r3, r1
 8001016:	f933 1c24 	ldrsh.w	r1, [r3, #-36]
 800101a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800101e:	4618      	mov	r0, r3
 8001020:	0053      	lsls	r3, r2, #1
 8001022:	4403      	add	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	f823 2c24 	strh.w	r2, [r3, #-36]
      i += 2;
 800102a:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 800102e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3302      	adds	r3, #2
 8001036:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 800103a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800103e:	6013      	str	r3, [r2, #0]
  while(i < nsamples) {
 8001040:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001044:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 800104e:	f103 0320 	add.w	r3, r3, #32
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	f6ff af78 	blt.w	8000f4a <main+0x62>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800105a:	f008 ffd3 	bl	800a004 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 800105e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001062:	4847      	ldr	r0, [pc, #284]	@ (8001180 <main+0x298>)
 8001064:	f001 f85d 	bl	8002122 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8001068:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800106c:	f000 fd6e 	bl	8001b4c <HAL_Delay>
    printf("In loop \r\n");
 8001070:	4845      	ldr	r0, [pc, #276]	@ (8001188 <main+0x2a0>)
 8001072:	f009 fc93 	bl	800a99c <puts>

    // Tell CL we want to read ID register
    buf[0] = 0x01; // ID register
 8001076:	2301      	movs	r3, #1
 8001078:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 800107c:	f102 0204 	add.w	r2, r2, #4
 8001080:	7013      	strb	r3, [r2, #0]
    res = HAL_I2C_Master_Transmit(&hi2c1, DACADDR, buf, 1, HAL_MAX_DELAY);
 8001082:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8001086:	f102 0204 	add.w	r2, r2, #4
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2194      	movs	r1, #148	@ 0x94
 8001094:	483d      	ldr	r0, [pc, #244]	@ (800118c <main+0x2a4>)
 8001096:	f003 fad7 	bl	8004648 <HAL_I2C_Master_Transmit>
 800109a:	4603      	mov	r3, r0
 800109c:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 80010a0:	f102 021f 	add.w	r2, r2, #31
 80010a4:	7013      	strb	r3, [r2, #0]
	if(res != HAL_OK) {
 80010a6:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 80010aa:	f103 031f 	add.w	r3, r3, #31
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <main+0x1e0>
		printf("I2C1 - Master Transmit ERROR, res = %d!\r\n", res);
 80010b4:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 80010b8:	f103 031f 	add.w	r3, r3, #31
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	4833      	ldr	r0, [pc, #204]	@ (8001190 <main+0x2a8>)
 80010c2:	f009 fc03 	bl	800a8cc <iprintf>
 80010c6:	e02b      	b.n	8001120 <main+0x238>
		//break;
	}
	else {
	// Read back data from CL ID register
		res = HAL_I2C_Master_Receive(&hi2c1, DACADDR, buf, 1, HAL_MAX_DELAY);
 80010c8:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 80010cc:	f102 0204 	add.w	r2, r2, #4
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2194      	movs	r1, #148	@ 0x94
 80010da:	482c      	ldr	r0, [pc, #176]	@ (800118c <main+0x2a4>)
 80010dc:	f003 fbb2 	bl	8004844 <HAL_I2C_Master_Receive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 80010e6:	f102 021f 	add.w	r2, r2, #31
 80010ea:	7013      	strb	r3, [r2, #0]
		if(res != HAL_OK) {
 80010ec:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 80010f0:	f103 031f 	add.w	r3, r3, #31
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <main+0x226>
			printf("I2C1 - Master Receive ERROR, res = %d!\r\n", res);
 80010fa:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 80010fe:	f103 031f 	add.w	r3, r3, #31
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	4823      	ldr	r0, [pc, #140]	@ (8001194 <main+0x2ac>)
 8001108:	f009 fbe0 	bl	800a8cc <iprintf>
 800110c:	e008      	b.n	8001120 <main+0x238>
			//break;
		}
		else {
			printf("Received %d \r\n", buf[0]);
 800110e:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001112:	f103 0304 	add.w	r3, r3, #4
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	481f      	ldr	r0, [pc, #124]	@ (8001198 <main+0x2b0>)
 800111c:	f009 fbd6 	bl	800a8cc <iprintf>

		}
	}

	// Attempt to transmit audio data to DAC
	res = HAL_I2S_Transmit(&hi2s3, (uint16_t*)signal, nsamples, HAL_MAX_DELAY);
 8001120:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 8001124:	f103 0320 	add.w	r3, r3, #32
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29a      	uxth	r2, r3
 800112c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001130:	3924      	subs	r1, #36	@ 0x24
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	4819      	ldr	r0, [pc, #100]	@ (800119c <main+0x2b4>)
 8001138:	f004 fa7c 	bl	8005634 <HAL_I2S_Transmit>
 800113c:	4603      	mov	r3, r0
 800113e:	f507 4200 	add.w	r2, r7, #32768	@ 0x8000
 8001142:	f102 021f 	add.w	r2, r2, #31
 8001146:	7013      	strb	r3, [r2, #0]
	if(res != HAL_OK) {
 8001148:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 800114c:	f103 031f 	add.w	r3, r3, #31
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d081      	beq.n	800105a <main+0x172>
		printf("I2S - ERROR, res = %d!\r\n", res);
 8001156:	f507 4300 	add.w	r3, r7, #32768	@ 0x8000
 800115a:	f103 031f 	add.w	r3, r3, #31
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	480f      	ldr	r0, [pc, #60]	@ (80011a0 <main+0x2b8>)
 8001164:	f009 fbb2 	bl	800a8cc <iprintf>
    MX_USB_HOST_Process();
 8001168:	e777      	b.n	800105a <main+0x172>
 800116a:	bf00      	nop
 800116c:	f3af 8000 	nop.w
 8001170:	59d5433b 	.word	0x59d5433b
 8001174:	4083a28c 	.word	0x4083a28c
 8001178:	00000000 	.word	0x00000000
 800117c:	40dfffc0 	.word	0x40dfffc0
 8001180:	40020c00 	.word	0x40020c00
 8001184:	0800c568 	.word	0x0800c568
 8001188:	0800c578 	.word	0x0800c578
 800118c:	200000a4 	.word	0x200000a4
 8001190:	0800c584 	.word	0x0800c584
 8001194:	0800c5b0 	.word	0x0800c5b0
 8001198:	0800c5dc 	.word	0x0800c5dc
 800119c:	200000f8 	.word	0x200000f8
 80011a0:	0800c5ec 	.word	0x0800c5ec

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2230      	movs	r2, #48	@ 0x30
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f009 fcd2 	bl	800ab5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <SystemClock_Config+0xcc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <SystemClock_Config+0xcc>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d8:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <SystemClock_Config+0xcc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <SystemClock_Config+0xd0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <SystemClock_Config+0xd0>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <SystemClock_Config+0xd0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001214:	2308      	movs	r3, #8
 8001216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001218:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800121c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121e:	2302      	movs	r3, #2
 8001220:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001222:	2307      	movs	r3, #7
 8001224:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fe88 	bl	8005f40 <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001236:	f000 f9db 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123a:	230f      	movs	r3, #15
 800123c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2302      	movs	r3, #2
 8001240:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001246:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001250:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2105      	movs	r1, #5
 8001258:	4618      	mov	r0, r3
 800125a:	f005 f8e9 	bl	8006430 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001264:	f000 f9c4 	bl	80015f0 <Error_Handler>
  }
}
 8001268:	bf00      	nop
 800126a:	3750      	adds	r7, #80	@ 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f003 f883 	bl	80043c0 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 f996 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200000a4 	.word	0x200000a4
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <MX_I2S3_Init+0x54>)
 80012da:	4a14      	ldr	r2, [pc, #80]	@ (800132c <MX_I2S3_Init+0x58>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_I2S3_Init+0x54>)
 80012e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <MX_I2S3_Init+0x54>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_I2S3_Init+0x54>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <MX_I2S3_Init+0x54>)
 80012f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <MX_I2S3_Init+0x54>)
 80012fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <MX_I2S3_Init+0x5c>)
 80012fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_I2S3_Init+0x54>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <MX_I2S3_Init+0x54>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_I2S3_Init+0x54>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_I2S3_Init+0x54>)
 8001314:	f004 f84e 	bl	80053b4 <HAL_I2S_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800131e:	f000 f967 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000f8 	.word	0x200000f8
 800132c:	40003c00 	.word	0x40003c00
 8001330:	00017700 	.word	0x00017700

08001334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001338:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <MX_SPI1_Init+0x64>)
 800133a:	4a18      	ldr	r2, [pc, #96]	@ (800139c <MX_SPI1_Init+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800133e:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001340:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_SPI1_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_SPI1_Init+0x64>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001364:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <MX_SPI1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <MX_SPI1_Init+0x64>)
 800137a:	2200      	movs	r2, #0
 800137c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001380:	220a      	movs	r2, #10
 8001382:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_SPI1_Init+0x64>)
 8001386:	f005 fba1 	bl	8006acc <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001390:	f000 f92e 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000140 	.word	0x20000140
 800139c:	40013000 	.word	0x40013000

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	@ 0x30
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	4b79      	ldr	r3, [pc, #484]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a78      	ldr	r2, [pc, #480]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b76      	ldr	r3, [pc, #472]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	4b72      	ldr	r3, [pc, #456]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a71      	ldr	r2, [pc, #452]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <MX_GPIO_Init+0x200>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <MX_GPIO_Init+0x200>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b64      	ldr	r3, [pc, #400]	@ (80015a0 <MX_GPIO_Init+0x200>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a63      	ldr	r2, [pc, #396]	@ (80015a0 <MX_GPIO_Init+0x200>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b61      	ldr	r3, [pc, #388]	@ (80015a0 <MX_GPIO_Init+0x200>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b5d      	ldr	r3, [pc, #372]	@ (80015a0 <MX_GPIO_Init+0x200>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a5c      	ldr	r2, [pc, #368]	@ (80015a0 <MX_GPIO_Init+0x200>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b5a      	ldr	r3, [pc, #360]	@ (80015a0 <MX_GPIO_Init+0x200>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b56      	ldr	r3, [pc, #344]	@ (80015a0 <MX_GPIO_Init+0x200>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a55      	ldr	r2, [pc, #340]	@ (80015a0 <MX_GPIO_Init+0x200>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <MX_GPIO_Init+0x200>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2108      	movs	r1, #8
 8001462:	4850      	ldr	r0, [pc, #320]	@ (80015a4 <MX_GPIO_Init+0x204>)
 8001464:	f000 fe44 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2101      	movs	r1, #1
 800146c:	484e      	ldr	r0, [pc, #312]	@ (80015a8 <MX_GPIO_Init+0x208>)
 800146e:	f000 fe3f 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001472:	2200      	movs	r2, #0
 8001474:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001478:	484c      	ldr	r0, [pc, #304]	@ (80015ac <MX_GPIO_Init+0x20c>)
 800147a:	f000 fe39 	bl	80020f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800147e:	2308      	movs	r3, #8
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	4843      	ldr	r0, [pc, #268]	@ (80015a4 <MX_GPIO_Init+0x204>)
 8001496:	f000 fc8f 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	483d      	ldr	r0, [pc, #244]	@ (80015a8 <MX_GPIO_Init+0x208>)
 80014b2:	f000 fc81 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014b6:	2308      	movs	r3, #8
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c6:	2305      	movs	r3, #5
 80014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4835      	ldr	r0, [pc, #212]	@ (80015a8 <MX_GPIO_Init+0x208>)
 80014d2:	f000 fc71 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014da:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4831      	ldr	r0, [pc, #196]	@ (80015b0 <MX_GPIO_Init+0x210>)
 80014ec:	f000 fc64 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014f0:	2304      	movs	r3, #4
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	482c      	ldr	r0, [pc, #176]	@ (80015b4 <MX_GPIO_Init+0x214>)
 8001504:	f000 fc58 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800151a:	2305      	movs	r3, #5
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4823      	ldr	r0, [pc, #140]	@ (80015b4 <MX_GPIO_Init+0x214>)
 8001526:	f000 fc47 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800152a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	481a      	ldr	r0, [pc, #104]	@ (80015ac <MX_GPIO_Init+0x20c>)
 8001544:	f000 fc38 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001548:	2310      	movs	r3, #16
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001550:	2301      	movs	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4813      	ldr	r0, [pc, #76]	@ (80015ac <MX_GPIO_Init+0x20c>)
 8001560:	f000 fc2a 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001564:	2320      	movs	r3, #32
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	480d      	ldr	r0, [pc, #52]	@ (80015ac <MX_GPIO_Init+0x20c>)
 8001578:	f000 fc1e 	bl	8001db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800157c:	2302      	movs	r3, #2
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001580:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_GPIO_Init+0x204>)
 8001592:	f000 fc11 	bl	8001db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001596:	bf00      	nop
 8001598:	3730      	adds	r7, #48	@ 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400

080015b8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e009      	b.n	80015de <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	60ba      	str	r2, [r7, #8]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fc60 	bl	8000e98 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dbf1      	blt.n	80015ca <_write+0x12>
  }
  return len;
 80015e6:	687b      	ldr	r3, [r7, #4]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <Error_Handler+0x8>

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	4a0f      	ldr	r2, [pc, #60]	@ (8001648 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001610:	6453      	str	r3, [r2, #68]	@ 0x44
 8001612:	4b0d      	ldr	r3, [pc, #52]	@ (8001648 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <HAL_MspInit+0x4c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	@ 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800163a:	2007      	movs	r0, #7
 800163c:	f000 fb7a 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	@ 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <HAL_I2C_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12c      	bne.n	80016c8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800168a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001690:	2312      	movs	r3, #18
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001694:	2301      	movs	r3, #1
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169c:	2304      	movs	r3, #4
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <HAL_I2C_MspInit+0x8c>)
 80016a8:	f000 fb86 	bl	8001db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_I2C_MspInit+0x88>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40005400 	.word	0x40005400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400

080016dc <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	@ 0x38
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a31      	ldr	r2, [pc, #196]	@ (80017cc <HAL_I2S_MspInit+0xf0>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d15a      	bne.n	80017c2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001710:	23c0      	movs	r3, #192	@ 0xc0
 8001712:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4618      	mov	r0, r3
 800171e:	f005 f893 	bl	8006848 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001728:	f7ff ff62 	bl	80015f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001734:	4a26      	ldr	r2, [pc, #152]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 8001736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800173a:	6413      	str	r3, [r2, #64]	@ 0x40
 800173c:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	4a1f      	ldr	r2, [pc, #124]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6313      	str	r3, [r2, #48]	@ 0x30
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176c:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6313      	str	r3, [r2, #48]	@ 0x30
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <HAL_I2S_MspInit+0xf4>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001780:	2310      	movs	r3, #16
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001790:	2306      	movs	r3, #6
 8001792:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	480e      	ldr	r0, [pc, #56]	@ (80017d4 <HAL_I2S_MspInit+0xf8>)
 800179c:	f000 fb0c 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017a0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b2:	2306      	movs	r3, #6
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	4806      	ldr	r0, [pc, #24]	@ (80017d8 <HAL_I2S_MspInit+0xfc>)
 80017be:	f000 fafb 	bl	8001db8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80017c2:	bf00      	nop
 80017c4:	3738      	adds	r7, #56	@ 0x38
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40003c00 	.word	0x40003c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020800 	.word	0x40020800

080017dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	@ (8001860 <HAL_SPI_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12b      	bne.n	8001856 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_SPI_MspInit+0x88>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a17      	ldr	r2, [pc, #92]	@ (8001864 <HAL_SPI_MspInit+0x88>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_SPI_MspInit+0x88>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_SPI_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <HAL_SPI_MspInit+0x88>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_SPI_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001836:	23e0      	movs	r3, #224	@ 0xe0
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001846:	2305      	movs	r3, #5
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	@ (8001868 <HAL_SPI_MspInit+0x8c>)
 8001852:	f000 fab1 	bl	8001db8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	@ 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40013000 	.word	0x40013000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c2:	f000 f923 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <OTG_FS_IRQHandler+0x10>)
 80018d2:	f000 ff21 	bl	8002718 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000057c 	.word	0x2000057c

080018e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00a      	b.n	8001908 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f2:	f3af 8000 	nop.w
 80018f6:	4601      	mov	r1, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf0      	blt.n	80018f2 <_read+0x12>
  }

  return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_close>:
  }
  return len;
}

int _close(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001942:	605a      	str	r2, [r3, #4]
  return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <_isatty>:

int _isatty(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f009 f930 	bl	800ac18 <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20020000 	.word	0x20020000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	20000198 	.word	0x20000198
 80019ec:	20000aa8 	.word	0x20000aa8

080019f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a18:	f7ff ffea 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1e:	490d      	ldr	r1, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a34:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a42:	f009 f8ef 	bl	800ac24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a46:	f7ff fa4f 	bl	8000ee8 <main>
  bx  lr    
 8001a4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a58:	0800c840 	.word	0x0800c840
  ldr r2, =_sbss
 8001a5c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a60:	20000aa8 	.word	0x20000aa8

08001a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC_IRQHandler>
	...

08001a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_Init+0x40>)
 8001a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <HAL_Init+0x40>)
 8001a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_Init+0x40>)
 8001a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 f94f 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f808 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9c:	f7ff fdae 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f967 	bl	8001d9e <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f000 f92f 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	@ (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000008 	.word	0x20000008
 8001b08:	20000004 	.word	0x20000004

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	2000019c 	.word	0x2000019c

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000019c 	.word	0x2000019c

08001b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff ffee 	bl	8001b34 <HAL_GetTick>
 8001b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b64:	d005      	beq.n	8001b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_Delay+0x44>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b72:	bf00      	nop
 8001b74:	f7ff ffde 	bl	8001b34 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d8f7      	bhi.n	8001b74 <HAL_Delay+0x28>
  {
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000008 	.word	0x20000008

08001b94 <__NVIC_SetPriorityGrouping>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	@ (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	@ (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	@ (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	@ 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	e16b      	b.n	80020ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f040 815a 	bne.w	80020a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d005      	beq.n	8001e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d130      	bne.n	8001e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d017      	beq.n	8001ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	69b9      	ldr	r1, [r7, #24]
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80b4 	beq.w	80020a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b60      	ldr	r3, [pc, #384]	@ (80020c4 <HAL_GPIO_Init+0x30c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	4a5f      	ldr	r2, [pc, #380]	@ (80020c4 <HAL_GPIO_Init+0x30c>)
 8001f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80020c4 <HAL_GPIO_Init+0x30c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80020c8 <HAL_GPIO_Init+0x310>)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a52      	ldr	r2, [pc, #328]	@ (80020cc <HAL_GPIO_Init+0x314>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <HAL_GPIO_Init+0x226>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a51      	ldr	r2, [pc, #324]	@ (80020d0 <HAL_GPIO_Init+0x318>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d025      	beq.n	8001fda <HAL_GPIO_Init+0x222>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a50      	ldr	r2, [pc, #320]	@ (80020d4 <HAL_GPIO_Init+0x31c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <HAL_GPIO_Init+0x21e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4f      	ldr	r2, [pc, #316]	@ (80020d8 <HAL_GPIO_Init+0x320>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x21a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4e      	ldr	r2, [pc, #312]	@ (80020dc <HAL_GPIO_Init+0x324>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x216>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4d      	ldr	r2, [pc, #308]	@ (80020e0 <HAL_GPIO_Init+0x328>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x212>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80020e4 <HAL_GPIO_Init+0x32c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x20e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80020e8 <HAL_GPIO_Init+0x330>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x20a>
 8001fbe:	2307      	movs	r3, #7
 8001fc0:	e00e      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	e00c      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fc6:	2306      	movs	r3, #6
 8001fc8:	e00a      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fca:	2305      	movs	r3, #5
 8001fcc:	e008      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e004      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_GPIO_Init+0x228>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	f002 0203 	and.w	r2, r2, #3
 8001fe6:	0092      	lsls	r2, r2, #2
 8001fe8:	4093      	lsls	r3, r2
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff0:	4935      	ldr	r1, [pc, #212]	@ (80020c8 <HAL_GPIO_Init+0x310>)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <HAL_GPIO_Init+0x334>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002022:	4a32      	ldr	r2, [pc, #200]	@ (80020ec <HAL_GPIO_Init+0x334>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002028:	4b30      	ldr	r3, [pc, #192]	@ (80020ec <HAL_GPIO_Init+0x334>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800204c:	4a27      	ldr	r2, [pc, #156]	@ (80020ec <HAL_GPIO_Init+0x334>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002052:	4b26      	ldr	r3, [pc, #152]	@ (80020ec <HAL_GPIO_Init+0x334>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002076:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <HAL_GPIO_Init+0x334>)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_GPIO_Init+0x334>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a0:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <HAL_GPIO_Init+0x334>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3301      	adds	r3, #1
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b0f      	cmp	r3, #15
 80020b0:	f67f ae90 	bls.w	8001dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3724      	adds	r7, #36	@ 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40013800 	.word	0x40013800
 80020cc:	40020000 	.word	0x40020000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40021800 	.word	0x40021800
 80020e8:	40021c00 	.word	0x40021c00
 80020ec:	40013c00 	.word	0x40013c00

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800210c:	e003      	b.n	8002116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	619a      	str	r2, [r3, #24]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002134:	887a      	ldrh	r2, [r7, #2]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	041a      	lsls	r2, r3, #16
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43d9      	mvns	r1, r3
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	400b      	ands	r3, r1
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af02      	add	r7, sp, #8
 800215c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e059      	b.n	800221c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f007 ff76 	bl	800a074 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2203      	movs	r2, #3
 800218c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002196:	d102      	bne.n	800219e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 fd90 	bl	8006cc8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7c1a      	ldrb	r2, [r3, #16]
 80021b0:	f88d 2000 	strb.w	r2, [sp]
 80021b4:	3304      	adds	r3, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	f004 fd11 	bl	8006bde <USB_CoreInit>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e026      	b.n	800221c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 fd88 	bl	8006cea <USB_SetCurrentMode>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e017      	b.n	800221c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7c1a      	ldrb	r2, [r3, #16]
 80021f4:	f88d 2000 	strb.w	r2, [sp]
 80021f8:	3304      	adds	r3, #4
 80021fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fc:	f004 ff2a 	bl	8007054 <USB_HostInit>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e004      	b.n	800221c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08b      	sub	sp, #44	@ 0x2c
 8002228:	af04      	add	r7, sp, #16
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	70fb      	strb	r3, [r7, #3]
 8002236:	460b      	mov	r3, r1
 8002238:	70bb      	strb	r3, [r7, #2]
 800223a:	4613      	mov	r3, r2
 800223c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800223e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002240:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_HCD_HC_Init+0x2c>
 800224c:	2302      	movs	r3, #2
 800224e:	e09d      	b.n	800238c <HAL_HCD_HC_Init+0x168>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3319      	adds	r3, #25
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3314      	adds	r3, #20
 800227c:	787a      	ldrb	r2, [r7, #1]
 800227e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3315      	adds	r3, #21
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3326      	adds	r3, #38	@ 0x26
 80022a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80022a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	78bb      	ldrb	r3, [r7, #2]
 80022ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022b2:	b2d8      	uxtb	r0, r3
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3316      	adds	r3, #22
 80022c2:	4602      	mov	r2, r0
 80022c4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fbc8 	bl	8002a60 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80022d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0a      	bge.n	80022ee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3317      	adds	r3, #23
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e009      	b.n	8002302 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3317      	adds	r3, #23
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f005 f808 	bl	800731c <USB_GetHostSpeed>
 800230c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800230e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002312:	2b01      	cmp	r3, #1
 8002314:	d10b      	bne.n	800232e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002316:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_HCD_HC_Init+0x10a>
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d104      	bne.n	800232e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2bbc      	cmp	r3, #188	@ 0xbc
 8002328:	d901      	bls.n	800232e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800232a:	23bc      	movs	r3, #188	@ 0xbc
 800232c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3318      	adds	r3, #24
 800233e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002342:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	b298      	uxth	r0, r3
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	3328      	adds	r3, #40	@ 0x28
 8002358:	4602      	mov	r2, r0
 800235a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	b29b      	uxth	r3, r3
 8002364:	787c      	ldrb	r4, [r7, #1]
 8002366:	78ba      	ldrb	r2, [r7, #2]
 8002368:	78f9      	ldrb	r1, [r7, #3]
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4623      	mov	r3, r4
 800237a:	f004 fff7 	bl	800736c <USB_HC_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_HCD_HC_Halt+0x1e>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e00f      	b.n	80023d2 <HAL_HCD_HC_Halt+0x3e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f005 fb89 	bl	8007ada <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	70fb      	strb	r3, [r7, #3]
 80023ee:	460b      	mov	r3, r1
 80023f0:	70bb      	strb	r3, [r7, #2]
 80023f2:	4613      	mov	r3, r2
 80023f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3317      	adds	r3, #23
 8002406:	78ba      	ldrb	r2, [r7, #2]
 8002408:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3326      	adds	r3, #38	@ 0x26
 800241a:	787a      	ldrb	r2, [r7, #1]
 800241c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800241e:	7c3b      	ldrb	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d114      	bne.n	800244e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	332a      	adds	r3, #42	@ 0x2a
 8002434:	2203      	movs	r2, #3
 8002436:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	3319      	adds	r3, #25
 8002448:	7f3a      	ldrb	r2, [r7, #28]
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	e009      	b.n	8002462 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	332a      	adds	r3, #42	@ 0x2a
 800245e:	2202      	movs	r2, #2
 8002460:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002462:	787b      	ldrb	r3, [r7, #1]
 8002464:	2b03      	cmp	r3, #3
 8002466:	f200 8102 	bhi.w	800266e <HAL_HCD_HC_SubmitRequest+0x292>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <HAL_HCD_HC_SubmitRequest+0x94>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	08002481 	.word	0x08002481
 8002474:	08002659 	.word	0x08002659
 8002478:	08002545 	.word	0x08002545
 800247c:	080025cf 	.word	0x080025cf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002480:	7c3b      	ldrb	r3, [r7, #16]
 8002482:	2b01      	cmp	r3, #1
 8002484:	f040 80f5 	bne.w	8002672 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002488:	78bb      	ldrb	r3, [r7, #2]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d12d      	bne.n	80024ea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800248e:	8b3b      	ldrh	r3, [r7, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	333d      	adds	r3, #61	@ 0x3d
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	333d      	adds	r3, #61	@ 0x3d
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10a      	bne.n	80024d4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	332a      	adds	r3, #42	@ 0x2a
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80024d2:	e0ce      	b.n	8002672 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	332a      	adds	r3, #42	@ 0x2a
 80024e4:	2202      	movs	r2, #2
 80024e6:	701a      	strb	r2, [r3, #0]
      break;
 80024e8:	e0c3      	b.n	8002672 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	331a      	adds	r3, #26
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f040 80b8 	bne.w	8002672 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	333c      	adds	r3, #60	@ 0x3c
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	332a      	adds	r3, #42	@ 0x2a
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
      break;
 800252c:	e0a1      	b.n	8002672 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	332a      	adds	r3, #42	@ 0x2a
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
      break;
 8002542:	e096      	b.n	8002672 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002544:	78bb      	ldrb	r3, [r7, #2]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d120      	bne.n	800258c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	333d      	adds	r3, #61	@ 0x3d
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	332a      	adds	r3, #42	@ 0x2a
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002574:	e07e      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	332a      	adds	r3, #42	@ 0x2a
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
      break;
 800258a:	e073      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	333c      	adds	r3, #60	@ 0x3c
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	332a      	adds	r3, #42	@ 0x2a
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
      break;
 80025b6:	e05d      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	332a      	adds	r3, #42	@ 0x2a
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]
      break;
 80025cc:	e052      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025ce:	78bb      	ldrb	r3, [r7, #2]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d120      	bne.n	8002616 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	333d      	adds	r3, #61	@ 0x3d
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10a      	bne.n	8002600 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	332a      	adds	r3, #42	@ 0x2a
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025fe:	e039      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	332a      	adds	r3, #42	@ 0x2a
 8002610:	2202      	movs	r2, #2
 8002612:	701a      	strb	r2, [r3, #0]
      break;
 8002614:	e02e      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	333c      	adds	r3, #60	@ 0x3c
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	332a      	adds	r3, #42	@ 0x2a
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
      break;
 8002640:	e018      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	332a      	adds	r3, #42	@ 0x2a
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]
      break;
 8002656:	e00d      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	332a      	adds	r3, #42	@ 0x2a
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
      break;
 800266c:	e002      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002672:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	332c      	adds	r3, #44	@ 0x2c
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	8b39      	ldrh	r1, [r7, #24]
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4403      	add	r3, r0
 8002698:	3334      	adds	r3, #52	@ 0x34
 800269a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	334c      	adds	r3, #76	@ 0x4c
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3338      	adds	r3, #56	@ 0x38
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3315      	adds	r3, #21
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334d      	adds	r3, #77	@ 0x4d
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	3310      	adds	r3, #16
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	1d19      	adds	r1, r3, #4
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	799b      	ldrb	r3, [r3, #6]
 8002706:	461a      	mov	r2, r3
 8002708:	f004 ff5c 	bl	80075c4 <USB_HC_StartXfer>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop

08002718 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fc51 	bl	8006fd6 <USB_GetMode>
 8002734:	4603      	mov	r3, r0
 8002736:	2b01      	cmp	r3, #1
 8002738:	f040 80fb 	bne.w	8002932 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f004 fc14 	bl	8006f6e <USB_ReadInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80f1 	beq.w	8002930 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f004 fc0b 	bl	8006f6e <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800275e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002762:	d104      	bne.n	800276e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800276c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fbfb 	bl	8006f6e <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002782:	d104      	bne.n	800278e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800278c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f004 fbeb 	bl	8006f6e <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800279e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027a2:	d104      	bne.n	80027ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fbdb 	bl	8006f6e <USB_ReadInterrupts>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d103      	bne.n	80027ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2202      	movs	r2, #2
 80027c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 fbcd 	bl	8006f6e <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027de:	d120      	bne.n	8002822 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80027e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d113      	bne.n	8002822 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027fa:	2110      	movs	r1, #16
 80027fc:	6938      	ldr	r0, [r7, #16]
 80027fe:	f004 fac0 	bl	8006d82 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002802:	6938      	ldr	r0, [r7, #16]
 8002804:	f004 faef 	bl	8006de6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7a5b      	ldrb	r3, [r3, #9]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d105      	bne.n	800281c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f004 fce0 	bl	80071dc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f007 fca7 	bl	800a170 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f004 fba1 	bl	8006f6e <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002836:	d102      	bne.n	800283e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f001 fd4d 	bl	80042d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fb93 	bl	8006f6e <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b08      	cmp	r3, #8
 8002850:	d106      	bne.n	8002860 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f007 fc70 	bl	800a138 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2208      	movs	r2, #8
 800285e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 fb82 	bl	8006f6e <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002874:	d139      	bne.n	80028ea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f005 f91c 	bl	8007ab8 <USB_HC_ReadInterrupt>
 8002880:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e025      	b.n	80028d4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028b2:	d106      	bne.n	80028c2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f905 	bl	8002aca <HCD_HC_IN_IRQHandler>
 80028c0:	e005      	b.n	80028ce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 ff67 	bl	800379c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	795b      	ldrb	r3, [r3, #5]
 80028d8:	461a      	mov	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4293      	cmp	r3, r2
 80028de:	d3d3      	bcc.n	8002888 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fb3d 	bl	8006f6e <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d101      	bne.n	8002902 <HAL_HCD_IRQHandler+0x1ea>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_HCD_IRQHandler+0x1ec>
 8002902:	2300      	movs	r3, #0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0210 	bic.w	r2, r2, #16
 8002916:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f001 fbfe 	bl	800411a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0210 	orr.w	r2, r2, #16
 800292c:	619a      	str	r2, [r3, #24]
 800292e:	e000      	b.n	8002932 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002930:	bf00      	nop
    }
  }
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_HCD_Start+0x16>
 800294a:	2302      	movs	r3, #2
 800294c:	e013      	b.n	8002976 <HAL_HCD_Start+0x3e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fca4 	bl	80072aa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 f99d 	bl	8006ca6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_HCD_Stop+0x16>
 8002990:	2302      	movs	r3, #2
 8002992:	e00d      	b.n	80029b0 <HAL_HCD_Stop+0x32>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f005 f9f7 	bl	8007d94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f004 fc46 	bl	8007256 <USB_ResetPort>
 80029ca:	4603      	mov	r3, r0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	334c      	adds	r3, #76	@ 0x4c
 80029f0:	781b      	ldrb	r3, [r3, #0]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3338      	adds	r3, #56	@ 0x38
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fc88 	bl	800734a <USB_GetCurrentFrame>
 8002a3a:	4603      	mov	r3, r0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fc63 	bl	800731c <USB_GetHostSpeed>
 8002a56:	4603      	mov	r3, r0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	331a      	adds	r3, #26
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	331b      	adds	r3, #27
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3325      	adds	r3, #37	@ 0x25
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3324      	adds	r3, #36	@ 0x24
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fa53 	bl	8006f94 <USB_ReadChInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d11a      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b04:	461a      	mov	r2, r3
 8002b06:	2304      	movs	r3, #4
 8002b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	334d      	adds	r3, #77	@ 0x4d
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 ffd7 	bl	8007ada <USB_HC_Halt>
 8002b2c:	e09e      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 fa2c 	bl	8006f94 <USB_ReadChInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b46:	d11b      	bne.n	8002b80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	334d      	adds	r3, #77	@ 0x4d
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 ffae 	bl	8007ada <USB_HC_Halt>
 8002b7e:	e075      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fa03 	bl	8006f94 <USB_ReadChInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d11a      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	334d      	adds	r3, #77	@ 0x4d
 8002bba:	2206      	movs	r2, #6
 8002bbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 ff87 	bl	8007ada <USB_HC_Halt>
 8002bcc:	e04e      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 f9dc 	bl	8006f94 <USB_ReadChInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be6:	d11b      	bne.n	8002c20 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	@ 0x4d
 8002c0c:	2209      	movs	r2, #9
 8002c0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f004 ff5e 	bl	8007ada <USB_HC_Halt>
 8002c1e:	e025      	b.n	8002c6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f004 f9b3 	bl	8006f94 <USB_ReadChInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b80      	cmp	r3, #128	@ 0x80
 8002c36:	d119      	bne.n	8002c6c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	2380      	movs	r3, #128	@ 0x80
 8002c48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	334d      	adds	r3, #77	@ 0x4d
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 ff37 	bl	8007ada <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f004 f98d 	bl	8006f94 <USB_ReadChInterrupts>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c84:	d112      	bne.n	8002cac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 ff23 	bl	8007ada <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	f000 bd75 	b.w	8003796 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 f96d 	bl	8006f94 <USB_ReadChInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 8128 	bne.w	8002f16 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	331b      	adds	r3, #27
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d119      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	331b      	adds	r3, #27
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	0151      	lsls	r1, r2, #5
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	440a      	add	r2, r1
 8002d18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d20:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	799b      	ldrb	r3, [r3, #6]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01b      	beq.n	8002d62 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3330      	adds	r3, #48	@ 0x30
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	1ac9      	subs	r1, r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4403      	add	r3, r0
 8002d5e:	3338      	adds	r3, #56	@ 0x38
 8002d60:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	334d      	adds	r3, #77	@ 0x4d
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3344      	adds	r3, #68	@ 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d96:	461a      	mov	r2, r3
 8002d98:	2301      	movs	r3, #1
 8002d9a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3326      	adds	r3, #38	@ 0x26
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3326      	adds	r3, #38	@ 0x26
 8002dc2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d110      	bne.n	8002dea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fe82 	bl	8007ada <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de2:	461a      	mov	r2, r3
 8002de4:	2310      	movs	r3, #16
 8002de6:	6093      	str	r3, [r2, #8]
 8002de8:	e03d      	b.n	8002e66 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3326      	adds	r3, #38	@ 0x26
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d00a      	beq.n	8002e16 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3326      	adds	r3, #38	@ 0x26
 8002e10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d127      	bne.n	8002e66 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	0151      	lsls	r1, r2, #5
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	440a      	add	r2, r1
 8002e2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e34:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	334c      	adds	r3, #76	@ 0x4c
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	334c      	adds	r3, #76	@ 0x4c
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f007 f993 	bl	800a18c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	799b      	ldrb	r3, [r3, #6]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d13b      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3338      	adds	r3, #56	@ 0x38
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4403      	add	r3, r0
 8002e8e:	3328      	adds	r3, #40	@ 0x28
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	440b      	add	r3, r1
 8002e94:	1e59      	subs	r1, r3, #1
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	1a9b      	subs	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4403      	add	r3, r0
 8002ea4:	3328      	adds	r3, #40	@ 0x28
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8470 	beq.w	8003796 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	333c      	adds	r3, #60	@ 0x3c
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	333c      	adds	r3, #60	@ 0x3c
 8002ede:	4602      	mov	r2, r0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	f000 bc58 	b.w	8003796 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	333c      	adds	r3, #60	@ 0x3c
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	f083 0301 	eor.w	r3, r3, #1
 8002efe:	b2d8      	uxtb	r0, r3
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	333c      	adds	r3, #60	@ 0x3c
 8002f0e:	4602      	mov	r2, r0
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	f000 bc40 	b.w	8003796 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 f838 	bl	8006f94 <USB_ReadChInterrupts>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d131      	bne.n	8002f92 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	331a      	adds	r3, #26
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	f040 841f 	bne.w	8003796 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	331b      	adds	r3, #27
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334d      	adds	r3, #77	@ 0x4d
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fda6 	bl	8007ada <USB_HC_Halt>
 8002f8e:	f000 bc02 	b.w	8003796 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fffa 	bl	8006f94 <USB_ReadChInterrupts>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	f040 8305 	bne.w	80035b6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2302      	movs	r3, #2
 8002fbc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	334d      	adds	r3, #77	@ 0x4d
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d114      	bne.n	8002ffe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	334d      	adds	r3, #77	@ 0x4d
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	334c      	adds	r3, #76	@ 0x4c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e2cc      	b.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	334d      	adds	r3, #77	@ 0x4d
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b06      	cmp	r3, #6
 8003012:	d114      	bne.n	800303e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	334d      	adds	r3, #77	@ 0x4d
 8003024:	2202      	movs	r2, #2
 8003026:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	334c      	adds	r3, #76	@ 0x4c
 8003038:	2205      	movs	r2, #5
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e2ac      	b.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	334d      	adds	r3, #77	@ 0x4d
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b07      	cmp	r3, #7
 8003052:	d00b      	beq.n	800306c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334d      	adds	r3, #77	@ 0x4d
 8003064:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003066:	2b09      	cmp	r3, #9
 8003068:	f040 80a6 	bne.w	80031b8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	334d      	adds	r3, #77	@ 0x4d
 800307c:	2202      	movs	r2, #2
 800307e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3344      	adds	r3, #68	@ 0x44
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4403      	add	r3, r0
 80030a0:	3344      	adds	r3, #68	@ 0x44
 80030a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3344      	adds	r3, #68	@ 0x44
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d943      	bls.n	8003142 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3344      	adds	r3, #68	@ 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	331a      	adds	r3, #26
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d123      	bne.n	800312c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	331b      	adds	r3, #27
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	331c      	adds	r3, #28
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	0151      	lsls	r1, r2, #5
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	440a      	add	r2, r1
 8003122:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	334c      	adds	r3, #76	@ 0x4c
 800313c:	2204      	movs	r2, #4
 800313e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003140:	e229      	b.n	8003596 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	334c      	adds	r3, #76	@ 0x4c
 8003152:	2202      	movs	r2, #2
 8003154:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3326      	adds	r3, #38	@ 0x26
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	3326      	adds	r3, #38	@ 0x26
 800317c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800317e:	2b02      	cmp	r3, #2
 8003180:	f040 8209 	bne.w	8003596 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800319a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031b6:	e1ee      	b.n	8003596 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	334d      	adds	r3, #77	@ 0x4d
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	f040 80c8 	bne.w	8003360 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	334d      	adds	r3, #77	@ 0x4d
 80031e0:	2202      	movs	r2, #2
 80031e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	331b      	adds	r3, #27
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	f040 81ce 	bne.w	8003598 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3326      	adds	r3, #38	@ 0x26
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d16b      	bne.n	80032ea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	3348      	adds	r3, #72	@ 0x48
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	1c59      	adds	r1, r3, #1
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4403      	add	r3, r0
 8003232:	3348      	adds	r3, #72	@ 0x48
 8003234:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3348      	adds	r3, #72	@ 0x48
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d943      	bls.n	80032d4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3348      	adds	r3, #72	@ 0x48
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	331b      	adds	r3, #27
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3344      	adds	r3, #68	@ 0x44
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d809      	bhi.n	800329e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	331c      	adds	r3, #28
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800329e:	78fb      	ldrb	r3, [r7, #3]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	0151      	lsls	r1, r2, #5
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	440a      	add	r2, r1
 80032b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032bc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	334c      	adds	r3, #76	@ 0x4c
 80032ce:	2204      	movs	r2, #4
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e014      	b.n	80032fe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	334c      	adds	r3, #76	@ 0x4c
 80032e4:	2202      	movs	r2, #2
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e009      	b.n	80032fe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334c      	adds	r3, #76	@ 0x4c
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3326      	adds	r3, #38	@ 0x26
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3326      	adds	r3, #38	@ 0x26
 8003324:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003326:	2b02      	cmp	r3, #2
 8003328:	f040 8136 	bne.w	8003598 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003342:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800334a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e11b      	b.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334d      	adds	r3, #77	@ 0x4d
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b03      	cmp	r3, #3
 8003374:	f040 8081 	bne.w	800347a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334d      	adds	r3, #77	@ 0x4d
 8003388:	2202      	movs	r2, #2
 800338a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	331b      	adds	r3, #27
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 80fa 	bne.w	8003598 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334c      	adds	r3, #76	@ 0x4c
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	0151      	lsls	r1, r2, #5
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	440a      	add	r2, r1
 80033ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033f6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	440a      	add	r2, r1
 800340e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003412:	f023 0320 	bic.w	r3, r3, #32
 8003416:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3326      	adds	r3, #38	@ 0x26
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3326      	adds	r3, #38	@ 0x26
 800343e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003440:	2b02      	cmp	r3, #2
 8003442:	f040 80a9 	bne.w	8003598 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800345c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003464:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e08e      	b.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334d      	adds	r3, #77	@ 0x4d
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d143      	bne.n	8003518 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334d      	adds	r3, #77	@ 0x4d
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334c      	adds	r3, #76	@ 0x4c
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3326      	adds	r3, #38	@ 0x26
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3326      	adds	r3, #38	@ 0x26
 80034de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d159      	bne.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003502:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e03f      	b.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334d      	adds	r3, #77	@ 0x4d
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b08      	cmp	r3, #8
 800352c:	d126      	bne.n	800357c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334d      	adds	r3, #77	@ 0x4d
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3344      	adds	r3, #68	@ 0x44
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4403      	add	r3, r0
 8003562:	3344      	adds	r3, #68	@ 0x44
 8003564:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334c      	adds	r3, #76	@ 0x4c
 8003576:	2204      	movs	r2, #4
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	e00d      	b.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334d      	adds	r3, #77	@ 0x4d
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b02      	cmp	r3, #2
 8003590:	f000 8100 	beq.w	8003794 <HCD_HC_IN_IRQHandler+0xcca>
 8003594:	e000      	b.n	8003598 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003596:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	334c      	adds	r3, #76	@ 0x4c
 80035a8:	781a      	ldrb	r2, [r3, #0]
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f006 fdec 	bl	800a18c <HAL_HCD_HC_NotifyURBChange_Callback>
 80035b4:	e0ef      	b.n	8003796 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f003 fce8 	bl	8006f94 <USB_ReadChInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d12f      	bne.n	800362e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035da:	461a      	mov	r2, r3
 80035dc:	2340      	movs	r3, #64	@ 0x40
 80035de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334d      	adds	r3, #77	@ 0x4d
 80035f0:	2205      	movs	r2, #5
 80035f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	331a      	adds	r3, #26
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3344      	adds	r3, #68	@ 0x44
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f004 fa57 	bl	8007ada <USB_HC_Halt>
 800362c:	e0b3      	b.n	8003796 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f003 fcac 	bl	8006f94 <USB_ReadChInterrupts>
 800363c:	4603      	mov	r3, r0
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	2b10      	cmp	r3, #16
 8003644:	f040 80a7 	bne.w	8003796 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3326      	adds	r3, #38	@ 0x26
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d11b      	bne.n	8003696 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3344      	adds	r3, #68	@ 0x44
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	334d      	adds	r3, #77	@ 0x4d
 8003682:	2204      	movs	r2, #4
 8003684:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f004 fa23 	bl	8007ada <USB_HC_Halt>
 8003694:	e03f      	b.n	8003716 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3326      	adds	r3, #38	@ 0x26
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3326      	adds	r3, #38	@ 0x26
 80036bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d129      	bne.n	8003716 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3344      	adds	r3, #68	@ 0x44
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	799b      	ldrb	r3, [r3, #6]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HCD_HC_IN_IRQHandler+0xc2a>
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	331b      	adds	r3, #27
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d110      	bne.n	8003716 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	334d      	adds	r3, #77	@ 0x4d
 8003704:	2204      	movs	r2, #4
 8003706:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f004 f9e2 	bl	8007ada <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	331b      	adds	r3, #27
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d129      	bne.n	8003780 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	331b      	adds	r3, #27
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	0151      	lsls	r1, r2, #5
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	440a      	add	r2, r1
 8003756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800375a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800375e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	440a      	add	r2, r1
 8003776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800377a:	f043 0320 	orr.w	r3, r3, #32
 800377e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	2310      	movs	r3, #16
 8003790:	6093      	str	r3, [r2, #8]
 8003792:	e000      	b.n	8003796 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003794:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 fbea 	bl	8006f94 <USB_ReadChInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d11b      	bne.n	8003802 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d6:	461a      	mov	r2, r3
 80037d8:	2304      	movs	r3, #4
 80037da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	334d      	adds	r3, #77	@ 0x4d
 80037ec:	2207      	movs	r2, #7
 80037ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f96e 	bl	8007ada <USB_HC_Halt>
 80037fe:	f000 bc89 	b.w	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f003 fbc2 	bl	8006f94 <USB_ReadChInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	f040 8082 	bne.w	8003920 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2320      	movs	r3, #32
 800382c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3319      	adds	r3, #25
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d124      	bne.n	800388e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3319      	adds	r3, #25
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	334c      	adds	r3, #76	@ 0x4c
 8003868:	2202      	movs	r2, #2
 800386a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	334d      	adds	r3, #77	@ 0x4d
 800387c:	2203      	movs	r2, #3
 800387e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	4611      	mov	r1, r2
 8003888:	4618      	mov	r0, r3
 800388a:	f004 f926 	bl	8007ada <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	331a      	adds	r3, #26
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	f040 8437 	bne.w	8004114 <HCD_HC_OUT_IRQHandler+0x978>
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	331b      	adds	r3, #27
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 842b 	bne.w	8004114 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3326      	adds	r3, #38	@ 0x26
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d009      	beq.n	80038e8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	331b      	adds	r3, #27
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	334d      	adds	r3, #77	@ 0x4d
 80038f8:	2203      	movs	r2, #3
 80038fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f004 f8e8 	bl	8007ada <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3344      	adds	r3, #68	@ 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e3f9      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f003 fb33 	bl	8006f94 <USB_ReadChInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003938:	d111      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003946:	461a      	mov	r2, r3
 8003948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800394c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f004 f8bf 	bl	8007ada <USB_HC_Halt>
 800395c:	e3da      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f003 fb14 	bl	8006f94 <USB_ReadChInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d168      	bne.n	8003a48 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	3344      	adds	r3, #68	@ 0x44
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fafe 	bl	8006f94 <USB_ReadChInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399e:	2b40      	cmp	r3, #64	@ 0x40
 80039a0:	d112      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80039a2:	78fa      	ldrb	r2, [r7, #3]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3319      	adds	r3, #25
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	2340      	movs	r3, #64	@ 0x40
 80039c6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	331b      	adds	r3, #27
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d019      	beq.n	8003a12 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	331b      	adds	r3, #27
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a10:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2301      	movs	r3, #1
 8003a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	334d      	adds	r3, #77	@ 0x4d
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f004 f84a 	bl	8007ada <USB_HC_Halt>
 8003a46:	e365      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f003 fa9f 	bl	8006f94 <USB_ReadChInterrupts>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5c:	2b40      	cmp	r3, #64	@ 0x40
 8003a5e:	d139      	bne.n	8003ad4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	334d      	adds	r3, #77	@ 0x4d
 8003a70:	2205      	movs	r2, #5
 8003a72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	331a      	adds	r3, #26
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3319      	adds	r3, #25
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3344      	adds	r3, #68	@ 0x44
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 f80d 	bl	8007ada <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003acc:	461a      	mov	r2, r3
 8003ace:	2340      	movs	r3, #64	@ 0x40
 8003ad0:	6093      	str	r3, [r2, #8]
 8003ad2:	e31f      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 fa59 	bl	8006f94 <USB_ReadChInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d11a      	bne.n	8003b22 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af8:	461a      	mov	r2, r3
 8003afa:	2308      	movs	r3, #8
 8003afc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	334d      	adds	r3, #77	@ 0x4d
 8003b0e:	2206      	movs	r2, #6
 8003b10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 ffdd 	bl	8007ada <USB_HC_Halt>
 8003b20:	e2f8      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f003 fa32 	bl	8006f94 <USB_ReadChInterrupts>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d144      	bne.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3344      	adds	r3, #68	@ 0x44
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	334d      	adds	r3, #77	@ 0x4d
 8003b5e:	2204      	movs	r2, #4
 8003b60:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3319      	adds	r3, #25
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d114      	bne.n	8003ba2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	3318      	adds	r3, #24
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3319      	adds	r3, #25
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	4611      	mov	r1, r2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 ff95 	bl	8007ada <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	6093      	str	r3, [r2, #8]
 8003bc2:	e2a7      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 f9e1 	bl	8006f94 <USB_ReadChInterrupts>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd8:	2b80      	cmp	r3, #128	@ 0x80
 8003bda:	f040 8083 	bne.w	8003ce4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	799b      	ldrb	r3, [r3, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d111      	bne.n	8003c0a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	334d      	adds	r3, #77	@ 0x4d
 8003bf6:	2207      	movs	r2, #7
 8003bf8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 ff69 	bl	8007ada <USB_HC_Halt>
 8003c08:	e062      	b.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3344      	adds	r3, #68	@ 0x44
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	1c59      	adds	r1, r3, #1
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4403      	add	r3, r0
 8003c2a:	3344      	adds	r3, #68	@ 0x44
 8003c2c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3344      	adds	r3, #68	@ 0x44
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d922      	bls.n	8003c8a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3344      	adds	r3, #68	@ 0x44
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	334c      	adds	r3, #76	@ 0x4c
 8003c68:	2204      	movs	r2, #4
 8003c6a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334c      	adds	r3, #76	@ 0x4c
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f006 fa82 	bl	800a18c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c88:	e022      	b.n	8003cd0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	334c      	adds	r3, #76	@ 0x4c
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cb4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cbc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2380      	movs	r3, #128	@ 0x80
 8003ce0:	6093      	str	r3, [r2, #8]
 8003ce2:	e217      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 f951 	bl	8006f94 <USB_ReadChInterrupts>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cfc:	d11b      	bne.n	8003d36 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334d      	adds	r3, #77	@ 0x4d
 8003d0e:	2209      	movs	r2, #9
 8003d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fedd 	bl	8007ada <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d32:	6093      	str	r3, [r2, #8]
 8003d34:	e1ee      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 f928 	bl	8006f94 <USB_ReadChInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	f040 81df 	bne.w	800410e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2302      	movs	r3, #2
 8003d60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	334d      	adds	r3, #77	@ 0x4d
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 8093 	bne.w	8003ea0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	334d      	adds	r3, #77	@ 0x4d
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334c      	adds	r3, #76	@ 0x4c
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3326      	adds	r3, #38	@ 0x26
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d00b      	beq.n	8003dd0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3326      	adds	r3, #38	@ 0x26
 8003dc8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	f040 8190 	bne.w	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	799b      	ldrb	r3, [r3, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d115      	bne.n	8003e04 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	333d      	adds	r3, #61	@ 0x3d
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	f083 0301 	eor.w	r3, r3, #1
 8003df0:	b2d8      	uxtb	r0, r3
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	333d      	adds	r3, #61	@ 0x3d
 8003e00:	4602      	mov	r2, r0
 8003e02:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	799b      	ldrb	r3, [r3, #6]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 8171 	bne.w	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	3334      	adds	r3, #52	@ 0x34
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8165 	beq.w	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	3334      	adds	r3, #52	@ 0x34
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4403      	add	r3, r0
 8003e46:	3328      	adds	r3, #40	@ 0x28
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	440b      	add	r3, r1
 8003e4c:	1e59      	subs	r1, r3, #1
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4403      	add	r3, r0
 8003e5c:	3328      	adds	r3, #40	@ 0x28
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e64:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 813f 	beq.w	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	333d      	adds	r3, #61	@ 0x3d
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	f083 0301 	eor.w	r3, r3, #1
 8003e8a:	b2d8      	uxtb	r0, r3
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	333d      	adds	r3, #61	@ 0x3d
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e127      	b.n	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003ea0:	78fa      	ldrb	r2, [r7, #3]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	334d      	adds	r3, #77	@ 0x4d
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d120      	bne.n	8003ef8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	1a9b      	subs	r3, r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	334d      	adds	r3, #77	@ 0x4d
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	331b      	adds	r3, #27
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 8107 	bne.w	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334c      	adds	r3, #76	@ 0x4c
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e0fb      	b.n	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334d      	adds	r3, #77	@ 0x4d
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d13a      	bne.n	8003f84 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334d      	adds	r3, #77	@ 0x4d
 8003f1e:	2202      	movs	r2, #2
 8003f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	334c      	adds	r3, #76	@ 0x4c
 8003f32:	2202      	movs	r2, #2
 8003f34:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	331b      	adds	r3, #27
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 80d1 	bne.w	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	331b      	adds	r3, #27
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f80:	6053      	str	r3, [r2, #4]
 8003f82:	e0b5      	b.n	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	334d      	adds	r3, #77	@ 0x4d
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d114      	bne.n	8003fc4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	334d      	adds	r3, #77	@ 0x4d
 8003faa:	2202      	movs	r2, #2
 8003fac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	334c      	adds	r3, #76	@ 0x4c
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	e095      	b.n	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	334d      	adds	r3, #77	@ 0x4d
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d114      	bne.n	8004004 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	334d      	adds	r3, #77	@ 0x4d
 8003fea:	2202      	movs	r2, #2
 8003fec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	334c      	adds	r3, #76	@ 0x4c
 8003ffe:	2205      	movs	r2, #5
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e075      	b.n	80040f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	334d      	adds	r3, #77	@ 0x4d
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b07      	cmp	r3, #7
 8004018:	d00a      	beq.n	8004030 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	334d      	adds	r3, #77	@ 0x4d
 800402a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800402c:	2b09      	cmp	r3, #9
 800402e:	d170      	bne.n	8004112 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	334d      	adds	r3, #77	@ 0x4d
 8004040:	2202      	movs	r2, #2
 8004042:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3344      	adds	r3, #68	@ 0x44
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1c59      	adds	r1, r3, #1
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4403      	add	r3, r0
 8004064:	3344      	adds	r3, #68	@ 0x44
 8004066:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	3344      	adds	r3, #68	@ 0x44
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d914      	bls.n	80040a8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	3344      	adds	r3, #68	@ 0x44
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	334c      	adds	r3, #76	@ 0x4c
 80040a2:	2204      	movs	r2, #4
 80040a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040a6:	e022      	b.n	80040ee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	334c      	adds	r3, #76	@ 0x4c
 80040b8:	2202      	movs	r2, #2
 80040ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	334c      	adds	r3, #76	@ 0x4c
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	4619      	mov	r1, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f006 f840 	bl	800a18c <HAL_HCD_HC_NotifyURBChange_Callback>
 800410c:	e002      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004112:	bf00      	nop
  }
}
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08a      	sub	sp, #40	@ 0x28
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	0c5b      	lsrs	r3, r3, #17
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d004      	beq.n	8004160 <HCD_RXQLVL_IRQHandler+0x46>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b05      	cmp	r3, #5
 800415a:	f000 80b6 	beq.w	80042ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800415e:	e0b7      	b.n	80042d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80b3 	beq.w	80042ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	332c      	adds	r3, #44	@ 0x2c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80a7 	beq.w	80042ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3338      	adds	r3, #56	@ 0x38
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	18d1      	adds	r1, r2, r3
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4403      	add	r3, r0
 80041a4:	3334      	adds	r3, #52	@ 0x34
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4299      	cmp	r1, r3
 80041aa:	f200 8083 	bhi.w	80042b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	332c      	adds	r3, #44	@ 0x2c
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	b292      	uxth	r2, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f002 fe78 	bl	8006ebe <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	332c      	adds	r3, #44	@ 0x2c
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	18d1      	adds	r1, r2, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4403      	add	r3, r0
 80041f2:	332c      	adds	r3, #44	@ 0x2c
 80041f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	3338      	adds	r3, #56	@ 0x38
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	18d1      	adds	r1, r2, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4613      	mov	r3, r2
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4403      	add	r3, r0
 800421a:	3338      	adds	r3, #56	@ 0x38
 800421c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	0cdb      	lsrs	r3, r3, #19
 800422e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004232:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4613      	mov	r3, r2
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3328      	adds	r3, #40	@ 0x28
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4293      	cmp	r3, r2
 800424c:	d13f      	bne.n	80042ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d03c      	beq.n	80042ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800426a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004272:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	4413      	add	r3, r2
 800427c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004280:	461a      	mov	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	333c      	adds	r3, #60	@ 0x3c
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2d8      	uxtb	r0, r3
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	333c      	adds	r3, #60	@ 0x3c
 80042ae:	4602      	mov	r2, r0
 80042b0:	701a      	strb	r2, [r3, #0]
      break;
 80042b2:	e00c      	b.n	80042ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	334c      	adds	r3, #76	@ 0x4c
 80042c4:	2204      	movs	r2, #4
 80042c6:	701a      	strb	r2, [r3, #0]
      break;
 80042c8:	e001      	b.n	80042ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80042ce:	bf00      	nop
  }
}
 80042d0:	bf00      	nop
 80042d2:	3728      	adds	r7, #40	@ 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004304:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b02      	cmp	r3, #2
 800430e:	d10b      	bne.n	8004328 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f005 ff1a 	bl	800a154 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f043 0302 	orr.w	r3, r3, #2
 8004326:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b08      	cmp	r3, #8
 8004330:	d132      	bne.n	8004398 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f043 0308 	orr.w	r3, r3, #8
 8004338:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d126      	bne.n	8004392 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7a5b      	ldrb	r3, [r3, #9]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d113      	bne.n	8004374 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004352:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004356:	d106      	bne.n	8004366 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2102      	movs	r1, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f002 ff3c 	bl	80071dc <USB_InitFSLSPClkSel>
 8004364:	e011      	b.n	800438a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f002 ff35 	bl	80071dc <USB_InitFSLSPClkSel>
 8004372:	e00a      	b.n	800438a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	79db      	ldrb	r3, [r3, #7]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d106      	bne.n	800438a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004382:	461a      	mov	r2, r3
 8004384:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004388:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f005 ff0c 	bl	800a1a8 <HAL_HCD_PortEnabled_Callback>
 8004390:	e002      	b.n	8004398 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f005 ff16 	bl	800a1c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d103      	bne.n	80043aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f043 0320 	orr.w	r3, r3, #32
 80043a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6013      	str	r3, [r2, #0]
}
 80043b6:	bf00      	nop
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e12b      	b.n	800462a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d106      	bne.n	80043ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd f930 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2224      	movs	r2, #36	@ 0x24
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004424:	f002 f9fc 	bl	8006820 <HAL_RCC_GetPCLK1Freq>
 8004428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4a81      	ldr	r2, [pc, #516]	@ (8004634 <HAL_I2C_Init+0x274>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d807      	bhi.n	8004444 <HAL_I2C_Init+0x84>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a80      	ldr	r2, [pc, #512]	@ (8004638 <HAL_I2C_Init+0x278>)
 8004438:	4293      	cmp	r3, r2
 800443a:	bf94      	ite	ls
 800443c:	2301      	movls	r3, #1
 800443e:	2300      	movhi	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e006      	b.n	8004452 <HAL_I2C_Init+0x92>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4a7d      	ldr	r2, [pc, #500]	@ (800463c <HAL_I2C_Init+0x27c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	bf94      	ite	ls
 800444c:	2301      	movls	r3, #1
 800444e:	2300      	movhi	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0e7      	b.n	800462a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a78      	ldr	r2, [pc, #480]	@ (8004640 <HAL_I2C_Init+0x280>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0c9b      	lsrs	r3, r3, #18
 8004464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a6a      	ldr	r2, [pc, #424]	@ (8004634 <HAL_I2C_Init+0x274>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d802      	bhi.n	8004494 <HAL_I2C_Init+0xd4>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	3301      	adds	r3, #1
 8004492:	e009      	b.n	80044a8 <HAL_I2C_Init+0xe8>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	4a69      	ldr	r2, [pc, #420]	@ (8004644 <HAL_I2C_Init+0x284>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	099b      	lsrs	r3, r3, #6
 80044a6:	3301      	adds	r3, #1
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80044ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	495c      	ldr	r1, [pc, #368]	@ (8004634 <HAL_I2C_Init+0x274>)
 80044c4:	428b      	cmp	r3, r1
 80044c6:	d819      	bhi.n	80044fc <HAL_I2C_Init+0x13c>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1e59      	subs	r1, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d6:	1c59      	adds	r1, r3, #1
 80044d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80044dc:	400b      	ands	r3, r1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_I2C_Init+0x138>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1e59      	subs	r1, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f0:	3301      	adds	r3, #1
 80044f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f6:	e051      	b.n	800459c <HAL_I2C_Init+0x1dc>
 80044f8:	2304      	movs	r3, #4
 80044fa:	e04f      	b.n	800459c <HAL_I2C_Init+0x1dc>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d111      	bne.n	8004528 <HAL_I2C_Init+0x168>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	440b      	add	r3, r1
 8004512:	fbb0 f3f3 	udiv	r3, r0, r3
 8004516:	3301      	adds	r3, #1
 8004518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e012      	b.n	800454e <HAL_I2C_Init+0x18e>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1e58      	subs	r0, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	0099      	lsls	r1, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	fbb0 f3f3 	udiv	r3, r0, r3
 800453e:	3301      	adds	r3, #1
 8004540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Init+0x196>
 8004552:	2301      	movs	r3, #1
 8004554:	e022      	b.n	800459c <HAL_I2C_Init+0x1dc>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10e      	bne.n	800457c <HAL_I2C_Init+0x1bc>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1e58      	subs	r0, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	440b      	add	r3, r1
 800456c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004570:	3301      	adds	r3, #1
 8004572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457a:	e00f      	b.n	800459c <HAL_I2C_Init+0x1dc>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	1e58      	subs	r0, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	0099      	lsls	r1, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004592:	3301      	adds	r3, #1
 8004594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004598:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	6809      	ldr	r1, [r1, #0]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69da      	ldr	r2, [r3, #28]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80045ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6911      	ldr	r1, [r2, #16]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68d2      	ldr	r2, [r2, #12]
 80045d6:	4311      	orrs	r1, r2
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	430b      	orrs	r3, r1
 80045de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	000186a0 	.word	0x000186a0
 8004638:	001e847f 	.word	0x001e847f
 800463c:	003d08ff 	.word	0x003d08ff
 8004640:	431bde83 	.word	0x431bde83
 8004644:	10624dd3 	.word	0x10624dd3

08004648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	607a      	str	r2, [r7, #4]
 8004652:	461a      	mov	r2, r3
 8004654:	460b      	mov	r3, r1
 8004656:	817b      	strh	r3, [r7, #10]
 8004658:	4613      	mov	r3, r2
 800465a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800465c:	f7fd fa6a 	bl	8001b34 <HAL_GetTick>
 8004660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b20      	cmp	r3, #32
 800466c:	f040 80e0 	bne.w	8004830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2319      	movs	r3, #25
 8004676:	2201      	movs	r2, #1
 8004678:	4970      	ldr	r1, [pc, #448]	@ (800483c <HAL_I2C_Master_Transmit+0x1f4>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fc64 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004686:	2302      	movs	r3, #2
 8004688:	e0d3      	b.n	8004832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_I2C_Master_Transmit+0x50>
 8004694:	2302      	movs	r3, #2
 8004696:	e0cc      	b.n	8004832 <HAL_I2C_Master_Transmit+0x1ea>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d007      	beq.n	80046be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2221      	movs	r2, #33	@ 0x21
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2210      	movs	r2, #16
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	893a      	ldrh	r2, [r7, #8]
 80046ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a50      	ldr	r2, [pc, #320]	@ (8004840 <HAL_I2C_Master_Transmit+0x1f8>)
 80046fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004700:	8979      	ldrh	r1, [r7, #10]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	6a3a      	ldr	r2, [r7, #32]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 face 	bl	8004ca8 <I2C_MasterRequestWrite>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e08d      	b.n	8004832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800472c:	e066      	b.n	80047fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	6a39      	ldr	r1, [r7, #32]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fd22 	bl	800517c <I2C_WaitOnTXEFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2b04      	cmp	r3, #4
 8004744:	d107      	bne.n	8004756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06b      	b.n	8004832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	781a      	ldrb	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b04      	cmp	r3, #4
 8004796:	d11b      	bne.n	80047d0 <HAL_I2C_Master_Transmit+0x188>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	6a39      	ldr	r1, [r7, #32]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fd19 	bl	800520c <I2C_WaitOnBTFFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d107      	bne.n	80047f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e01a      	b.n	8004832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004800:	2b00      	cmp	r3, #0
 8004802:	d194      	bne.n	800472e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	00100002 	.word	0x00100002
 8004840:	ffff0000 	.word	0xffff0000

08004844 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08c      	sub	sp, #48	@ 0x30
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	461a      	mov	r2, r3
 8004850:	460b      	mov	r3, r1
 8004852:	817b      	strh	r3, [r7, #10]
 8004854:	4613      	mov	r3, r2
 8004856:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7fd f96c 	bl	8001b34 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b20      	cmp	r3, #32
 8004868:	f040 8217 	bne.w	8004c9a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	2319      	movs	r3, #25
 8004872:	2201      	movs	r2, #1
 8004874:	497c      	ldr	r1, [pc, #496]	@ (8004a68 <HAL_I2C_Master_Receive+0x224>)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fb66 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
 8004884:	e20a      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_I2C_Master_Receive+0x50>
 8004890:	2302      	movs	r3, #2
 8004892:	e203      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d007      	beq.n	80048ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2222      	movs	r2, #34	@ 0x22
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2210      	movs	r2, #16
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	893a      	ldrh	r2, [r7, #8]
 80048ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a5c      	ldr	r2, [pc, #368]	@ (8004a6c <HAL_I2C_Master_Receive+0x228>)
 80048fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048fc:	8979      	ldrh	r1, [r7, #10]
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fa52 	bl	8004dac <I2C_MasterRequestRead>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e1c4      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004916:	2b00      	cmp	r3, #0
 8004918:	d113      	bne.n	8004942 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	623b      	str	r3, [r7, #32]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	623b      	str	r3, [r7, #32]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e198      	b.n	8004c74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004946:	2b01      	cmp	r3, #1
 8004948:	d11b      	bne.n	8004982 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e178      	b.n	8004c74 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004986:	2b02      	cmp	r3, #2
 8004988:	d11b      	bne.n	80049c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004998:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	e158      	b.n	8004c74 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049e8:	e144      	b.n	8004c74 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	f200 80f1 	bhi.w	8004bd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d123      	bne.n	8004a44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fc4b 	bl	800529c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e145      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a42:	e117      	b.n	8004c74 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d14e      	bne.n	8004aea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a52:	2200      	movs	r2, #0
 8004a54:	4906      	ldr	r1, [pc, #24]	@ (8004a70 <HAL_I2C_Master_Receive+0x22c>)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fa76 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e11a      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
 8004a66:	bf00      	nop
 8004a68:	00100002 	.word	0x00100002
 8004a6c:	ffff0000 	.word	0xffff0000
 8004a70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ae8:	e0c4      	b.n	8004c74 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af0:	2200      	movs	r2, #0
 8004af2:	496c      	ldr	r1, [pc, #432]	@ (8004ca4 <HAL_I2C_Master_Receive+0x460>)
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fa27 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0cb      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4955      	ldr	r1, [pc, #340]	@ (8004ca4 <HAL_I2C_Master_Receive+0x460>)
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f9f9 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e09d      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bd4:	e04e      	b.n	8004c74 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fb5e 	bl	800529c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e058      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d124      	bne.n	8004c74 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c40:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f aeb6 	bne.w	80049ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3728      	adds	r7, #40	@ 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	00010004 	.word	0x00010004

08004ca8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d006      	beq.n	8004cd2 <I2C_MasterRequestWrite+0x2a>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d003      	beq.n	8004cd2 <I2C_MasterRequestWrite+0x2a>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cd0:	d108      	bne.n	8004ce4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e00b      	b.n	8004cfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce8:	2b12      	cmp	r3, #18
 8004cea:	d107      	bne.n	8004cfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f91d 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00d      	beq.n	8004d30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d22:	d103      	bne.n	8004d2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e035      	b.n	8004d9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d38:	d108      	bne.n	8004d4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d3a:	897b      	ldrh	r3, [r7, #10]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d48:	611a      	str	r2, [r3, #16]
 8004d4a:	e01b      	b.n	8004d84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d4c:	897b      	ldrh	r3, [r7, #10]
 8004d4e:	11db      	asrs	r3, r3, #7
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 0306 	and.w	r3, r3, #6
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f063 030f 	orn	r3, r3, #15
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	490e      	ldr	r1, [pc, #56]	@ (8004da4 <I2C_MasterRequestWrite+0xfc>)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f966 	bl	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e010      	b.n	8004d9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d7a:	897b      	ldrh	r3, [r7, #10]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	4907      	ldr	r1, [pc, #28]	@ (8004da8 <I2C_MasterRequestWrite+0x100>)
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f956 	bl	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	00010008 	.word	0x00010008
 8004da8:	00010002 	.word	0x00010002

08004dac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	460b      	mov	r3, r1
 8004dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004dd0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d006      	beq.n	8004de6 <I2C_MasterRequestRead+0x3a>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d003      	beq.n	8004de6 <I2C_MasterRequestRead+0x3a>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004de4:	d108      	bne.n	8004df8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e00b      	b.n	8004e10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	2b11      	cmp	r3, #17
 8004dfe:	d107      	bne.n	8004e10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f893 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e36:	d103      	bne.n	8004e40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e079      	b.n	8004f38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e4c:	d108      	bne.n	8004e60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e4e:	897b      	ldrh	r3, [r7, #10]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	611a      	str	r2, [r3, #16]
 8004e5e:	e05f      	b.n	8004f20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e60:	897b      	ldrh	r3, [r7, #10]
 8004e62:	11db      	asrs	r3, r3, #7
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0306 	and.w	r3, r3, #6
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f063 030f 	orn	r3, r3, #15
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4930      	ldr	r1, [pc, #192]	@ (8004f40 <I2C_MasterRequestRead+0x194>)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f8dc 	bl	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e054      	b.n	8004f38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e8e:	897b      	ldrh	r3, [r7, #10]
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4929      	ldr	r1, [pc, #164]	@ (8004f44 <I2C_MasterRequestRead+0x198>)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f8cc 	bl	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e044      	b.n	8004f38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ed2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f831 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efa:	d103      	bne.n	8004f04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f02:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e017      	b.n	8004f38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f08:	897b      	ldrh	r3, [r7, #10]
 8004f0a:	11db      	asrs	r3, r3, #7
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 0306 	and.w	r3, r3, #6
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f063 030e 	orn	r3, r3, #14
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4907      	ldr	r1, [pc, #28]	@ (8004f44 <I2C_MasterRequestRead+0x198>)
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f888 	bl	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	00010008 	.word	0x00010008
 8004f44:	00010002 	.word	0x00010002

08004f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f58:	e048      	b.n	8004fec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d044      	beq.n	8004fec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fc fde7 	bl	8001b34 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d139      	bne.n	8004fec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10d      	bne.n	8004f9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	43da      	mvns	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	e00c      	b.n	8004fb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	43da      	mvns	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d116      	bne.n	8004fec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	f043 0220 	orr.w	r2, r3, #32
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e023      	b.n	8005034 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	0c1b      	lsrs	r3, r3, #16
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d10d      	bne.n	8005012 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	43da      	mvns	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	461a      	mov	r2, r3
 8005010:	e00c      	b.n	800502c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	43da      	mvns	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	4013      	ands	r3, r2
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	bf0c      	ite	eq
 8005024:	2301      	moveq	r3, #1
 8005026:	2300      	movne	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	429a      	cmp	r2, r3
 8005030:	d093      	beq.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800504a:	e071      	b.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800505a:	d123      	bne.n	80050a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005074:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	f043 0204 	orr.w	r2, r3, #4
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e067      	b.n	8005174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d041      	beq.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ac:	f7fc fd42 	bl	8001b34 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d136      	bne.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d10c      	bne.n	80050e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	43da      	mvns	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4013      	ands	r3, r2
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf14      	ite	ne
 80050de:	2301      	movne	r3, #1
 80050e0:	2300      	moveq	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	e00b      	b.n	80050fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	43da      	mvns	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e021      	b.n	8005174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	0c1b      	lsrs	r3, r3, #16
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b01      	cmp	r3, #1
 8005138:	d10c      	bne.n	8005154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	43da      	mvns	r2, r3
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	4013      	ands	r3, r2
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e00b      	b.n	800516c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	43da      	mvns	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	f47f af6d 	bne.w	800504c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005188:	e034      	b.n	80051f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f8e3 	bl	8005356 <I2C_IsAcknowledgeFailed>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e034      	b.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d028      	beq.n	80051f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fc fcc7 	bl	8001b34 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11d      	bne.n	80051f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c2:	2b80      	cmp	r3, #128	@ 0x80
 80051c4:	d016      	beq.n	80051f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e007      	b.n	8005204 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fe:	2b80      	cmp	r3, #128	@ 0x80
 8005200:	d1c3      	bne.n	800518a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005218:	e034      	b.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f89b 	bl	8005356 <I2C_IsAcknowledgeFailed>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e034      	b.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d028      	beq.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005232:	f7fc fc7f 	bl	8001b34 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11d      	bne.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b04      	cmp	r3, #4
 8005254:	d016      	beq.n	8005284 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e007      	b.n	8005294 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b04      	cmp	r3, #4
 8005290:	d1c3      	bne.n	800521a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052a8:	e049      	b.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d119      	bne.n	80052ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0210 	mvn.w	r2, #16
 80052c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e030      	b.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ec:	f7fc fc22 	bl	8001b34 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11d      	bne.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530c:	2b40      	cmp	r3, #64	@ 0x40
 800530e:	d016      	beq.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e007      	b.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005348:	2b40      	cmp	r3, #64	@ 0x40
 800534a:	d1ae      	bne.n	80052aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536c:	d11b      	bne.n	80053a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005376:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f043 0204 	orr.w	r2, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e128      	b.n	8005618 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a90      	ldr	r2, [pc, #576]	@ (8005620 <HAL_I2S_Init+0x26c>)
 80053de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7fc f97b 	bl	80016dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80053fc:	f023 030f 	bic.w	r3, r3, #15
 8005400:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2202      	movs	r2, #2
 8005408:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d060      	beq.n	80054d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d102      	bne.n	8005420 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800541a:	2310      	movs	r3, #16
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	e001      	b.n	8005424 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005420:	2320      	movs	r3, #32
 8005422:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b20      	cmp	r3, #32
 800542a:	d802      	bhi.n	8005432 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005432:	2001      	movs	r0, #1
 8005434:	f001 faea 	bl	8006a0c <HAL_RCCEx_GetPeriphCLKFreq>
 8005438:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005442:	d125      	bne.n	8005490 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d010      	beq.n	800546e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	fbb2 f2f3 	udiv	r2, r2, r3
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	3305      	adds	r3, #5
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	e01f      	b.n	80054ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	fbb2 f2f3 	udiv	r2, r2, r3
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	fbb2 f3f3 	udiv	r3, r2, r3
 800548a:	3305      	adds	r3, #5
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	e00e      	b.n	80054ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	fbb2 f2f3 	udiv	r2, r2, r3
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	3305      	adds	r3, #5
 80054ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005624 <HAL_I2S_Init+0x270>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	021b      	lsls	r3, r3, #8
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	e003      	b.n	80054dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80054d4:	2302      	movs	r3, #2
 80054d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d902      	bls.n	80054e8 <HAL_I2S_Init+0x134>
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2bff      	cmp	r3, #255	@ 0xff
 80054e6:	d907      	bls.n	80054f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ec:	f043 0210 	orr.w	r2, r3, #16
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e08f      	b.n	8005618 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	ea42 0103 	orr.w	r1, r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	430a      	orrs	r2, r1
 800550a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005516:	f023 030f 	bic.w	r3, r3, #15
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6851      	ldr	r1, [r2, #4]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6892      	ldr	r2, [r2, #8]
 8005522:	4311      	orrs	r1, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68d2      	ldr	r2, [r2, #12]
 8005528:	4311      	orrs	r1, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6992      	ldr	r2, [r2, #24]
 800552e:	430a      	orrs	r2, r1
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800553a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d161      	bne.n	8005608 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a38      	ldr	r2, [pc, #224]	@ (8005628 <HAL_I2S_Init+0x274>)
 8005548:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a37      	ldr	r2, [pc, #220]	@ (800562c <HAL_I2S_Init+0x278>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <HAL_I2S_Init+0x1a4>
 8005554:	4b36      	ldr	r3, [pc, #216]	@ (8005630 <HAL_I2S_Init+0x27c>)
 8005556:	e001      	b.n	800555c <HAL_I2S_Init+0x1a8>
 8005558:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	4932      	ldr	r1, [pc, #200]	@ (800562c <HAL_I2S_Init+0x278>)
 8005564:	428a      	cmp	r2, r1
 8005566:	d101      	bne.n	800556c <HAL_I2S_Init+0x1b8>
 8005568:	4a31      	ldr	r2, [pc, #196]	@ (8005630 <HAL_I2S_Init+0x27c>)
 800556a:	e001      	b.n	8005570 <HAL_I2S_Init+0x1bc>
 800556c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005570:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005574:	f023 030f 	bic.w	r3, r3, #15
 8005578:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2b      	ldr	r2, [pc, #172]	@ (800562c <HAL_I2S_Init+0x278>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_I2S_Init+0x1d4>
 8005584:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <HAL_I2S_Init+0x27c>)
 8005586:	e001      	b.n	800558c <HAL_I2S_Init+0x1d8>
 8005588:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800558c:	2202      	movs	r2, #2
 800558e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a25      	ldr	r2, [pc, #148]	@ (800562c <HAL_I2S_Init+0x278>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_I2S_Init+0x1ea>
 800559a:	4b25      	ldr	r3, [pc, #148]	@ (8005630 <HAL_I2S_Init+0x27c>)
 800559c:	e001      	b.n	80055a2 <HAL_I2S_Init+0x1ee>
 800559e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ae:	d003      	beq.n	80055b8 <HAL_I2S_Init+0x204>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d103      	bne.n	80055c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80055b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	e001      	b.n	80055c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055d8:	4313      	orrs	r3, r2
 80055da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80055e2:	4313      	orrs	r3, r2
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80055f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a0d      	ldr	r2, [pc, #52]	@ (800562c <HAL_I2S_Init+0x278>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_I2S_Init+0x24c>
 80055fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <HAL_I2S_Init+0x27c>)
 80055fe:	e001      	b.n	8005604 <HAL_I2S_Init+0x250>
 8005600:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005604:	897a      	ldrh	r2, [r7, #10]
 8005606:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	08005905 	.word	0x08005905
 8005624:	cccccccd 	.word	0xcccccccd
 8005628:	08005a8d 	.word	0x08005a8d
 800562c:	40003800 	.word	0x40003800
 8005630:	40003400 	.word	0x40003400

08005634 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_I2S_Transmit+0x1c>
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0d8      	b.n	8005806 <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
 8005662:	e0d0      	b.n	8005806 <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_I2S_Transmit+0x40>
 8005670:	2302      	movs	r3, #2
 8005672:	e0c8      	b.n	8005806 <HAL_I2S_Transmit+0x1d2>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2203      	movs	r2, #3
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d002      	beq.n	80056a8 <HAL_I2S_Transmit+0x74>
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b05      	cmp	r3, #5
 80056a6:	d10a      	bne.n	80056be <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056bc:	e005      	b.n	80056ca <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e0:	d007      	beq.n	80056f2 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69da      	ldr	r2, [r3, #28]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056f0:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	2102      	movs	r1, #2
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f98d 	bl	8005a18 <I2S_WaitFlagStateUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d04e      	beq.n	80057a2 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005708:	f043 0201 	orr.w	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e070      	b.n	8005806 <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005734:	1c9a      	adds	r2, r3, #2
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2201      	movs	r2, #1
 800574c:	2102      	movs	r1, #2
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f962 	bl	8005a18 <I2S_WaitFlagStateUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00f      	beq.n	800577a <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e045      	b.n	8005806 <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b08      	cmp	r3, #8
 8005786:	d10c      	bne.n	80057a2 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1bb      	bne.n	8005724 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c0:	d118      	bne.n	80057f4 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	@ 0x80
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f925 	bl	8005a18 <I2S_WaitFlagStateUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00f      	beq.n	80057f4 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e008      	b.n	8005806 <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800580e:	b480      	push	{r7}
 8005810:	b083      	sub	sp, #12
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	881a      	ldrh	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10e      	bne.n	800589e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800588e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ffb8 	bl	800580e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	b292      	uxth	r2, r2
 80058ba:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	1c9a      	adds	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10e      	bne.n	80058fc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff93 	bl	8005822 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058fc:	bf00      	nop
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b04      	cmp	r3, #4
 800591e:	d13a      	bne.n	8005996 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d109      	bne.n	800593e <I2S_IRQHandler+0x3a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005934:	2b40      	cmp	r3, #64	@ 0x40
 8005936:	d102      	bne.n	800593e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff ffb4 	bl	80058a6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d126      	bne.n	8005996 <I2S_IRQHandler+0x92>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b20      	cmp	r3, #32
 8005954:	d11f      	bne.n	8005996 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005964:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005988:	f043 0202 	orr.w	r2, r3, #2
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ff50 	bl	8005836 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d136      	bne.n	8005a10 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d109      	bne.n	80059c0 <I2S_IRQHandler+0xbc>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b80      	cmp	r3, #128	@ 0x80
 80059b8:	d102      	bne.n	80059c0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff ff45 	bl	800584a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d122      	bne.n	8005a10 <I2S_IRQHandler+0x10c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d11b      	bne.n	8005a10 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059e6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	f043 0204 	orr.w	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ff13 	bl	8005836 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a10:	bf00      	nop
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a28:	f7fc f884 	bl	8001b34 <HAL_GetTick>
 8005a2c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005a2e:	e018      	b.n	8005a62 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d014      	beq.n	8005a62 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8005a38:	f7fc f87c 	bl	8001b34 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d902      	bls.n	8005a4e <I2S_WaitFlagStateUntilTimeout+0x36>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e00f      	b.n	8005a82 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d1d7      	bne.n	8005a30 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a92      	ldr	r2, [pc, #584]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d101      	bne.n	8005aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005aa6:	4b92      	ldr	r3, [pc, #584]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aa8:	e001      	b.n	8005aae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005aaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a8b      	ldr	r2, [pc, #556]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d101      	bne.n	8005ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005ac4:	4b8a      	ldr	r3, [pc, #552]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ac6:	e001      	b.n	8005acc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005ac8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad8:	d004      	beq.n	8005ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 8099 	bne.w	8005c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d107      	bne.n	8005afe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f925 	bl	8005d48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9c8 	bl	8005ea8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b1e:	2b40      	cmp	r3, #64	@ 0x40
 8005b20:	d13a      	bne.n	8005b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d035      	beq.n	8005b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a6e      	ldr	r2, [pc, #440]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005b36:	4b6e      	ldr	r3, [pc, #440]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b38:	e001      	b.n	8005b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005b3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4969      	ldr	r1, [pc, #420]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b46:	428b      	cmp	r3, r1
 8005b48:	d101      	bne.n	8005b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005b4a:	4b69      	ldr	r3, [pc, #420]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b4c:	e001      	b.n	8005b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005b4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	60fb      	str	r3, [r7, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	f043 0202 	orr.w	r2, r3, #2
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fe4f 	bl	8005836 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	f040 80c3 	bne.w	8005d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80bd 	beq.w	8005d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a49      	ldr	r2, [pc, #292]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d101      	bne.n	8005bce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005bca:	4b49      	ldr	r3, [pc, #292]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bcc:	e001      	b.n	8005bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005bce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4944      	ldr	r1, [pc, #272]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bda:	428b      	cmp	r3, r1
 8005bdc:	d101      	bne.n	8005be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005bde:	4b44      	ldr	r3, [pc, #272]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005be0:	e001      	b.n	8005be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005be2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005be6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005bec:	2300      	movs	r3, #0
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fe11 	bl	8005836 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c14:	e089      	b.n	8005d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d107      	bne.n	8005c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f8be 	bl	8005dac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d107      	bne.n	8005c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f8fd 	bl	8005e44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b40      	cmp	r3, #64	@ 0x40
 8005c52:	d12f      	bne.n	8005cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d02a      	beq.n	8005cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c6c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1e      	ldr	r2, [pc, #120]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005c78:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c7a:	e001      	b.n	8005c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4919      	ldr	r1, [pc, #100]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	d101      	bne.n	8005c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005c8c:	4b18      	ldr	r3, [pc, #96]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c8e:	e001      	b.n	8005c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005c90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	f043 0202 	orr.w	r2, r3, #2
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fdc1 	bl	8005836 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d136      	bne.n	8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d031      	beq.n	8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d101      	bne.n	8005cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005cd2:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cd4:	e001      	b.n	8005cda <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005cd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4902      	ldr	r1, [pc, #8]	@ (8005cec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ce2:	428b      	cmp	r3, r1
 8005ce4:	d106      	bne.n	8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005ce6:	4b02      	ldr	r3, [pc, #8]	@ (8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ce8:	e006      	b.n	8005cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005cea:	bf00      	nop
 8005cec:	40003800 	.word	0x40003800
 8005cf0:	40003400 	.word	0x40003400
 8005cf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cf8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cfc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f043 0204 	orr.w	r2, r3, #4
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fd87 	bl	8005836 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d28:	e000      	b.n	8005d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d2a:	bf00      	nop
}
 8005d2c:	bf00      	nop
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	1c99      	adds	r1, r3, #2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6251      	str	r1, [r2, #36]	@ 0x24
 8005d5a:	881a      	ldrh	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d113      	bne.n	8005da2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffc9 	bl	8005d34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	1c99      	adds	r1, r3, #2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6251      	str	r1, [r2, #36]	@ 0x24
 8005dbe:	8819      	ldrh	r1, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e3c <I2SEx_TxISR_I2SExt+0x90>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d101      	bne.n	8005dce <I2SEx_TxISR_I2SExt+0x22>
 8005dca:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <I2SEx_TxISR_I2SExt+0x94>)
 8005dcc:	e001      	b.n	8005dd2 <I2SEx_TxISR_I2SExt+0x26>
 8005dce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dd2:	460a      	mov	r2, r1
 8005dd4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d121      	bne.n	8005e32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a12      	ldr	r2, [pc, #72]	@ (8005e3c <I2SEx_TxISR_I2SExt+0x90>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d101      	bne.n	8005dfc <I2SEx_TxISR_I2SExt+0x50>
 8005df8:	4b11      	ldr	r3, [pc, #68]	@ (8005e40 <I2SEx_TxISR_I2SExt+0x94>)
 8005dfa:	e001      	b.n	8005e00 <I2SEx_TxISR_I2SExt+0x54>
 8005dfc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	490d      	ldr	r1, [pc, #52]	@ (8005e3c <I2SEx_TxISR_I2SExt+0x90>)
 8005e08:	428b      	cmp	r3, r1
 8005e0a:	d101      	bne.n	8005e10 <I2SEx_TxISR_I2SExt+0x64>
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <I2SEx_TxISR_I2SExt+0x94>)
 8005e0e:	e001      	b.n	8005e14 <I2SEx_TxISR_I2SExt+0x68>
 8005e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d106      	bne.n	8005e32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff81 	bl	8005d34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e32:	bf00      	nop
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40003800 	.word	0x40003800
 8005e40:	40003400 	.word	0x40003400

08005e44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68d8      	ldr	r0, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e56:	1c99      	adds	r1, r3, #2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005e5c:	b282      	uxth	r2, r0
 8005e5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d113      	bne.n	8005ea0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff ff4a 	bl	8005d34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <I2SEx_RxISR_I2SExt+0x90>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <I2SEx_RxISR_I2SExt+0x16>
 8005eba:	4b20      	ldr	r3, [pc, #128]	@ (8005f3c <I2SEx_RxISR_I2SExt+0x94>)
 8005ebc:	e001      	b.n	8005ec2 <I2SEx_RxISR_I2SExt+0x1a>
 8005ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ec2:	68d8      	ldr	r0, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec8:	1c99      	adds	r1, r3, #2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005ece:	b282      	uxth	r2, r0
 8005ed0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d121      	bne.n	8005f2e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a12      	ldr	r2, [pc, #72]	@ (8005f38 <I2SEx_RxISR_I2SExt+0x90>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <I2SEx_RxISR_I2SExt+0x50>
 8005ef4:	4b11      	ldr	r3, [pc, #68]	@ (8005f3c <I2SEx_RxISR_I2SExt+0x94>)
 8005ef6:	e001      	b.n	8005efc <I2SEx_RxISR_I2SExt+0x54>
 8005ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	490d      	ldr	r1, [pc, #52]	@ (8005f38 <I2SEx_RxISR_I2SExt+0x90>)
 8005f04:	428b      	cmp	r3, r1
 8005f06:	d101      	bne.n	8005f0c <I2SEx_RxISR_I2SExt+0x64>
 8005f08:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <I2SEx_RxISR_I2SExt+0x94>)
 8005f0a:	e001      	b.n	8005f10 <I2SEx_RxISR_I2SExt+0x68>
 8005f0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f14:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff03 	bl	8005d34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	40003800 	.word	0x40003800
 8005f3c:	40003400 	.word	0x40003400

08005f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e267      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d075      	beq.n	800604a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f5e:	4b88      	ldr	r3, [pc, #544]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d00c      	beq.n	8005f84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6a:	4b85      	ldr	r3, [pc, #532]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d112      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f76:	4b82      	ldr	r3, [pc, #520]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f82:	d10b      	bne.n	8005f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	4b7e      	ldr	r3, [pc, #504]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d05b      	beq.n	8006048 <HAL_RCC_OscConfig+0x108>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d157      	bne.n	8006048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e242      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa4:	d106      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x74>
 8005fa6:	4b76      	ldr	r3, [pc, #472]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a75      	ldr	r2, [pc, #468]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e01d      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fbc:	d10c      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x98>
 8005fbe:	4b70      	ldr	r3, [pc, #448]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	4b6d      	ldr	r3, [pc, #436]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6c      	ldr	r2, [pc, #432]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e00b      	b.n	8005ff0 <HAL_RCC_OscConfig+0xb0>
 8005fd8:	4b69      	ldr	r3, [pc, #420]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a68      	ldr	r2, [pc, #416]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	4b66      	ldr	r3, [pc, #408]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a65      	ldr	r2, [pc, #404]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8005fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d013      	beq.n	8006020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fb fd9c 	bl	8001b34 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006000:	f7fb fd98 	bl	8001b34 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b64      	cmp	r3, #100	@ 0x64
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e207      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006012:	4b5b      	ldr	r3, [pc, #364]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0xc0>
 800601e:	e014      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fb fd88 	bl	8001b34 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fb fd84 	bl	8001b34 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e1f3      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800603a:	4b51      	ldr	r3, [pc, #324]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f0      	bne.n	8006028 <HAL_RCC_OscConfig+0xe8>
 8006046:	e000      	b.n	800604a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d063      	beq.n	800611e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006056:	4b4a      	ldr	r3, [pc, #296]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006062:	4b47      	ldr	r3, [pc, #284]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800606a:	2b08      	cmp	r3, #8
 800606c:	d11c      	bne.n	80060a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800606e:	4b44      	ldr	r3, [pc, #272]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d116      	bne.n	80060a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800607a:	4b41      	ldr	r3, [pc, #260]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <HAL_RCC_OscConfig+0x152>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d001      	beq.n	8006092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e1c7      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006092:	4b3b      	ldr	r3, [pc, #236]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4937      	ldr	r1, [pc, #220]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a6:	e03a      	b.n	800611e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060b0:	4b34      	ldr	r3, [pc, #208]	@ (8006184 <HAL_RCC_OscConfig+0x244>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fb fd3d 	bl	8001b34 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060be:	f7fb fd39 	bl	8001b34 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e1a8      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060dc:	4b28      	ldr	r3, [pc, #160]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	4925      	ldr	r1, [pc, #148]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	600b      	str	r3, [r1, #0]
 80060f0:	e015      	b.n	800611e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060f2:	4b24      	ldr	r3, [pc, #144]	@ (8006184 <HAL_RCC_OscConfig+0x244>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fb fd1c 	bl	8001b34 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006100:	f7fb fd18 	bl	8001b34 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e187      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006112:	4b1b      	ldr	r3, [pc, #108]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d036      	beq.n	8006198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d016      	beq.n	8006160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006132:	4b15      	ldr	r3, [pc, #84]	@ (8006188 <HAL_RCC_OscConfig+0x248>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fb fcfc 	bl	8001b34 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006140:	f7fb fcf8 	bl	8001b34 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e167      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006152:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_RCC_OscConfig+0x240>)
 8006154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x200>
 800615e:	e01b      	b.n	8006198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006160:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <HAL_RCC_OscConfig+0x248>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006166:	f7fb fce5 	bl	8001b34 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800616c:	e00e      	b.n	800618c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616e:	f7fb fce1 	bl	8001b34 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d907      	bls.n	800618c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e150      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
 8006180:	40023800 	.word	0x40023800
 8006184:	42470000 	.word	0x42470000
 8006188:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800618c:	4b88      	ldr	r3, [pc, #544]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 800618e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1ea      	bne.n	800616e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8097 	beq.w	80062d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061aa:	4b81      	ldr	r3, [pc, #516]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	4b7d      	ldr	r3, [pc, #500]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061be:	4a7c      	ldr	r2, [pc, #496]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80061c6:	4b7a      	ldr	r3, [pc, #488]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ce:	60bb      	str	r3, [r7, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d6:	4b77      	ldr	r3, [pc, #476]	@ (80063b4 <HAL_RCC_OscConfig+0x474>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d118      	bne.n	8006214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061e2:	4b74      	ldr	r3, [pc, #464]	@ (80063b4 <HAL_RCC_OscConfig+0x474>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a73      	ldr	r2, [pc, #460]	@ (80063b4 <HAL_RCC_OscConfig+0x474>)
 80061e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ee:	f7fb fca1 	bl	8001b34 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061f6:	f7fb fc9d 	bl	8001b34 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e10c      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006208:	4b6a      	ldr	r3, [pc, #424]	@ (80063b4 <HAL_RCC_OscConfig+0x474>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d106      	bne.n	800622a <HAL_RCC_OscConfig+0x2ea>
 800621c:	4b64      	ldr	r3, [pc, #400]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006220:	4a63      	ldr	r2, [pc, #396]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6713      	str	r3, [r2, #112]	@ 0x70
 8006228:	e01c      	b.n	8006264 <HAL_RCC_OscConfig+0x324>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b05      	cmp	r3, #5
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0x30c>
 8006232:	4b5f      	ldr	r3, [pc, #380]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006236:	4a5e      	ldr	r2, [pc, #376]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006238:	f043 0304 	orr.w	r3, r3, #4
 800623c:	6713      	str	r3, [r2, #112]	@ 0x70
 800623e:	4b5c      	ldr	r3, [pc, #368]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006242:	4a5b      	ldr	r2, [pc, #364]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	6713      	str	r3, [r2, #112]	@ 0x70
 800624a:	e00b      	b.n	8006264 <HAL_RCC_OscConfig+0x324>
 800624c:	4b58      	ldr	r3, [pc, #352]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006250:	4a57      	ldr	r2, [pc, #348]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006252:	f023 0301 	bic.w	r3, r3, #1
 8006256:	6713      	str	r3, [r2, #112]	@ 0x70
 8006258:	4b55      	ldr	r3, [pc, #340]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 800625a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625c:	4a54      	ldr	r2, [pc, #336]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 800625e:	f023 0304 	bic.w	r3, r3, #4
 8006262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d015      	beq.n	8006298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626c:	f7fb fc62 	bl	8001b34 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006272:	e00a      	b.n	800628a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006274:	f7fb fc5e 	bl	8001b34 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006282:	4293      	cmp	r3, r2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e0cb      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628a:	4b49      	ldr	r3, [pc, #292]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ee      	beq.n	8006274 <HAL_RCC_OscConfig+0x334>
 8006296:	e014      	b.n	80062c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006298:	f7fb fc4c 	bl	8001b34 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800629e:	e00a      	b.n	80062b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a0:	f7fb fc48 	bl	8001b34 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e0b5      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b6:	4b3e      	ldr	r3, [pc, #248]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1ee      	bne.n	80062a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d105      	bne.n	80062d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c8:	4b39      	ldr	r3, [pc, #228]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062cc:	4a38      	ldr	r2, [pc, #224]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80a1 	beq.w	8006420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062de:	4b34      	ldr	r3, [pc, #208]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 030c 	and.w	r3, r3, #12
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d05c      	beq.n	80063a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d141      	bne.n	8006376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f2:	4b31      	ldr	r3, [pc, #196]	@ (80063b8 <HAL_RCC_OscConfig+0x478>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f8:	f7fb fc1c 	bl	8001b34 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006300:	f7fb fc18 	bl	8001b34 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e087      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006312:	4b27      	ldr	r3, [pc, #156]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69da      	ldr	r2, [r3, #28]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	019b      	lsls	r3, r3, #6
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	085b      	lsrs	r3, r3, #1
 8006336:	3b01      	subs	r3, #1
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	061b      	lsls	r3, r3, #24
 8006342:	491b      	ldr	r1, [pc, #108]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006348:	4b1b      	ldr	r3, [pc, #108]	@ (80063b8 <HAL_RCC_OscConfig+0x478>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634e:	f7fb fbf1 	bl	8001b34 <HAL_GetTick>
 8006352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006356:	f7fb fbed 	bl	8001b34 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e05c      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006368:	4b11      	ldr	r3, [pc, #68]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0f0      	beq.n	8006356 <HAL_RCC_OscConfig+0x416>
 8006374:	e054      	b.n	8006420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006376:	4b10      	ldr	r3, [pc, #64]	@ (80063b8 <HAL_RCC_OscConfig+0x478>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637c:	f7fb fbda 	bl	8001b34 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006384:	f7fb fbd6 	bl	8001b34 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e045      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006396:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <HAL_RCC_OscConfig+0x470>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0x444>
 80063a2:	e03d      	b.n	8006420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d107      	bne.n	80063bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e038      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40007000 	.word	0x40007000
 80063b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063bc:	4b1b      	ldr	r3, [pc, #108]	@ (800642c <HAL_RCC_OscConfig+0x4ec>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d028      	beq.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d121      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d11a      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d111      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	3b01      	subs	r3, #1
 8006406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006408:	429a      	cmp	r2, r3
 800640a:	d107      	bne.n	800641c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800

08006430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e0cc      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006444:	4b68      	ldr	r3, [pc, #416]	@ (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d90c      	bls.n	800646c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b65      	ldr	r3, [pc, #404]	@ (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645a:	4b63      	ldr	r3, [pc, #396]	@ (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0b8      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d020      	beq.n	80064ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006484:	4b59      	ldr	r3, [pc, #356]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4a58      	ldr	r2, [pc, #352]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 800648a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800648e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800649c:	4b53      	ldr	r3, [pc, #332]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a52      	ldr	r2, [pc, #328]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80064a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a8:	4b50      	ldr	r3, [pc, #320]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	494d      	ldr	r1, [pc, #308]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d044      	beq.n	8006550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d107      	bne.n	80064de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ce:	4b47      	ldr	r3, [pc, #284]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d119      	bne.n	800650e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e07f      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d003      	beq.n	80064ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d107      	bne.n	80064fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ee:	4b3f      	ldr	r3, [pc, #252]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e06f      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064fe:	4b3b      	ldr	r3, [pc, #236]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e067      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800650e:	4b37      	ldr	r3, [pc, #220]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f023 0203 	bic.w	r2, r3, #3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4934      	ldr	r1, [pc, #208]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	4313      	orrs	r3, r2
 800651e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006520:	f7fb fb08 	bl	8001b34 <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006526:	e00a      	b.n	800653e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006528:	f7fb fb04 	bl	8001b34 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e04f      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	4b2b      	ldr	r3, [pc, #172]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 020c 	and.w	r2, r3, #12
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	429a      	cmp	r2, r3
 800654e:	d1eb      	bne.n	8006528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006550:	4b25      	ldr	r3, [pc, #148]	@ (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d20c      	bcs.n	8006578 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b22      	ldr	r3, [pc, #136]	@ (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006566:	4b20      	ldr	r3, [pc, #128]	@ (80065e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e032      	b.n	80065de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006584:	4b19      	ldr	r3, [pc, #100]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4916      	ldr	r1, [pc, #88]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d009      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065a2:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	490e      	ldr	r1, [pc, #56]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065b6:	f000 f821 	bl	80065fc <HAL_RCC_GetSysClockFreq>
 80065ba:	4602      	mov	r2, r0
 80065bc:	4b0b      	ldr	r3, [pc, #44]	@ (80065ec <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	490a      	ldr	r1, [pc, #40]	@ (80065f0 <HAL_RCC_ClockConfig+0x1c0>)
 80065c8:	5ccb      	ldrb	r3, [r1, r3]
 80065ca:	fa22 f303 	lsr.w	r3, r2, r3
 80065ce:	4a09      	ldr	r2, [pc, #36]	@ (80065f4 <HAL_RCC_ClockConfig+0x1c4>)
 80065d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80065d2:	4b09      	ldr	r3, [pc, #36]	@ (80065f8 <HAL_RCC_ClockConfig+0x1c8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fb fa68 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40023c00 	.word	0x40023c00
 80065ec:	40023800 	.word	0x40023800
 80065f0:	0800c60c 	.word	0x0800c60c
 80065f4:	20000000 	.word	0x20000000
 80065f8:	20000004 	.word	0x20000004

080065fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b094      	sub	sp, #80	@ 0x50
 8006602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006614:	4b79      	ldr	r3, [pc, #484]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b08      	cmp	r3, #8
 800661e:	d00d      	beq.n	800663c <HAL_RCC_GetSysClockFreq+0x40>
 8006620:	2b08      	cmp	r3, #8
 8006622:	f200 80e1 	bhi.w	80067e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x34>
 800662a:	2b04      	cmp	r3, #4
 800662c:	d003      	beq.n	8006636 <HAL_RCC_GetSysClockFreq+0x3a>
 800662e:	e0db      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006630:	4b73      	ldr	r3, [pc, #460]	@ (8006800 <HAL_RCC_GetSysClockFreq+0x204>)
 8006632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006634:	e0db      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006636:	4b73      	ldr	r3, [pc, #460]	@ (8006804 <HAL_RCC_GetSysClockFreq+0x208>)
 8006638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800663a:	e0d8      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800663c:	4b6f      	ldr	r3, [pc, #444]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006644:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006646:	4b6d      	ldr	r3, [pc, #436]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d063      	beq.n	800671a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006652:	4b6a      	ldr	r3, [pc, #424]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	2200      	movs	r2, #0
 800665a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800665c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006664:	633b      	str	r3, [r7, #48]	@ 0x30
 8006666:	2300      	movs	r3, #0
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
 800666a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f04f 0100 	mov.w	r1, #0
 800667a:	0159      	lsls	r1, r3, #5
 800667c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006680:	0150      	lsls	r0, r2, #5
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4621      	mov	r1, r4
 8006688:	1a51      	subs	r1, r2, r1
 800668a:	6139      	str	r1, [r7, #16]
 800668c:	4629      	mov	r1, r5
 800668e:	eb63 0301 	sbc.w	r3, r3, r1
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066a0:	4659      	mov	r1, fp
 80066a2:	018b      	lsls	r3, r1, #6
 80066a4:	4651      	mov	r1, sl
 80066a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066aa:	4651      	mov	r1, sl
 80066ac:	018a      	lsls	r2, r1, #6
 80066ae:	4651      	mov	r1, sl
 80066b0:	ebb2 0801 	subs.w	r8, r2, r1
 80066b4:	4659      	mov	r1, fp
 80066b6:	eb63 0901 	sbc.w	r9, r3, r1
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ce:	4690      	mov	r8, r2
 80066d0:	4699      	mov	r9, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	eb18 0303 	adds.w	r3, r8, r3
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	462b      	mov	r3, r5
 80066dc:	eb49 0303 	adc.w	r3, r9, r3
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066ee:	4629      	mov	r1, r5
 80066f0:	024b      	lsls	r3, r1, #9
 80066f2:	4621      	mov	r1, r4
 80066f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066f8:	4621      	mov	r1, r4
 80066fa:	024a      	lsls	r2, r1, #9
 80066fc:	4610      	mov	r0, r2
 80066fe:	4619      	mov	r1, r3
 8006700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006702:	2200      	movs	r2, #0
 8006704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800670c:	f7fa fa2e 	bl	8000b6c <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4613      	mov	r3, r2
 8006716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006718:	e058      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800671a:	4b38      	ldr	r3, [pc, #224]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	099b      	lsrs	r3, r3, #6
 8006720:	2200      	movs	r2, #0
 8006722:	4618      	mov	r0, r3
 8006724:	4611      	mov	r1, r2
 8006726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	2300      	movs	r3, #0
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	f04f 0000 	mov.w	r0, #0
 800673c:	f04f 0100 	mov.w	r1, #0
 8006740:	0159      	lsls	r1, r3, #5
 8006742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006746:	0150      	lsls	r0, r2, #5
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4641      	mov	r1, r8
 800674e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006752:	4649      	mov	r1, r9
 8006754:	eb63 0b01 	sbc.w	fp, r3, r1
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800676c:	ebb2 040a 	subs.w	r4, r2, sl
 8006770:	eb63 050b 	sbc.w	r5, r3, fp
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	00eb      	lsls	r3, r5, #3
 800677e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006782:	00e2      	lsls	r2, r4, #3
 8006784:	4614      	mov	r4, r2
 8006786:	461d      	mov	r5, r3
 8006788:	4643      	mov	r3, r8
 800678a:	18e3      	adds	r3, r4, r3
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	464b      	mov	r3, r9
 8006790:	eb45 0303 	adc.w	r3, r5, r3
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067a2:	4629      	mov	r1, r5
 80067a4:	028b      	lsls	r3, r1, #10
 80067a6:	4621      	mov	r1, r4
 80067a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067ac:	4621      	mov	r1, r4
 80067ae:	028a      	lsls	r2, r1, #10
 80067b0:	4610      	mov	r0, r2
 80067b2:	4619      	mov	r1, r3
 80067b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b6:	2200      	movs	r2, #0
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	61fa      	str	r2, [r7, #28]
 80067bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067c0:	f7fa f9d4 	bl	8000b6c <__aeabi_uldivmod>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4613      	mov	r3, r2
 80067ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80067cc:	4b0b      	ldr	r3, [pc, #44]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x200>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	3301      	adds	r3, #1
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80067dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067e6:	e002      	b.n	80067ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3750      	adds	r7, #80	@ 0x50
 80067f4:	46bd      	mov	sp, r7
 80067f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800
 8006800:	00f42400 	.word	0x00f42400
 8006804:	007a1200 	.word	0x007a1200

08006808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800680c:	4b03      	ldr	r3, [pc, #12]	@ (800681c <HAL_RCC_GetHCLKFreq+0x14>)
 800680e:	681b      	ldr	r3, [r3, #0]
}
 8006810:	4618      	mov	r0, r3
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000000 	.word	0x20000000

08006820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006824:	f7ff fff0 	bl	8006808 <HAL_RCC_GetHCLKFreq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	0a9b      	lsrs	r3, r3, #10
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4903      	ldr	r1, [pc, #12]	@ (8006844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006836:	5ccb      	ldrb	r3, [r1, r3]
 8006838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40023800 	.word	0x40023800
 8006844:	0800c61c 	.word	0x0800c61c

08006848 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800686c:	2b00      	cmp	r3, #0
 800686e:	d035      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006870:	4b62      	ldr	r3, [pc, #392]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006876:	f7fb f95d 	bl	8001b34 <HAL_GetTick>
 800687a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800687c:	e008      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800687e:	f7fb f959 	bl	8001b34 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e0b0      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006890:	4b5b      	ldr	r3, [pc, #364]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f0      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	019a      	lsls	r2, r3, #6
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	071b      	lsls	r3, r3, #28
 80068a8:	4955      	ldr	r1, [pc, #340]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068b0:	4b52      	ldr	r3, [pc, #328]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068b6:	f7fb f93d 	bl	8001b34 <HAL_GetTick>
 80068ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068bc:	e008      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068be:	f7fb f939 	bl	8001b34 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e090      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8083 	beq.w	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	4b44      	ldr	r3, [pc, #272]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f2:	4a43      	ldr	r2, [pc, #268]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80068fa:	4b41      	ldr	r3, [pc, #260]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006906:	4b3f      	ldr	r3, [pc, #252]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a3e      	ldr	r2, [pc, #248]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800690c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006910:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006912:	f7fb f90f 	bl	8001b34 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006918:	e008      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800691a:	f7fb f90b 	bl	8001b34 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e062      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800692c:	4b35      	ldr	r3, [pc, #212]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006938:	4b31      	ldr	r3, [pc, #196]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006940:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02f      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	429a      	cmp	r2, r3
 8006954:	d028      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006956:	4b2a      	ldr	r3, [pc, #168]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800695e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006960:	4b29      	ldr	r3, [pc, #164]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006966:	4b28      	ldr	r3, [pc, #160]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800696c:	4a24      	ldr	r2, [pc, #144]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006972:	4b23      	ldr	r3, [pc, #140]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b01      	cmp	r3, #1
 800697c:	d114      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800697e:	f7fb f8d9 	bl	8001b34 <HAL_GetTick>
 8006982:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006984:	e00a      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fb f8d5 	bl	8001b34 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e02a      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699c:	4b18      	ldr	r3, [pc, #96]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0ee      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069b4:	d10d      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069b6:	4b12      	ldr	r3, [pc, #72]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ca:	490d      	ldr	r1, [pc, #52]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	608b      	str	r3, [r1, #8]
 80069d0:	e005      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069dc:	6093      	str	r3, [r2, #8]
 80069de:	4b08      	ldr	r3, [pc, #32]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ea:	4905      	ldr	r1, [pc, #20]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	42470068 	.word	0x42470068
 8006a00:	40023800 	.word	0x40023800
 8006a04:	40007000 	.word	0x40007000
 8006a08:	42470e40 	.word	0x42470e40

08006a0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d13f      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006a2a:	4b24      	ldr	r3, [pc, #144]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a32:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d006      	beq.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a40:	d12f      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a42:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006a44:	617b      	str	r3, [r7, #20]
          break;
 8006a46:	e02f      	b.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a48:	4b1c      	ldr	r3, [pc, #112]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a54:	d108      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a56:	4b19      	ldr	r3, [pc, #100]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a5e:	4a19      	ldr	r2, [pc, #100]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	e007      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a68:	4b14      	ldr	r3, [pc, #80]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a70:	4a15      	ldr	r2, [pc, #84]	@ (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a76:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a78:	4b10      	ldr	r3, [pc, #64]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a7e:	099b      	lsrs	r3, r3, #6
 8006a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	fb02 f303 	mul.w	r3, r2, r3
 8006a8a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a92:	0f1b      	lsrs	r3, r3, #28
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	617b      	str	r3, [r7, #20]
          break;
 8006aa0:	e002      	b.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
          break;
 8006aa6:	bf00      	nop
        }
      }
      break;
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006aaa:	bf00      	nop
    }
  }
  return frequency;
 8006aac:	697b      	ldr	r3, [r7, #20]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00bb8000 	.word	0x00bb8000
 8006ac4:	007a1200 	.word	0x007a1200
 8006ac8:	00f42400 	.word	0x00f42400

08006acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e07b      	b.n	8006bd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d108      	bne.n	8006af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aee:	d009      	beq.n	8006b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	61da      	str	r2, [r3, #28]
 8006af6:	e005      	b.n	8006b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fa fe5c 	bl	80017dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b74:	431a      	orrs	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b88:	ea42 0103 	orr.w	r1, r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	f003 0104 	and.w	r1, r3, #4
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	f003 0210 	and.w	r2, r3, #16
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bde:	b084      	sub	sp, #16
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	f107 001c 	add.w	r0, r7, #28
 8006bec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bf0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d123      	bne.n	8006c40 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d105      	bne.n	8006c34 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f9dc 	bl	8006ff2 <USB_CoreReset>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
 8006c3e:	e01b      	b.n	8006c78 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f9d0 	bl	8006ff2 <USB_CoreReset>
 8006c52:	4603      	mov	r3, r0
 8006c54:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c62:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c6a:	e005      	b.n	8006c78 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c78:	7fbb      	ldrb	r3, [r7, #30]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d10b      	bne.n	8006c96 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f043 0206 	orr.w	r2, r3, #6
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f043 0220 	orr.w	r2, r3, #32
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ca2:	b004      	add	sp, #16
 8006ca4:	4770      	bx	lr

08006ca6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f043 0201 	orr.w	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f023 0201 	bic.w	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d06:	78fb      	ldrb	r3, [r7, #3]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d115      	bne.n	8006d38 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d18:	200a      	movs	r0, #10
 8006d1a:	f7fa ff17 	bl	8001b4c <HAL_Delay>
      ms += 10U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	330a      	adds	r3, #10
 8006d22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f956 	bl	8006fd6 <USB_GetMode>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d01e      	beq.n	8006d6e <USB_SetCurrentMode+0x84>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d34:	d9f0      	bls.n	8006d18 <USB_SetCurrentMode+0x2e>
 8006d36:	e01a      	b.n	8006d6e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d115      	bne.n	8006d6a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d4a:	200a      	movs	r0, #10
 8006d4c:	f7fa fefe 	bl	8001b4c <HAL_Delay>
      ms += 10U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	330a      	adds	r3, #10
 8006d54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f93d 	bl	8006fd6 <USB_GetMode>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <USB_SetCurrentMode+0x84>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d66:	d9f0      	bls.n	8006d4a <USB_SetCurrentMode+0x60>
 8006d68:	e001      	b.n	8006d6e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e005      	b.n	8006d7a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d72:	d101      	bne.n	8006d78 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e01b      	b.n	8006dda <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	daf2      	bge.n	8006d90 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	f043 0220 	orr.w	r2, r3, #32
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dc6:	d901      	bls.n	8006dcc <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e006      	b.n	8006dda <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d0f0      	beq.n	8006dba <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b085      	sub	sp, #20
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dfe:	d901      	bls.n	8006e04 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e018      	b.n	8006e36 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	daf2      	bge.n	8006df2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2210      	movs	r2, #16
 8006e14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e22:	d901      	bls.n	8006e28 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e006      	b.n	8006e36 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d0f0      	beq.n	8006e16 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b089      	sub	sp, #36	@ 0x24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	461a      	mov	r2, r3
 8006e50:	460b      	mov	r3, r1
 8006e52:	71fb      	strb	r3, [r7, #7]
 8006e54:	4613      	mov	r3, r2
 8006e56:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d123      	bne.n	8006eb0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e68:	88bb      	ldrh	r3, [r7, #4]
 8006e6a:	3303      	adds	r3, #3
 8006e6c:	089b      	lsrs	r3, r3, #2
 8006e6e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e018      	b.n	8006ea8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	031a      	lsls	r2, r3, #12
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e82:	461a      	mov	r2, r3
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	3301      	adds	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3e2      	bcc.n	8006e76 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3724      	adds	r7, #36	@ 0x24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b08b      	sub	sp, #44	@ 0x2c
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	089b      	lsrs	r3, r3, #2
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	623b      	str	r3, [r7, #32]
 8006ee8:	e014      	b.n	8006f14 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	3301      	adds	r3, #1
 8006efa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	3301      	adds	r3, #1
 8006f00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	3301      	adds	r3, #1
 8006f06:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	3301      	adds	r3, #1
 8006f12:	623b      	str	r3, [r7, #32]
 8006f14:	6a3a      	ldr	r2, [r7, #32]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d3e6      	bcc.n	8006eea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f1c:	8bfb      	ldrh	r3, [r7, #30]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01e      	beq.n	8006f60 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f107 0310 	add.w	r3, r7, #16
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f46:	701a      	strb	r2, [r3, #0]
      i++;
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	3301      	adds	r3, #1
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f54:	8bfb      	ldrh	r3, [r7, #30]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f5a:	8bfb      	ldrh	r3, [r7, #30]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1ea      	bne.n	8006f36 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	372c      	adds	r7, #44	@ 0x2c
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4013      	ands	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800700a:	d901      	bls.n	8007010 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e01b      	b.n	8007048 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	daf2      	bge.n	8006ffe <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f043 0201 	orr.w	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007034:	d901      	bls.n	800703a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e006      	b.n	8007048 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b01      	cmp	r3, #1
 8007044:	d0f0      	beq.n	8007028 <USB_CoreReset+0x36>

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007054:	b084      	sub	sp, #16
 8007056:	b580      	push	{r7, lr}
 8007058:	b086      	sub	sp, #24
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007074:	461a      	mov	r2, r3
 8007076:	2300      	movs	r3, #0
 8007078:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007096:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d119      	bne.n	80070de <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80070aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d10a      	bne.n	80070c8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070c0:	f043 0304 	orr.w	r3, r3, #4
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e014      	b.n	80070f2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070d6:	f023 0304 	bic.w	r3, r3, #4
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	e009      	b.n	80070f2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070ec:	f023 0304 	bic.w	r3, r3, #4
 80070f0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070f2:	2110      	movs	r1, #16
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fe44 	bl	8006d82 <USB_FlushTxFifo>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fe6e 	bl	8006de6 <USB_FlushRxFifo>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	e015      	b.n	8007146 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007126:	461a      	mov	r2, r3
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713a:	461a      	mov	r2, r3
 800713c:	2300      	movs	r3, #0
 800713e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	3301      	adds	r3, #1
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800714a:	461a      	mov	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4293      	cmp	r3, r2
 8007150:	d3e3      	bcc.n	800711a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f04f 32ff 	mov.w	r2, #4294967295
 800715e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a18      	ldr	r2, [pc, #96]	@ (80071c4 <USB_HostInit+0x170>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d10b      	bne.n	8007180 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800716e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <USB_HostInit+0x174>)
 8007174:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a14      	ldr	r2, [pc, #80]	@ (80071cc <USB_HostInit+0x178>)
 800717a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800717e:	e009      	b.n	8007194 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2280      	movs	r2, #128	@ 0x80
 8007184:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a11      	ldr	r2, [pc, #68]	@ (80071d0 <USB_HostInit+0x17c>)
 800718a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a11      	ldr	r2, [pc, #68]	@ (80071d4 <USB_HostInit+0x180>)
 8007190:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007194:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f043 0210 	orr.w	r2, r3, #16
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <USB_HostInit+0x184>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071c0:	b004      	add	sp, #16
 80071c2:	4770      	bx	lr
 80071c4:	40040000 	.word	0x40040000
 80071c8:	01000200 	.word	0x01000200
 80071cc:	00e00300 	.word	0x00e00300
 80071d0:	00600080 	.word	0x00600080
 80071d4:	004000e0 	.word	0x004000e0
 80071d8:	a3200008 	.word	0xa3200008

080071dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071fa:	f023 0303 	bic.w	r3, r3, #3
 80071fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	78fb      	ldrb	r3, [r7, #3]
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007214:	4313      	orrs	r3, r2
 8007216:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d107      	bne.n	800722e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007224:	461a      	mov	r2, r3
 8007226:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800722a:	6053      	str	r3, [r2, #4]
 800722c:	e00c      	b.n	8007248 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d107      	bne.n	8007244 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800723a:	461a      	mov	r2, r3
 800723c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007240:	6053      	str	r3, [r2, #4]
 8007242:	e001      	b.n	8007248 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007276:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007284:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007286:	2064      	movs	r0, #100	@ 0x64
 8007288:	f7fa fc60 	bl	8001b4c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007294:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007298:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800729a:	200a      	movs	r0, #10
 800729c:	f7fa fc56 	bl	8001b4c <HAL_Delay>

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80072ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <USB_DriveVbus+0x44>
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d106      	bne.n	80072ee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072ec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f8:	d109      	bne.n	800730e <USB_DriveVbus+0x64>
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800730c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	0c5b      	lsrs	r3, r3, #17
 800733a:	f003 0303 	and.w	r3, r3, #3
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	b29b      	uxth	r3, r3
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	4608      	mov	r0, r1
 8007376:	4611      	mov	r1, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4603      	mov	r3, r0
 800737c:	70fb      	strb	r3, [r7, #3]
 800737e:	460b      	mov	r3, r1
 8007380:	70bb      	strb	r3, [r7, #2]
 8007382:	4613      	mov	r3, r2
 8007384:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	4413      	add	r3, r2
 8007396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739a:	461a      	mov	r2, r3
 800739c:	f04f 33ff 	mov.w	r3, #4294967295
 80073a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80073a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d87c      	bhi.n	80074a4 <USB_HC_Init+0x138>
 80073aa:	a201      	add	r2, pc, #4	@ (adr r2, 80073b0 <USB_HC_Init+0x44>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	08007467 	.word	0x08007467
 80073b8:	080073c1 	.word	0x080073c1
 80073bc:	08007429 	.word	0x08007429
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073cc:	461a      	mov	r2, r3
 80073ce:	f240 439d 	movw	r3, #1181	@ 0x49d
 80073d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80073d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da10      	bge.n	80073fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073fa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80073fc:	e055      	b.n	80074aa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a6f      	ldr	r2, [pc, #444]	@ (80075c0 <USB_HC_Init+0x254>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d151      	bne.n	80074aa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007406:	78fb      	ldrb	r3, [r7, #3]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4413      	add	r3, r2
 800740e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	440a      	add	r2, r1
 800741c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007420:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007424:	60d3      	str	r3, [r2, #12]
      break;
 8007426:	e040      	b.n	80074aa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007434:	461a      	mov	r2, r3
 8007436:	f240 639d 	movw	r3, #1693	@ 0x69d
 800743a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800743c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007440:	2b00      	cmp	r3, #0
 8007442:	da34      	bge.n	80074ae <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	4413      	add	r3, r2
 800744c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	0151      	lsls	r1, r2, #5
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	440a      	add	r2, r1
 800745a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800745e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007462:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007464:	e023      	b.n	80074ae <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007472:	461a      	mov	r2, r3
 8007474:	f240 2325 	movw	r3, #549	@ 0x225
 8007478:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800747a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800747e:	2b00      	cmp	r3, #0
 8007480:	da17      	bge.n	80074b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4413      	add	r3, r2
 800748a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	440a      	add	r2, r1
 8007498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800749c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80074a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80074a2:	e006      	b.n	80074b2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	77fb      	strb	r3, [r7, #31]
      break;
 80074a8:	e004      	b.n	80074b4 <USB_HC_Init+0x148>
      break;
 80074aa:	bf00      	nop
 80074ac:	e002      	b.n	80074b4 <USB_HC_Init+0x148>
      break;
 80074ae:	bf00      	nop
 80074b0:	e000      	b.n	80074b4 <USB_HC_Init+0x148>
      break;
 80074b2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074c0:	461a      	mov	r2, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	78fb      	ldrb	r3, [r7, #3]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	2101      	movs	r1, #1
 80074f6:	fa01 f303 	lsl.w	r3, r1, r3
 80074fa:	6939      	ldr	r1, [r7, #16]
 80074fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007500:	4313      	orrs	r3, r2
 8007502:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007510:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007514:	2b00      	cmp	r3, #0
 8007516:	da03      	bge.n	8007520 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007518:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	e001      	b.n	8007524 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fef9 	bl	800731c <USB_GetHostSpeed>
 800752a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800752c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007530:	2b02      	cmp	r3, #2
 8007532:	d106      	bne.n	8007542 <USB_HC_Init+0x1d6>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d003      	beq.n	8007542 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800753a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e001      	b.n	8007546 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007546:	787b      	ldrb	r3, [r7, #1]
 8007548:	059b      	lsls	r3, r3, #22
 800754a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800754e:	78bb      	ldrb	r3, [r7, #2]
 8007550:	02db      	lsls	r3, r3, #11
 8007552:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007556:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007558:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800755c:	049b      	lsls	r3, r3, #18
 800755e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007562:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007564:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007566:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800756a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	431a      	orrs	r2, r3
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007574:	78fa      	ldrb	r2, [r7, #3]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	440a      	add	r2, r1
 800757c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007584:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007586:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800758a:	2b03      	cmp	r3, #3
 800758c:	d003      	beq.n	8007596 <USB_HC_Init+0x22a>
 800758e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007592:	2b01      	cmp	r3, #1
 8007594:	d10f      	bne.n	80075b6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007596:	78fb      	ldrb	r3, [r7, #3]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4413      	add	r3, r2
 800759e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80075b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40040000 	.word	0x40040000

080075c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08c      	sub	sp, #48	@ 0x30
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80075dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075e0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a5d      	ldr	r2, [pc, #372]	@ (800775c <USB_HC_StartXfer+0x198>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d12f      	bne.n	800764a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d11c      	bne.n	800762a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	7c9b      	ldrb	r3, [r3, #18]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <USB_HC_StartXfer+0x3c>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	7c9b      	ldrb	r3, [r3, #18]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d124      	bne.n	800764a <USB_HC_StartXfer+0x86>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	799b      	ldrb	r3, [r3, #6]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d120      	bne.n	800764a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	4413      	add	r3, r2
 8007610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	6a3a      	ldr	r2, [r7, #32]
 800761c:	440a      	add	r2, r1
 800761e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007626:	60d3      	str	r3, [r2, #12]
 8007628:	e00f      	b.n	800764a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	791b      	ldrb	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10b      	bne.n	800764a <USB_HC_StartXfer+0x86>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	795b      	ldrb	r3, [r3, #5]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d107      	bne.n	800764a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fb6b 	bl	8007d1c <USB_DoPing>
        return HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	e232      	b.n	8007ab0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	799b      	ldrb	r3, [r3, #6]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d158      	bne.n	8007704 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007652:	2301      	movs	r3, #1
 8007654:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	78db      	ldrb	r3, [r3, #3]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800765e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	8a92      	ldrh	r2, [r2, #20]
 8007664:	fb03 f202 	mul.w	r2, r3, r2
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61da      	str	r2, [r3, #28]
 800766c:	e07c      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	7c9b      	ldrb	r3, [r3, #18]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d130      	bne.n	80076d8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	2bbc      	cmp	r3, #188	@ 0xbc
 800767c:	d918      	bls.n	80076b0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	8a9b      	ldrh	r3, [r3, #20]
 8007682:	461a      	mov	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d003      	beq.n	80076a0 <USB_HC_StartXfer+0xdc>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d103      	bne.n	80076a8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2202      	movs	r2, #2
 80076a4:	60da      	str	r2, [r3, #12]
 80076a6:	e05f      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2201      	movs	r2, #1
 80076ac:	60da      	str	r2, [r3, #12]
 80076ae:	e05b      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d007      	beq.n	80076d0 <USB_HC_StartXfer+0x10c>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d003      	beq.n	80076d0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2204      	movs	r2, #4
 80076cc:	60da      	str	r2, [r3, #12]
 80076ce:	e04b      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2203      	movs	r2, #3
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	e047      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10d      	bne.n	80076fa <USB_HC_StartXfer+0x136>
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	8a92      	ldrh	r2, [r2, #20]
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d907      	bls.n	80076fa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	8a92      	ldrh	r2, [r2, #20]
 80076f0:	fb03 f202 	mul.w	r2, r3, r2
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	61da      	str	r2, [r3, #28]
 80076f8:	e036      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6a1a      	ldr	r2, [r3, #32]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	61da      	str	r2, [r3, #28]
 8007702:	e031      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d018      	beq.n	800773e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	8a92      	ldrh	r2, [r2, #20]
 8007714:	4413      	add	r3, r2
 8007716:	3b01      	subs	r3, #1
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	8a92      	ldrh	r2, [r2, #20]
 800771c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007720:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007722:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007724:	8b7b      	ldrh	r3, [r7, #26]
 8007726:	429a      	cmp	r2, r3
 8007728:	d90b      	bls.n	8007742 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800772a:	8b7b      	ldrh	r3, [r7, #26]
 800772c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800772e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	8a92      	ldrh	r2, [r2, #20]
 8007734:	fb03 f202 	mul.w	r2, r3, r2
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	61da      	str	r2, [r3, #28]
 800773c:	e001      	b.n	8007742 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800773e:	2301      	movs	r3, #1
 8007740:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	78db      	ldrb	r3, [r3, #3]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800774a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	8a92      	ldrh	r2, [r2, #20]
 8007750:	fb03 f202 	mul.w	r2, r3, r2
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	61da      	str	r2, [r3, #28]
 8007758:	e006      	b.n	8007768 <USB_HC_StartXfer+0x1a4>
 800775a:	bf00      	nop
 800775c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	6a1a      	ldr	r2, [r3, #32]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007770:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007772:	04d9      	lsls	r1, r3, #19
 8007774:	4ba3      	ldr	r3, [pc, #652]	@ (8007a04 <USB_HC_StartXfer+0x440>)
 8007776:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007778:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	7d9b      	ldrb	r3, [r3, #22]
 800777e:	075b      	lsls	r3, r3, #29
 8007780:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	0148      	lsls	r0, r1, #5
 8007788:	6a39      	ldr	r1, [r7, #32]
 800778a:	4401      	add	r1, r0
 800778c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007790:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007792:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6999      	ldr	r1, [r3, #24]
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077aa:	460a      	mov	r2, r1
 80077ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	bf0c      	ite	eq
 80077be:	2301      	moveq	r3, #1
 80077c0:	2300      	movne	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	6a3a      	ldr	r2, [r7, #32]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	7e7b      	ldrb	r3, [r7, #25]
 80077f6:	075b      	lsls	r3, r3, #29
 80077f8:	69f9      	ldr	r1, [r7, #28]
 80077fa:	0148      	lsls	r0, r1, #5
 80077fc:	6a39      	ldr	r1, [r7, #32]
 80077fe:	4401      	add	r1, r0
 8007800:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007804:	4313      	orrs	r3, r2
 8007806:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	799b      	ldrb	r3, [r3, #6]
 800780c:	2b01      	cmp	r3, #1
 800780e:	f040 80c3 	bne.w	8007998 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	7c5b      	ldrb	r3, [r3, #17]
 8007816:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800781c:	4313      	orrs	r3, r2
 800781e:	69fa      	ldr	r2, [r7, #28]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	6a3a      	ldr	r2, [r7, #32]
 8007824:	440a      	add	r2, r1
 8007826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800782a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800782e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	6a3a      	ldr	r2, [r7, #32]
 8007844:	440a      	add	r2, r1
 8007846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800784a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800784e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	79db      	ldrb	r3, [r3, #7]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d123      	bne.n	80078a0 <USB_HC_StartXfer+0x2dc>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	78db      	ldrb	r3, [r3, #3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d11f      	bne.n	80078a0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	4413      	add	r3, r2
 8007868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	6a3a      	ldr	r2, [r7, #32]
 8007874:	440a      	add	r2, r1
 8007876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800787e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	4413      	add	r3, r2
 8007888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	6a3a      	ldr	r2, [r7, #32]
 8007894:	440a      	add	r2, r1
 8007896:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800789a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800789e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	7c9b      	ldrb	r3, [r3, #18]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d003      	beq.n	80078b0 <USB_HC_StartXfer+0x2ec>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	7c9b      	ldrb	r3, [r3, #18]
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d117      	bne.n	80078e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d113      	bne.n	80078e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	78db      	ldrb	r3, [r3, #3]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d10f      	bne.n	80078e0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	6a3a      	ldr	r2, [r7, #32]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078de:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	7c9b      	ldrb	r3, [r3, #18]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d162      	bne.n	80079ae <USB_HC_StartXfer+0x3ea>
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	78db      	ldrb	r3, [r3, #3]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d15e      	bne.n	80079ae <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d858      	bhi.n	80079ac <USB_HC_StartXfer+0x3e8>
 80078fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <USB_HC_StartXfer+0x33c>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007911 	.word	0x08007911
 8007904:	08007933 	.word	0x08007933
 8007908:	08007955 	.word	0x08007955
 800790c:	08007977 	.word	0x08007977
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	440a      	add	r2, r1
 8007926:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800792a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800792e:	6053      	str	r3, [r2, #4]
          break;
 8007930:	e03d      	b.n	80079ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	4413      	add	r3, r2
 800793a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	6a3a      	ldr	r2, [r7, #32]
 8007946:	440a      	add	r2, r1
 8007948:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800794c:	f043 030e 	orr.w	r3, r3, #14
 8007950:	6053      	str	r3, [r2, #4]
          break;
 8007952:	e02c      	b.n	80079ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	69fa      	ldr	r2, [r7, #28]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	6a3a      	ldr	r2, [r7, #32]
 8007968:	440a      	add	r2, r1
 800796a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800796e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007972:	6053      	str	r3, [r2, #4]
          break;
 8007974:	e01b      	b.n	80079ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	4413      	add	r3, r2
 800797e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	69fa      	ldr	r2, [r7, #28]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	440a      	add	r2, r1
 800798c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007994:	6053      	str	r3, [r2, #4]
          break;
 8007996:	e00a      	b.n	80079ae <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a4:	461a      	mov	r2, r3
 80079a6:	2300      	movs	r3, #0
 80079a8:	6053      	str	r3, [r2, #4]
 80079aa:	e000      	b.n	80079ae <USB_HC_StartXfer+0x3ea>
          break;
 80079ac:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079c4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	78db      	ldrb	r3, [r3, #3]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	e003      	b.n	80079e0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079de:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079e6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f4:	461a      	mov	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007a00:	2300      	movs	r3, #0
 8007a02:	e055      	b.n	8007ab0 <USB_HC_StartXfer+0x4ec>
 8007a04:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	78db      	ldrb	r3, [r3, #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d14e      	bne.n	8007aae <USB_HC_StartXfer+0x4ea>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d04a      	beq.n	8007aae <USB_HC_StartXfer+0x4ea>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	79db      	ldrb	r3, [r3, #7]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d146      	bne.n	8007aae <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	7c9b      	ldrb	r3, [r3, #18]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d831      	bhi.n	8007a8c <USB_HC_StartXfer+0x4c8>
 8007a28:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <USB_HC_StartXfer+0x46c>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a65 	.word	0x08007a65
 8007a38:	08007a41 	.word	0x08007a41
 8007a3c:	08007a65 	.word	0x08007a65
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	3303      	adds	r3, #3
 8007a46:	089b      	lsrs	r3, r3, #2
 8007a48:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007a4a:	8afa      	ldrh	r2, [r7, #22]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d91c      	bls.n	8007a90 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f043 0220 	orr.w	r2, r3, #32
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a62:	e015      	b.n	8007a90 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6a1b      	ldr	r3, [r3, #32]
 8007a68:	3303      	adds	r3, #3
 8007a6a:	089b      	lsrs	r3, r3, #2
 8007a6c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a6e:	8afa      	ldrh	r2, [r7, #22]
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d90a      	bls.n	8007a94 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a8a:	e003      	b.n	8007a94 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007a8c:	bf00      	nop
 8007a8e:	e002      	b.n	8007a96 <USB_HC_StartXfer+0x4d2>
        break;
 8007a90:	bf00      	nop
 8007a92:	e000      	b.n	8007a96 <USB_HC_StartXfer+0x4d2>
        break;
 8007a94:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6999      	ldr	r1, [r3, #24]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	9000      	str	r0, [sp, #0]
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff f9ca 	bl	8006e42 <USB_WritePacket>
  }

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3728      	adds	r7, #40	@ 0x28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	b29b      	uxth	r3, r3
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b089      	sub	sp, #36	@ 0x24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	0c9b      	lsrs	r3, r3, #18
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	0fdb      	lsrs	r3, r3, #31
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	0fdb      	lsrs	r3, r3, #31
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d10d      	bne.n	8007b5c <USB_HC_Halt+0x82>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <USB_HC_Halt+0x82>
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d002      	beq.n	8007b58 <USB_HC_Halt+0x7e>
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d101      	bne.n	8007b5c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e0d8      	b.n	8007d0e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <USB_HC_Halt+0x8e>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d173      	bne.n	8007c50 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69ba      	ldr	r2, [r7, #24]
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b86:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d14a      	bne.n	8007c2a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d133      	bne.n	8007c08 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bbe:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bde:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bec:	d82e      	bhi.n	8007c4c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c04:	d0ec      	beq.n	8007be0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c06:	e081      	b.n	8007d0c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c26:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c28:	e070      	b.n	8007d0c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	69ba      	ldr	r2, [r7, #24]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c48:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c4a:	e05f      	b.n	8007d0c <USB_HC_Halt+0x232>
            break;
 8007c4c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c4e:	e05d      	b.n	8007d0c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c6e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d133      	bne.n	8007ce8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	0151      	lsls	r1, r2, #5
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cbe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ccc:	d81d      	bhi.n	8007d0a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ce4:	d0ec      	beq.n	8007cc0 <USB_HC_Halt+0x1e6>
 8007ce6:	e011      	b.n	8007d0c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e000      	b.n	8007d0c <USB_HC_Halt+0x232>
          break;
 8007d0a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3724      	adds	r7, #36	@ 0x24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d30:	2301      	movs	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	04da      	lsls	r2, r3, #19
 8007d38:	4b15      	ldr	r3, [pc, #84]	@ (8007d90 <USB_DoPing+0x74>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	0151      	lsls	r1, r2, #5
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	440a      	add	r2, r1
 8007d44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d4c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d64:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d6c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	1ff80000 	.word	0x1ff80000

08007d94 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe ff8d 	bl	8006cc8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007dae:	2110      	movs	r1, #16
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7fe ffe6 	bl	8006d82 <USB_FlushTxFifo>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff f810 	bl	8006de6 <USB_FlushRxFifo>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	61bb      	str	r3, [r7, #24]
 8007dd4:	e01f      	b.n	8007e16 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007df4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dfc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	3301      	adds	r3, #1
 8007e14:	61bb      	str	r3, [r7, #24]
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b0f      	cmp	r3, #15
 8007e1a:	d9dc      	bls.n	8007dd6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	e034      	b.n	8007e8c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e56:	461a      	mov	r2, r3
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e68:	d80c      	bhi.n	8007e84 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e80:	d0ec      	beq.n	8007e5c <USB_StopHost+0xc8>
 8007e82:	e000      	b.n	8007e86 <USB_StopHost+0xf2>
        break;
 8007e84:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	d9c7      	bls.n	8007e22 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7fe fefc 	bl	8006ca6 <USB_EnableGlobalInt>

  return ret;
 8007eae:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3720      	adds	r7, #32
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b089      	sub	sp, #36	@ 0x24
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	2102      	movs	r1, #2
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fc85 	bl	80087d6 <USBH_FindInterface>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2bff      	cmp	r3, #255	@ 0xff
 8007ed4:	d002      	beq.n	8007edc <USBH_CDC_InterfaceInit+0x24>
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d901      	bls.n	8007ee0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007edc:	2302      	movs	r3, #2
 8007ede:	e13d      	b.n	800815c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fc5a 	bl	800879e <USBH_SelectInterface>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e131      	b.n	800815c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007efe:	2050      	movs	r0, #80	@ 0x50
 8007f00:	f002 fb64 	bl	800a5cc <malloc>
 8007f04:	4603      	mov	r3, r0
 8007f06:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e11f      	b.n	800815c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f1c:	2250      	movs	r2, #80	@ 0x50
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68b8      	ldr	r0, [r7, #8]
 8007f22:	f002 fe1b 	bl	800ab5c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	211a      	movs	r1, #26
 8007f2c:	fb01 f303 	mul.w	r3, r1, r3
 8007f30:	4413      	add	r3, r2
 8007f32:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	da15      	bge.n	8007f6a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	211a      	movs	r1, #26
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	4413      	add	r3, r2
 8007f4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f4e:	781a      	ldrb	r2, [r3, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	211a      	movs	r1, #26
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f64:	881a      	ldrh	r2, [r3, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	785b      	ldrb	r3, [r3, #1]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f001 ffbe 	bl	8009ef2 <USBH_AllocPipe>
 8007f76:	4603      	mov	r3, r0
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	7819      	ldrb	r1, [r3, #0]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	7858      	ldrb	r0, [r3, #1]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	8952      	ldrh	r2, [r2, #10]
 8007f96:	9202      	str	r2, [sp, #8]
 8007f98:	2203      	movs	r2, #3
 8007f9a:	9201      	str	r2, [sp, #4]
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	4623      	mov	r3, r4
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 ff76 	bl	8009e94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2200      	movs	r2, #0
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f002 fa85 	bl	800a4c0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2200      	movs	r2, #0
 8007fba:	210a      	movs	r1, #10
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fc0a 	bl	80087d6 <USBH_FindInterface>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	2bff      	cmp	r3, #255	@ 0xff
 8007fca:	d002      	beq.n	8007fd2 <USBH_CDC_InterfaceInit+0x11a>
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d901      	bls.n	8007fd6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e0c2      	b.n	800815c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	211a      	movs	r1, #26
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	b25b      	sxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da16      	bge.n	800801c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	211a      	movs	r1, #26
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	211a      	movs	r1, #26
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	4413      	add	r3, r2
 8008010:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008014:	881a      	ldrh	r2, [r3, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	835a      	strh	r2, [r3, #26]
 800801a:	e015      	b.n	8008048 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	211a      	movs	r1, #26
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	4413      	add	r3, r2
 8008028:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	211a      	movs	r1, #26
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008042:	881a      	ldrh	r2, [r3, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	211a      	movs	r1, #26
 800804e:	fb01 f303 	mul.w	r3, r1, r3
 8008052:	4413      	add	r3, r2
 8008054:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b25b      	sxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	da16      	bge.n	800808e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	211a      	movs	r1, #26
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	4413      	add	r3, r2
 800806c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	211a      	movs	r1, #26
 800807c:	fb01 f303 	mul.w	r3, r1, r3
 8008080:	4413      	add	r3, r2
 8008082:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008086:	881a      	ldrh	r2, [r3, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	835a      	strh	r2, [r3, #26]
 800808c:	e015      	b.n	80080ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	211a      	movs	r1, #26
 8008094:	fb01 f303 	mul.w	r3, r1, r3
 8008098:	4413      	add	r3, r2
 800809a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800809e:	781a      	ldrb	r2, [r3, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	211a      	movs	r1, #26
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80080b4:	881a      	ldrh	r2, [r3, #0]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	7b9b      	ldrb	r3, [r3, #14]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 ff16 	bl	8009ef2 <USBH_AllocPipe>
 80080c6:	4603      	mov	r3, r0
 80080c8:	461a      	mov	r2, r3
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	7bdb      	ldrb	r3, [r3, #15]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 ff0c 	bl	8009ef2 <USBH_AllocPipe>
 80080da:	4603      	mov	r3, r0
 80080dc:	461a      	mov	r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	7b59      	ldrb	r1, [r3, #13]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	7b98      	ldrb	r0, [r3, #14]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	8b12      	ldrh	r2, [r2, #24]
 80080fa:	9202      	str	r2, [sp, #8]
 80080fc:	2202      	movs	r2, #2
 80080fe:	9201      	str	r2, [sp, #4]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4623      	mov	r3, r4
 8008104:	4602      	mov	r2, r0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fec4 	bl	8009e94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	7b19      	ldrb	r1, [r3, #12]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	7bd8      	ldrb	r0, [r3, #15]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	8b52      	ldrh	r2, [r2, #26]
 8008124:	9202      	str	r2, [sp, #8]
 8008126:	2202      	movs	r2, #2
 8008128:	9201      	str	r2, [sp, #4]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4623      	mov	r3, r4
 800812e:	4602      	mov	r2, r0
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 feaf 	bl	8009e94 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	7b5b      	ldrb	r3, [r3, #13]
 8008142:	2200      	movs	r2, #0
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f002 f9ba 	bl	800a4c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	7b1b      	ldrb	r3, [r3, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f002 f9b3 	bl	800a4c0 <USBH_LL_SetToggle>

  return USBH_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}

08008164 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00e      	beq.n	800819c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fea4 	bl	8009ed2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 fecf 	bl	8009f34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	7b1b      	ldrb	r3, [r3, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	7b1b      	ldrb	r3, [r3, #12]
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fe91 	bl	8009ed2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	7b1b      	ldrb	r3, [r3, #12]
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 febc 	bl	8009f34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	7b5b      	ldrb	r3, [r3, #13]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00e      	beq.n	80081e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	7b5b      	ldrb	r3, [r3, #13]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 fe7e 	bl	8009ed2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	7b5b      	ldrb	r3, [r3, #13]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fea9 	bl	8009f34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f002 f9ed 	bl	800a5dc <free>
    phost->pActiveClass->pData = 0U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008208:	2200      	movs	r2, #0
 800820a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3340      	adds	r3, #64	@ 0x40
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8b1 	bl	8008396 <GetLineCoding>
 8008234:	4603      	mov	r3, r0
 8008236:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008244:	2102      	movs	r1, #2
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800824a:	7afb      	ldrb	r3, [r7, #11]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800825c:	2301      	movs	r3, #1
 800825e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008274:	2b04      	cmp	r3, #4
 8008276:	d877      	bhi.n	8008368 <USBH_CDC_Process+0x114>
 8008278:	a201      	add	r2, pc, #4	@ (adr r2, 8008280 <USBH_CDC_Process+0x2c>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008295 	.word	0x08008295
 8008284:	0800829b 	.word	0x0800829b
 8008288:	080082cb 	.word	0x080082cb
 800828c:	0800833f 	.word	0x0800833f
 8008290:	0800834d 	.word	0x0800834d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
      break;
 8008298:	e06d      	b.n	8008376 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f897 	bl	80083d4 <SetLineCoding>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2202      	movs	r2, #2
 80082b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082b8:	e058      	b.n	800836c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d055      	beq.n	800836c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2204      	movs	r2, #4
 80082c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80082c8:	e050      	b.n	800836c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	3340      	adds	r3, #64	@ 0x40
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f860 	bl	8008396 <GetLineCoding>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d126      	bne.n	800832e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d13b      	bne.n	8008370 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008302:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008304:	429a      	cmp	r2, r3
 8008306:	d133      	bne.n	8008370 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008312:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008314:	429a      	cmp	r2, r3
 8008316:	d12b      	bne.n	8008370 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008320:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008322:	429a      	cmp	r2, r3
 8008324:	d124      	bne.n	8008370 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f958 	bl	80085dc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800832c:	e020      	b.n	8008370 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d01d      	beq.n	8008370 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2204      	movs	r2, #4
 8008338:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800833c:	e018      	b.n	8008370 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f867 	bl	8008412 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f8da 	bl	80084fe <CDC_ProcessReception>
      break;
 800834a:	e014      	b.n	8008376 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 f81a 	bl	8009388 <USBH_ClrFeature>
 8008354:	4603      	mov	r3, r0
 8008356:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008366:	e005      	b.n	8008374 <USBH_CDC_Process+0x120>

    default:
      break;
 8008368:	bf00      	nop
 800836a:	e004      	b.n	8008376 <USBH_CDC_Process+0x122>
      break;
 800836c:	bf00      	nop
 800836e:	e002      	b.n	8008376 <USBH_CDC_Process+0x122>
      break;
 8008370:	bf00      	nop
 8008372:	e000      	b.n	8008376 <USBH_CDC_Process+0x122>
      break;
 8008374:	bf00      	nop

  }

  return status;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b082      	sub	sp, #8
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	22a1      	movs	r2, #161	@ 0xa1
 80083a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2221      	movs	r2, #33	@ 0x21
 80083aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2207      	movs	r2, #7
 80083bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2207      	movs	r2, #7
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 fb14 	bl	80099f2 <USBH_CtlReq>
 80083ca:	4603      	mov	r3, r0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2221      	movs	r2, #33	@ 0x21
 80083e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2207      	movs	r2, #7
 80083fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2207      	movs	r2, #7
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 faf5 	bl	80099f2 <USBH_CtlReq>
 8008408:	4603      	mov	r3, r0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af02      	add	r7, sp, #8
 8008418:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008424:	2300      	movs	r3, #0
 8008426:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800842e:	2b01      	cmp	r3, #1
 8008430:	d002      	beq.n	8008438 <CDC_ProcessTransmission+0x26>
 8008432:	2b02      	cmp	r3, #2
 8008434:	d023      	beq.n	800847e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008436:	e05e      	b.n	80084f6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	8b12      	ldrh	r2, [r2, #24]
 8008440:	4293      	cmp	r3, r2
 8008442:	d90b      	bls.n	800845c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	69d9      	ldr	r1, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8b1a      	ldrh	r2, [r3, #24]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	7b5b      	ldrb	r3, [r3, #13]
 8008450:	2001      	movs	r0, #1
 8008452:	9000      	str	r0, [sp, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 fcda 	bl	8009e0e <USBH_BulkSendData>
 800845a:	e00b      	b.n	8008474 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	7b5b      	ldrb	r3, [r3, #13]
 800846a:	2001      	movs	r0, #1
 800846c:	9000      	str	r0, [sp, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 fccd 	bl	8009e0e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2202      	movs	r2, #2
 8008478:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800847c:	e03b      	b.n	80084f6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	7b5b      	ldrb	r3, [r3, #13]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fff1 	bl	800a46c <USBH_LL_GetURBState>
 800848a:	4603      	mov	r3, r0
 800848c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800848e:	7afb      	ldrb	r3, [r7, #11]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d128      	bne.n	80084e6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	8b12      	ldrh	r2, [r2, #24]
 800849c:	4293      	cmp	r3, r2
 800849e:	d90e      	bls.n	80084be <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	8b12      	ldrh	r2, [r2, #24]
 80084a8:	1a9a      	subs	r2, r3, r2
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	8b12      	ldrh	r2, [r2, #24]
 80084b6:	441a      	add	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	61da      	str	r2, [r3, #28]
 80084bc:	e002      	b.n	80084c4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d004      	beq.n	80084d6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80084d4:	e00e      	b.n	80084f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f868 	bl	80085b4 <USBH_CDC_TransmitCallback>
      break;
 80084e4:	e006      	b.n	80084f4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d103      	bne.n	80084f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80084f4:	bf00      	nop
  }
}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008510:	2300      	movs	r3, #0
 8008512:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800851a:	2b03      	cmp	r3, #3
 800851c:	d002      	beq.n	8008524 <CDC_ProcessReception+0x26>
 800851e:	2b04      	cmp	r3, #4
 8008520:	d00e      	beq.n	8008540 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008522:	e043      	b.n	80085ac <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	6a19      	ldr	r1, [r3, #32]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	8b5a      	ldrh	r2, [r3, #26]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	7b1b      	ldrb	r3, [r3, #12]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 fc91 	bl	8009e58 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2204      	movs	r2, #4
 800853a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800853e:	e035      	b.n	80085ac <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	7b1b      	ldrb	r3, [r3, #12]
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 ff90 	bl	800a46c <USBH_LL_GetURBState>
 800854c:	4603      	mov	r3, r0
 800854e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008550:	7cfb      	ldrb	r3, [r7, #19]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d129      	bne.n	80085aa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	7b1b      	ldrb	r3, [r3, #12]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 fef3 	bl	800a348 <USBH_LL_GetLastXferSize>
 8008562:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	429a      	cmp	r2, r3
 800856c:	d016      	beq.n	800859c <CDC_ProcessReception+0x9e>
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	8b5b      	ldrh	r3, [r3, #26]
 8008572:	461a      	mov	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	4293      	cmp	r3, r2
 8008578:	d110      	bne.n	800859c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1ad2      	subs	r2, r2, r3
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6a1a      	ldr	r2, [r3, #32]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	441a      	add	r2, r3
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2203      	movs	r2, #3
 8008596:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800859a:	e006      	b.n	80085aa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f80f 	bl	80085c8 <USBH_CDC_ReceiveCallback>
      break;
 80085aa:	bf00      	nop
  }
}
 80085ac:	bf00      	nop
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008604:	2302      	movs	r3, #2
 8008606:	e029      	b.n	800865c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	79fa      	ldrb	r2, [r7, #7]
 800860c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f81f 	bl	8008664 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f001 fdc3 	bl	800a1e0 <USBH_LL_Init>

  return USBH_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e009      	b.n	800868a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	33e0      	adds	r3, #224	@ 0xe0
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	2200      	movs	r2, #0
 8008682:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3301      	adds	r3, #1
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b0f      	cmp	r3, #15
 800868e:	d9f2      	bls.n	8008676 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e009      	b.n	80086aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b0:	d3f1      	bcc.n	8008696 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2240      	movs	r2, #64	@ 0x40
 80086d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	331c      	adds	r3, #28
 8008702:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f002 fa27 	bl	800ab5c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f002 fa1e 	bl	800ab5c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008726:	2212      	movs	r2, #18
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f002 fa16 	bl	800ab5c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008736:	223e      	movs	r2, #62	@ 0x3e
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f002 fa0e 	bl	800ab5c <memset>

  return USBH_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d016      	beq.n	800878c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10e      	bne.n	8008786 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800876e:	1c59      	adds	r1, r3, #1
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	33de      	adds	r3, #222	@ 0xde
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
 8008784:	e004      	b.n	8008790 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008786:	2302      	movs	r3, #2
 8008788:	73fb      	strb	r3, [r7, #15]
 800878a:	e001      	b.n	8008790 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800878c:	2302      	movs	r3, #2
 800878e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008790:	7bfb      	ldrb	r3, [r7, #15]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80087b4:	78fa      	ldrb	r2, [r7, #3]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d204      	bcs.n	80087c4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80087c2:	e001      	b.n	80087c8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80087c4:	2302      	movs	r3, #2
 80087c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b087      	sub	sp, #28
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	4608      	mov	r0, r1
 80087e0:	4611      	mov	r1, r2
 80087e2:	461a      	mov	r2, r3
 80087e4:	4603      	mov	r3, r0
 80087e6:	70fb      	strb	r3, [r7, #3]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70bb      	strb	r3, [r7, #2]
 80087ec:	4613      	mov	r3, r2
 80087ee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087fe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008800:	e025      	b.n	800884e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	221a      	movs	r2, #26
 8008806:	fb02 f303 	mul.w	r3, r2, r3
 800880a:	3308      	adds	r3, #8
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	3302      	adds	r3, #2
 8008812:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	795b      	ldrb	r3, [r3, #5]
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	429a      	cmp	r2, r3
 800881c:	d002      	beq.n	8008824 <USBH_FindInterface+0x4e>
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	2bff      	cmp	r3, #255	@ 0xff
 8008822:	d111      	bne.n	8008848 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008828:	78ba      	ldrb	r2, [r7, #2]
 800882a:	429a      	cmp	r2, r3
 800882c:	d002      	beq.n	8008834 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800882e:	78bb      	ldrb	r3, [r7, #2]
 8008830:	2bff      	cmp	r3, #255	@ 0xff
 8008832:	d109      	bne.n	8008848 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008838:	787a      	ldrb	r2, [r7, #1]
 800883a:	429a      	cmp	r2, r3
 800883c:	d002      	beq.n	8008844 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800883e:	787b      	ldrb	r3, [r7, #1]
 8008840:	2bff      	cmp	r3, #255	@ 0xff
 8008842:	d101      	bne.n	8008848 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	e006      	b.n	8008856 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	3301      	adds	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d9d6      	bls.n	8008802 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008854:	23ff      	movs	r3, #255	@ 0xff
}
 8008856:	4618      	mov	r0, r3
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fcf4 	bl	800a258 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008870:	2101      	movs	r1, #1
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 fe0d 	bl	800a492 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af04      	add	r7, sp, #16
 800888a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800888c:	2302      	movs	r3, #2
 800888e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b01      	cmp	r3, #1
 800889e:	d102      	bne.n	80088a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2203      	movs	r2, #3
 80088a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b0b      	cmp	r3, #11
 80088ae:	f200 81bb 	bhi.w	8008c28 <USBH_Process+0x3a4>
 80088b2:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <USBH_Process+0x34>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	080088e9 	.word	0x080088e9
 80088bc:	0800891b 	.word	0x0800891b
 80088c0:	08008983 	.word	0x08008983
 80088c4:	08008bc3 	.word	0x08008bc3
 80088c8:	08008c29 	.word	0x08008c29
 80088cc:	08008a23 	.word	0x08008a23
 80088d0:	08008b69 	.word	0x08008b69
 80088d4:	08008a59 	.word	0x08008a59
 80088d8:	08008a79 	.word	0x08008a79
 80088dc:	08008a97 	.word	0x08008a97
 80088e0:	08008adb 	.word	0x08008adb
 80088e4:	08008bab 	.word	0x08008bab
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 819b 	beq.w	8008c2c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80088fc:	20c8      	movs	r0, #200	@ 0xc8
 80088fe:	f001 fe12 	bl	800a526 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fd05 	bl	800a312 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008918:	e188      	b.n	8008c2c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008920:	2b01      	cmp	r3, #1
 8008922:	d107      	bne.n	8008934 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008932:	e18a      	b.n	8008c4a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800893a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800893e:	d914      	bls.n	800896a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008946:	3301      	adds	r3, #1
 8008948:	b2da      	uxtb	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008956:	2b03      	cmp	r3, #3
 8008958:	d903      	bls.n	8008962 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	220d      	movs	r2, #13
 800895e:	701a      	strb	r2, [r3, #0]
      break;
 8008960:	e173      	b.n	8008c4a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
      break;
 8008968:	e16f      	b.n	8008c4a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008970:	f103 020a 	add.w	r2, r3, #10
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800897a:	200a      	movs	r0, #10
 800897c:	f001 fdd3 	bl	800a526 <USBH_Delay>
      break;
 8008980:	e163      	b.n	8008c4a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008992:	2104      	movs	r1, #4
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008998:	2064      	movs	r0, #100	@ 0x64
 800899a:	f001 fdc4 	bl	800a526 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fc90 	bl	800a2c4 <USBH_LL_GetSpeed>
 80089a4:	4603      	mov	r3, r0
 80089a6:	461a      	mov	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2205      	movs	r2, #5
 80089b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80089b4:	2100      	movs	r1, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fa9b 	bl	8009ef2 <USBH_AllocPipe>
 80089bc:	4603      	mov	r3, r0
 80089be:	461a      	mov	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80089c4:	2180      	movs	r1, #128	@ 0x80
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fa93 	bl	8009ef2 <USBH_AllocPipe>
 80089cc:	4603      	mov	r3, r0
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7919      	ldrb	r1, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80089e8:	9202      	str	r2, [sp, #8]
 80089ea:	2200      	movs	r2, #0
 80089ec:	9201      	str	r2, [sp, #4]
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	4603      	mov	r3, r0
 80089f2:	2280      	movs	r2, #128	@ 0x80
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 fa4d 	bl	8009e94 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7959      	ldrb	r1, [r3, #5]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a0e:	9202      	str	r2, [sp, #8]
 8008a10:	2200      	movs	r2, #0
 8008a12:	9201      	str	r2, [sp, #4]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	4603      	mov	r3, r0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f001 fa3a 	bl	8009e94 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a20:	e113      	b.n	8008c4a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f916 	bl	8008c54 <USBH_HandleEnum>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008a2c:	7bbb      	ldrb	r3, [r7, #14]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f040 80fd 	bne.w	8008c30 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d103      	bne.n	8008a50 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a4e:	e0ef      	b.n	8008c30 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2207      	movs	r2, #7
 8008a54:	701a      	strb	r2, [r3, #0]
      break;
 8008a56:	e0eb      	b.n	8008c30 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 80e8 	beq.w	8008c34 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2208      	movs	r2, #8
 8008a74:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008a76:	e0dd      	b.n	8008c34 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fc3a 	bl	80092fa <USBH_SetCfg>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 80d5 	bne.w	8008c38 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2209      	movs	r2, #9
 8008a92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a94:	e0d0      	b.n	8008c38 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d016      	beq.n	8008ad2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fc4a 	bl	8009340 <USBH_SetFeature>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	220a      	movs	r2, #10
 8008abc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008abe:	e0bd      	b.n	8008c3c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	f040 80b9 	bne.w	8008c3c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	220a      	movs	r2, #10
 8008ace:	701a      	strb	r2, [r3, #0]
      break;
 8008ad0:	e0b4      	b.n	8008c3c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	220a      	movs	r2, #10
 8008ad6:	701a      	strb	r2, [r3, #0]
      break;
 8008ad8:	e0b0      	b.n	8008c3c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 80ad 	beq.w	8008c40 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
 8008af2:	e016      	b.n	8008b22 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008af4:	7bfa      	ldrb	r2, [r7, #15]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	32de      	adds	r2, #222	@ 0xde
 8008afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afe:	791a      	ldrb	r2, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d108      	bne.n	8008b1c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008b0a:	7bfa      	ldrb	r2, [r7, #15]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	32de      	adds	r2, #222	@ 0xde
 8008b10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008b1a:	e005      	b.n	8008b28 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0e5      	beq.n	8008af4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d016      	beq.n	8008b60 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	4798      	blx	r3
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d109      	bne.n	8008b58 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2206      	movs	r2, #6
 8008b48:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b50:	2103      	movs	r1, #3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b56:	e073      	b.n	8008c40 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	220d      	movs	r2, #13
 8008b5c:	701a      	strb	r2, [r3, #0]
      break;
 8008b5e:	e06f      	b.n	8008c40 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	220d      	movs	r2, #13
 8008b64:	701a      	strb	r2, [r3, #0]
      break;
 8008b66:	e06b      	b.n	8008c40 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d017      	beq.n	8008ba2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d103      	bne.n	8008b92 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	220b      	movs	r2, #11
 8008b8e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b90:	e058      	b.n	8008c44 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d154      	bne.n	8008c44 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	220d      	movs	r2, #13
 8008b9e:	701a      	strb	r2, [r3, #0]
      break;
 8008ba0:	e050      	b.n	8008c44 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	220d      	movs	r2, #13
 8008ba6:	701a      	strb	r2, [r3, #0]
      break;
 8008ba8:	e04c      	b.n	8008c44 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d049      	beq.n	8008c48 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	4798      	blx	r3
      }
      break;
 8008bc0:	e042      	b.n	8008c48 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff fd4a 	bl	8008664 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bfe:	2105      	movs	r1, #5
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d107      	bne.n	8008c20 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff fe22 	bl	8008862 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c1e:	e014      	b.n	8008c4a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fb19 	bl	800a258 <USBH_LL_Start>
      break;
 8008c26:	e010      	b.n	8008c4a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008c28:	bf00      	nop
 8008c2a:	e00e      	b.n	8008c4a <USBH_Process+0x3c6>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e00c      	b.n	8008c4a <USBH_Process+0x3c6>
      break;
 8008c30:	bf00      	nop
 8008c32:	e00a      	b.n	8008c4a <USBH_Process+0x3c6>
    break;
 8008c34:	bf00      	nop
 8008c36:	e008      	b.n	8008c4a <USBH_Process+0x3c6>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e006      	b.n	8008c4a <USBH_Process+0x3c6>
      break;
 8008c3c:	bf00      	nop
 8008c3e:	e004      	b.n	8008c4a <USBH_Process+0x3c6>
      break;
 8008c40:	bf00      	nop
 8008c42:	e002      	b.n	8008c4a <USBH_Process+0x3c6>
      break;
 8008c44:	bf00      	nop
 8008c46:	e000      	b.n	8008c4a <USBH_Process+0x3c6>
      break;
 8008c48:	bf00      	nop
  }
  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af04      	add	r7, sp, #16
 8008c5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	785b      	ldrb	r3, [r3, #1]
 8008c68:	2b07      	cmp	r3, #7
 8008c6a:	f200 81bd 	bhi.w	8008fe8 <USBH_HandleEnum+0x394>
 8008c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <USBH_HandleEnum+0x20>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008d4f 	.word	0x08008d4f
 8008c7c:	08008db9 	.word	0x08008db9
 8008c80:	08008e43 	.word	0x08008e43
 8008c84:	08008ead 	.word	0x08008ead
 8008c88:	08008f1d 	.word	0x08008f1d
 8008c8c:	08008f63 	.word	0x08008f63
 8008c90:	08008fa9 	.word	0x08008fa9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c94:	2108      	movs	r1, #8
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa4c 	bl	8009134 <USBH_Get_DevDesc>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d12e      	bne.n	8008d04 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7919      	ldrb	r1, [r3, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008cca:	9202      	str	r2, [sp, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	9201      	str	r2, [sp, #4]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2280      	movs	r2, #128	@ 0x80
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 f8dc 	bl	8009e94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	7959      	ldrb	r1, [r3, #5]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008cf0:	9202      	str	r2, [sp, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	9201      	str	r2, [sp, #4]
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 f8c9 	bl	8009e94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d02:	e173      	b.n	8008fec <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	f040 8170 	bne.w	8008fec <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d12:	3301      	adds	r3, #1
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d903      	bls.n	8008d2e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	220d      	movs	r2, #13
 8008d2a:	701a      	strb	r2, [r3, #0]
      break;
 8008d2c:	e15e      	b.n	8008fec <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	795b      	ldrb	r3, [r3, #5]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f8fd 	bl	8009f34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	791b      	ldrb	r3, [r3, #4]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 f8f7 	bl	8009f34 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	701a      	strb	r2, [r3, #0]
      break;
 8008d4c:	e14e      	b.n	8008fec <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008d4e:	2112      	movs	r1, #18
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f9ef 	bl	8009134 <USBH_Get_DevDesc>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d103      	bne.n	8008d68 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d66:	e143      	b.n	8008ff0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	f040 8140 	bne.w	8008ff0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d76:	3301      	adds	r3, #1
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d903      	bls.n	8008d92 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	220d      	movs	r2, #13
 8008d8e:	701a      	strb	r2, [r3, #0]
      break;
 8008d90:	e12e      	b.n	8008ff0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	795b      	ldrb	r3, [r3, #5]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f8cb 	bl	8009f34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	791b      	ldrb	r3, [r3, #4]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 f8c5 	bl	8009f34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	701a      	strb	r2, [r3, #0]
      break;
 8008db6:	e11b      	b.n	8008ff0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008db8:	2101      	movs	r1, #1
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa79 	bl	80092b2 <USBH_SetAddress>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d130      	bne.n	8008e2c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008dca:	2002      	movs	r0, #2
 8008dcc:	f001 fbab 	bl	800a526 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2203      	movs	r2, #3
 8008ddc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	7919      	ldrb	r1, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008df2:	9202      	str	r2, [sp, #8]
 8008df4:	2200      	movs	r2, #0
 8008df6:	9201      	str	r2, [sp, #4]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2280      	movs	r2, #128	@ 0x80
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 f848 	bl	8009e94 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7959      	ldrb	r1, [r3, #5]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e18:	9202      	str	r2, [sp, #8]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	9201      	str	r2, [sp, #4]
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	4603      	mov	r3, r0
 8008e22:	2200      	movs	r2, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f835 	bl	8009e94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e2a:	e0e3      	b.n	8008ff4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	f040 80e0 	bne.w	8008ff4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	220d      	movs	r2, #13
 8008e38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	705a      	strb	r2, [r3, #1]
      break;
 8008e40:	e0d8      	b.n	8008ff4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008e42:	2109      	movs	r1, #9
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f9a1 	bl	800918c <USBH_Get_CfgDesc>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2204      	movs	r2, #4
 8008e58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e5a:	e0cd      	b.n	8008ff8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	f040 80ca 	bne.w	8008ff8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d903      	bls.n	8008e86 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	220d      	movs	r2, #13
 8008e82:	701a      	strb	r2, [r3, #0]
      break;
 8008e84:	e0b8      	b.n	8008ff8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	795b      	ldrb	r3, [r3, #5]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 f851 	bl	8009f34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	791b      	ldrb	r3, [r3, #4]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f84b 	bl	8009f34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
      break;
 8008eaa:	e0a5      	b.n	8008ff8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f969 	bl	800918c <USBH_Get_CfgDesc>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2205      	movs	r2, #5
 8008ec8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008eca:	e097      	b.n	8008ffc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	f040 8094 	bne.w	8008ffc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008eda:	3301      	adds	r3, #1
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d903      	bls.n	8008ef6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	220d      	movs	r2, #13
 8008ef2:	701a      	strb	r2, [r3, #0]
      break;
 8008ef4:	e082      	b.n	8008ffc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	795b      	ldrb	r3, [r3, #5]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 f819 	bl	8009f34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	791b      	ldrb	r3, [r3, #4]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 f813 	bl	8009f34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
      break;
 8008f1a:	e06f      	b.n	8008ffc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d019      	beq.n	8008f5a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008f32:	23ff      	movs	r3, #255	@ 0xff
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f953 	bl	80091e0 <USBH_Get_StringDesc>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2206      	movs	r2, #6
 8008f48:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f4a:	e059      	b.n	8009000 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d156      	bne.n	8009000 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2206      	movs	r2, #6
 8008f56:	705a      	strb	r2, [r3, #1]
      break;
 8008f58:	e052      	b.n	8009000 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2206      	movs	r2, #6
 8008f5e:	705a      	strb	r2, [r3, #1]
      break;
 8008f60:	e04e      	b.n	8009000 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d019      	beq.n	8008fa0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f78:	23ff      	movs	r3, #255	@ 0xff
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f930 	bl	80091e0 <USBH_Get_StringDesc>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f90:	e038      	b.n	8009004 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d135      	bne.n	8009004 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2207      	movs	r2, #7
 8008f9c:	705a      	strb	r2, [r3, #1]
      break;
 8008f9e:	e031      	b.n	8009004 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2207      	movs	r2, #7
 8008fa4:	705a      	strb	r2, [r3, #1]
      break;
 8008fa6:	e02d      	b.n	8009004 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d017      	beq.n	8008fe2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008fbe:	23ff      	movs	r3, #255	@ 0xff
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f90d 	bl	80091e0 <USBH_Get_StringDesc>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008fd4:	e018      	b.n	8009008 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d115      	bne.n	8009008 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe0:	e012      	b.n	8009008 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe6:	e00f      	b.n	8009008 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008fe8:	bf00      	nop
 8008fea:	e00e      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8008fec:	bf00      	nop
 8008fee:	e00c      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8008ff0:	bf00      	nop
 8008ff2:	e00a      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8008ff4:	bf00      	nop
 8008ff6:	e008      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8008ff8:	bf00      	nop
 8008ffa:	e006      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8008ffc:	bf00      	nop
 8008ffe:	e004      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8009000:	bf00      	nop
 8009002:	e002      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <USBH_HandleEnum+0x3b6>
      break;
 8009008:	bf00      	nop
  }
  return Status;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f804 	bl	8009056 <USBH_HandleSof>
}
 800904e:	bf00      	nop
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b0b      	cmp	r3, #11
 8009066:	d10a      	bne.n	800907e <USBH_HandleSof+0x28>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d005      	beq.n	800907e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
  }
}
 800907e:	bf00      	nop
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009096:	bf00      	nop
}
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80090b2:	bf00      	nop
}
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 f8be 	bl	800a28e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	791b      	ldrb	r3, [r3, #4]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 ff0b 	bl	8009f34 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	795b      	ldrb	r3, [r3, #5]
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 ff05 	bl	8009f34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009140:	887b      	ldrh	r3, [r7, #2]
 8009142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009146:	d901      	bls.n	800914c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009148:	2303      	movs	r3, #3
 800914a:	e01b      	b.n	8009184 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009152:	887b      	ldrh	r3, [r7, #2]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4613      	mov	r3, r2
 8009158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800915c:	2100      	movs	r1, #0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f872 	bl	8009248 <USBH_GetDescriptor>
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d109      	bne.n	8009182 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009174:	887a      	ldrh	r2, [r7, #2]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f929 	bl	80093d0 <USBH_ParseDevDesc>
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af02      	add	r7, sp, #8
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	331c      	adds	r3, #28
 800919c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800919e:	887b      	ldrh	r3, [r7, #2]
 80091a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091a4:	d901      	bls.n	80091aa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e016      	b.n	80091d8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80091aa:	887b      	ldrh	r3, [r7, #2]
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091b4:	2100      	movs	r1, #0
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f846 	bl	8009248 <USBH_GetDescriptor>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d107      	bne.n	80091d6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80091c6:	887b      	ldrh	r3, [r7, #2]
 80091c8:	461a      	mov	r2, r3
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f9af 	bl	8009530 <USBH_ParseCfgDesc>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	461a      	mov	r2, r3
 80091ec:	460b      	mov	r3, r1
 80091ee:	72fb      	strb	r3, [r7, #11]
 80091f0:	4613      	mov	r3, r2
 80091f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80091f4:	893b      	ldrh	r3, [r7, #8]
 80091f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091fa:	d802      	bhi.n	8009202 <USBH_Get_StringDesc+0x22>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009202:	2303      	movs	r3, #3
 8009204:	e01c      	b.n	8009240 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009206:	7afb      	ldrb	r3, [r7, #11]
 8009208:	b29b      	uxth	r3, r3
 800920a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800920e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009216:	893b      	ldrh	r3, [r7, #8]
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	460b      	mov	r3, r1
 800921c:	2100      	movs	r1, #0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 f812 	bl	8009248 <USBH_GetDescriptor>
 8009224:	4603      	mov	r3, r0
 8009226:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d107      	bne.n	800923e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009234:	893a      	ldrh	r2, [r7, #8]
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fb8d 	bl	8009958 <USBH_ParseStringDesc>
  }

  return status;
 800923e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	607b      	str	r3, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	72fb      	strb	r3, [r7, #11]
 8009256:	4613      	mov	r3, r2
 8009258:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	789b      	ldrb	r3, [r3, #2]
 800925e:	2b01      	cmp	r3, #1
 8009260:	d11c      	bne.n	800929c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009268:	b2da      	uxtb	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2206      	movs	r2, #6
 8009272:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	893a      	ldrh	r2, [r7, #8]
 8009278:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800927a:	893b      	ldrh	r3, [r7, #8]
 800927c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009280:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009284:	d104      	bne.n	8009290 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f240 4209 	movw	r2, #1033	@ 0x409
 800928c:	829a      	strh	r2, [r3, #20]
 800928e:	e002      	b.n	8009296 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	8b3a      	ldrh	r2, [r7, #24]
 800929a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800929c:	8b3b      	ldrh	r3, [r7, #24]
 800929e:	461a      	mov	r2, r3
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fba5 	bl	80099f2 <USBH_CtlReq>
 80092a8:	4603      	mov	r3, r0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	789b      	ldrb	r3, [r3, #2]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d10f      	bne.n	80092e6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2205      	movs	r2, #5
 80092d0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092e6:	2200      	movs	r2, #0
 80092e8:	2100      	movs	r1, #0
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fb81 	bl	80099f2 <USBH_CtlReq>
 80092f0:	4603      	mov	r3, r0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	789b      	ldrb	r3, [r3, #2]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d10e      	bne.n	800932c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2209      	movs	r2, #9
 8009318:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	887a      	ldrh	r2, [r7, #2]
 800931e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800932c:	2200      	movs	r2, #0
 800932e:	2100      	movs	r1, #0
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fb5e 	bl	80099f2 <USBH_CtlReq>
 8009336:	4603      	mov	r3, r0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	789b      	ldrb	r3, [r3, #2]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d10f      	bne.n	8009374 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2203      	movs	r2, #3
 800935e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009374:	2200      	movs	r2, #0
 8009376:	2100      	movs	r1, #0
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fb3a 	bl	80099f2 <USBH_CtlReq>
 800937e:	4603      	mov	r3, r0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	789b      	ldrb	r3, [r3, #2]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d10f      	bne.n	80093bc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80093bc:	2200      	movs	r2, #0
 80093be:	2100      	movs	r1, #0
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fb16 	bl	80099f2 <USBH_CtlReq>
 80093c6:	4603      	mov	r3, r0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80093e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80093f0:	2302      	movs	r3, #2
 80093f2:	e094      	b.n	800951e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	781a      	ldrb	r2, [r3, #0]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	785a      	ldrb	r2, [r3, #1]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	3302      	adds	r3, #2
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	3303      	adds	r3, #3
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	b29b      	uxth	r3, r3
 8009416:	4313      	orrs	r3, r2
 8009418:	b29a      	uxth	r2, r3
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	791a      	ldrb	r2, [r3, #4]
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	795a      	ldrb	r2, [r3, #5]
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	799a      	ldrb	r2, [r3, #6]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	79da      	ldrb	r2, [r3, #7]
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800944e:	2b01      	cmp	r3, #1
 8009450:	d11b      	bne.n	800948a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	79db      	ldrb	r3, [r3, #7]
 8009456:	2b20      	cmp	r3, #32
 8009458:	dc0f      	bgt.n	800947a <USBH_ParseDevDesc+0xaa>
 800945a:	2b08      	cmp	r3, #8
 800945c:	db0f      	blt.n	800947e <USBH_ParseDevDesc+0xae>
 800945e:	3b08      	subs	r3, #8
 8009460:	4a32      	ldr	r2, [pc, #200]	@ (800952c <USBH_ParseDevDesc+0x15c>)
 8009462:	fa22 f303 	lsr.w	r3, r2, r3
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	bf14      	ite	ne
 800946e:	2301      	movne	r3, #1
 8009470:	2300      	moveq	r3, #0
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	d106      	bne.n	8009486 <USBH_ParseDevDesc+0xb6>
 8009478:	e001      	b.n	800947e <USBH_ParseDevDesc+0xae>
 800947a:	2b40      	cmp	r3, #64	@ 0x40
 800947c:	d003      	beq.n	8009486 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2208      	movs	r2, #8
 8009482:	71da      	strb	r2, [r3, #7]
        break;
 8009484:	e000      	b.n	8009488 <USBH_ParseDevDesc+0xb8>
        break;
 8009486:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009488:	e00e      	b.n	80094a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009490:	2b02      	cmp	r3, #2
 8009492:	d107      	bne.n	80094a4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	79db      	ldrb	r3, [r3, #7]
 8009498:	2b08      	cmp	r3, #8
 800949a:	d005      	beq.n	80094a8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	2208      	movs	r2, #8
 80094a0:	71da      	strb	r2, [r3, #7]
 80094a2:	e001      	b.n	80094a8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80094a4:	2303      	movs	r3, #3
 80094a6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	2b08      	cmp	r3, #8
 80094ac:	d936      	bls.n	800951c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	3308      	adds	r3, #8
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	3309      	adds	r3, #9
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	b29b      	uxth	r3, r3
 80094c0:	4313      	orrs	r3, r2
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	330a      	adds	r3, #10
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	330b      	adds	r3, #11
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	021b      	lsls	r3, r3, #8
 80094d8:	b29b      	uxth	r3, r3
 80094da:	4313      	orrs	r3, r2
 80094dc:	b29a      	uxth	r2, r3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	330c      	adds	r3, #12
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	330d      	adds	r3, #13
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	021b      	lsls	r3, r3, #8
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	4313      	orrs	r3, r2
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	7b9a      	ldrb	r2, [r3, #14]
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	7bda      	ldrb	r2, [r3, #15]
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	7c1a      	ldrb	r2, [r3, #16]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	7c5a      	ldrb	r2, [r3, #17]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
}
 800951e:	4618      	mov	r0, r3
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	01000101 	.word	0x01000101

08009530 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08c      	sub	sp, #48	@ 0x30
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009544:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009552:	2300      	movs	r3, #0
 8009554:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800955e:	2302      	movs	r3, #2
 8009560:	e0da      	b.n	8009718 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b09      	cmp	r3, #9
 800956c:	d002      	beq.n	8009574 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	2209      	movs	r2, #9
 8009572:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	785a      	ldrb	r2, [r3, #1]
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	3302      	adds	r3, #2
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	3303      	adds	r3, #3
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	b29b      	uxth	r3, r3
 8009596:	4313      	orrs	r3, r2
 8009598:	b29b      	uxth	r3, r3
 800959a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800959e:	bf28      	it	cs
 80095a0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	791a      	ldrb	r2, [r3, #4]
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	795a      	ldrb	r2, [r3, #5]
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	799a      	ldrb	r2, [r3, #6]
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	79da      	ldrb	r2, [r3, #7]
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	7a1a      	ldrb	r2, [r3, #8]
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	2b09      	cmp	r3, #9
 80095d6:	f240 809d 	bls.w	8009714 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80095da:	2309      	movs	r3, #9
 80095dc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80095de:	2300      	movs	r3, #0
 80095e0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80095e2:	e081      	b.n	80096e8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095e4:	f107 0316 	add.w	r3, r7, #22
 80095e8:	4619      	mov	r1, r3
 80095ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095ec:	f000 f9e7 	bl	80099be <USBH_GetNextDesc>
 80095f0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80095f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f4:	785b      	ldrb	r3, [r3, #1]
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d176      	bne.n	80096e8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80095fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b09      	cmp	r3, #9
 8009600:	d002      	beq.n	8009608 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	2209      	movs	r2, #9
 8009606:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800960c:	221a      	movs	r2, #26
 800960e:	fb02 f303 	mul.w	r3, r2, r3
 8009612:	3308      	adds	r3, #8
 8009614:	6a3a      	ldr	r2, [r7, #32]
 8009616:	4413      	add	r3, r2
 8009618:	3302      	adds	r3, #2
 800961a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800961c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800961e:	69f8      	ldr	r0, [r7, #28]
 8009620:	f000 f87e 	bl	8009720 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800962e:	e043      	b.n	80096b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009630:	f107 0316 	add.w	r3, r7, #22
 8009634:	4619      	mov	r1, r3
 8009636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009638:	f000 f9c1 	bl	80099be <USBH_GetNextDesc>
 800963c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800963e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009640:	785b      	ldrb	r3, [r3, #1]
 8009642:	2b05      	cmp	r3, #5
 8009644:	d138      	bne.n	80096b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	795b      	ldrb	r3, [r3, #5]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d113      	bne.n	8009676 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009652:	2b02      	cmp	r3, #2
 8009654:	d003      	beq.n	800965e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	799b      	ldrb	r3, [r3, #6]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d10b      	bne.n	8009676 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	79db      	ldrb	r3, [r3, #7]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10b      	bne.n	800967e <USBH_ParseCfgDesc+0x14e>
 8009666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	2b09      	cmp	r3, #9
 800966c:	d007      	beq.n	800967e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800966e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009670:	2209      	movs	r2, #9
 8009672:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009674:	e003      	b.n	800967e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009678:	2207      	movs	r2, #7
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	e000      	b.n	8009680 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800967e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009684:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009688:	3201      	adds	r2, #1
 800968a:	00d2      	lsls	r2, r2, #3
 800968c:	211a      	movs	r1, #26
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	4413      	add	r3, r2
 8009694:	3308      	adds	r3, #8
 8009696:	6a3a      	ldr	r2, [r7, #32]
 8009698:	4413      	add	r3, r2
 800969a:	3304      	adds	r3, #4
 800969c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800969e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096a0:	69b9      	ldr	r1, [r7, #24]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 f870 	bl	8009788 <USBH_ParseEPDesc>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80096ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096b2:	3301      	adds	r3, #1
 80096b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	791b      	ldrb	r3, [r3, #4]
 80096bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d204      	bcs.n	80096ce <USBH_ParseCfgDesc+0x19e>
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	885a      	ldrh	r2, [r3, #2]
 80096c8:	8afb      	ldrh	r3, [r7, #22]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d8b0      	bhi.n	8009630 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d201      	bcs.n	80096de <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80096da:	2303      	movs	r3, #3
 80096dc:	e01c      	b.n	8009718 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80096de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096e2:	3301      	adds	r3, #1
 80096e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80096e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d805      	bhi.n	80096fc <USBH_ParseCfgDesc+0x1cc>
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	885a      	ldrh	r2, [r3, #2]
 80096f4:	8afb      	ldrh	r3, [r7, #22]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	f63f af74 	bhi.w	80095e4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	791b      	ldrb	r3, [r3, #4]
 8009700:	2b02      	cmp	r3, #2
 8009702:	bf28      	it	cs
 8009704:	2302      	movcs	r3, #2
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800970c:	429a      	cmp	r2, r3
 800970e:	d201      	bcs.n	8009714 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009710:	2303      	movs	r3, #3
 8009712:	e001      	b.n	8009718 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009714:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009718:	4618      	mov	r0, r3
 800971a:	3730      	adds	r7, #48	@ 0x30
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781a      	ldrb	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	785a      	ldrb	r2, [r3, #1]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	789a      	ldrb	r2, [r3, #2]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	78da      	ldrb	r2, [r3, #3]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	3304      	adds	r3, #4
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b02      	cmp	r3, #2
 8009752:	bf28      	it	cs
 8009754:	2302      	movcs	r3, #2
 8009756:	b2da      	uxtb	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	795a      	ldrb	r2, [r3, #5]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	799a      	ldrb	r2, [r3, #6]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	79da      	ldrb	r2, [r3, #7]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	7a1a      	ldrb	r2, [r3, #8]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	721a      	strb	r2, [r3, #8]
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	785a      	ldrb	r2, [r3, #1]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	789a      	ldrb	r2, [r3, #2]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	78da      	ldrb	r2, [r3, #3]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3304      	adds	r3, #4
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3305      	adds	r3, #5
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	021b      	lsls	r3, r3, #8
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	4313      	orrs	r3, r2
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	799a      	ldrb	r2, [r3, #6]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	889b      	ldrh	r3, [r3, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d009      	beq.n	80097f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80097e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ea:	d804      	bhi.n	80097f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80097f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f4:	d901      	bls.n	80097fa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80097f6:	2303      	movs	r3, #3
 80097f8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009800:	2b00      	cmp	r3, #0
 8009802:	d136      	bne.n	8009872 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	78db      	ldrb	r3, [r3, #3]
 8009808:	f003 0303 	and.w	r3, r3, #3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d108      	bne.n	8009822 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	889b      	ldrh	r3, [r3, #4]
 8009814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009818:	f240 8097 	bls.w	800994a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800981c:	2303      	movs	r3, #3
 800981e:	75fb      	strb	r3, [r7, #23]
 8009820:	e093      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	78db      	ldrb	r3, [r3, #3]
 8009826:	f003 0303 	and.w	r3, r3, #3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d107      	bne.n	800983e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	889b      	ldrh	r3, [r3, #4]
 8009832:	2b40      	cmp	r3, #64	@ 0x40
 8009834:	f240 8089 	bls.w	800994a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009838:	2303      	movs	r3, #3
 800983a:	75fb      	strb	r3, [r7, #23]
 800983c:	e085      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	78db      	ldrb	r3, [r3, #3]
 8009842:	f003 0303 	and.w	r3, r3, #3
 8009846:	2b01      	cmp	r3, #1
 8009848:	d005      	beq.n	8009856 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	78db      	ldrb	r3, [r3, #3]
 800984e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009852:	2b03      	cmp	r3, #3
 8009854:	d10a      	bne.n	800986c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	799b      	ldrb	r3, [r3, #6]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <USBH_ParseEPDesc+0xde>
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	799b      	ldrb	r3, [r3, #6]
 8009862:	2b10      	cmp	r3, #16
 8009864:	d970      	bls.n	8009948 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009866:	2303      	movs	r3, #3
 8009868:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800986a:	e06d      	b.n	8009948 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800986c:	2303      	movs	r3, #3
 800986e:	75fb      	strb	r3, [r7, #23]
 8009870:	e06b      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009878:	2b01      	cmp	r3, #1
 800987a:	d13c      	bne.n	80098f6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	78db      	ldrb	r3, [r3, #3]
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	2b02      	cmp	r3, #2
 8009886:	d005      	beq.n	8009894 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	78db      	ldrb	r3, [r3, #3]
 800988c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	889b      	ldrh	r3, [r3, #4]
 8009898:	2b40      	cmp	r3, #64	@ 0x40
 800989a:	d956      	bls.n	800994a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800989c:	2303      	movs	r3, #3
 800989e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80098a0:	e053      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	78db      	ldrb	r3, [r3, #3]
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d10e      	bne.n	80098cc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	799b      	ldrb	r3, [r3, #6]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80098ba:	2b10      	cmp	r3, #16
 80098bc:	d803      	bhi.n	80098c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80098c2:	2b40      	cmp	r3, #64	@ 0x40
 80098c4:	d941      	bls.n	800994a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098c6:	2303      	movs	r3, #3
 80098c8:	75fb      	strb	r3, [r7, #23]
 80098ca:	e03e      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	78db      	ldrb	r3, [r3, #3]
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d10b      	bne.n	80098f0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	799b      	ldrb	r3, [r3, #6]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d004      	beq.n	80098ea <USBH_ParseEPDesc+0x162>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	889b      	ldrh	r3, [r3, #4]
 80098e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e8:	d32f      	bcc.n	800994a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098ea:	2303      	movs	r3, #3
 80098ec:	75fb      	strb	r3, [r7, #23]
 80098ee:	e02c      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80098f0:	2303      	movs	r3, #3
 80098f2:	75fb      	strb	r3, [r7, #23]
 80098f4:	e029      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d120      	bne.n	8009942 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	78db      	ldrb	r3, [r3, #3]
 8009904:	f003 0303 	and.w	r3, r3, #3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	889b      	ldrh	r3, [r3, #4]
 8009910:	2b08      	cmp	r3, #8
 8009912:	d01a      	beq.n	800994a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009914:	2303      	movs	r3, #3
 8009916:	75fb      	strb	r3, [r7, #23]
 8009918:	e017      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	78db      	ldrb	r3, [r3, #3]
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	2b03      	cmp	r3, #3
 8009924:	d10a      	bne.n	800993c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	799b      	ldrb	r3, [r3, #6]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <USBH_ParseEPDesc+0x1ae>
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	889b      	ldrh	r3, [r3, #4]
 8009932:	2b08      	cmp	r3, #8
 8009934:	d909      	bls.n	800994a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009936:	2303      	movs	r3, #3
 8009938:	75fb      	strb	r3, [r7, #23]
 800993a:	e006      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800993c:	2303      	movs	r3, #3
 800993e:	75fb      	strb	r3, [r7, #23]
 8009940:	e003      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009942:	2303      	movs	r3, #3
 8009944:	75fb      	strb	r3, [r7, #23]
 8009946:	e000      	b.n	800994a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009948:	bf00      	nop
  }

  return status;
 800994a:	7dfb      	ldrb	r3, [r7, #23]
}
 800994c:	4618      	mov	r0, r3
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	4613      	mov	r3, r2
 8009964:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3301      	adds	r3, #1
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b03      	cmp	r3, #3
 800996e:	d120      	bne.n	80099b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	1e9a      	subs	r2, r3, #2
 8009976:	88fb      	ldrh	r3, [r7, #6]
 8009978:	4293      	cmp	r3, r2
 800997a:	bf28      	it	cs
 800997c:	4613      	movcs	r3, r2
 800997e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3302      	adds	r3, #2
 8009984:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009986:	2300      	movs	r3, #0
 8009988:	82fb      	strh	r3, [r7, #22]
 800998a:	e00b      	b.n	80099a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800998c:	8afb      	ldrh	r3, [r7, #22]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4413      	add	r3, r2
 8009992:	781a      	ldrb	r2, [r3, #0]
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	3301      	adds	r3, #1
 800999c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800999e:	8afb      	ldrh	r3, [r7, #22]
 80099a0:	3302      	adds	r3, #2
 80099a2:	82fb      	strh	r3, [r7, #22]
 80099a4:	8afa      	ldrh	r2, [r7, #22]
 80099a6:	8abb      	ldrh	r3, [r7, #20]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d3ef      	bcc.n	800998c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
  }
}
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099be:	b480      	push	{r7}
 80099c0:	b085      	sub	sp, #20
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	7812      	ldrb	r2, [r2, #0]
 80099d0:	4413      	add	r3, r2
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4413      	add	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099e4:	68fb      	ldr	r3, [r7, #12]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	4613      	mov	r3, r2
 80099fe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009a00:	2301      	movs	r3, #1
 8009a02:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	789b      	ldrb	r3, [r3, #2]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d002      	beq.n	8009a12 <USBH_CtlReq+0x20>
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d00f      	beq.n	8009a30 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009a10:	e027      	b.n	8009a62 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	88fa      	ldrh	r2, [r7, #6]
 8009a1c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2202      	movs	r2, #2
 8009a28:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2e:	e018      	b.n	8009a62 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 f81b 	bl	8009a6c <USBH_HandleControl>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009a3a:	7dfb      	ldrb	r3, [r7, #23]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <USBH_CtlReq+0x54>
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d106      	bne.n	8009a54 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	761a      	strb	r2, [r3, #24]
      break;
 8009a52:	e005      	b.n	8009a60 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d102      	bne.n	8009a60 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	709a      	strb	r2, [r3, #2]
      break;
 8009a60:	bf00      	nop
  }
  return status;
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a74:	2301      	movs	r3, #1
 8009a76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	7e1b      	ldrb	r3, [r3, #24]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	2b0a      	cmp	r3, #10
 8009a84:	f200 8156 	bhi.w	8009d34 <USBH_HandleControl+0x2c8>
 8009a88:	a201      	add	r2, pc, #4	@ (adr r2, 8009a90 <USBH_HandleControl+0x24>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009abd 	.word	0x08009abd
 8009a94:	08009ad7 	.word	0x08009ad7
 8009a98:	08009b41 	.word	0x08009b41
 8009a9c:	08009b67 	.word	0x08009b67
 8009aa0:	08009b9f 	.word	0x08009b9f
 8009aa4:	08009bc9 	.word	0x08009bc9
 8009aa8:	08009c1b 	.word	0x08009c1b
 8009aac:	08009c3d 	.word	0x08009c3d
 8009ab0:	08009c79 	.word	0x08009c79
 8009ab4:	08009c9f 	.word	0x08009c9f
 8009ab8:	08009cdd 	.word	0x08009cdd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f103 0110 	add.w	r1, r3, #16
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	795b      	ldrb	r3, [r3, #5]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f943 	bl	8009d54 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	761a      	strb	r2, [r3, #24]
      break;
 8009ad4:	e139      	b.n	8009d4a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	795b      	ldrb	r3, [r3, #5]
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fcc5 	bl	800a46c <USBH_LL_GetURBState>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d11e      	bne.n	8009b2a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	7c1b      	ldrb	r3, [r3, #16]
 8009af0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009af4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	8adb      	ldrh	r3, [r3, #22]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009afe:	7b7b      	ldrb	r3, [r7, #13]
 8009b00:	2b80      	cmp	r3, #128	@ 0x80
 8009b02:	d103      	bne.n	8009b0c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2203      	movs	r2, #3
 8009b08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b0a:	e115      	b.n	8009d38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2205      	movs	r2, #5
 8009b10:	761a      	strb	r2, [r3, #24]
      break;
 8009b12:	e111      	b.n	8009d38 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009b14:	7b7b      	ldrb	r3, [r7, #13]
 8009b16:	2b80      	cmp	r3, #128	@ 0x80
 8009b18:	d103      	bne.n	8009b22 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2209      	movs	r2, #9
 8009b1e:	761a      	strb	r2, [r3, #24]
      break;
 8009b20:	e10a      	b.n	8009d38 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2207      	movs	r2, #7
 8009b26:	761a      	strb	r2, [r3, #24]
      break;
 8009b28:	e106      	b.n	8009d38 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d003      	beq.n	8009b38 <USBH_HandleControl+0xcc>
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	f040 8100 	bne.w	8009d38 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	220b      	movs	r2, #11
 8009b3c:	761a      	strb	r2, [r3, #24]
      break;
 8009b3e:	e0fb      	b.n	8009d38 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6899      	ldr	r1, [r3, #8]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	899a      	ldrh	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	791b      	ldrb	r3, [r3, #4]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f93a 	bl	8009dd2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2204      	movs	r2, #4
 8009b62:	761a      	strb	r2, [r3, #24]
      break;
 8009b64:	e0f1      	b.n	8009d4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	791b      	ldrb	r3, [r3, #4]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fc7d 	bl	800a46c <USBH_LL_GetURBState>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d102      	bne.n	8009b82 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2209      	movs	r2, #9
 8009b80:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	2b05      	cmp	r3, #5
 8009b86:	d102      	bne.n	8009b8e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b8c:	e0d6      	b.n	8009d3c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	f040 80d3 	bne.w	8009d3c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	220b      	movs	r2, #11
 8009b9a:	761a      	strb	r2, [r3, #24]
      break;
 8009b9c:	e0ce      	b.n	8009d3c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6899      	ldr	r1, [r3, #8]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	899a      	ldrh	r2, [r3, #12]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	795b      	ldrb	r3, [r3, #5]
 8009baa:	2001      	movs	r0, #1
 8009bac:	9000      	str	r0, [sp, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8ea 	bl	8009d88 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2206      	movs	r2, #6
 8009bc4:	761a      	strb	r2, [r3, #24]
      break;
 8009bc6:	e0c0      	b.n	8009d4a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	795b      	ldrb	r3, [r3, #5]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fc4c 	bl	800a46c <USBH_LL_GetURBState>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d103      	bne.n	8009be6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2207      	movs	r2, #7
 8009be2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009be4:	e0ac      	b.n	8009d40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b05      	cmp	r3, #5
 8009bea:	d105      	bne.n	8009bf8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	220c      	movs	r2, #12
 8009bf0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf6:	e0a3      	b.n	8009d40 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bf8:	7bbb      	ldrb	r3, [r7, #14]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d103      	bne.n	8009c06 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2205      	movs	r2, #5
 8009c02:	761a      	strb	r2, [r3, #24]
      break;
 8009c04:	e09c      	b.n	8009d40 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	f040 8099 	bne.w	8009d40 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	220b      	movs	r2, #11
 8009c12:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c14:	2302      	movs	r3, #2
 8009c16:	73fb      	strb	r3, [r7, #15]
      break;
 8009c18:	e092      	b.n	8009d40 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	791b      	ldrb	r3, [r3, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2100      	movs	r1, #0
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f8d5 	bl	8009dd2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2208      	movs	r2, #8
 8009c38:	761a      	strb	r2, [r3, #24]

      break;
 8009c3a:	e086      	b.n	8009d4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	791b      	ldrb	r3, [r3, #4]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fc12 	bl	800a46c <USBH_LL_GetURBState>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d105      	bne.n	8009c5e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	220d      	movs	r2, #13
 8009c56:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c5c:	e072      	b.n	8009d44 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b04      	cmp	r3, #4
 8009c62:	d103      	bne.n	8009c6c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	220b      	movs	r2, #11
 8009c68:	761a      	strb	r2, [r3, #24]
      break;
 8009c6a:	e06b      	b.n	8009d44 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b05      	cmp	r3, #5
 8009c70:	d168      	bne.n	8009d44 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009c72:	2303      	movs	r3, #3
 8009c74:	73fb      	strb	r3, [r7, #15]
      break;
 8009c76:	e065      	b.n	8009d44 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	795b      	ldrb	r3, [r3, #5]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	9200      	str	r2, [sp, #0]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2100      	movs	r1, #0
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f87f 	bl	8009d88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	220a      	movs	r2, #10
 8009c9a:	761a      	strb	r2, [r3, #24]
      break;
 8009c9c:	e055      	b.n	8009d4a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	795b      	ldrb	r3, [r3, #5]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fbe1 	bl	800a46c <USBH_LL_GetURBState>
 8009caa:	4603      	mov	r3, r0
 8009cac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d105      	bne.n	8009cc0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	220d      	movs	r2, #13
 8009cbc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009cbe:	e043      	b.n	8009d48 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d103      	bne.n	8009cce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2209      	movs	r2, #9
 8009cca:	761a      	strb	r2, [r3, #24]
      break;
 8009ccc:	e03c      	b.n	8009d48 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d139      	bne.n	8009d48 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	220b      	movs	r2, #11
 8009cd8:	761a      	strb	r2, [r3, #24]
      break;
 8009cda:	e035      	b.n	8009d48 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	7e5b      	ldrb	r3, [r3, #25]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	765a      	strb	r2, [r3, #25]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	7e5b      	ldrb	r3, [r3, #25]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d806      	bhi.n	8009cfe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009cfc:	e025      	b.n	8009d4a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d04:	2106      	movs	r1, #6
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	795b      	ldrb	r3, [r3, #5]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f90c 	bl	8009f34 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	791b      	ldrb	r3, [r3, #4]
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f906 	bl	8009f34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	73fb      	strb	r3, [r7, #15]
      break;
 8009d32:	e00a      	b.n	8009d4a <USBH_HandleControl+0x2de>

    default:
      break;
 8009d34:	bf00      	nop
 8009d36:	e008      	b.n	8009d4a <USBH_HandleControl+0x2de>
      break;
 8009d38:	bf00      	nop
 8009d3a:	e006      	b.n	8009d4a <USBH_HandleControl+0x2de>
      break;
 8009d3c:	bf00      	nop
 8009d3e:	e004      	b.n	8009d4a <USBH_HandleControl+0x2de>
      break;
 8009d40:	bf00      	nop
 8009d42:	e002      	b.n	8009d4a <USBH_HandleControl+0x2de>
      break;
 8009d44:	bf00      	nop
 8009d46:	e000      	b.n	8009d4a <USBH_HandleControl+0x2de>
      break;
 8009d48:	bf00      	nop
  }

  return status;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af04      	add	r7, sp, #16
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d62:	79f9      	ldrb	r1, [r7, #7]
 8009d64:	2300      	movs	r3, #0
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	2308      	movs	r3, #8
 8009d6a:	9302      	str	r3, [sp, #8]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	9301      	str	r3, [sp, #4]
 8009d70:	2300      	movs	r3, #0
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	2300      	movs	r3, #0
 8009d76:	2200      	movs	r2, #0
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 fb46 	bl	800a40a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af04      	add	r7, sp, #16
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4611      	mov	r1, r2
 8009d94:	461a      	mov	r2, r3
 8009d96:	460b      	mov	r3, r1
 8009d98:	80fb      	strh	r3, [r7, #6]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009dac:	7979      	ldrb	r1, [r7, #5]
 8009dae:	7e3b      	ldrb	r3, [r7, #24]
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	88fb      	ldrh	r3, [r7, #6]
 8009db4:	9302      	str	r3, [sp, #8]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	2301      	movs	r3, #1
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 fb21 	bl	800a40a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b088      	sub	sp, #32
 8009dd6:	af04      	add	r7, sp, #16
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	4611      	mov	r1, r2
 8009dde:	461a      	mov	r2, r3
 8009de0:	460b      	mov	r3, r1
 8009de2:	80fb      	strh	r3, [r7, #6]
 8009de4:	4613      	mov	r3, r2
 8009de6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009de8:	7979      	ldrb	r1, [r7, #5]
 8009dea:	2300      	movs	r3, #0
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	9302      	str	r3, [sp, #8]
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	9301      	str	r3, [sp, #4]
 8009df6:	2301      	movs	r3, #1
 8009df8:	9300      	str	r3, [sp, #0]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	68f8      	ldr	r0, [r7, #12]
 8009e00:	f000 fb03 	bl	800a40a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e04:	2300      	movs	r3, #0

}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b088      	sub	sp, #32
 8009e12:	af04      	add	r7, sp, #16
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	4611      	mov	r1, r2
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	80fb      	strh	r3, [r7, #6]
 8009e20:	4613      	mov	r3, r2
 8009e22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e32:	7979      	ldrb	r1, [r7, #5]
 8009e34:	7e3b      	ldrb	r3, [r7, #24]
 8009e36:	9303      	str	r3, [sp, #12]
 8009e38:	88fb      	ldrh	r3, [r7, #6]
 8009e3a:	9302      	str	r3, [sp, #8]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	2301      	movs	r3, #1
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2302      	movs	r3, #2
 8009e46:	2200      	movs	r2, #0
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fade 	bl	800a40a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af04      	add	r7, sp, #16
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	4611      	mov	r1, r2
 8009e64:	461a      	mov	r2, r3
 8009e66:	460b      	mov	r3, r1
 8009e68:	80fb      	strh	r3, [r7, #6]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e6e:	7979      	ldrb	r1, [r7, #5]
 8009e70:	2300      	movs	r3, #0
 8009e72:	9303      	str	r3, [sp, #12]
 8009e74:	88fb      	ldrh	r3, [r7, #6]
 8009e76:	9302      	str	r3, [sp, #8]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	2302      	movs	r3, #2
 8009e82:	2201      	movs	r2, #1
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fac0 	bl	800a40a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af04      	add	r7, sp, #16
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	4608      	mov	r0, r1
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	70fb      	strb	r3, [r7, #3]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70bb      	strb	r3, [r7, #2]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009eae:	7878      	ldrb	r0, [r7, #1]
 8009eb0:	78ba      	ldrb	r2, [r7, #2]
 8009eb2:	78f9      	ldrb	r1, [r7, #3]
 8009eb4:	8b3b      	ldrh	r3, [r7, #24]
 8009eb6:	9302      	str	r3, [sp, #8]
 8009eb8:	7d3b      	ldrb	r3, [r7, #20]
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	7c3b      	ldrb	r3, [r7, #16]
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa53 	bl	800a36e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa72 	bl	800a3cc <USBH_LL_ClosePipe>

  return USBH_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	460b      	mov	r3, r1
 8009efc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f836 	bl	8009f70 <USBH_GetFreePipe>
 8009f04:	4603      	mov	r3, r0
 8009f06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009f08:	89fb      	ldrh	r3, [r7, #14]
 8009f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d00a      	beq.n	8009f28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	89fb      	ldrh	r3, [r7, #14]
 8009f16:	f003 030f 	and.w	r3, r3, #15
 8009f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	33e0      	adds	r3, #224	@ 0xe0
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f28:	89fb      	ldrh	r3, [r7, #14]
 8009f2a:	b2db      	uxtb	r3, r3
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	2b0f      	cmp	r3, #15
 8009f44:	d80d      	bhi.n	8009f62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009f46:	78fb      	ldrb	r3, [r7, #3]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	33e0      	adds	r3, #224	@ 0xe0
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	33e0      	adds	r3, #224	@ 0xe0
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	370c      	adds	r7, #12
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]
 8009f80:	e00f      	b.n	8009fa2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	33e0      	adds	r3, #224	@ 0xe0
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d102      	bne.n	8009f9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	e007      	b.n	8009fac <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	73fb      	strb	r3, [r7, #15]
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	2b0f      	cmp	r3, #15
 8009fa6:	d9ec      	bls.n	8009f82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009fa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	490e      	ldr	r1, [pc, #56]	@ (8009ff8 <MX_USB_HOST_Init+0x40>)
 8009fc0:	480e      	ldr	r0, [pc, #56]	@ (8009ffc <MX_USB_HOST_Init+0x44>)
 8009fc2:	f7fe fb15 	bl	80085f0 <USBH_Init>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009fcc:	f7f7 fb10 	bl	80015f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009fd0:	490b      	ldr	r1, [pc, #44]	@ (800a000 <MX_USB_HOST_Init+0x48>)
 8009fd2:	480a      	ldr	r0, [pc, #40]	@ (8009ffc <MX_USB_HOST_Init+0x44>)
 8009fd4:	f7fe fbb9 	bl	800874a <USBH_RegisterClass>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009fde:	f7f7 fb07 	bl	80015f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009fe2:	4806      	ldr	r0, [pc, #24]	@ (8009ffc <MX_USB_HOST_Init+0x44>)
 8009fe4:	f7fe fc3d 	bl	8008862 <USBH_Start>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009fee:	f7f7 faff 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009ff2:	bf00      	nop
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0800a019 	.word	0x0800a019
 8009ffc:	200001a0 	.word	0x200001a0
 800a000:	2000000c 	.word	0x2000000c

0800a004 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a008:	4802      	ldr	r0, [pc, #8]	@ (800a014 <MX_USB_HOST_Process+0x10>)
 800a00a:	f7fe fc3b 	bl	8008884 <USBH_Process>
}
 800a00e:	bf00      	nop
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200001a0 	.word	0x200001a0

0800a018 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	3b01      	subs	r3, #1
 800a028:	2b04      	cmp	r3, #4
 800a02a:	d819      	bhi.n	800a060 <USBH_UserProcess+0x48>
 800a02c:	a201      	add	r2, pc, #4	@ (adr r2, 800a034 <USBH_UserProcess+0x1c>)
 800a02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a032:	bf00      	nop
 800a034:	0800a061 	.word	0x0800a061
 800a038:	0800a051 	.word	0x0800a051
 800a03c:	0800a061 	.word	0x0800a061
 800a040:	0800a059 	.word	0x0800a059
 800a044:	0800a049 	.word	0x0800a049
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a048:	4b09      	ldr	r3, [pc, #36]	@ (800a070 <USBH_UserProcess+0x58>)
 800a04a:	2203      	movs	r2, #3
 800a04c:	701a      	strb	r2, [r3, #0]
  break;
 800a04e:	e008      	b.n	800a062 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a050:	4b07      	ldr	r3, [pc, #28]	@ (800a070 <USBH_UserProcess+0x58>)
 800a052:	2202      	movs	r2, #2
 800a054:	701a      	strb	r2, [r3, #0]
  break;
 800a056:	e004      	b.n	800a062 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a058:	4b05      	ldr	r3, [pc, #20]	@ (800a070 <USBH_UserProcess+0x58>)
 800a05a:	2201      	movs	r2, #1
 800a05c:	701a      	strb	r2, [r3, #0]
  break;
 800a05e:	e000      	b.n	800a062 <USBH_UserProcess+0x4a>

  default:
  break;
 800a060:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	20000578 	.word	0x20000578

0800a074 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	@ 0x28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a07c:	f107 0314 	add.w	r3, r7, #20
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	605a      	str	r2, [r3, #4]
 800a086:	609a      	str	r2, [r3, #8]
 800a088:	60da      	str	r2, [r3, #12]
 800a08a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a094:	d147      	bne.n	800a126 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a096:	2300      	movs	r3, #0
 800a098:	613b      	str	r3, [r7, #16]
 800a09a:	4b25      	ldr	r3, [pc, #148]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a09c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09e:	4a24      	ldr	r2, [pc, #144]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a0a0:	f043 0301 	orr.w	r3, r3, #1
 800a0a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a0a6:	4b22      	ldr	r3, [pc, #136]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	613b      	str	r3, [r7, #16]
 800a0b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a0b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a0c0:	f107 0314 	add.w	r3, r7, #20
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	481b      	ldr	r0, [pc, #108]	@ (800a134 <HAL_HCD_MspInit+0xc0>)
 800a0c8:	f7f7 fe76 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a0cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a0d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0de:	230a      	movs	r3, #10
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e2:	f107 0314 	add.w	r3, r7, #20
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4812      	ldr	r0, [pc, #72]	@ (800a134 <HAL_HCD_MspInit+0xc0>)
 800a0ea:	f7f7 fe65 	bl	8001db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a0ee:	4b10      	ldr	r3, [pc, #64]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a0f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f2:	4a0f      	ldr	r2, [pc, #60]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a0f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0f8:	6353      	str	r3, [r2, #52]	@ 0x34
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a102:	4a0b      	ldr	r2, [pc, #44]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a108:	6453      	str	r3, [r2, #68]	@ 0x44
 800a10a:	4b09      	ldr	r3, [pc, #36]	@ (800a130 <HAL_HCD_MspInit+0xbc>)
 800a10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a10e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a112:	60fb      	str	r3, [r7, #12]
 800a114:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a116:	2200      	movs	r2, #0
 800a118:	2100      	movs	r1, #0
 800a11a:	2043      	movs	r0, #67	@ 0x43
 800a11c:	f7f7 fe15 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a120:	2043      	movs	r0, #67	@ 0x43
 800a122:	f7f7 fe2e 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a126:	bf00      	nop
 800a128:	3728      	adds	r7, #40	@ 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	40023800 	.word	0x40023800
 800a134:	40020000 	.word	0x40020000

0800a138 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe ff73 	bl	8009032 <USBH_LL_IncTimer>
}
 800a14c:	bf00      	nop
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe ffab 	bl	80090be <USBH_LL_Connect>
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe ffb4 	bl	80090ec <USBH_LL_Disconnect>
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
 800a198:	4613      	mov	r3, r2
 800a19a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe ff65 	bl	8009086 <USBH_LL_PortEnabled>
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe ff65 	bl	80090a2 <USBH_LL_PortDisabled>
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d12a      	bne.n	800a248 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a1f2:	4a18      	ldr	r2, [pc, #96]	@ (800a254 <USBH_LL_Init+0x74>)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a15      	ldr	r2, [pc, #84]	@ (800a254 <USBH_LL_Init+0x74>)
 800a1fe:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a202:	4b14      	ldr	r3, [pc, #80]	@ (800a254 <USBH_LL_Init+0x74>)
 800a204:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a208:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a20a:	4b12      	ldr	r3, [pc, #72]	@ (800a254 <USBH_LL_Init+0x74>)
 800a20c:	2208      	movs	r2, #8
 800a20e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a210:	4b10      	ldr	r3, [pc, #64]	@ (800a254 <USBH_LL_Init+0x74>)
 800a212:	2201      	movs	r2, #1
 800a214:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a216:	4b0f      	ldr	r3, [pc, #60]	@ (800a254 <USBH_LL_Init+0x74>)
 800a218:	2200      	movs	r2, #0
 800a21a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a21c:	4b0d      	ldr	r3, [pc, #52]	@ (800a254 <USBH_LL_Init+0x74>)
 800a21e:	2202      	movs	r2, #2
 800a220:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a222:	4b0c      	ldr	r3, [pc, #48]	@ (800a254 <USBH_LL_Init+0x74>)
 800a224:	2200      	movs	r2, #0
 800a226:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a228:	480a      	ldr	r0, [pc, #40]	@ (800a254 <USBH_LL_Init+0x74>)
 800a22a:	f7f7 ff94 	bl	8002156 <HAL_HCD_Init>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a234:	f7f7 f9dc 	bl	80015f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a238:	4806      	ldr	r0, [pc, #24]	@ (800a254 <USBH_LL_Init+0x74>)
 800a23a:	f7f8 fbf5 	bl	8002a28 <HAL_HCD_GetCurrentFrame>
 800a23e:	4603      	mov	r3, r0
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7fe fee6 	bl	8009014 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	2000057c 	.word	0x2000057c

0800a258 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a26e:	4618      	mov	r0, r3
 800a270:	f7f8 fb62 	bl	8002938 <HAL_HCD_Start>
 800a274:	4603      	mov	r3, r0
 800a276:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a278:	7bfb      	ldrb	r3, [r7, #15]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 f95e 	bl	800a53c <USBH_Get_USB_Status>
 800a280:	4603      	mov	r3, r0
 800a282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a284:	7bbb      	ldrb	r3, [r7, #14]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7f8 fb6a 	bl	800297e <HAL_HCD_Stop>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2ae:	7bfb      	ldrb	r3, [r7, #15]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 f943 	bl	800a53c <USBH_Get_USB_Status>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7f8 fbb4 	bl	8002a44 <HAL_HCD_GetCurrentSpeed>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d00c      	beq.n	800a2fc <USBH_LL_GetSpeed+0x38>
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d80d      	bhi.n	800a302 <USBH_LL_GetSpeed+0x3e>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <USBH_LL_GetSpeed+0x2c>
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d003      	beq.n	800a2f6 <USBH_LL_GetSpeed+0x32>
 800a2ee:	e008      	b.n	800a302 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f4:	e008      	b.n	800a308 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2fa:	e005      	b.n	800a308 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a300:	e002      	b.n	800a308 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a302:	2301      	movs	r3, #1
 800a304:	73fb      	strb	r3, [r7, #15]
    break;
 800a306:	bf00      	nop
  }
  return  speed;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a328:	4618      	mov	r0, r3
 800a32a:	f7f8 fb45 	bl	80029b8 <HAL_HCD_ResetPort>
 800a32e:	4603      	mov	r3, r0
 800a330:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	4618      	mov	r0, r3
 800a336:	f000 f901 	bl	800a53c <USBH_Get_USB_Status>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a35a:	78fa      	ldrb	r2, [r7, #3]
 800a35c:	4611      	mov	r1, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	f7f8 fb4d 	bl	80029fe <HAL_HCD_HC_GetXferCount>
 800a364:	4603      	mov	r3, r0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a36e:	b590      	push	{r4, r7, lr}
 800a370:	b089      	sub	sp, #36	@ 0x24
 800a372:	af04      	add	r7, sp, #16
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	4608      	mov	r0, r1
 800a378:	4611      	mov	r1, r2
 800a37a:	461a      	mov	r2, r3
 800a37c:	4603      	mov	r3, r0
 800a37e:	70fb      	strb	r3, [r7, #3]
 800a380:	460b      	mov	r3, r1
 800a382:	70bb      	strb	r3, [r7, #2]
 800a384:	4613      	mov	r3, r2
 800a386:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a396:	787c      	ldrb	r4, [r7, #1]
 800a398:	78ba      	ldrb	r2, [r7, #2]
 800a39a:	78f9      	ldrb	r1, [r7, #3]
 800a39c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a39e:	9302      	str	r3, [sp, #8]
 800a3a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a3a4:	9301      	str	r3, [sp, #4]
 800a3a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	4623      	mov	r3, r4
 800a3ae:	f7f7 ff39 	bl	8002224 <HAL_HCD_HC_Init>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 f8bf 	bl	800a53c <USBH_Get_USB_Status>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd90      	pop	{r4, r7, pc}

0800a3cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f7 ffd2 	bl	8002394 <HAL_HCD_HC_Halt>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 f8a0 	bl	800a53c <USBH_Get_USB_Status>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a400:	7bbb      	ldrb	r3, [r7, #14]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a40a:	b590      	push	{r4, r7, lr}
 800a40c:	b089      	sub	sp, #36	@ 0x24
 800a40e:	af04      	add	r7, sp, #16
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	4608      	mov	r0, r1
 800a414:	4611      	mov	r1, r2
 800a416:	461a      	mov	r2, r3
 800a418:	4603      	mov	r3, r0
 800a41a:	70fb      	strb	r3, [r7, #3]
 800a41c:	460b      	mov	r3, r1
 800a41e:	70bb      	strb	r3, [r7, #2]
 800a420:	4613      	mov	r3, r2
 800a422:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a428:	2300      	movs	r3, #0
 800a42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a432:	787c      	ldrb	r4, [r7, #1]
 800a434:	78ba      	ldrb	r2, [r7, #2]
 800a436:	78f9      	ldrb	r1, [r7, #3]
 800a438:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a43c:	9303      	str	r3, [sp, #12]
 800a43e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a440:	9302      	str	r3, [sp, #8]
 800a442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	4623      	mov	r3, r4
 800a44e:	f7f7 ffc5 	bl	80023dc <HAL_HCD_HC_SubmitRequest>
 800a452:	4603      	mov	r3, r0
 800a454:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 f86f 	bl	800a53c <USBH_Get_USB_Status>
 800a45e:	4603      	mov	r3, r0
 800a460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a462:	7bbb      	ldrb	r3, [r7, #14]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3714      	adds	r7, #20
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd90      	pop	{r4, r7, pc}

0800a46c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a47e:	78fa      	ldrb	r2, [r7, #3]
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f7f8 faa6 	bl	80029d4 <HAL_HCD_HC_GetURBState>
 800a488:	4603      	mov	r3, r0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d103      	bne.n	800a4b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f872 	bl	800a594 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a4b0:	20c8      	movs	r0, #200	@ 0xc8
 800a4b2:	f7f7 fb4b 	bl	8001b4c <HAL_Delay>
  return USBH_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	70fb      	strb	r3, [r7, #3]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	440b      	add	r3, r1
 800a4e6:	3317      	adds	r3, #23
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00a      	beq.n	800a504 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	68f9      	ldr	r1, [r7, #12]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	011b      	lsls	r3, r3, #4
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	440b      	add	r3, r1
 800a4fc:	333c      	adds	r3, #60	@ 0x3c
 800a4fe:	78ba      	ldrb	r2, [r7, #2]
 800a500:	701a      	strb	r2, [r3, #0]
 800a502:	e009      	b.n	800a518 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a504:	78fa      	ldrb	r2, [r7, #3]
 800a506:	68f9      	ldr	r1, [r7, #12]
 800a508:	4613      	mov	r3, r2
 800a50a:	011b      	lsls	r3, r3, #4
 800a50c:	1a9b      	subs	r3, r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	440b      	add	r3, r1
 800a512:	333d      	adds	r3, #61	@ 0x3d
 800a514:	78ba      	ldrb	r2, [r7, #2]
 800a516:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7f7 fb0c 	bl	8001b4c <HAL_Delay>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d817      	bhi.n	800a580 <USBH_Get_USB_Status+0x44>
 800a550:	a201      	add	r2, pc, #4	@ (adr r2, 800a558 <USBH_Get_USB_Status+0x1c>)
 800a552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a556:	bf00      	nop
 800a558:	0800a569 	.word	0x0800a569
 800a55c:	0800a56f 	.word	0x0800a56f
 800a560:	0800a575 	.word	0x0800a575
 800a564:	0800a57b 	.word	0x0800a57b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]
    break;
 800a56c:	e00b      	b.n	800a586 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a56e:	2302      	movs	r3, #2
 800a570:	73fb      	strb	r3, [r7, #15]
    break;
 800a572:	e008      	b.n	800a586 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a574:	2301      	movs	r3, #1
 800a576:	73fb      	strb	r3, [r7, #15]
    break;
 800a578:	e005      	b.n	800a586 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a57a:	2302      	movs	r3, #2
 800a57c:	73fb      	strb	r3, [r7, #15]
    break;
 800a57e:	e002      	b.n	800a586 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a580:	2302      	movs	r3, #2
 800a582:	73fb      	strb	r3, [r7, #15]
    break;
 800a584:	bf00      	nop
  }
  return usb_status;
 800a586:	7bfb      	ldrb	r3, [r7, #15]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	4603      	mov	r3, r0
 800a59c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	73fb      	strb	r3, [r7, #15]
 800a5ac:	e001      	b.n	800a5b2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	4803      	ldr	r0, [pc, #12]	@ (800a5c8 <MX_DriverVbusFS+0x34>)
 800a5ba:	f7f7 fd99 	bl	80020f0 <HAL_GPIO_WritePin>
}
 800a5be:	bf00      	nop
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	40020800 	.word	0x40020800

0800a5cc <malloc>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	@ (800a5d8 <malloc+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f000 b82d 	b.w	800a630 <_malloc_r>
 800a5d6:	bf00      	nop
 800a5d8:	20000038 	.word	0x20000038

0800a5dc <free>:
 800a5dc:	4b02      	ldr	r3, [pc, #8]	@ (800a5e8 <free+0xc>)
 800a5de:	4601      	mov	r1, r0
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	f000 bb47 	b.w	800ac74 <_free_r>
 800a5e6:	bf00      	nop
 800a5e8:	20000038 	.word	0x20000038

0800a5ec <sbrk_aligned>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	4e0f      	ldr	r6, [pc, #60]	@ (800a62c <sbrk_aligned+0x40>)
 800a5f0:	460c      	mov	r4, r1
 800a5f2:	6831      	ldr	r1, [r6, #0]
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	b911      	cbnz	r1, 800a5fe <sbrk_aligned+0x12>
 800a5f8:	f000 faec 	bl	800abd4 <_sbrk_r>
 800a5fc:	6030      	str	r0, [r6, #0]
 800a5fe:	4621      	mov	r1, r4
 800a600:	4628      	mov	r0, r5
 800a602:	f000 fae7 	bl	800abd4 <_sbrk_r>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d103      	bne.n	800a612 <sbrk_aligned+0x26>
 800a60a:	f04f 34ff 	mov.w	r4, #4294967295
 800a60e:	4620      	mov	r0, r4
 800a610:	bd70      	pop	{r4, r5, r6, pc}
 800a612:	1cc4      	adds	r4, r0, #3
 800a614:	f024 0403 	bic.w	r4, r4, #3
 800a618:	42a0      	cmp	r0, r4
 800a61a:	d0f8      	beq.n	800a60e <sbrk_aligned+0x22>
 800a61c:	1a21      	subs	r1, r4, r0
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 fad8 	bl	800abd4 <_sbrk_r>
 800a624:	3001      	adds	r0, #1
 800a626:	d1f2      	bne.n	800a60e <sbrk_aligned+0x22>
 800a628:	e7ef      	b.n	800a60a <sbrk_aligned+0x1e>
 800a62a:	bf00      	nop
 800a62c:	2000095c 	.word	0x2000095c

0800a630 <_malloc_r>:
 800a630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a634:	1ccd      	adds	r5, r1, #3
 800a636:	f025 0503 	bic.w	r5, r5, #3
 800a63a:	3508      	adds	r5, #8
 800a63c:	2d0c      	cmp	r5, #12
 800a63e:	bf38      	it	cc
 800a640:	250c      	movcc	r5, #12
 800a642:	2d00      	cmp	r5, #0
 800a644:	4606      	mov	r6, r0
 800a646:	db01      	blt.n	800a64c <_malloc_r+0x1c>
 800a648:	42a9      	cmp	r1, r5
 800a64a:	d904      	bls.n	800a656 <_malloc_r+0x26>
 800a64c:	230c      	movs	r3, #12
 800a64e:	6033      	str	r3, [r6, #0]
 800a650:	2000      	movs	r0, #0
 800a652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a72c <_malloc_r+0xfc>
 800a65a:	f000 f869 	bl	800a730 <__malloc_lock>
 800a65e:	f8d8 3000 	ldr.w	r3, [r8]
 800a662:	461c      	mov	r4, r3
 800a664:	bb44      	cbnz	r4, 800a6b8 <_malloc_r+0x88>
 800a666:	4629      	mov	r1, r5
 800a668:	4630      	mov	r0, r6
 800a66a:	f7ff ffbf 	bl	800a5ec <sbrk_aligned>
 800a66e:	1c43      	adds	r3, r0, #1
 800a670:	4604      	mov	r4, r0
 800a672:	d158      	bne.n	800a726 <_malloc_r+0xf6>
 800a674:	f8d8 4000 	ldr.w	r4, [r8]
 800a678:	4627      	mov	r7, r4
 800a67a:	2f00      	cmp	r7, #0
 800a67c:	d143      	bne.n	800a706 <_malloc_r+0xd6>
 800a67e:	2c00      	cmp	r4, #0
 800a680:	d04b      	beq.n	800a71a <_malloc_r+0xea>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	4639      	mov	r1, r7
 800a686:	4630      	mov	r0, r6
 800a688:	eb04 0903 	add.w	r9, r4, r3
 800a68c:	f000 faa2 	bl	800abd4 <_sbrk_r>
 800a690:	4581      	cmp	r9, r0
 800a692:	d142      	bne.n	800a71a <_malloc_r+0xea>
 800a694:	6821      	ldr	r1, [r4, #0]
 800a696:	1a6d      	subs	r5, r5, r1
 800a698:	4629      	mov	r1, r5
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7ff ffa6 	bl	800a5ec <sbrk_aligned>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d03a      	beq.n	800a71a <_malloc_r+0xea>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	442b      	add	r3, r5
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	bb62      	cbnz	r2, 800a70c <_malloc_r+0xdc>
 800a6b2:	f8c8 7000 	str.w	r7, [r8]
 800a6b6:	e00f      	b.n	800a6d8 <_malloc_r+0xa8>
 800a6b8:	6822      	ldr	r2, [r4, #0]
 800a6ba:	1b52      	subs	r2, r2, r5
 800a6bc:	d420      	bmi.n	800a700 <_malloc_r+0xd0>
 800a6be:	2a0b      	cmp	r2, #11
 800a6c0:	d917      	bls.n	800a6f2 <_malloc_r+0xc2>
 800a6c2:	1961      	adds	r1, r4, r5
 800a6c4:	42a3      	cmp	r3, r4
 800a6c6:	6025      	str	r5, [r4, #0]
 800a6c8:	bf18      	it	ne
 800a6ca:	6059      	strne	r1, [r3, #4]
 800a6cc:	6863      	ldr	r3, [r4, #4]
 800a6ce:	bf08      	it	eq
 800a6d0:	f8c8 1000 	streq.w	r1, [r8]
 800a6d4:	5162      	str	r2, [r4, r5]
 800a6d6:	604b      	str	r3, [r1, #4]
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f000 f82f 	bl	800a73c <__malloc_unlock>
 800a6de:	f104 000b 	add.w	r0, r4, #11
 800a6e2:	1d23      	adds	r3, r4, #4
 800a6e4:	f020 0007 	bic.w	r0, r0, #7
 800a6e8:	1ac2      	subs	r2, r0, r3
 800a6ea:	bf1c      	itt	ne
 800a6ec:	1a1b      	subne	r3, r3, r0
 800a6ee:	50a3      	strne	r3, [r4, r2]
 800a6f0:	e7af      	b.n	800a652 <_malloc_r+0x22>
 800a6f2:	6862      	ldr	r2, [r4, #4]
 800a6f4:	42a3      	cmp	r3, r4
 800a6f6:	bf0c      	ite	eq
 800a6f8:	f8c8 2000 	streq.w	r2, [r8]
 800a6fc:	605a      	strne	r2, [r3, #4]
 800a6fe:	e7eb      	b.n	800a6d8 <_malloc_r+0xa8>
 800a700:	4623      	mov	r3, r4
 800a702:	6864      	ldr	r4, [r4, #4]
 800a704:	e7ae      	b.n	800a664 <_malloc_r+0x34>
 800a706:	463c      	mov	r4, r7
 800a708:	687f      	ldr	r7, [r7, #4]
 800a70a:	e7b6      	b.n	800a67a <_malloc_r+0x4a>
 800a70c:	461a      	mov	r2, r3
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	42a3      	cmp	r3, r4
 800a712:	d1fb      	bne.n	800a70c <_malloc_r+0xdc>
 800a714:	2300      	movs	r3, #0
 800a716:	6053      	str	r3, [r2, #4]
 800a718:	e7de      	b.n	800a6d8 <_malloc_r+0xa8>
 800a71a:	230c      	movs	r3, #12
 800a71c:	6033      	str	r3, [r6, #0]
 800a71e:	4630      	mov	r0, r6
 800a720:	f000 f80c 	bl	800a73c <__malloc_unlock>
 800a724:	e794      	b.n	800a650 <_malloc_r+0x20>
 800a726:	6005      	str	r5, [r0, #0]
 800a728:	e7d6      	b.n	800a6d8 <_malloc_r+0xa8>
 800a72a:	bf00      	nop
 800a72c:	20000960 	.word	0x20000960

0800a730 <__malloc_lock>:
 800a730:	4801      	ldr	r0, [pc, #4]	@ (800a738 <__malloc_lock+0x8>)
 800a732:	f000 ba9c 	b.w	800ac6e <__retarget_lock_acquire_recursive>
 800a736:	bf00      	nop
 800a738:	20000aa4 	.word	0x20000aa4

0800a73c <__malloc_unlock>:
 800a73c:	4801      	ldr	r0, [pc, #4]	@ (800a744 <__malloc_unlock+0x8>)
 800a73e:	f000 ba97 	b.w	800ac70 <__retarget_lock_release_recursive>
 800a742:	bf00      	nop
 800a744:	20000aa4 	.word	0x20000aa4

0800a748 <std>:
 800a748:	2300      	movs	r3, #0
 800a74a:	b510      	push	{r4, lr}
 800a74c:	4604      	mov	r4, r0
 800a74e:	e9c0 3300 	strd	r3, r3, [r0]
 800a752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a756:	6083      	str	r3, [r0, #8]
 800a758:	8181      	strh	r1, [r0, #12]
 800a75a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a75c:	81c2      	strh	r2, [r0, #14]
 800a75e:	6183      	str	r3, [r0, #24]
 800a760:	4619      	mov	r1, r3
 800a762:	2208      	movs	r2, #8
 800a764:	305c      	adds	r0, #92	@ 0x5c
 800a766:	f000 f9f9 	bl	800ab5c <memset>
 800a76a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a0 <std+0x58>)
 800a76c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a76e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a4 <std+0x5c>)
 800a770:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a772:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a8 <std+0x60>)
 800a774:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a776:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ac <std+0x64>)
 800a778:	6323      	str	r3, [r4, #48]	@ 0x30
 800a77a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b0 <std+0x68>)
 800a77c:	6224      	str	r4, [r4, #32]
 800a77e:	429c      	cmp	r4, r3
 800a780:	d006      	beq.n	800a790 <std+0x48>
 800a782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a786:	4294      	cmp	r4, r2
 800a788:	d002      	beq.n	800a790 <std+0x48>
 800a78a:	33d0      	adds	r3, #208	@ 0xd0
 800a78c:	429c      	cmp	r4, r3
 800a78e:	d105      	bne.n	800a79c <std+0x54>
 800a790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a798:	f000 ba68 	b.w	800ac6c <__retarget_lock_init_recursive>
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800a9ad 	.word	0x0800a9ad
 800a7a4:	0800a9cf 	.word	0x0800a9cf
 800a7a8:	0800aa07 	.word	0x0800aa07
 800a7ac:	0800aa2b 	.word	0x0800aa2b
 800a7b0:	20000964 	.word	0x20000964

0800a7b4 <stdio_exit_handler>:
 800a7b4:	4a02      	ldr	r2, [pc, #8]	@ (800a7c0 <stdio_exit_handler+0xc>)
 800a7b6:	4903      	ldr	r1, [pc, #12]	@ (800a7c4 <stdio_exit_handler+0x10>)
 800a7b8:	4803      	ldr	r0, [pc, #12]	@ (800a7c8 <stdio_exit_handler+0x14>)
 800a7ba:	f000 b869 	b.w	800a890 <_fwalk_sglue>
 800a7be:	bf00      	nop
 800a7c0:	2000002c 	.word	0x2000002c
 800a7c4:	0800b3ad 	.word	0x0800b3ad
 800a7c8:	2000003c 	.word	0x2000003c

0800a7cc <cleanup_stdio>:
 800a7cc:	6841      	ldr	r1, [r0, #4]
 800a7ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a800 <cleanup_stdio+0x34>)
 800a7d0:	4299      	cmp	r1, r3
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	d001      	beq.n	800a7dc <cleanup_stdio+0x10>
 800a7d8:	f000 fde8 	bl	800b3ac <_fflush_r>
 800a7dc:	68a1      	ldr	r1, [r4, #8]
 800a7de:	4b09      	ldr	r3, [pc, #36]	@ (800a804 <cleanup_stdio+0x38>)
 800a7e0:	4299      	cmp	r1, r3
 800a7e2:	d002      	beq.n	800a7ea <cleanup_stdio+0x1e>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fde1 	bl	800b3ac <_fflush_r>
 800a7ea:	68e1      	ldr	r1, [r4, #12]
 800a7ec:	4b06      	ldr	r3, [pc, #24]	@ (800a808 <cleanup_stdio+0x3c>)
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	d004      	beq.n	800a7fc <cleanup_stdio+0x30>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f8:	f000 bdd8 	b.w	800b3ac <_fflush_r>
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	bf00      	nop
 800a800:	20000964 	.word	0x20000964
 800a804:	200009cc 	.word	0x200009cc
 800a808:	20000a34 	.word	0x20000a34

0800a80c <global_stdio_init.part.0>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4b0b      	ldr	r3, [pc, #44]	@ (800a83c <global_stdio_init.part.0+0x30>)
 800a810:	4c0b      	ldr	r4, [pc, #44]	@ (800a840 <global_stdio_init.part.0+0x34>)
 800a812:	4a0c      	ldr	r2, [pc, #48]	@ (800a844 <global_stdio_init.part.0+0x38>)
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	4620      	mov	r0, r4
 800a818:	2200      	movs	r2, #0
 800a81a:	2104      	movs	r1, #4
 800a81c:	f7ff ff94 	bl	800a748 <std>
 800a820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a824:	2201      	movs	r2, #1
 800a826:	2109      	movs	r1, #9
 800a828:	f7ff ff8e 	bl	800a748 <std>
 800a82c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a830:	2202      	movs	r2, #2
 800a832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a836:	2112      	movs	r1, #18
 800a838:	f7ff bf86 	b.w	800a748 <std>
 800a83c:	20000a9c 	.word	0x20000a9c
 800a840:	20000964 	.word	0x20000964
 800a844:	0800a7b5 	.word	0x0800a7b5

0800a848 <__sfp_lock_acquire>:
 800a848:	4801      	ldr	r0, [pc, #4]	@ (800a850 <__sfp_lock_acquire+0x8>)
 800a84a:	f000 ba10 	b.w	800ac6e <__retarget_lock_acquire_recursive>
 800a84e:	bf00      	nop
 800a850:	20000aa5 	.word	0x20000aa5

0800a854 <__sfp_lock_release>:
 800a854:	4801      	ldr	r0, [pc, #4]	@ (800a85c <__sfp_lock_release+0x8>)
 800a856:	f000 ba0b 	b.w	800ac70 <__retarget_lock_release_recursive>
 800a85a:	bf00      	nop
 800a85c:	20000aa5 	.word	0x20000aa5

0800a860 <__sinit>:
 800a860:	b510      	push	{r4, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	f7ff fff0 	bl	800a848 <__sfp_lock_acquire>
 800a868:	6a23      	ldr	r3, [r4, #32]
 800a86a:	b11b      	cbz	r3, 800a874 <__sinit+0x14>
 800a86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a870:	f7ff bff0 	b.w	800a854 <__sfp_lock_release>
 800a874:	4b04      	ldr	r3, [pc, #16]	@ (800a888 <__sinit+0x28>)
 800a876:	6223      	str	r3, [r4, #32]
 800a878:	4b04      	ldr	r3, [pc, #16]	@ (800a88c <__sinit+0x2c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1f5      	bne.n	800a86c <__sinit+0xc>
 800a880:	f7ff ffc4 	bl	800a80c <global_stdio_init.part.0>
 800a884:	e7f2      	b.n	800a86c <__sinit+0xc>
 800a886:	bf00      	nop
 800a888:	0800a7cd 	.word	0x0800a7cd
 800a88c:	20000a9c 	.word	0x20000a9c

0800a890 <_fwalk_sglue>:
 800a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a894:	4607      	mov	r7, r0
 800a896:	4688      	mov	r8, r1
 800a898:	4614      	mov	r4, r2
 800a89a:	2600      	movs	r6, #0
 800a89c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a4:	d505      	bpl.n	800a8b2 <_fwalk_sglue+0x22>
 800a8a6:	6824      	ldr	r4, [r4, #0]
 800a8a8:	2c00      	cmp	r4, #0
 800a8aa:	d1f7      	bne.n	800a89c <_fwalk_sglue+0xc>
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	89ab      	ldrh	r3, [r5, #12]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d907      	bls.n	800a8c8 <_fwalk_sglue+0x38>
 800a8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	d003      	beq.n	800a8c8 <_fwalk_sglue+0x38>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c0      	blx	r8
 800a8c6:	4306      	orrs	r6, r0
 800a8c8:	3568      	adds	r5, #104	@ 0x68
 800a8ca:	e7e9      	b.n	800a8a0 <_fwalk_sglue+0x10>

0800a8cc <iprintf>:
 800a8cc:	b40f      	push	{r0, r1, r2, r3}
 800a8ce:	b507      	push	{r0, r1, r2, lr}
 800a8d0:	4906      	ldr	r1, [pc, #24]	@ (800a8ec <iprintf+0x20>)
 800a8d2:	ab04      	add	r3, sp, #16
 800a8d4:	6808      	ldr	r0, [r1, #0]
 800a8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8da:	6881      	ldr	r1, [r0, #8]
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	f000 fa3d 	bl	800ad5c <_vfiprintf_r>
 800a8e2:	b003      	add	sp, #12
 800a8e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8e8:	b004      	add	sp, #16
 800a8ea:	4770      	bx	lr
 800a8ec:	20000038 	.word	0x20000038

0800a8f0 <_puts_r>:
 800a8f0:	6a03      	ldr	r3, [r0, #32]
 800a8f2:	b570      	push	{r4, r5, r6, lr}
 800a8f4:	6884      	ldr	r4, [r0, #8]
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	460e      	mov	r6, r1
 800a8fa:	b90b      	cbnz	r3, 800a900 <_puts_r+0x10>
 800a8fc:	f7ff ffb0 	bl	800a860 <__sinit>
 800a900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a902:	07db      	lsls	r3, r3, #31
 800a904:	d405      	bmi.n	800a912 <_puts_r+0x22>
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	0598      	lsls	r0, r3, #22
 800a90a:	d402      	bmi.n	800a912 <_puts_r+0x22>
 800a90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a90e:	f000 f9ae 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	0719      	lsls	r1, r3, #28
 800a916:	d502      	bpl.n	800a91e <_puts_r+0x2e>
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d135      	bne.n	800a98a <_puts_r+0x9a>
 800a91e:	4621      	mov	r1, r4
 800a920:	4628      	mov	r0, r5
 800a922:	f000 f8c5 	bl	800aab0 <__swsetup_r>
 800a926:	b380      	cbz	r0, 800a98a <_puts_r+0x9a>
 800a928:	f04f 35ff 	mov.w	r5, #4294967295
 800a92c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a92e:	07da      	lsls	r2, r3, #31
 800a930:	d405      	bmi.n	800a93e <_puts_r+0x4e>
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	059b      	lsls	r3, r3, #22
 800a936:	d402      	bmi.n	800a93e <_puts_r+0x4e>
 800a938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a93a:	f000 f999 	bl	800ac70 <__retarget_lock_release_recursive>
 800a93e:	4628      	mov	r0, r5
 800a940:	bd70      	pop	{r4, r5, r6, pc}
 800a942:	2b00      	cmp	r3, #0
 800a944:	da04      	bge.n	800a950 <_puts_r+0x60>
 800a946:	69a2      	ldr	r2, [r4, #24]
 800a948:	429a      	cmp	r2, r3
 800a94a:	dc17      	bgt.n	800a97c <_puts_r+0x8c>
 800a94c:	290a      	cmp	r1, #10
 800a94e:	d015      	beq.n	800a97c <_puts_r+0x8c>
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	6022      	str	r2, [r4, #0]
 800a956:	7019      	strb	r1, [r3, #0]
 800a958:	68a3      	ldr	r3, [r4, #8]
 800a95a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a95e:	3b01      	subs	r3, #1
 800a960:	60a3      	str	r3, [r4, #8]
 800a962:	2900      	cmp	r1, #0
 800a964:	d1ed      	bne.n	800a942 <_puts_r+0x52>
 800a966:	2b00      	cmp	r3, #0
 800a968:	da11      	bge.n	800a98e <_puts_r+0x9e>
 800a96a:	4622      	mov	r2, r4
 800a96c:	210a      	movs	r1, #10
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f85f 	bl	800aa32 <__swbuf_r>
 800a974:	3001      	adds	r0, #1
 800a976:	d0d7      	beq.n	800a928 <_puts_r+0x38>
 800a978:	250a      	movs	r5, #10
 800a97a:	e7d7      	b.n	800a92c <_puts_r+0x3c>
 800a97c:	4622      	mov	r2, r4
 800a97e:	4628      	mov	r0, r5
 800a980:	f000 f857 	bl	800aa32 <__swbuf_r>
 800a984:	3001      	adds	r0, #1
 800a986:	d1e7      	bne.n	800a958 <_puts_r+0x68>
 800a988:	e7ce      	b.n	800a928 <_puts_r+0x38>
 800a98a:	3e01      	subs	r6, #1
 800a98c:	e7e4      	b.n	800a958 <_puts_r+0x68>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	6022      	str	r2, [r4, #0]
 800a994:	220a      	movs	r2, #10
 800a996:	701a      	strb	r2, [r3, #0]
 800a998:	e7ee      	b.n	800a978 <_puts_r+0x88>
	...

0800a99c <puts>:
 800a99c:	4b02      	ldr	r3, [pc, #8]	@ (800a9a8 <puts+0xc>)
 800a99e:	4601      	mov	r1, r0
 800a9a0:	6818      	ldr	r0, [r3, #0]
 800a9a2:	f7ff bfa5 	b.w	800a8f0 <_puts_r>
 800a9a6:	bf00      	nop
 800a9a8:	20000038 	.word	0x20000038

0800a9ac <__sread>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b4:	f000 f8fc 	bl	800abb0 <_read_r>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	bfab      	itete	ge
 800a9bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9be:	89a3      	ldrhlt	r3, [r4, #12]
 800a9c0:	181b      	addge	r3, r3, r0
 800a9c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9c6:	bfac      	ite	ge
 800a9c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9ca:	81a3      	strhlt	r3, [r4, #12]
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <__swrite>:
 800a9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	461f      	mov	r7, r3
 800a9d4:	898b      	ldrh	r3, [r1, #12]
 800a9d6:	05db      	lsls	r3, r3, #23
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	4616      	mov	r6, r2
 800a9de:	d505      	bpl.n	800a9ec <__swrite+0x1e>
 800a9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f000 f8d0 	bl	800ab8c <_lseek_r>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	4632      	mov	r2, r6
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa02:	f000 b8f7 	b.w	800abf4 <_write_r>

0800aa06 <__sseek>:
 800aa06:	b510      	push	{r4, lr}
 800aa08:	460c      	mov	r4, r1
 800aa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa0e:	f000 f8bd 	bl	800ab8c <_lseek_r>
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	bf15      	itete	ne
 800aa18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa22:	81a3      	strheq	r3, [r4, #12]
 800aa24:	bf18      	it	ne
 800aa26:	81a3      	strhne	r3, [r4, #12]
 800aa28:	bd10      	pop	{r4, pc}

0800aa2a <__sclose>:
 800aa2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2e:	f000 b89d 	b.w	800ab6c <_close_r>

0800aa32 <__swbuf_r>:
 800aa32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa34:	460e      	mov	r6, r1
 800aa36:	4614      	mov	r4, r2
 800aa38:	4605      	mov	r5, r0
 800aa3a:	b118      	cbz	r0, 800aa44 <__swbuf_r+0x12>
 800aa3c:	6a03      	ldr	r3, [r0, #32]
 800aa3e:	b90b      	cbnz	r3, 800aa44 <__swbuf_r+0x12>
 800aa40:	f7ff ff0e 	bl	800a860 <__sinit>
 800aa44:	69a3      	ldr	r3, [r4, #24]
 800aa46:	60a3      	str	r3, [r4, #8]
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	071a      	lsls	r2, r3, #28
 800aa4c:	d501      	bpl.n	800aa52 <__swbuf_r+0x20>
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	b943      	cbnz	r3, 800aa64 <__swbuf_r+0x32>
 800aa52:	4621      	mov	r1, r4
 800aa54:	4628      	mov	r0, r5
 800aa56:	f000 f82b 	bl	800aab0 <__swsetup_r>
 800aa5a:	b118      	cbz	r0, 800aa64 <__swbuf_r+0x32>
 800aa5c:	f04f 37ff 	mov.w	r7, #4294967295
 800aa60:	4638      	mov	r0, r7
 800aa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	6922      	ldr	r2, [r4, #16]
 800aa68:	1a98      	subs	r0, r3, r2
 800aa6a:	6963      	ldr	r3, [r4, #20]
 800aa6c:	b2f6      	uxtb	r6, r6
 800aa6e:	4283      	cmp	r3, r0
 800aa70:	4637      	mov	r7, r6
 800aa72:	dc05      	bgt.n	800aa80 <__swbuf_r+0x4e>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4628      	mov	r0, r5
 800aa78:	f000 fc98 	bl	800b3ac <_fflush_r>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1ed      	bne.n	800aa5c <__swbuf_r+0x2a>
 800aa80:	68a3      	ldr	r3, [r4, #8]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	60a3      	str	r3, [r4, #8]
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	1c5a      	adds	r2, r3, #1
 800aa8a:	6022      	str	r2, [r4, #0]
 800aa8c:	701e      	strb	r6, [r3, #0]
 800aa8e:	6962      	ldr	r2, [r4, #20]
 800aa90:	1c43      	adds	r3, r0, #1
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d004      	beq.n	800aaa0 <__swbuf_r+0x6e>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	07db      	lsls	r3, r3, #31
 800aa9a:	d5e1      	bpl.n	800aa60 <__swbuf_r+0x2e>
 800aa9c:	2e0a      	cmp	r6, #10
 800aa9e:	d1df      	bne.n	800aa60 <__swbuf_r+0x2e>
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 fc82 	bl	800b3ac <_fflush_r>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d0d9      	beq.n	800aa60 <__swbuf_r+0x2e>
 800aaac:	e7d6      	b.n	800aa5c <__swbuf_r+0x2a>
	...

0800aab0 <__swsetup_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4b29      	ldr	r3, [pc, #164]	@ (800ab58 <__swsetup_r+0xa8>)
 800aab4:	4605      	mov	r5, r0
 800aab6:	6818      	ldr	r0, [r3, #0]
 800aab8:	460c      	mov	r4, r1
 800aaba:	b118      	cbz	r0, 800aac4 <__swsetup_r+0x14>
 800aabc:	6a03      	ldr	r3, [r0, #32]
 800aabe:	b90b      	cbnz	r3, 800aac4 <__swsetup_r+0x14>
 800aac0:	f7ff fece 	bl	800a860 <__sinit>
 800aac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac8:	0719      	lsls	r1, r3, #28
 800aaca:	d422      	bmi.n	800ab12 <__swsetup_r+0x62>
 800aacc:	06da      	lsls	r2, r3, #27
 800aace:	d407      	bmi.n	800aae0 <__swsetup_r+0x30>
 800aad0:	2209      	movs	r2, #9
 800aad2:	602a      	str	r2, [r5, #0]
 800aad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	f04f 30ff 	mov.w	r0, #4294967295
 800aade:	e033      	b.n	800ab48 <__swsetup_r+0x98>
 800aae0:	0758      	lsls	r0, r3, #29
 800aae2:	d512      	bpl.n	800ab0a <__swsetup_r+0x5a>
 800aae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aae6:	b141      	cbz	r1, 800aafa <__swsetup_r+0x4a>
 800aae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaec:	4299      	cmp	r1, r3
 800aaee:	d002      	beq.n	800aaf6 <__swsetup_r+0x46>
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f000 f8bf 	bl	800ac74 <_free_r>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	2300      	movs	r3, #0
 800ab04:	6063      	str	r3, [r4, #4]
 800ab06:	6923      	ldr	r3, [r4, #16]
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	89a3      	ldrh	r3, [r4, #12]
 800ab0c:	f043 0308 	orr.w	r3, r3, #8
 800ab10:	81a3      	strh	r3, [r4, #12]
 800ab12:	6923      	ldr	r3, [r4, #16]
 800ab14:	b94b      	cbnz	r3, 800ab2a <__swsetup_r+0x7a>
 800ab16:	89a3      	ldrh	r3, [r4, #12]
 800ab18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab20:	d003      	beq.n	800ab2a <__swsetup_r+0x7a>
 800ab22:	4621      	mov	r1, r4
 800ab24:	4628      	mov	r0, r5
 800ab26:	f000 fc8f 	bl	800b448 <__smakebuf_r>
 800ab2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2e:	f013 0201 	ands.w	r2, r3, #1
 800ab32:	d00a      	beq.n	800ab4a <__swsetup_r+0x9a>
 800ab34:	2200      	movs	r2, #0
 800ab36:	60a2      	str	r2, [r4, #8]
 800ab38:	6962      	ldr	r2, [r4, #20]
 800ab3a:	4252      	negs	r2, r2
 800ab3c:	61a2      	str	r2, [r4, #24]
 800ab3e:	6922      	ldr	r2, [r4, #16]
 800ab40:	b942      	cbnz	r2, 800ab54 <__swsetup_r+0xa4>
 800ab42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab46:	d1c5      	bne.n	800aad4 <__swsetup_r+0x24>
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	0799      	lsls	r1, r3, #30
 800ab4c:	bf58      	it	pl
 800ab4e:	6962      	ldrpl	r2, [r4, #20]
 800ab50:	60a2      	str	r2, [r4, #8]
 800ab52:	e7f4      	b.n	800ab3e <__swsetup_r+0x8e>
 800ab54:	2000      	movs	r0, #0
 800ab56:	e7f7      	b.n	800ab48 <__swsetup_r+0x98>
 800ab58:	20000038 	.word	0x20000038

0800ab5c <memset>:
 800ab5c:	4402      	add	r2, r0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d100      	bne.n	800ab66 <memset+0xa>
 800ab64:	4770      	bx	lr
 800ab66:	f803 1b01 	strb.w	r1, [r3], #1
 800ab6a:	e7f9      	b.n	800ab60 <memset+0x4>

0800ab6c <_close_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d06      	ldr	r5, [pc, #24]	@ (800ab88 <_close_r+0x1c>)
 800ab70:	2300      	movs	r3, #0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	f7f6 fecf 	bl	800191a <_close>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_close_r+0x1a>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_close_r+0x1a>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	20000aa0 	.word	0x20000aa0

0800ab8c <_lseek_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4d07      	ldr	r5, [pc, #28]	@ (800abac <_lseek_r+0x20>)
 800ab90:	4604      	mov	r4, r0
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	2200      	movs	r2, #0
 800ab98:	602a      	str	r2, [r5, #0]
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	f7f6 fee4 	bl	8001968 <_lseek>
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	d102      	bne.n	800abaa <_lseek_r+0x1e>
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	b103      	cbz	r3, 800abaa <_lseek_r+0x1e>
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	bd38      	pop	{r3, r4, r5, pc}
 800abac:	20000aa0 	.word	0x20000aa0

0800abb0 <_read_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4d07      	ldr	r5, [pc, #28]	@ (800abd0 <_read_r+0x20>)
 800abb4:	4604      	mov	r4, r0
 800abb6:	4608      	mov	r0, r1
 800abb8:	4611      	mov	r1, r2
 800abba:	2200      	movs	r2, #0
 800abbc:	602a      	str	r2, [r5, #0]
 800abbe:	461a      	mov	r2, r3
 800abc0:	f7f6 fe8e 	bl	80018e0 <_read>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d102      	bne.n	800abce <_read_r+0x1e>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	b103      	cbz	r3, 800abce <_read_r+0x1e>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	20000aa0 	.word	0x20000aa0

0800abd4 <_sbrk_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d06      	ldr	r5, [pc, #24]	@ (800abf0 <_sbrk_r+0x1c>)
 800abd8:	2300      	movs	r3, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	f7f6 fed0 	bl	8001984 <_sbrk>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_sbrk_r+0x1a>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_sbrk_r+0x1a>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20000aa0 	.word	0x20000aa0

0800abf4 <_write_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	@ (800ac14 <_write_r+0x20>)
 800abf8:	4604      	mov	r4, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	602a      	str	r2, [r5, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7f6 fcd8 	bl	80015b8 <_write>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_write_r+0x1e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_write_r+0x1e>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20000aa0 	.word	0x20000aa0

0800ac18 <__errno>:
 800ac18:	4b01      	ldr	r3, [pc, #4]	@ (800ac20 <__errno+0x8>)
 800ac1a:	6818      	ldr	r0, [r3, #0]
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	20000038 	.word	0x20000038

0800ac24 <__libc_init_array>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	4d0d      	ldr	r5, [pc, #52]	@ (800ac5c <__libc_init_array+0x38>)
 800ac28:	4c0d      	ldr	r4, [pc, #52]	@ (800ac60 <__libc_init_array+0x3c>)
 800ac2a:	1b64      	subs	r4, r4, r5
 800ac2c:	10a4      	asrs	r4, r4, #2
 800ac2e:	2600      	movs	r6, #0
 800ac30:	42a6      	cmp	r6, r4
 800ac32:	d109      	bne.n	800ac48 <__libc_init_array+0x24>
 800ac34:	4d0b      	ldr	r5, [pc, #44]	@ (800ac64 <__libc_init_array+0x40>)
 800ac36:	4c0c      	ldr	r4, [pc, #48]	@ (800ac68 <__libc_init_array+0x44>)
 800ac38:	f001 fc8a 	bl	800c550 <_init>
 800ac3c:	1b64      	subs	r4, r4, r5
 800ac3e:	10a4      	asrs	r4, r4, #2
 800ac40:	2600      	movs	r6, #0
 800ac42:	42a6      	cmp	r6, r4
 800ac44:	d105      	bne.n	800ac52 <__libc_init_array+0x2e>
 800ac46:	bd70      	pop	{r4, r5, r6, pc}
 800ac48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac4c:	4798      	blx	r3
 800ac4e:	3601      	adds	r6, #1
 800ac50:	e7ee      	b.n	800ac30 <__libc_init_array+0xc>
 800ac52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac56:	4798      	blx	r3
 800ac58:	3601      	adds	r6, #1
 800ac5a:	e7f2      	b.n	800ac42 <__libc_init_array+0x1e>
 800ac5c:	0800c838 	.word	0x0800c838
 800ac60:	0800c838 	.word	0x0800c838
 800ac64:	0800c838 	.word	0x0800c838
 800ac68:	0800c83c 	.word	0x0800c83c

0800ac6c <__retarget_lock_init_recursive>:
 800ac6c:	4770      	bx	lr

0800ac6e <__retarget_lock_acquire_recursive>:
 800ac6e:	4770      	bx	lr

0800ac70 <__retarget_lock_release_recursive>:
 800ac70:	4770      	bx	lr
	...

0800ac74 <_free_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4605      	mov	r5, r0
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	d041      	beq.n	800ad00 <_free_r+0x8c>
 800ac7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac80:	1f0c      	subs	r4, r1, #4
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	bfb8      	it	lt
 800ac86:	18e4      	addlt	r4, r4, r3
 800ac88:	f7ff fd52 	bl	800a730 <__malloc_lock>
 800ac8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ad04 <_free_r+0x90>)
 800ac8e:	6813      	ldr	r3, [r2, #0]
 800ac90:	b933      	cbnz	r3, 800aca0 <_free_r+0x2c>
 800ac92:	6063      	str	r3, [r4, #4]
 800ac94:	6014      	str	r4, [r2, #0]
 800ac96:	4628      	mov	r0, r5
 800ac98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac9c:	f7ff bd4e 	b.w	800a73c <__malloc_unlock>
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	d908      	bls.n	800acb6 <_free_r+0x42>
 800aca4:	6820      	ldr	r0, [r4, #0]
 800aca6:	1821      	adds	r1, r4, r0
 800aca8:	428b      	cmp	r3, r1
 800acaa:	bf01      	itttt	eq
 800acac:	6819      	ldreq	r1, [r3, #0]
 800acae:	685b      	ldreq	r3, [r3, #4]
 800acb0:	1809      	addeq	r1, r1, r0
 800acb2:	6021      	streq	r1, [r4, #0]
 800acb4:	e7ed      	b.n	800ac92 <_free_r+0x1e>
 800acb6:	461a      	mov	r2, r3
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	b10b      	cbz	r3, 800acc0 <_free_r+0x4c>
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	d9fa      	bls.n	800acb6 <_free_r+0x42>
 800acc0:	6811      	ldr	r1, [r2, #0]
 800acc2:	1850      	adds	r0, r2, r1
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d10b      	bne.n	800ace0 <_free_r+0x6c>
 800acc8:	6820      	ldr	r0, [r4, #0]
 800acca:	4401      	add	r1, r0
 800accc:	1850      	adds	r0, r2, r1
 800acce:	4283      	cmp	r3, r0
 800acd0:	6011      	str	r1, [r2, #0]
 800acd2:	d1e0      	bne.n	800ac96 <_free_r+0x22>
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	6053      	str	r3, [r2, #4]
 800acda:	4408      	add	r0, r1
 800acdc:	6010      	str	r0, [r2, #0]
 800acde:	e7da      	b.n	800ac96 <_free_r+0x22>
 800ace0:	d902      	bls.n	800ace8 <_free_r+0x74>
 800ace2:	230c      	movs	r3, #12
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	e7d6      	b.n	800ac96 <_free_r+0x22>
 800ace8:	6820      	ldr	r0, [r4, #0]
 800acea:	1821      	adds	r1, r4, r0
 800acec:	428b      	cmp	r3, r1
 800acee:	bf04      	itt	eq
 800acf0:	6819      	ldreq	r1, [r3, #0]
 800acf2:	685b      	ldreq	r3, [r3, #4]
 800acf4:	6063      	str	r3, [r4, #4]
 800acf6:	bf04      	itt	eq
 800acf8:	1809      	addeq	r1, r1, r0
 800acfa:	6021      	streq	r1, [r4, #0]
 800acfc:	6054      	str	r4, [r2, #4]
 800acfe:	e7ca      	b.n	800ac96 <_free_r+0x22>
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	bf00      	nop
 800ad04:	20000960 	.word	0x20000960

0800ad08 <__sfputc_r>:
 800ad08:	6893      	ldr	r3, [r2, #8]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	b410      	push	{r4}
 800ad10:	6093      	str	r3, [r2, #8]
 800ad12:	da08      	bge.n	800ad26 <__sfputc_r+0x1e>
 800ad14:	6994      	ldr	r4, [r2, #24]
 800ad16:	42a3      	cmp	r3, r4
 800ad18:	db01      	blt.n	800ad1e <__sfputc_r+0x16>
 800ad1a:	290a      	cmp	r1, #10
 800ad1c:	d103      	bne.n	800ad26 <__sfputc_r+0x1e>
 800ad1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad22:	f7ff be86 	b.w	800aa32 <__swbuf_r>
 800ad26:	6813      	ldr	r3, [r2, #0]
 800ad28:	1c58      	adds	r0, r3, #1
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	7019      	strb	r1, [r3, #0]
 800ad2e:	4608      	mov	r0, r1
 800ad30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <__sfputs_r>:
 800ad36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad38:	4606      	mov	r6, r0
 800ad3a:	460f      	mov	r7, r1
 800ad3c:	4614      	mov	r4, r2
 800ad3e:	18d5      	adds	r5, r2, r3
 800ad40:	42ac      	cmp	r4, r5
 800ad42:	d101      	bne.n	800ad48 <__sfputs_r+0x12>
 800ad44:	2000      	movs	r0, #0
 800ad46:	e007      	b.n	800ad58 <__sfputs_r+0x22>
 800ad48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4c:	463a      	mov	r2, r7
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f7ff ffda 	bl	800ad08 <__sfputc_r>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d1f3      	bne.n	800ad40 <__sfputs_r+0xa>
 800ad58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad5c <_vfiprintf_r>:
 800ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad60:	460d      	mov	r5, r1
 800ad62:	b09d      	sub	sp, #116	@ 0x74
 800ad64:	4614      	mov	r4, r2
 800ad66:	4698      	mov	r8, r3
 800ad68:	4606      	mov	r6, r0
 800ad6a:	b118      	cbz	r0, 800ad74 <_vfiprintf_r+0x18>
 800ad6c:	6a03      	ldr	r3, [r0, #32]
 800ad6e:	b90b      	cbnz	r3, 800ad74 <_vfiprintf_r+0x18>
 800ad70:	f7ff fd76 	bl	800a860 <__sinit>
 800ad74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad76:	07d9      	lsls	r1, r3, #31
 800ad78:	d405      	bmi.n	800ad86 <_vfiprintf_r+0x2a>
 800ad7a:	89ab      	ldrh	r3, [r5, #12]
 800ad7c:	059a      	lsls	r2, r3, #22
 800ad7e:	d402      	bmi.n	800ad86 <_vfiprintf_r+0x2a>
 800ad80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad82:	f7ff ff74 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	071b      	lsls	r3, r3, #28
 800ad8a:	d501      	bpl.n	800ad90 <_vfiprintf_r+0x34>
 800ad8c:	692b      	ldr	r3, [r5, #16]
 800ad8e:	b99b      	cbnz	r3, 800adb8 <_vfiprintf_r+0x5c>
 800ad90:	4629      	mov	r1, r5
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7ff fe8c 	bl	800aab0 <__swsetup_r>
 800ad98:	b170      	cbz	r0, 800adb8 <_vfiprintf_r+0x5c>
 800ad9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad9c:	07dc      	lsls	r4, r3, #31
 800ad9e:	d504      	bpl.n	800adaa <_vfiprintf_r+0x4e>
 800ada0:	f04f 30ff 	mov.w	r0, #4294967295
 800ada4:	b01d      	add	sp, #116	@ 0x74
 800ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	0598      	lsls	r0, r3, #22
 800adae:	d4f7      	bmi.n	800ada0 <_vfiprintf_r+0x44>
 800adb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adb2:	f7ff ff5d 	bl	800ac70 <__retarget_lock_release_recursive>
 800adb6:	e7f3      	b.n	800ada0 <_vfiprintf_r+0x44>
 800adb8:	2300      	movs	r3, #0
 800adba:	9309      	str	r3, [sp, #36]	@ 0x24
 800adbc:	2320      	movs	r3, #32
 800adbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc6:	2330      	movs	r3, #48	@ 0x30
 800adc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af78 <_vfiprintf_r+0x21c>
 800adcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800add0:	f04f 0901 	mov.w	r9, #1
 800add4:	4623      	mov	r3, r4
 800add6:	469a      	mov	sl, r3
 800add8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800addc:	b10a      	cbz	r2, 800ade2 <_vfiprintf_r+0x86>
 800adde:	2a25      	cmp	r2, #37	@ 0x25
 800ade0:	d1f9      	bne.n	800add6 <_vfiprintf_r+0x7a>
 800ade2:	ebba 0b04 	subs.w	fp, sl, r4
 800ade6:	d00b      	beq.n	800ae00 <_vfiprintf_r+0xa4>
 800ade8:	465b      	mov	r3, fp
 800adea:	4622      	mov	r2, r4
 800adec:	4629      	mov	r1, r5
 800adee:	4630      	mov	r0, r6
 800adf0:	f7ff ffa1 	bl	800ad36 <__sfputs_r>
 800adf4:	3001      	adds	r0, #1
 800adf6:	f000 80a7 	beq.w	800af48 <_vfiprintf_r+0x1ec>
 800adfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adfc:	445a      	add	r2, fp
 800adfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae00:	f89a 3000 	ldrb.w	r3, [sl]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 809f 	beq.w	800af48 <_vfiprintf_r+0x1ec>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae14:	f10a 0a01 	add.w	sl, sl, #1
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	9307      	str	r3, [sp, #28]
 800ae1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae20:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae22:	4654      	mov	r4, sl
 800ae24:	2205      	movs	r2, #5
 800ae26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2a:	4853      	ldr	r0, [pc, #332]	@ (800af78 <_vfiprintf_r+0x21c>)
 800ae2c:	f7f5 f9d0 	bl	80001d0 <memchr>
 800ae30:	9a04      	ldr	r2, [sp, #16]
 800ae32:	b9d8      	cbnz	r0, 800ae6c <_vfiprintf_r+0x110>
 800ae34:	06d1      	lsls	r1, r2, #27
 800ae36:	bf44      	itt	mi
 800ae38:	2320      	movmi	r3, #32
 800ae3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3e:	0713      	lsls	r3, r2, #28
 800ae40:	bf44      	itt	mi
 800ae42:	232b      	movmi	r3, #43	@ 0x2b
 800ae44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae48:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae4e:	d015      	beq.n	800ae7c <_vfiprintf_r+0x120>
 800ae50:	9a07      	ldr	r2, [sp, #28]
 800ae52:	4654      	mov	r4, sl
 800ae54:	2000      	movs	r0, #0
 800ae56:	f04f 0c0a 	mov.w	ip, #10
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae60:	3b30      	subs	r3, #48	@ 0x30
 800ae62:	2b09      	cmp	r3, #9
 800ae64:	d94b      	bls.n	800aefe <_vfiprintf_r+0x1a2>
 800ae66:	b1b0      	cbz	r0, 800ae96 <_vfiprintf_r+0x13a>
 800ae68:	9207      	str	r2, [sp, #28]
 800ae6a:	e014      	b.n	800ae96 <_vfiprintf_r+0x13a>
 800ae6c:	eba0 0308 	sub.w	r3, r0, r8
 800ae70:	fa09 f303 	lsl.w	r3, r9, r3
 800ae74:	4313      	orrs	r3, r2
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	46a2      	mov	sl, r4
 800ae7a:	e7d2      	b.n	800ae22 <_vfiprintf_r+0xc6>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	1d19      	adds	r1, r3, #4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	9103      	str	r1, [sp, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	bfbb      	ittet	lt
 800ae88:	425b      	neglt	r3, r3
 800ae8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae8e:	9307      	strge	r3, [sp, #28]
 800ae90:	9307      	strlt	r3, [sp, #28]
 800ae92:	bfb8      	it	lt
 800ae94:	9204      	strlt	r2, [sp, #16]
 800ae96:	7823      	ldrb	r3, [r4, #0]
 800ae98:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae9a:	d10a      	bne.n	800aeb2 <_vfiprintf_r+0x156>
 800ae9c:	7863      	ldrb	r3, [r4, #1]
 800ae9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aea0:	d132      	bne.n	800af08 <_vfiprintf_r+0x1ac>
 800aea2:	9b03      	ldr	r3, [sp, #12]
 800aea4:	1d1a      	adds	r2, r3, #4
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	9203      	str	r2, [sp, #12]
 800aeaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeae:	3402      	adds	r4, #2
 800aeb0:	9305      	str	r3, [sp, #20]
 800aeb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af88 <_vfiprintf_r+0x22c>
 800aeb6:	7821      	ldrb	r1, [r4, #0]
 800aeb8:	2203      	movs	r2, #3
 800aeba:	4650      	mov	r0, sl
 800aebc:	f7f5 f988 	bl	80001d0 <memchr>
 800aec0:	b138      	cbz	r0, 800aed2 <_vfiprintf_r+0x176>
 800aec2:	9b04      	ldr	r3, [sp, #16]
 800aec4:	eba0 000a 	sub.w	r0, r0, sl
 800aec8:	2240      	movs	r2, #64	@ 0x40
 800aeca:	4082      	lsls	r2, r0
 800aecc:	4313      	orrs	r3, r2
 800aece:	3401      	adds	r4, #1
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed6:	4829      	ldr	r0, [pc, #164]	@ (800af7c <_vfiprintf_r+0x220>)
 800aed8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aedc:	2206      	movs	r2, #6
 800aede:	f7f5 f977 	bl	80001d0 <memchr>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d03f      	beq.n	800af66 <_vfiprintf_r+0x20a>
 800aee6:	4b26      	ldr	r3, [pc, #152]	@ (800af80 <_vfiprintf_r+0x224>)
 800aee8:	bb1b      	cbnz	r3, 800af32 <_vfiprintf_r+0x1d6>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	3307      	adds	r3, #7
 800aeee:	f023 0307 	bic.w	r3, r3, #7
 800aef2:	3308      	adds	r3, #8
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef8:	443b      	add	r3, r7
 800aefa:	9309      	str	r3, [sp, #36]	@ 0x24
 800aefc:	e76a      	b.n	800add4 <_vfiprintf_r+0x78>
 800aefe:	fb0c 3202 	mla	r2, ip, r2, r3
 800af02:	460c      	mov	r4, r1
 800af04:	2001      	movs	r0, #1
 800af06:	e7a8      	b.n	800ae5a <_vfiprintf_r+0xfe>
 800af08:	2300      	movs	r3, #0
 800af0a:	3401      	adds	r4, #1
 800af0c:	9305      	str	r3, [sp, #20]
 800af0e:	4619      	mov	r1, r3
 800af10:	f04f 0c0a 	mov.w	ip, #10
 800af14:	4620      	mov	r0, r4
 800af16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af1a:	3a30      	subs	r2, #48	@ 0x30
 800af1c:	2a09      	cmp	r2, #9
 800af1e:	d903      	bls.n	800af28 <_vfiprintf_r+0x1cc>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0c6      	beq.n	800aeb2 <_vfiprintf_r+0x156>
 800af24:	9105      	str	r1, [sp, #20]
 800af26:	e7c4      	b.n	800aeb2 <_vfiprintf_r+0x156>
 800af28:	fb0c 2101 	mla	r1, ip, r1, r2
 800af2c:	4604      	mov	r4, r0
 800af2e:	2301      	movs	r3, #1
 800af30:	e7f0      	b.n	800af14 <_vfiprintf_r+0x1b8>
 800af32:	ab03      	add	r3, sp, #12
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	462a      	mov	r2, r5
 800af38:	4b12      	ldr	r3, [pc, #72]	@ (800af84 <_vfiprintf_r+0x228>)
 800af3a:	a904      	add	r1, sp, #16
 800af3c:	4630      	mov	r0, r6
 800af3e:	f3af 8000 	nop.w
 800af42:	4607      	mov	r7, r0
 800af44:	1c78      	adds	r0, r7, #1
 800af46:	d1d6      	bne.n	800aef6 <_vfiprintf_r+0x19a>
 800af48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	d405      	bmi.n	800af5a <_vfiprintf_r+0x1fe>
 800af4e:	89ab      	ldrh	r3, [r5, #12]
 800af50:	059a      	lsls	r2, r3, #22
 800af52:	d402      	bmi.n	800af5a <_vfiprintf_r+0x1fe>
 800af54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af56:	f7ff fe8b 	bl	800ac70 <__retarget_lock_release_recursive>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	065b      	lsls	r3, r3, #25
 800af5e:	f53f af1f 	bmi.w	800ada0 <_vfiprintf_r+0x44>
 800af62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af64:	e71e      	b.n	800ada4 <_vfiprintf_r+0x48>
 800af66:	ab03      	add	r3, sp, #12
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	462a      	mov	r2, r5
 800af6c:	4b05      	ldr	r3, [pc, #20]	@ (800af84 <_vfiprintf_r+0x228>)
 800af6e:	a904      	add	r1, sp, #16
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f879 	bl	800b068 <_printf_i>
 800af76:	e7e4      	b.n	800af42 <_vfiprintf_r+0x1e6>
 800af78:	0800c624 	.word	0x0800c624
 800af7c:	0800c62e 	.word	0x0800c62e
 800af80:	00000000 	.word	0x00000000
 800af84:	0800ad37 	.word	0x0800ad37
 800af88:	0800c62a 	.word	0x0800c62a

0800af8c <_printf_common>:
 800af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	4616      	mov	r6, r2
 800af92:	4698      	mov	r8, r3
 800af94:	688a      	ldr	r2, [r1, #8]
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	bfb8      	it	lt
 800afa0:	4613      	movlt	r3, r2
 800afa2:	6033      	str	r3, [r6, #0]
 800afa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afa8:	4607      	mov	r7, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b10a      	cbz	r2, 800afb2 <_printf_common+0x26>
 800afae:	3301      	adds	r3, #1
 800afb0:	6033      	str	r3, [r6, #0]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	0699      	lsls	r1, r3, #26
 800afb6:	bf42      	ittt	mi
 800afb8:	6833      	ldrmi	r3, [r6, #0]
 800afba:	3302      	addmi	r3, #2
 800afbc:	6033      	strmi	r3, [r6, #0]
 800afbe:	6825      	ldr	r5, [r4, #0]
 800afc0:	f015 0506 	ands.w	r5, r5, #6
 800afc4:	d106      	bne.n	800afd4 <_printf_common+0x48>
 800afc6:	f104 0a19 	add.w	sl, r4, #25
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	6832      	ldr	r2, [r6, #0]
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	dc26      	bgt.n	800b022 <_printf_common+0x96>
 800afd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afd8:	6822      	ldr	r2, [r4, #0]
 800afda:	3b00      	subs	r3, #0
 800afdc:	bf18      	it	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	0692      	lsls	r2, r2, #26
 800afe2:	d42b      	bmi.n	800b03c <_printf_common+0xb0>
 800afe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afe8:	4641      	mov	r1, r8
 800afea:	4638      	mov	r0, r7
 800afec:	47c8      	blx	r9
 800afee:	3001      	adds	r0, #1
 800aff0:	d01e      	beq.n	800b030 <_printf_common+0xa4>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	f003 0306 	and.w	r3, r3, #6
 800affa:	2b04      	cmp	r3, #4
 800affc:	bf02      	ittt	eq
 800affe:	68e5      	ldreq	r5, [r4, #12]
 800b000:	6833      	ldreq	r3, [r6, #0]
 800b002:	1aed      	subeq	r5, r5, r3
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	bf0c      	ite	eq
 800b008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b00c:	2500      	movne	r5, #0
 800b00e:	4293      	cmp	r3, r2
 800b010:	bfc4      	itt	gt
 800b012:	1a9b      	subgt	r3, r3, r2
 800b014:	18ed      	addgt	r5, r5, r3
 800b016:	2600      	movs	r6, #0
 800b018:	341a      	adds	r4, #26
 800b01a:	42b5      	cmp	r5, r6
 800b01c:	d11a      	bne.n	800b054 <_printf_common+0xc8>
 800b01e:	2000      	movs	r0, #0
 800b020:	e008      	b.n	800b034 <_printf_common+0xa8>
 800b022:	2301      	movs	r3, #1
 800b024:	4652      	mov	r2, sl
 800b026:	4641      	mov	r1, r8
 800b028:	4638      	mov	r0, r7
 800b02a:	47c8      	blx	r9
 800b02c:	3001      	adds	r0, #1
 800b02e:	d103      	bne.n	800b038 <_printf_common+0xac>
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b038:	3501      	adds	r5, #1
 800b03a:	e7c6      	b.n	800afca <_printf_common+0x3e>
 800b03c:	18e1      	adds	r1, r4, r3
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	2030      	movs	r0, #48	@ 0x30
 800b042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b046:	4422      	add	r2, r4
 800b048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b04c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b050:	3302      	adds	r3, #2
 800b052:	e7c7      	b.n	800afe4 <_printf_common+0x58>
 800b054:	2301      	movs	r3, #1
 800b056:	4622      	mov	r2, r4
 800b058:	4641      	mov	r1, r8
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c8      	blx	r9
 800b05e:	3001      	adds	r0, #1
 800b060:	d0e6      	beq.n	800b030 <_printf_common+0xa4>
 800b062:	3601      	adds	r6, #1
 800b064:	e7d9      	b.n	800b01a <_printf_common+0x8e>
	...

0800b068 <_printf_i>:
 800b068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	7e0f      	ldrb	r7, [r1, #24]
 800b06e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b070:	2f78      	cmp	r7, #120	@ 0x78
 800b072:	4691      	mov	r9, r2
 800b074:	4680      	mov	r8, r0
 800b076:	460c      	mov	r4, r1
 800b078:	469a      	mov	sl, r3
 800b07a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b07e:	d807      	bhi.n	800b090 <_printf_i+0x28>
 800b080:	2f62      	cmp	r7, #98	@ 0x62
 800b082:	d80a      	bhi.n	800b09a <_printf_i+0x32>
 800b084:	2f00      	cmp	r7, #0
 800b086:	f000 80d1 	beq.w	800b22c <_printf_i+0x1c4>
 800b08a:	2f58      	cmp	r7, #88	@ 0x58
 800b08c:	f000 80b8 	beq.w	800b200 <_printf_i+0x198>
 800b090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b098:	e03a      	b.n	800b110 <_printf_i+0xa8>
 800b09a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b09e:	2b15      	cmp	r3, #21
 800b0a0:	d8f6      	bhi.n	800b090 <_printf_i+0x28>
 800b0a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0a8 <_printf_i+0x40>)
 800b0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b091 	.word	0x0800b091
 800b0b4:	0800b091 	.word	0x0800b091
 800b0b8:	0800b091 	.word	0x0800b091
 800b0bc:	0800b091 	.word	0x0800b091
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b091 	.word	0x0800b091
 800b0c8:	0800b091 	.word	0x0800b091
 800b0cc:	0800b091 	.word	0x0800b091
 800b0d0:	0800b091 	.word	0x0800b091
 800b0d4:	0800b213 	.word	0x0800b213
 800b0d8:	0800b13f 	.word	0x0800b13f
 800b0dc:	0800b1cd 	.word	0x0800b1cd
 800b0e0:	0800b091 	.word	0x0800b091
 800b0e4:	0800b091 	.word	0x0800b091
 800b0e8:	0800b235 	.word	0x0800b235
 800b0ec:	0800b091 	.word	0x0800b091
 800b0f0:	0800b13f 	.word	0x0800b13f
 800b0f4:	0800b091 	.word	0x0800b091
 800b0f8:	0800b091 	.word	0x0800b091
 800b0fc:	0800b1d5 	.word	0x0800b1d5
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6032      	str	r2, [r6, #0]
 800b108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b10c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b110:	2301      	movs	r3, #1
 800b112:	e09c      	b.n	800b24e <_printf_i+0x1e6>
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	6820      	ldr	r0, [r4, #0]
 800b118:	1d19      	adds	r1, r3, #4
 800b11a:	6031      	str	r1, [r6, #0]
 800b11c:	0606      	lsls	r6, r0, #24
 800b11e:	d501      	bpl.n	800b124 <_printf_i+0xbc>
 800b120:	681d      	ldr	r5, [r3, #0]
 800b122:	e003      	b.n	800b12c <_printf_i+0xc4>
 800b124:	0645      	lsls	r5, r0, #25
 800b126:	d5fb      	bpl.n	800b120 <_printf_i+0xb8>
 800b128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	da03      	bge.n	800b138 <_printf_i+0xd0>
 800b130:	232d      	movs	r3, #45	@ 0x2d
 800b132:	426d      	negs	r5, r5
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b138:	4858      	ldr	r0, [pc, #352]	@ (800b29c <_printf_i+0x234>)
 800b13a:	230a      	movs	r3, #10
 800b13c:	e011      	b.n	800b162 <_printf_i+0xfa>
 800b13e:	6821      	ldr	r1, [r4, #0]
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	0608      	lsls	r0, r1, #24
 800b144:	f853 5b04 	ldr.w	r5, [r3], #4
 800b148:	d402      	bmi.n	800b150 <_printf_i+0xe8>
 800b14a:	0649      	lsls	r1, r1, #25
 800b14c:	bf48      	it	mi
 800b14e:	b2ad      	uxthmi	r5, r5
 800b150:	2f6f      	cmp	r7, #111	@ 0x6f
 800b152:	4852      	ldr	r0, [pc, #328]	@ (800b29c <_printf_i+0x234>)
 800b154:	6033      	str	r3, [r6, #0]
 800b156:	bf14      	ite	ne
 800b158:	230a      	movne	r3, #10
 800b15a:	2308      	moveq	r3, #8
 800b15c:	2100      	movs	r1, #0
 800b15e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b162:	6866      	ldr	r6, [r4, #4]
 800b164:	60a6      	str	r6, [r4, #8]
 800b166:	2e00      	cmp	r6, #0
 800b168:	db05      	blt.n	800b176 <_printf_i+0x10e>
 800b16a:	6821      	ldr	r1, [r4, #0]
 800b16c:	432e      	orrs	r6, r5
 800b16e:	f021 0104 	bic.w	r1, r1, #4
 800b172:	6021      	str	r1, [r4, #0]
 800b174:	d04b      	beq.n	800b20e <_printf_i+0x1a6>
 800b176:	4616      	mov	r6, r2
 800b178:	fbb5 f1f3 	udiv	r1, r5, r3
 800b17c:	fb03 5711 	mls	r7, r3, r1, r5
 800b180:	5dc7      	ldrb	r7, [r0, r7]
 800b182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b186:	462f      	mov	r7, r5
 800b188:	42bb      	cmp	r3, r7
 800b18a:	460d      	mov	r5, r1
 800b18c:	d9f4      	bls.n	800b178 <_printf_i+0x110>
 800b18e:	2b08      	cmp	r3, #8
 800b190:	d10b      	bne.n	800b1aa <_printf_i+0x142>
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	07df      	lsls	r7, r3, #31
 800b196:	d508      	bpl.n	800b1aa <_printf_i+0x142>
 800b198:	6923      	ldr	r3, [r4, #16]
 800b19a:	6861      	ldr	r1, [r4, #4]
 800b19c:	4299      	cmp	r1, r3
 800b19e:	bfde      	ittt	le
 800b1a0:	2330      	movle	r3, #48	@ 0x30
 800b1a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1aa:	1b92      	subs	r2, r2, r6
 800b1ac:	6122      	str	r2, [r4, #16]
 800b1ae:	f8cd a000 	str.w	sl, [sp]
 800b1b2:	464b      	mov	r3, r9
 800b1b4:	aa03      	add	r2, sp, #12
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	f7ff fee7 	bl	800af8c <_printf_common>
 800b1be:	3001      	adds	r0, #1
 800b1c0:	d14a      	bne.n	800b258 <_printf_i+0x1f0>
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c6:	b004      	add	sp, #16
 800b1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	f043 0320 	orr.w	r3, r3, #32
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	4832      	ldr	r0, [pc, #200]	@ (800b2a0 <_printf_i+0x238>)
 800b1d6:	2778      	movs	r7, #120	@ 0x78
 800b1d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	6831      	ldr	r1, [r6, #0]
 800b1e0:	061f      	lsls	r7, r3, #24
 800b1e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1e6:	d402      	bmi.n	800b1ee <_printf_i+0x186>
 800b1e8:	065f      	lsls	r7, r3, #25
 800b1ea:	bf48      	it	mi
 800b1ec:	b2ad      	uxthmi	r5, r5
 800b1ee:	6031      	str	r1, [r6, #0]
 800b1f0:	07d9      	lsls	r1, r3, #31
 800b1f2:	bf44      	itt	mi
 800b1f4:	f043 0320 	orrmi.w	r3, r3, #32
 800b1f8:	6023      	strmi	r3, [r4, #0]
 800b1fa:	b11d      	cbz	r5, 800b204 <_printf_i+0x19c>
 800b1fc:	2310      	movs	r3, #16
 800b1fe:	e7ad      	b.n	800b15c <_printf_i+0xf4>
 800b200:	4826      	ldr	r0, [pc, #152]	@ (800b29c <_printf_i+0x234>)
 800b202:	e7e9      	b.n	800b1d8 <_printf_i+0x170>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	f023 0320 	bic.w	r3, r3, #32
 800b20a:	6023      	str	r3, [r4, #0]
 800b20c:	e7f6      	b.n	800b1fc <_printf_i+0x194>
 800b20e:	4616      	mov	r6, r2
 800b210:	e7bd      	b.n	800b18e <_printf_i+0x126>
 800b212:	6833      	ldr	r3, [r6, #0]
 800b214:	6825      	ldr	r5, [r4, #0]
 800b216:	6961      	ldr	r1, [r4, #20]
 800b218:	1d18      	adds	r0, r3, #4
 800b21a:	6030      	str	r0, [r6, #0]
 800b21c:	062e      	lsls	r6, r5, #24
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	d501      	bpl.n	800b226 <_printf_i+0x1be>
 800b222:	6019      	str	r1, [r3, #0]
 800b224:	e002      	b.n	800b22c <_printf_i+0x1c4>
 800b226:	0668      	lsls	r0, r5, #25
 800b228:	d5fb      	bpl.n	800b222 <_printf_i+0x1ba>
 800b22a:	8019      	strh	r1, [r3, #0]
 800b22c:	2300      	movs	r3, #0
 800b22e:	6123      	str	r3, [r4, #16]
 800b230:	4616      	mov	r6, r2
 800b232:	e7bc      	b.n	800b1ae <_printf_i+0x146>
 800b234:	6833      	ldr	r3, [r6, #0]
 800b236:	1d1a      	adds	r2, r3, #4
 800b238:	6032      	str	r2, [r6, #0]
 800b23a:	681e      	ldr	r6, [r3, #0]
 800b23c:	6862      	ldr	r2, [r4, #4]
 800b23e:	2100      	movs	r1, #0
 800b240:	4630      	mov	r0, r6
 800b242:	f7f4 ffc5 	bl	80001d0 <memchr>
 800b246:	b108      	cbz	r0, 800b24c <_printf_i+0x1e4>
 800b248:	1b80      	subs	r0, r0, r6
 800b24a:	6060      	str	r0, [r4, #4]
 800b24c:	6863      	ldr	r3, [r4, #4]
 800b24e:	6123      	str	r3, [r4, #16]
 800b250:	2300      	movs	r3, #0
 800b252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b256:	e7aa      	b.n	800b1ae <_printf_i+0x146>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	4632      	mov	r2, r6
 800b25c:	4649      	mov	r1, r9
 800b25e:	4640      	mov	r0, r8
 800b260:	47d0      	blx	sl
 800b262:	3001      	adds	r0, #1
 800b264:	d0ad      	beq.n	800b1c2 <_printf_i+0x15a>
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	079b      	lsls	r3, r3, #30
 800b26a:	d413      	bmi.n	800b294 <_printf_i+0x22c>
 800b26c:	68e0      	ldr	r0, [r4, #12]
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	4298      	cmp	r0, r3
 800b272:	bfb8      	it	lt
 800b274:	4618      	movlt	r0, r3
 800b276:	e7a6      	b.n	800b1c6 <_printf_i+0x15e>
 800b278:	2301      	movs	r3, #1
 800b27a:	4632      	mov	r2, r6
 800b27c:	4649      	mov	r1, r9
 800b27e:	4640      	mov	r0, r8
 800b280:	47d0      	blx	sl
 800b282:	3001      	adds	r0, #1
 800b284:	d09d      	beq.n	800b1c2 <_printf_i+0x15a>
 800b286:	3501      	adds	r5, #1
 800b288:	68e3      	ldr	r3, [r4, #12]
 800b28a:	9903      	ldr	r1, [sp, #12]
 800b28c:	1a5b      	subs	r3, r3, r1
 800b28e:	42ab      	cmp	r3, r5
 800b290:	dcf2      	bgt.n	800b278 <_printf_i+0x210>
 800b292:	e7eb      	b.n	800b26c <_printf_i+0x204>
 800b294:	2500      	movs	r5, #0
 800b296:	f104 0619 	add.w	r6, r4, #25
 800b29a:	e7f5      	b.n	800b288 <_printf_i+0x220>
 800b29c:	0800c635 	.word	0x0800c635
 800b2a0:	0800c646 	.word	0x0800c646

0800b2a4 <__sflush_r>:
 800b2a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	0716      	lsls	r6, r2, #28
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	460c      	mov	r4, r1
 800b2b2:	d454      	bmi.n	800b35e <__sflush_r+0xba>
 800b2b4:	684b      	ldr	r3, [r1, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	dc02      	bgt.n	800b2c0 <__sflush_r+0x1c>
 800b2ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dd48      	ble.n	800b352 <__sflush_r+0xae>
 800b2c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2c2:	2e00      	cmp	r6, #0
 800b2c4:	d045      	beq.n	800b352 <__sflush_r+0xae>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2cc:	682f      	ldr	r7, [r5, #0]
 800b2ce:	6a21      	ldr	r1, [r4, #32]
 800b2d0:	602b      	str	r3, [r5, #0]
 800b2d2:	d030      	beq.n	800b336 <__sflush_r+0x92>
 800b2d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	0759      	lsls	r1, r3, #29
 800b2da:	d505      	bpl.n	800b2e8 <__sflush_r+0x44>
 800b2dc:	6863      	ldr	r3, [r4, #4]
 800b2de:	1ad2      	subs	r2, r2, r3
 800b2e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2e2:	b10b      	cbz	r3, 800b2e8 <__sflush_r+0x44>
 800b2e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2e6:	1ad2      	subs	r2, r2, r3
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2ec:	6a21      	ldr	r1, [r4, #32]
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b0      	blx	r6
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	d106      	bne.n	800b306 <__sflush_r+0x62>
 800b2f8:	6829      	ldr	r1, [r5, #0]
 800b2fa:	291d      	cmp	r1, #29
 800b2fc:	d82b      	bhi.n	800b356 <__sflush_r+0xb2>
 800b2fe:	4a2a      	ldr	r2, [pc, #168]	@ (800b3a8 <__sflush_r+0x104>)
 800b300:	40ca      	lsrs	r2, r1
 800b302:	07d6      	lsls	r6, r2, #31
 800b304:	d527      	bpl.n	800b356 <__sflush_r+0xb2>
 800b306:	2200      	movs	r2, #0
 800b308:	6062      	str	r2, [r4, #4]
 800b30a:	04d9      	lsls	r1, r3, #19
 800b30c:	6922      	ldr	r2, [r4, #16]
 800b30e:	6022      	str	r2, [r4, #0]
 800b310:	d504      	bpl.n	800b31c <__sflush_r+0x78>
 800b312:	1c42      	adds	r2, r0, #1
 800b314:	d101      	bne.n	800b31a <__sflush_r+0x76>
 800b316:	682b      	ldr	r3, [r5, #0]
 800b318:	b903      	cbnz	r3, 800b31c <__sflush_r+0x78>
 800b31a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b31c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b31e:	602f      	str	r7, [r5, #0]
 800b320:	b1b9      	cbz	r1, 800b352 <__sflush_r+0xae>
 800b322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b326:	4299      	cmp	r1, r3
 800b328:	d002      	beq.n	800b330 <__sflush_r+0x8c>
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7ff fca2 	bl	800ac74 <_free_r>
 800b330:	2300      	movs	r3, #0
 800b332:	6363      	str	r3, [r4, #52]	@ 0x34
 800b334:	e00d      	b.n	800b352 <__sflush_r+0xae>
 800b336:	2301      	movs	r3, #1
 800b338:	4628      	mov	r0, r5
 800b33a:	47b0      	blx	r6
 800b33c:	4602      	mov	r2, r0
 800b33e:	1c50      	adds	r0, r2, #1
 800b340:	d1c9      	bne.n	800b2d6 <__sflush_r+0x32>
 800b342:	682b      	ldr	r3, [r5, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0c6      	beq.n	800b2d6 <__sflush_r+0x32>
 800b348:	2b1d      	cmp	r3, #29
 800b34a:	d001      	beq.n	800b350 <__sflush_r+0xac>
 800b34c:	2b16      	cmp	r3, #22
 800b34e:	d11e      	bne.n	800b38e <__sflush_r+0xea>
 800b350:	602f      	str	r7, [r5, #0]
 800b352:	2000      	movs	r0, #0
 800b354:	e022      	b.n	800b39c <__sflush_r+0xf8>
 800b356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b35a:	b21b      	sxth	r3, r3
 800b35c:	e01b      	b.n	800b396 <__sflush_r+0xf2>
 800b35e:	690f      	ldr	r7, [r1, #16]
 800b360:	2f00      	cmp	r7, #0
 800b362:	d0f6      	beq.n	800b352 <__sflush_r+0xae>
 800b364:	0793      	lsls	r3, r2, #30
 800b366:	680e      	ldr	r6, [r1, #0]
 800b368:	bf08      	it	eq
 800b36a:	694b      	ldreq	r3, [r1, #20]
 800b36c:	600f      	str	r7, [r1, #0]
 800b36e:	bf18      	it	ne
 800b370:	2300      	movne	r3, #0
 800b372:	eba6 0807 	sub.w	r8, r6, r7
 800b376:	608b      	str	r3, [r1, #8]
 800b378:	f1b8 0f00 	cmp.w	r8, #0
 800b37c:	dde9      	ble.n	800b352 <__sflush_r+0xae>
 800b37e:	6a21      	ldr	r1, [r4, #32]
 800b380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b382:	4643      	mov	r3, r8
 800b384:	463a      	mov	r2, r7
 800b386:	4628      	mov	r0, r5
 800b388:	47b0      	blx	r6
 800b38a:	2800      	cmp	r0, #0
 800b38c:	dc08      	bgt.n	800b3a0 <__sflush_r+0xfc>
 800b38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b396:	81a3      	strh	r3, [r4, #12]
 800b398:	f04f 30ff 	mov.w	r0, #4294967295
 800b39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3a0:	4407      	add	r7, r0
 800b3a2:	eba8 0800 	sub.w	r8, r8, r0
 800b3a6:	e7e7      	b.n	800b378 <__sflush_r+0xd4>
 800b3a8:	20400001 	.word	0x20400001

0800b3ac <_fflush_r>:
 800b3ac:	b538      	push	{r3, r4, r5, lr}
 800b3ae:	690b      	ldr	r3, [r1, #16]
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	b913      	cbnz	r3, 800b3bc <_fflush_r+0x10>
 800b3b6:	2500      	movs	r5, #0
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	b118      	cbz	r0, 800b3c6 <_fflush_r+0x1a>
 800b3be:	6a03      	ldr	r3, [r0, #32]
 800b3c0:	b90b      	cbnz	r3, 800b3c6 <_fflush_r+0x1a>
 800b3c2:	f7ff fa4d 	bl	800a860 <__sinit>
 800b3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0f3      	beq.n	800b3b6 <_fflush_r+0xa>
 800b3ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3d0:	07d0      	lsls	r0, r2, #31
 800b3d2:	d404      	bmi.n	800b3de <_fflush_r+0x32>
 800b3d4:	0599      	lsls	r1, r3, #22
 800b3d6:	d402      	bmi.n	800b3de <_fflush_r+0x32>
 800b3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3da:	f7ff fc48 	bl	800ac6e <__retarget_lock_acquire_recursive>
 800b3de:	4628      	mov	r0, r5
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	f7ff ff5f 	bl	800b2a4 <__sflush_r>
 800b3e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3e8:	07da      	lsls	r2, r3, #31
 800b3ea:	4605      	mov	r5, r0
 800b3ec:	d4e4      	bmi.n	800b3b8 <_fflush_r+0xc>
 800b3ee:	89a3      	ldrh	r3, [r4, #12]
 800b3f0:	059b      	lsls	r3, r3, #22
 800b3f2:	d4e1      	bmi.n	800b3b8 <_fflush_r+0xc>
 800b3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3f6:	f7ff fc3b 	bl	800ac70 <__retarget_lock_release_recursive>
 800b3fa:	e7dd      	b.n	800b3b8 <_fflush_r+0xc>

0800b3fc <__swhatbuf_r>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	460c      	mov	r4, r1
 800b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b404:	2900      	cmp	r1, #0
 800b406:	b096      	sub	sp, #88	@ 0x58
 800b408:	4615      	mov	r5, r2
 800b40a:	461e      	mov	r6, r3
 800b40c:	da0d      	bge.n	800b42a <__swhatbuf_r+0x2e>
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b414:	f04f 0100 	mov.w	r1, #0
 800b418:	bf14      	ite	ne
 800b41a:	2340      	movne	r3, #64	@ 0x40
 800b41c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b420:	2000      	movs	r0, #0
 800b422:	6031      	str	r1, [r6, #0]
 800b424:	602b      	str	r3, [r5, #0]
 800b426:	b016      	add	sp, #88	@ 0x58
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	466a      	mov	r2, sp
 800b42c:	f000 f848 	bl	800b4c0 <_fstat_r>
 800b430:	2800      	cmp	r0, #0
 800b432:	dbec      	blt.n	800b40e <__swhatbuf_r+0x12>
 800b434:	9901      	ldr	r1, [sp, #4]
 800b436:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b43a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b43e:	4259      	negs	r1, r3
 800b440:	4159      	adcs	r1, r3
 800b442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b446:	e7eb      	b.n	800b420 <__swhatbuf_r+0x24>

0800b448 <__smakebuf_r>:
 800b448:	898b      	ldrh	r3, [r1, #12]
 800b44a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b44c:	079d      	lsls	r5, r3, #30
 800b44e:	4606      	mov	r6, r0
 800b450:	460c      	mov	r4, r1
 800b452:	d507      	bpl.n	800b464 <__smakebuf_r+0x1c>
 800b454:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	2301      	movs	r3, #1
 800b45e:	6163      	str	r3, [r4, #20]
 800b460:	b003      	add	sp, #12
 800b462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b464:	ab01      	add	r3, sp, #4
 800b466:	466a      	mov	r2, sp
 800b468:	f7ff ffc8 	bl	800b3fc <__swhatbuf_r>
 800b46c:	9f00      	ldr	r7, [sp, #0]
 800b46e:	4605      	mov	r5, r0
 800b470:	4639      	mov	r1, r7
 800b472:	4630      	mov	r0, r6
 800b474:	f7ff f8dc 	bl	800a630 <_malloc_r>
 800b478:	b948      	cbnz	r0, 800b48e <__smakebuf_r+0x46>
 800b47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47e:	059a      	lsls	r2, r3, #22
 800b480:	d4ee      	bmi.n	800b460 <__smakebuf_r+0x18>
 800b482:	f023 0303 	bic.w	r3, r3, #3
 800b486:	f043 0302 	orr.w	r3, r3, #2
 800b48a:	81a3      	strh	r3, [r4, #12]
 800b48c:	e7e2      	b.n	800b454 <__smakebuf_r+0xc>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	6020      	str	r0, [r4, #0]
 800b492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b496:	81a3      	strh	r3, [r4, #12]
 800b498:	9b01      	ldr	r3, [sp, #4]
 800b49a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b49e:	b15b      	cbz	r3, 800b4b8 <__smakebuf_r+0x70>
 800b4a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f000 f81d 	bl	800b4e4 <_isatty_r>
 800b4aa:	b128      	cbz	r0, 800b4b8 <__smakebuf_r+0x70>
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	f023 0303 	bic.w	r3, r3, #3
 800b4b2:	f043 0301 	orr.w	r3, r3, #1
 800b4b6:	81a3      	strh	r3, [r4, #12]
 800b4b8:	89a3      	ldrh	r3, [r4, #12]
 800b4ba:	431d      	orrs	r5, r3
 800b4bc:	81a5      	strh	r5, [r4, #12]
 800b4be:	e7cf      	b.n	800b460 <__smakebuf_r+0x18>

0800b4c0 <_fstat_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4d07      	ldr	r5, [pc, #28]	@ (800b4e0 <_fstat_r+0x20>)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	4608      	mov	r0, r1
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	602b      	str	r3, [r5, #0]
 800b4ce:	f7f6 fa30 	bl	8001932 <_fstat>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d102      	bne.n	800b4dc <_fstat_r+0x1c>
 800b4d6:	682b      	ldr	r3, [r5, #0]
 800b4d8:	b103      	cbz	r3, 800b4dc <_fstat_r+0x1c>
 800b4da:	6023      	str	r3, [r4, #0]
 800b4dc:	bd38      	pop	{r3, r4, r5, pc}
 800b4de:	bf00      	nop
 800b4e0:	20000aa0 	.word	0x20000aa0

0800b4e4 <_isatty_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d06      	ldr	r5, [pc, #24]	@ (800b500 <_isatty_r+0x1c>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	602b      	str	r3, [r5, #0]
 800b4f0:	f7f6 fa2f 	bl	8001952 <_isatty>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_isatty_r+0x1a>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_isatty_r+0x1a>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20000aa0 	.word	0x20000aa0
 800b504:	00000000 	.word	0x00000000

0800b508 <sin>:
 800b508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b50a:	ec53 2b10 	vmov	r2, r3, d0
 800b50e:	4826      	ldr	r0, [pc, #152]	@ (800b5a8 <sin+0xa0>)
 800b510:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b514:	4281      	cmp	r1, r0
 800b516:	d807      	bhi.n	800b528 <sin+0x20>
 800b518:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b5a0 <sin+0x98>
 800b51c:	2000      	movs	r0, #0
 800b51e:	b005      	add	sp, #20
 800b520:	f85d eb04 	ldr.w	lr, [sp], #4
 800b524:	f000 b90c 	b.w	800b740 <__kernel_sin>
 800b528:	4820      	ldr	r0, [pc, #128]	@ (800b5ac <sin+0xa4>)
 800b52a:	4281      	cmp	r1, r0
 800b52c:	d908      	bls.n	800b540 <sin+0x38>
 800b52e:	4610      	mov	r0, r2
 800b530:	4619      	mov	r1, r3
 800b532:	f7f4 fea1 	bl	8000278 <__aeabi_dsub>
 800b536:	ec41 0b10 	vmov	d0, r0, r1
 800b53a:	b005      	add	sp, #20
 800b53c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b540:	4668      	mov	r0, sp
 800b542:	f000 f9b9 	bl	800b8b8 <__ieee754_rem_pio2>
 800b546:	f000 0003 	and.w	r0, r0, #3
 800b54a:	2801      	cmp	r0, #1
 800b54c:	d00c      	beq.n	800b568 <sin+0x60>
 800b54e:	2802      	cmp	r0, #2
 800b550:	d011      	beq.n	800b576 <sin+0x6e>
 800b552:	b9e8      	cbnz	r0, 800b590 <sin+0x88>
 800b554:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b558:	ed9d 0b00 	vldr	d0, [sp]
 800b55c:	2001      	movs	r0, #1
 800b55e:	f000 f8ef 	bl	800b740 <__kernel_sin>
 800b562:	ec51 0b10 	vmov	r0, r1, d0
 800b566:	e7e6      	b.n	800b536 <sin+0x2e>
 800b568:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b56c:	ed9d 0b00 	vldr	d0, [sp]
 800b570:	f000 f81e 	bl	800b5b0 <__kernel_cos>
 800b574:	e7f5      	b.n	800b562 <sin+0x5a>
 800b576:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b57a:	ed9d 0b00 	vldr	d0, [sp]
 800b57e:	2001      	movs	r0, #1
 800b580:	f000 f8de 	bl	800b740 <__kernel_sin>
 800b584:	ec53 2b10 	vmov	r2, r3, d0
 800b588:	4610      	mov	r0, r2
 800b58a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b58e:	e7d2      	b.n	800b536 <sin+0x2e>
 800b590:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b594:	ed9d 0b00 	vldr	d0, [sp]
 800b598:	f000 f80a 	bl	800b5b0 <__kernel_cos>
 800b59c:	e7f2      	b.n	800b584 <sin+0x7c>
 800b59e:	bf00      	nop
	...
 800b5a8:	3fe921fb 	.word	0x3fe921fb
 800b5ac:	7fefffff 	.word	0x7fefffff

0800b5b0 <__kernel_cos>:
 800b5b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	ec57 6b10 	vmov	r6, r7, d0
 800b5b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b5bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b5c0:	ed8d 1b00 	vstr	d1, [sp]
 800b5c4:	d206      	bcs.n	800b5d4 <__kernel_cos+0x24>
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f5 faa7 	bl	8000b1c <__aeabi_d2iz>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f000 8088 	beq.w	800b6e4 <__kernel_cos+0x134>
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	463b      	mov	r3, r7
 800b5d8:	4630      	mov	r0, r6
 800b5da:	4639      	mov	r1, r7
 800b5dc:	f7f5 f804 	bl	80005e8 <__aeabi_dmul>
 800b5e0:	4b51      	ldr	r3, [pc, #324]	@ (800b728 <__kernel_cos+0x178>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	f7f4 fffe 	bl	80005e8 <__aeabi_dmul>
 800b5ec:	a340      	add	r3, pc, #256	@ (adr r3, 800b6f0 <__kernel_cos+0x140>)
 800b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f2:	4682      	mov	sl, r0
 800b5f4:	468b      	mov	fp, r1
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f7f4 fff5 	bl	80005e8 <__aeabi_dmul>
 800b5fe:	a33e      	add	r3, pc, #248	@ (adr r3, 800b6f8 <__kernel_cos+0x148>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f4 fe3a 	bl	800027c <__adddf3>
 800b608:	4622      	mov	r2, r4
 800b60a:	462b      	mov	r3, r5
 800b60c:	f7f4 ffec 	bl	80005e8 <__aeabi_dmul>
 800b610:	a33b      	add	r3, pc, #236	@ (adr r3, 800b700 <__kernel_cos+0x150>)
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	f7f4 fe2f 	bl	8000278 <__aeabi_dsub>
 800b61a:	4622      	mov	r2, r4
 800b61c:	462b      	mov	r3, r5
 800b61e:	f7f4 ffe3 	bl	80005e8 <__aeabi_dmul>
 800b622:	a339      	add	r3, pc, #228	@ (adr r3, 800b708 <__kernel_cos+0x158>)
 800b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b628:	f7f4 fe28 	bl	800027c <__adddf3>
 800b62c:	4622      	mov	r2, r4
 800b62e:	462b      	mov	r3, r5
 800b630:	f7f4 ffda 	bl	80005e8 <__aeabi_dmul>
 800b634:	a336      	add	r3, pc, #216	@ (adr r3, 800b710 <__kernel_cos+0x160>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f7f4 fe1d 	bl	8000278 <__aeabi_dsub>
 800b63e:	4622      	mov	r2, r4
 800b640:	462b      	mov	r3, r5
 800b642:	f7f4 ffd1 	bl	80005e8 <__aeabi_dmul>
 800b646:	a334      	add	r3, pc, #208	@ (adr r3, 800b718 <__kernel_cos+0x168>)
 800b648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64c:	f7f4 fe16 	bl	800027c <__adddf3>
 800b650:	4622      	mov	r2, r4
 800b652:	462b      	mov	r3, r5
 800b654:	f7f4 ffc8 	bl	80005e8 <__aeabi_dmul>
 800b658:	4622      	mov	r2, r4
 800b65a:	462b      	mov	r3, r5
 800b65c:	f7f4 ffc4 	bl	80005e8 <__aeabi_dmul>
 800b660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b664:	4604      	mov	r4, r0
 800b666:	460d      	mov	r5, r1
 800b668:	4630      	mov	r0, r6
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f4 ffbc 	bl	80005e8 <__aeabi_dmul>
 800b670:	460b      	mov	r3, r1
 800b672:	4602      	mov	r2, r0
 800b674:	4629      	mov	r1, r5
 800b676:	4620      	mov	r0, r4
 800b678:	f7f4 fdfe 	bl	8000278 <__aeabi_dsub>
 800b67c:	4b2b      	ldr	r3, [pc, #172]	@ (800b72c <__kernel_cos+0x17c>)
 800b67e:	4598      	cmp	r8, r3
 800b680:	4606      	mov	r6, r0
 800b682:	460f      	mov	r7, r1
 800b684:	d810      	bhi.n	800b6a8 <__kernel_cos+0xf8>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4650      	mov	r0, sl
 800b68c:	4659      	mov	r1, fp
 800b68e:	f7f4 fdf3 	bl	8000278 <__aeabi_dsub>
 800b692:	460b      	mov	r3, r1
 800b694:	4926      	ldr	r1, [pc, #152]	@ (800b730 <__kernel_cos+0x180>)
 800b696:	4602      	mov	r2, r0
 800b698:	2000      	movs	r0, #0
 800b69a:	f7f4 fded 	bl	8000278 <__aeabi_dsub>
 800b69e:	ec41 0b10 	vmov	d0, r0, r1
 800b6a2:	b003      	add	sp, #12
 800b6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a8:	4b22      	ldr	r3, [pc, #136]	@ (800b734 <__kernel_cos+0x184>)
 800b6aa:	4921      	ldr	r1, [pc, #132]	@ (800b730 <__kernel_cos+0x180>)
 800b6ac:	4598      	cmp	r8, r3
 800b6ae:	bf8c      	ite	hi
 800b6b0:	4d21      	ldrhi	r5, [pc, #132]	@ (800b738 <__kernel_cos+0x188>)
 800b6b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b6b6:	2400      	movs	r4, #0
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	2000      	movs	r0, #0
 800b6be:	f7f4 fddb 	bl	8000278 <__aeabi_dsub>
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	4689      	mov	r9, r1
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	4659      	mov	r1, fp
 800b6ce:	f7f4 fdd3 	bl	8000278 <__aeabi_dsub>
 800b6d2:	4632      	mov	r2, r6
 800b6d4:	463b      	mov	r3, r7
 800b6d6:	f7f4 fdcf 	bl	8000278 <__aeabi_dsub>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4640      	mov	r0, r8
 800b6e0:	4649      	mov	r1, r9
 800b6e2:	e7da      	b.n	800b69a <__kernel_cos+0xea>
 800b6e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b720 <__kernel_cos+0x170>
 800b6e8:	e7db      	b.n	800b6a2 <__kernel_cos+0xf2>
 800b6ea:	bf00      	nop
 800b6ec:	f3af 8000 	nop.w
 800b6f0:	be8838d4 	.word	0xbe8838d4
 800b6f4:	bda8fae9 	.word	0xbda8fae9
 800b6f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b6fc:	3e21ee9e 	.word	0x3e21ee9e
 800b700:	809c52ad 	.word	0x809c52ad
 800b704:	3e927e4f 	.word	0x3e927e4f
 800b708:	19cb1590 	.word	0x19cb1590
 800b70c:	3efa01a0 	.word	0x3efa01a0
 800b710:	16c15177 	.word	0x16c15177
 800b714:	3f56c16c 	.word	0x3f56c16c
 800b718:	5555554c 	.word	0x5555554c
 800b71c:	3fa55555 	.word	0x3fa55555
 800b720:	00000000 	.word	0x00000000
 800b724:	3ff00000 	.word	0x3ff00000
 800b728:	3fe00000 	.word	0x3fe00000
 800b72c:	3fd33332 	.word	0x3fd33332
 800b730:	3ff00000 	.word	0x3ff00000
 800b734:	3fe90000 	.word	0x3fe90000
 800b738:	3fd20000 	.word	0x3fd20000
 800b73c:	00000000 	.word	0x00000000

0800b740 <__kernel_sin>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	ec55 4b10 	vmov	r4, r5, d0
 800b748:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b74c:	b085      	sub	sp, #20
 800b74e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b752:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b756:	4680      	mov	r8, r0
 800b758:	d205      	bcs.n	800b766 <__kernel_sin+0x26>
 800b75a:	4620      	mov	r0, r4
 800b75c:	4629      	mov	r1, r5
 800b75e:	f7f5 f9dd 	bl	8000b1c <__aeabi_d2iz>
 800b762:	2800      	cmp	r0, #0
 800b764:	d052      	beq.n	800b80c <__kernel_sin+0xcc>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	4620      	mov	r0, r4
 800b76c:	4629      	mov	r1, r5
 800b76e:	f7f4 ff3b 	bl	80005e8 <__aeabi_dmul>
 800b772:	4682      	mov	sl, r0
 800b774:	468b      	mov	fp, r1
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4620      	mov	r0, r4
 800b77c:	4629      	mov	r1, r5
 800b77e:	f7f4 ff33 	bl	80005e8 <__aeabi_dmul>
 800b782:	a342      	add	r3, pc, #264	@ (adr r3, 800b88c <__kernel_sin+0x14c>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	e9cd 0100 	strd	r0, r1, [sp]
 800b78c:	4650      	mov	r0, sl
 800b78e:	4659      	mov	r1, fp
 800b790:	f7f4 ff2a 	bl	80005e8 <__aeabi_dmul>
 800b794:	a33f      	add	r3, pc, #252	@ (adr r3, 800b894 <__kernel_sin+0x154>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	f7f4 fd6d 	bl	8000278 <__aeabi_dsub>
 800b79e:	4652      	mov	r2, sl
 800b7a0:	465b      	mov	r3, fp
 800b7a2:	f7f4 ff21 	bl	80005e8 <__aeabi_dmul>
 800b7a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800b89c <__kernel_sin+0x15c>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f7f4 fd66 	bl	800027c <__adddf3>
 800b7b0:	4652      	mov	r2, sl
 800b7b2:	465b      	mov	r3, fp
 800b7b4:	f7f4 ff18 	bl	80005e8 <__aeabi_dmul>
 800b7b8:	a33a      	add	r3, pc, #232	@ (adr r3, 800b8a4 <__kernel_sin+0x164>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 fd5b 	bl	8000278 <__aeabi_dsub>
 800b7c2:	4652      	mov	r2, sl
 800b7c4:	465b      	mov	r3, fp
 800b7c6:	f7f4 ff0f 	bl	80005e8 <__aeabi_dmul>
 800b7ca:	a338      	add	r3, pc, #224	@ (adr r3, 800b8ac <__kernel_sin+0x16c>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f7f4 fd54 	bl	800027c <__adddf3>
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	460f      	mov	r7, r1
 800b7d8:	f1b8 0f00 	cmp.w	r8, #0
 800b7dc:	d11b      	bne.n	800b816 <__kernel_sin+0xd6>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	4659      	mov	r1, fp
 800b7e6:	f7f4 feff 	bl	80005e8 <__aeabi_dmul>
 800b7ea:	a325      	add	r3, pc, #148	@ (adr r3, 800b880 <__kernel_sin+0x140>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f7f4 fd42 	bl	8000278 <__aeabi_dsub>
 800b7f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7f8:	f7f4 fef6 	bl	80005e8 <__aeabi_dmul>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fd3a 	bl	800027c <__adddf3>
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	ec45 4b10 	vmov	d0, r4, r5
 800b810:	b005      	add	sp, #20
 800b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b81a:	4b1b      	ldr	r3, [pc, #108]	@ (800b888 <__kernel_sin+0x148>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	f7f4 fee3 	bl	80005e8 <__aeabi_dmul>
 800b822:	4632      	mov	r2, r6
 800b824:	4680      	mov	r8, r0
 800b826:	4689      	mov	r9, r1
 800b828:	463b      	mov	r3, r7
 800b82a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b82e:	f7f4 fedb 	bl	80005e8 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4640      	mov	r0, r8
 800b838:	4649      	mov	r1, r9
 800b83a:	f7f4 fd1d 	bl	8000278 <__aeabi_dsub>
 800b83e:	4652      	mov	r2, sl
 800b840:	465b      	mov	r3, fp
 800b842:	f7f4 fed1 	bl	80005e8 <__aeabi_dmul>
 800b846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b84a:	f7f4 fd15 	bl	8000278 <__aeabi_dsub>
 800b84e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b880 <__kernel_sin+0x140>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b85c:	f7f4 fec4 	bl	80005e8 <__aeabi_dmul>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4630      	mov	r0, r6
 800b866:	4639      	mov	r1, r7
 800b868:	f7f4 fd08 	bl	800027c <__adddf3>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4620      	mov	r0, r4
 800b872:	4629      	mov	r1, r5
 800b874:	f7f4 fd00 	bl	8000278 <__aeabi_dsub>
 800b878:	e7c6      	b.n	800b808 <__kernel_sin+0xc8>
 800b87a:	bf00      	nop
 800b87c:	f3af 8000 	nop.w
 800b880:	55555549 	.word	0x55555549
 800b884:	3fc55555 	.word	0x3fc55555
 800b888:	3fe00000 	.word	0x3fe00000
 800b88c:	5acfd57c 	.word	0x5acfd57c
 800b890:	3de5d93a 	.word	0x3de5d93a
 800b894:	8a2b9ceb 	.word	0x8a2b9ceb
 800b898:	3e5ae5e6 	.word	0x3e5ae5e6
 800b89c:	57b1fe7d 	.word	0x57b1fe7d
 800b8a0:	3ec71de3 	.word	0x3ec71de3
 800b8a4:	19c161d5 	.word	0x19c161d5
 800b8a8:	3f2a01a0 	.word	0x3f2a01a0
 800b8ac:	1110f8a6 	.word	0x1110f8a6
 800b8b0:	3f811111 	.word	0x3f811111
 800b8b4:	00000000 	.word	0x00000000

0800b8b8 <__ieee754_rem_pio2>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	ec57 6b10 	vmov	r6, r7, d0
 800b8c0:	4bc5      	ldr	r3, [pc, #788]	@ (800bbd8 <__ieee754_rem_pio2+0x320>)
 800b8c2:	b08d      	sub	sp, #52	@ 0x34
 800b8c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b8c8:	4598      	cmp	r8, r3
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	9704      	str	r7, [sp, #16]
 800b8ce:	d807      	bhi.n	800b8e0 <__ieee754_rem_pio2+0x28>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	ed80 0b00 	vstr	d0, [r0]
 800b8d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b8dc:	2500      	movs	r5, #0
 800b8de:	e028      	b.n	800b932 <__ieee754_rem_pio2+0x7a>
 800b8e0:	4bbe      	ldr	r3, [pc, #760]	@ (800bbdc <__ieee754_rem_pio2+0x324>)
 800b8e2:	4598      	cmp	r8, r3
 800b8e4:	d878      	bhi.n	800b9d8 <__ieee754_rem_pio2+0x120>
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	4dbd      	ldr	r5, [pc, #756]	@ (800bbe0 <__ieee754_rem_pio2+0x328>)
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bba0 <__ieee754_rem_pio2+0x2e8>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	4639      	mov	r1, r7
 800b8f6:	dd38      	ble.n	800b96a <__ieee754_rem_pio2+0xb2>
 800b8f8:	f7f4 fcbe 	bl	8000278 <__aeabi_dsub>
 800b8fc:	45a8      	cmp	r8, r5
 800b8fe:	4606      	mov	r6, r0
 800b900:	460f      	mov	r7, r1
 800b902:	d01a      	beq.n	800b93a <__ieee754_rem_pio2+0x82>
 800b904:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bba8 <__ieee754_rem_pio2+0x2f0>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	f7f4 fcb5 	bl	8000278 <__aeabi_dsub>
 800b90e:	4602      	mov	r2, r0
 800b910:	460b      	mov	r3, r1
 800b912:	4680      	mov	r8, r0
 800b914:	4689      	mov	r9, r1
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f4 fcad 	bl	8000278 <__aeabi_dsub>
 800b91e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bba8 <__ieee754_rem_pio2+0x2f0>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fca8 	bl	8000278 <__aeabi_dsub>
 800b928:	e9c4 8900 	strd	r8, r9, [r4]
 800b92c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b930:	2501      	movs	r5, #1
 800b932:	4628      	mov	r0, r5
 800b934:	b00d      	add	sp, #52	@ 0x34
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	a39d      	add	r3, pc, #628	@ (adr r3, 800bbb0 <__ieee754_rem_pio2+0x2f8>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fc9a 	bl	8000278 <__aeabi_dsub>
 800b944:	a39c      	add	r3, pc, #624	@ (adr r3, 800bbb8 <__ieee754_rem_pio2+0x300>)
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	f7f4 fc93 	bl	8000278 <__aeabi_dsub>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4680      	mov	r8, r0
 800b958:	4689      	mov	r9, r1
 800b95a:	4630      	mov	r0, r6
 800b95c:	4639      	mov	r1, r7
 800b95e:	f7f4 fc8b 	bl	8000278 <__aeabi_dsub>
 800b962:	a395      	add	r3, pc, #596	@ (adr r3, 800bbb8 <__ieee754_rem_pio2+0x300>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	e7dc      	b.n	800b924 <__ieee754_rem_pio2+0x6c>
 800b96a:	f7f4 fc87 	bl	800027c <__adddf3>
 800b96e:	45a8      	cmp	r8, r5
 800b970:	4606      	mov	r6, r0
 800b972:	460f      	mov	r7, r1
 800b974:	d018      	beq.n	800b9a8 <__ieee754_rem_pio2+0xf0>
 800b976:	a38c      	add	r3, pc, #560	@ (adr r3, 800bba8 <__ieee754_rem_pio2+0x2f0>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f7f4 fc7e 	bl	800027c <__adddf3>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4680      	mov	r8, r0
 800b986:	4689      	mov	r9, r1
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f4 fc74 	bl	8000278 <__aeabi_dsub>
 800b990:	a385      	add	r3, pc, #532	@ (adr r3, 800bba8 <__ieee754_rem_pio2+0x2f0>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f7f4 fc71 	bl	800027c <__adddf3>
 800b99a:	f04f 35ff 	mov.w	r5, #4294967295
 800b99e:	e9c4 8900 	strd	r8, r9, [r4]
 800b9a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9a6:	e7c4      	b.n	800b932 <__ieee754_rem_pio2+0x7a>
 800b9a8:	a381      	add	r3, pc, #516	@ (adr r3, 800bbb0 <__ieee754_rem_pio2+0x2f8>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fc65 	bl	800027c <__adddf3>
 800b9b2:	a381      	add	r3, pc, #516	@ (adr r3, 800bbb8 <__ieee754_rem_pio2+0x300>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	460f      	mov	r7, r1
 800b9bc:	f7f4 fc5e 	bl	800027c <__adddf3>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	4689      	mov	r9, r1
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	f7f4 fc54 	bl	8000278 <__aeabi_dsub>
 800b9d0:	a379      	add	r3, pc, #484	@ (adr r3, 800bbb8 <__ieee754_rem_pio2+0x300>)
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	e7de      	b.n	800b996 <__ieee754_rem_pio2+0xde>
 800b9d8:	4b82      	ldr	r3, [pc, #520]	@ (800bbe4 <__ieee754_rem_pio2+0x32c>)
 800b9da:	4598      	cmp	r8, r3
 800b9dc:	f200 80d1 	bhi.w	800bb82 <__ieee754_rem_pio2+0x2ca>
 800b9e0:	f000 f966 	bl	800bcb0 <fabs>
 800b9e4:	ec57 6b10 	vmov	r6, r7, d0
 800b9e8:	a375      	add	r3, pc, #468	@ (adr r3, 800bbc0 <__ieee754_rem_pio2+0x308>)
 800b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	f7f4 fdf9 	bl	80005e8 <__aeabi_dmul>
 800b9f6:	4b7c      	ldr	r3, [pc, #496]	@ (800bbe8 <__ieee754_rem_pio2+0x330>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f7f4 fc3f 	bl	800027c <__adddf3>
 800b9fe:	f7f5 f88d 	bl	8000b1c <__aeabi_d2iz>
 800ba02:	4605      	mov	r5, r0
 800ba04:	f7f4 fd86 	bl	8000514 <__aeabi_i2d>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba10:	a363      	add	r3, pc, #396	@ (adr r3, 800bba0 <__ieee754_rem_pio2+0x2e8>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f4 fde7 	bl	80005e8 <__aeabi_dmul>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4630      	mov	r0, r6
 800ba20:	4639      	mov	r1, r7
 800ba22:	f7f4 fc29 	bl	8000278 <__aeabi_dsub>
 800ba26:	a360      	add	r3, pc, #384	@ (adr r3, 800bba8 <__ieee754_rem_pio2+0x2f0>)
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	468b      	mov	fp, r1
 800ba30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba34:	f7f4 fdd8 	bl	80005e8 <__aeabi_dmul>
 800ba38:	2d1f      	cmp	r5, #31
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	460f      	mov	r7, r1
 800ba3e:	dc0c      	bgt.n	800ba5a <__ieee754_rem_pio2+0x1a2>
 800ba40:	4b6a      	ldr	r3, [pc, #424]	@ (800bbec <__ieee754_rem_pio2+0x334>)
 800ba42:	1e6a      	subs	r2, r5, #1
 800ba44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba48:	4543      	cmp	r3, r8
 800ba4a:	d006      	beq.n	800ba5a <__ieee754_rem_pio2+0x1a2>
 800ba4c:	4632      	mov	r2, r6
 800ba4e:	463b      	mov	r3, r7
 800ba50:	4650      	mov	r0, sl
 800ba52:	4659      	mov	r1, fp
 800ba54:	f7f4 fc10 	bl	8000278 <__aeabi_dsub>
 800ba58:	e00e      	b.n	800ba78 <__ieee754_rem_pio2+0x1c0>
 800ba5a:	463b      	mov	r3, r7
 800ba5c:	4632      	mov	r2, r6
 800ba5e:	4650      	mov	r0, sl
 800ba60:	4659      	mov	r1, fp
 800ba62:	f7f4 fc09 	bl	8000278 <__aeabi_dsub>
 800ba66:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ba6a:	9305      	str	r3, [sp, #20]
 800ba6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ba70:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ba74:	2b10      	cmp	r3, #16
 800ba76:	dc02      	bgt.n	800ba7e <__ieee754_rem_pio2+0x1c6>
 800ba78:	e9c4 0100 	strd	r0, r1, [r4]
 800ba7c:	e039      	b.n	800baf2 <__ieee754_rem_pio2+0x23a>
 800ba7e:	a34c      	add	r3, pc, #304	@ (adr r3, 800bbb0 <__ieee754_rem_pio2+0x2f8>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba88:	f7f4 fdae 	bl	80005e8 <__aeabi_dmul>
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	460f      	mov	r7, r1
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	4650      	mov	r0, sl
 800ba96:	4659      	mov	r1, fp
 800ba98:	f7f4 fbee 	bl	8000278 <__aeabi_dsub>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4680      	mov	r8, r0
 800baa2:	4689      	mov	r9, r1
 800baa4:	4650      	mov	r0, sl
 800baa6:	4659      	mov	r1, fp
 800baa8:	f7f4 fbe6 	bl	8000278 <__aeabi_dsub>
 800baac:	4632      	mov	r2, r6
 800baae:	463b      	mov	r3, r7
 800bab0:	f7f4 fbe2 	bl	8000278 <__aeabi_dsub>
 800bab4:	a340      	add	r3, pc, #256	@ (adr r3, 800bbb8 <__ieee754_rem_pio2+0x300>)
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	4606      	mov	r6, r0
 800babc:	460f      	mov	r7, r1
 800babe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac2:	f7f4 fd91 	bl	80005e8 <__aeabi_dmul>
 800bac6:	4632      	mov	r2, r6
 800bac8:	463b      	mov	r3, r7
 800baca:	f7f4 fbd5 	bl	8000278 <__aeabi_dsub>
 800bace:	4602      	mov	r2, r0
 800bad0:	460b      	mov	r3, r1
 800bad2:	4606      	mov	r6, r0
 800bad4:	460f      	mov	r7, r1
 800bad6:	4640      	mov	r0, r8
 800bad8:	4649      	mov	r1, r9
 800bada:	f7f4 fbcd 	bl	8000278 <__aeabi_dsub>
 800bade:	9a05      	ldr	r2, [sp, #20]
 800bae0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	2b31      	cmp	r3, #49	@ 0x31
 800bae8:	dc20      	bgt.n	800bb2c <__ieee754_rem_pio2+0x274>
 800baea:	e9c4 0100 	strd	r0, r1, [r4]
 800baee:	46c2      	mov	sl, r8
 800baf0:	46cb      	mov	fp, r9
 800baf2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800baf6:	4650      	mov	r0, sl
 800baf8:	4642      	mov	r2, r8
 800bafa:	464b      	mov	r3, r9
 800bafc:	4659      	mov	r1, fp
 800bafe:	f7f4 fbbb 	bl	8000278 <__aeabi_dsub>
 800bb02:	463b      	mov	r3, r7
 800bb04:	4632      	mov	r2, r6
 800bb06:	f7f4 fbb7 	bl	8000278 <__aeabi_dsub>
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb12:	f6bf af0e 	bge.w	800b932 <__ieee754_rem_pio2+0x7a>
 800bb16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800bb1a:	6063      	str	r3, [r4, #4]
 800bb1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb20:	f8c4 8000 	str.w	r8, [r4]
 800bb24:	60a0      	str	r0, [r4, #8]
 800bb26:	60e3      	str	r3, [r4, #12]
 800bb28:	426d      	negs	r5, r5
 800bb2a:	e702      	b.n	800b932 <__ieee754_rem_pio2+0x7a>
 800bb2c:	a326      	add	r3, pc, #152	@ (adr r3, 800bbc8 <__ieee754_rem_pio2+0x310>)
 800bb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb36:	f7f4 fd57 	bl	80005e8 <__aeabi_dmul>
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4640      	mov	r0, r8
 800bb44:	4649      	mov	r1, r9
 800bb46:	f7f4 fb97 	bl	8000278 <__aeabi_dsub>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4682      	mov	sl, r0
 800bb50:	468b      	mov	fp, r1
 800bb52:	4640      	mov	r0, r8
 800bb54:	4649      	mov	r1, r9
 800bb56:	f7f4 fb8f 	bl	8000278 <__aeabi_dsub>
 800bb5a:	4632      	mov	r2, r6
 800bb5c:	463b      	mov	r3, r7
 800bb5e:	f7f4 fb8b 	bl	8000278 <__aeabi_dsub>
 800bb62:	a31b      	add	r3, pc, #108	@ (adr r3, 800bbd0 <__ieee754_rem_pio2+0x318>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	4606      	mov	r6, r0
 800bb6a:	460f      	mov	r7, r1
 800bb6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb70:	f7f4 fd3a 	bl	80005e8 <__aeabi_dmul>
 800bb74:	4632      	mov	r2, r6
 800bb76:	463b      	mov	r3, r7
 800bb78:	f7f4 fb7e 	bl	8000278 <__aeabi_dsub>
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	e764      	b.n	800ba4c <__ieee754_rem_pio2+0x194>
 800bb82:	4b1b      	ldr	r3, [pc, #108]	@ (800bbf0 <__ieee754_rem_pio2+0x338>)
 800bb84:	4598      	cmp	r8, r3
 800bb86:	d935      	bls.n	800bbf4 <__ieee754_rem_pio2+0x33c>
 800bb88:	4632      	mov	r2, r6
 800bb8a:	463b      	mov	r3, r7
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	4639      	mov	r1, r7
 800bb90:	f7f4 fb72 	bl	8000278 <__aeabi_dsub>
 800bb94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb98:	e9c4 0100 	strd	r0, r1, [r4]
 800bb9c:	e69e      	b.n	800b8dc <__ieee754_rem_pio2+0x24>
 800bb9e:	bf00      	nop
 800bba0:	54400000 	.word	0x54400000
 800bba4:	3ff921fb 	.word	0x3ff921fb
 800bba8:	1a626331 	.word	0x1a626331
 800bbac:	3dd0b461 	.word	0x3dd0b461
 800bbb0:	1a600000 	.word	0x1a600000
 800bbb4:	3dd0b461 	.word	0x3dd0b461
 800bbb8:	2e037073 	.word	0x2e037073
 800bbbc:	3ba3198a 	.word	0x3ba3198a
 800bbc0:	6dc9c883 	.word	0x6dc9c883
 800bbc4:	3fe45f30 	.word	0x3fe45f30
 800bbc8:	2e000000 	.word	0x2e000000
 800bbcc:	3ba3198a 	.word	0x3ba3198a
 800bbd0:	252049c1 	.word	0x252049c1
 800bbd4:	397b839a 	.word	0x397b839a
 800bbd8:	3fe921fb 	.word	0x3fe921fb
 800bbdc:	4002d97b 	.word	0x4002d97b
 800bbe0:	3ff921fb 	.word	0x3ff921fb
 800bbe4:	413921fb 	.word	0x413921fb
 800bbe8:	3fe00000 	.word	0x3fe00000
 800bbec:	0800c658 	.word	0x0800c658
 800bbf0:	7fefffff 	.word	0x7fefffff
 800bbf4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bbf8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bbfc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bc00:	4630      	mov	r0, r6
 800bc02:	460f      	mov	r7, r1
 800bc04:	f7f4 ff8a 	bl	8000b1c <__aeabi_d2iz>
 800bc08:	f7f4 fc84 	bl	8000514 <__aeabi_i2d>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4630      	mov	r0, r6
 800bc12:	4639      	mov	r1, r7
 800bc14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bc18:	f7f4 fb2e 	bl	8000278 <__aeabi_dsub>
 800bc1c:	4b22      	ldr	r3, [pc, #136]	@ (800bca8 <__ieee754_rem_pio2+0x3f0>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f7f4 fce2 	bl	80005e8 <__aeabi_dmul>
 800bc24:	460f      	mov	r7, r1
 800bc26:	4606      	mov	r6, r0
 800bc28:	f7f4 ff78 	bl	8000b1c <__aeabi_d2iz>
 800bc2c:	f7f4 fc72 	bl	8000514 <__aeabi_i2d>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4630      	mov	r0, r6
 800bc36:	4639      	mov	r1, r7
 800bc38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc3c:	f7f4 fb1c 	bl	8000278 <__aeabi_dsub>
 800bc40:	4b19      	ldr	r3, [pc, #100]	@ (800bca8 <__ieee754_rem_pio2+0x3f0>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	f7f4 fcd0 	bl	80005e8 <__aeabi_dmul>
 800bc48:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bc4c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bc50:	f04f 0803 	mov.w	r8, #3
 800bc54:	2600      	movs	r6, #0
 800bc56:	2700      	movs	r7, #0
 800bc58:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	463b      	mov	r3, r7
 800bc60:	46c2      	mov	sl, r8
 800bc62:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc66:	f7f4 ff27 	bl	8000ab8 <__aeabi_dcmpeq>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d1f4      	bne.n	800bc58 <__ieee754_rem_pio2+0x3a0>
 800bc6e:	4b0f      	ldr	r3, [pc, #60]	@ (800bcac <__ieee754_rem_pio2+0x3f4>)
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	2302      	movs	r3, #2
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	462a      	mov	r2, r5
 800bc78:	4653      	mov	r3, sl
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	a806      	add	r0, sp, #24
 800bc7e:	f000 f81f 	bl	800bcc0 <__kernel_rem_pio2>
 800bc82:	9b04      	ldr	r3, [sp, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	4605      	mov	r5, r0
 800bc88:	f6bf ae53 	bge.w	800b932 <__ieee754_rem_pio2+0x7a>
 800bc8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bc90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc94:	e9c4 2300 	strd	r2, r3, [r4]
 800bc98:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bc9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bca0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bca4:	e740      	b.n	800bb28 <__ieee754_rem_pio2+0x270>
 800bca6:	bf00      	nop
 800bca8:	41700000 	.word	0x41700000
 800bcac:	0800c6d8 	.word	0x0800c6d8

0800bcb0 <fabs>:
 800bcb0:	ec51 0b10 	vmov	r0, r1, d0
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bcba:	ec43 2b10 	vmov	d0, r2, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <__kernel_rem_pio2>:
 800bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc4:	ed2d 8b02 	vpush	{d8}
 800bcc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bccc:	f112 0f14 	cmn.w	r2, #20
 800bcd0:	9306      	str	r3, [sp, #24]
 800bcd2:	9104      	str	r1, [sp, #16]
 800bcd4:	4bc2      	ldr	r3, [pc, #776]	@ (800bfe0 <__kernel_rem_pio2+0x320>)
 800bcd6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bcd8:	9008      	str	r0, [sp, #32]
 800bcda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	9b06      	ldr	r3, [sp, #24]
 800bce2:	f103 33ff 	add.w	r3, r3, #4294967295
 800bce6:	bfa8      	it	ge
 800bce8:	1ed4      	subge	r4, r2, #3
 800bcea:	9305      	str	r3, [sp, #20]
 800bcec:	bfb2      	itee	lt
 800bcee:	2400      	movlt	r4, #0
 800bcf0:	2318      	movge	r3, #24
 800bcf2:	fb94 f4f3 	sdivge	r4, r4, r3
 800bcf6:	f06f 0317 	mvn.w	r3, #23
 800bcfa:	fb04 3303 	mla	r3, r4, r3, r3
 800bcfe:	eb03 0b02 	add.w	fp, r3, r2
 800bd02:	9b00      	ldr	r3, [sp, #0]
 800bd04:	9a05      	ldr	r2, [sp, #20]
 800bd06:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800bfd0 <__kernel_rem_pio2+0x310>
 800bd0a:	eb03 0802 	add.w	r8, r3, r2
 800bd0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bd10:	1aa7      	subs	r7, r4, r2
 800bd12:	ae20      	add	r6, sp, #128	@ 0x80
 800bd14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd18:	2500      	movs	r5, #0
 800bd1a:	4545      	cmp	r5, r8
 800bd1c:	dd12      	ble.n	800bd44 <__kernel_rem_pio2+0x84>
 800bd1e:	9b06      	ldr	r3, [sp, #24]
 800bd20:	aa20      	add	r2, sp, #128	@ 0x80
 800bd22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd26:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bd2a:	2700      	movs	r7, #0
 800bd2c:	9b00      	ldr	r3, [sp, #0]
 800bd2e:	429f      	cmp	r7, r3
 800bd30:	dc2e      	bgt.n	800bd90 <__kernel_rem_pio2+0xd0>
 800bd32:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800bfd0 <__kernel_rem_pio2+0x310>
 800bd36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd3e:	46a8      	mov	r8, r5
 800bd40:	2600      	movs	r6, #0
 800bd42:	e01b      	b.n	800bd7c <__kernel_rem_pio2+0xbc>
 800bd44:	42ef      	cmn	r7, r5
 800bd46:	d407      	bmi.n	800bd58 <__kernel_rem_pio2+0x98>
 800bd48:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bd4c:	f7f4 fbe2 	bl	8000514 <__aeabi_i2d>
 800bd50:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bd54:	3501      	adds	r5, #1
 800bd56:	e7e0      	b.n	800bd1a <__kernel_rem_pio2+0x5a>
 800bd58:	ec51 0b18 	vmov	r0, r1, d8
 800bd5c:	e7f8      	b.n	800bd50 <__kernel_rem_pio2+0x90>
 800bd5e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800bd62:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bd66:	f7f4 fc3f 	bl	80005e8 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd72:	f7f4 fa83 	bl	800027c <__adddf3>
 800bd76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd7a:	3601      	adds	r6, #1
 800bd7c:	9b05      	ldr	r3, [sp, #20]
 800bd7e:	429e      	cmp	r6, r3
 800bd80:	dded      	ble.n	800bd5e <__kernel_rem_pio2+0x9e>
 800bd82:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd86:	3701      	adds	r7, #1
 800bd88:	ecaa 7b02 	vstmia	sl!, {d7}
 800bd8c:	3508      	adds	r5, #8
 800bd8e:	e7cd      	b.n	800bd2c <__kernel_rem_pio2+0x6c>
 800bd90:	9b00      	ldr	r3, [sp, #0]
 800bd92:	f8dd 8000 	ldr.w	r8, [sp]
 800bd96:	aa0c      	add	r2, sp, #48	@ 0x30
 800bd98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bda0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bda6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bdaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdac:	ab98      	add	r3, sp, #608	@ 0x260
 800bdae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bdb2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bdb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdba:	ac0c      	add	r4, sp, #48	@ 0x30
 800bdbc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bdbe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bdc2:	46a1      	mov	r9, r4
 800bdc4:	46c2      	mov	sl, r8
 800bdc6:	f1ba 0f00 	cmp.w	sl, #0
 800bdca:	dc77      	bgt.n	800bebc <__kernel_rem_pio2+0x1fc>
 800bdcc:	4658      	mov	r0, fp
 800bdce:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bdd2:	f000 fac5 	bl	800c360 <scalbn>
 800bdd6:	ec57 6b10 	vmov	r6, r7, d0
 800bdda:	2200      	movs	r2, #0
 800bddc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f4 fc00 	bl	80005e8 <__aeabi_dmul>
 800bde8:	ec41 0b10 	vmov	d0, r0, r1
 800bdec:	f000 fb34 	bl	800c458 <floor>
 800bdf0:	4b7c      	ldr	r3, [pc, #496]	@ (800bfe4 <__kernel_rem_pio2+0x324>)
 800bdf2:	ec51 0b10 	vmov	r0, r1, d0
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f7f4 fbf6 	bl	80005e8 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4630      	mov	r0, r6
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 fa38 	bl	8000278 <__aeabi_dsub>
 800be08:	460f      	mov	r7, r1
 800be0a:	4606      	mov	r6, r0
 800be0c:	f7f4 fe86 	bl	8000b1c <__aeabi_d2iz>
 800be10:	9002      	str	r0, [sp, #8]
 800be12:	f7f4 fb7f 	bl	8000514 <__aeabi_i2d>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	4630      	mov	r0, r6
 800be1c:	4639      	mov	r1, r7
 800be1e:	f7f4 fa2b 	bl	8000278 <__aeabi_dsub>
 800be22:	f1bb 0f00 	cmp.w	fp, #0
 800be26:	4606      	mov	r6, r0
 800be28:	460f      	mov	r7, r1
 800be2a:	dd6c      	ble.n	800bf06 <__kernel_rem_pio2+0x246>
 800be2c:	f108 31ff 	add.w	r1, r8, #4294967295
 800be30:	ab0c      	add	r3, sp, #48	@ 0x30
 800be32:	9d02      	ldr	r5, [sp, #8]
 800be34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be38:	f1cb 0018 	rsb	r0, fp, #24
 800be3c:	fa43 f200 	asr.w	r2, r3, r0
 800be40:	4415      	add	r5, r2
 800be42:	4082      	lsls	r2, r0
 800be44:	1a9b      	subs	r3, r3, r2
 800be46:	aa0c      	add	r2, sp, #48	@ 0x30
 800be48:	9502      	str	r5, [sp, #8]
 800be4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800be4e:	f1cb 0217 	rsb	r2, fp, #23
 800be52:	fa43 f902 	asr.w	r9, r3, r2
 800be56:	f1b9 0f00 	cmp.w	r9, #0
 800be5a:	dd64      	ble.n	800bf26 <__kernel_rem_pio2+0x266>
 800be5c:	9b02      	ldr	r3, [sp, #8]
 800be5e:	2200      	movs	r2, #0
 800be60:	3301      	adds	r3, #1
 800be62:	9302      	str	r3, [sp, #8]
 800be64:	4615      	mov	r5, r2
 800be66:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800be6a:	4590      	cmp	r8, r2
 800be6c:	f300 80a1 	bgt.w	800bfb2 <__kernel_rem_pio2+0x2f2>
 800be70:	f1bb 0f00 	cmp.w	fp, #0
 800be74:	dd07      	ble.n	800be86 <__kernel_rem_pio2+0x1c6>
 800be76:	f1bb 0f01 	cmp.w	fp, #1
 800be7a:	f000 80c1 	beq.w	800c000 <__kernel_rem_pio2+0x340>
 800be7e:	f1bb 0f02 	cmp.w	fp, #2
 800be82:	f000 80c8 	beq.w	800c016 <__kernel_rem_pio2+0x356>
 800be86:	f1b9 0f02 	cmp.w	r9, #2
 800be8a:	d14c      	bne.n	800bf26 <__kernel_rem_pio2+0x266>
 800be8c:	4632      	mov	r2, r6
 800be8e:	463b      	mov	r3, r7
 800be90:	4955      	ldr	r1, [pc, #340]	@ (800bfe8 <__kernel_rem_pio2+0x328>)
 800be92:	2000      	movs	r0, #0
 800be94:	f7f4 f9f0 	bl	8000278 <__aeabi_dsub>
 800be98:	4606      	mov	r6, r0
 800be9a:	460f      	mov	r7, r1
 800be9c:	2d00      	cmp	r5, #0
 800be9e:	d042      	beq.n	800bf26 <__kernel_rem_pio2+0x266>
 800bea0:	4658      	mov	r0, fp
 800bea2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800bfd8 <__kernel_rem_pio2+0x318>
 800bea6:	f000 fa5b 	bl	800c360 <scalbn>
 800beaa:	4630      	mov	r0, r6
 800beac:	4639      	mov	r1, r7
 800beae:	ec53 2b10 	vmov	r2, r3, d0
 800beb2:	f7f4 f9e1 	bl	8000278 <__aeabi_dsub>
 800beb6:	4606      	mov	r6, r0
 800beb8:	460f      	mov	r7, r1
 800beba:	e034      	b.n	800bf26 <__kernel_rem_pio2+0x266>
 800bebc:	4b4b      	ldr	r3, [pc, #300]	@ (800bfec <__kernel_rem_pio2+0x32c>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec4:	f7f4 fb90 	bl	80005e8 <__aeabi_dmul>
 800bec8:	f7f4 fe28 	bl	8000b1c <__aeabi_d2iz>
 800becc:	f7f4 fb22 	bl	8000514 <__aeabi_i2d>
 800bed0:	4b47      	ldr	r3, [pc, #284]	@ (800bff0 <__kernel_rem_pio2+0x330>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	4606      	mov	r6, r0
 800bed6:	460f      	mov	r7, r1
 800bed8:	f7f4 fb86 	bl	80005e8 <__aeabi_dmul>
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee4:	f7f4 f9c8 	bl	8000278 <__aeabi_dsub>
 800bee8:	f7f4 fe18 	bl	8000b1c <__aeabi_d2iz>
 800beec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bef0:	f849 0b04 	str.w	r0, [r9], #4
 800bef4:	4639      	mov	r1, r7
 800bef6:	4630      	mov	r0, r6
 800bef8:	f7f4 f9c0 	bl	800027c <__adddf3>
 800befc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf04:	e75f      	b.n	800bdc6 <__kernel_rem_pio2+0x106>
 800bf06:	d107      	bne.n	800bf18 <__kernel_rem_pio2+0x258>
 800bf08:	f108 33ff 	add.w	r3, r8, #4294967295
 800bf0c:	aa0c      	add	r2, sp, #48	@ 0x30
 800bf0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf12:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bf16:	e79e      	b.n	800be56 <__kernel_rem_pio2+0x196>
 800bf18:	4b36      	ldr	r3, [pc, #216]	@ (800bff4 <__kernel_rem_pio2+0x334>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f7f4 fdea 	bl	8000af4 <__aeabi_dcmpge>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d143      	bne.n	800bfac <__kernel_rem_pio2+0x2ec>
 800bf24:	4681      	mov	r9, r0
 800bf26:	2200      	movs	r2, #0
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	f7f4 fdc3 	bl	8000ab8 <__aeabi_dcmpeq>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f000 80c1 	beq.w	800c0ba <__kernel_rem_pio2+0x3fa>
 800bf38:	f108 33ff 	add.w	r3, r8, #4294967295
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	9900      	ldr	r1, [sp, #0]
 800bf40:	428b      	cmp	r3, r1
 800bf42:	da70      	bge.n	800c026 <__kernel_rem_pio2+0x366>
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	f000 808b 	beq.w	800c060 <__kernel_rem_pio2+0x3a0>
 800bf4a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf4e:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf50:	f1ab 0b18 	sub.w	fp, fp, #24
 800bf54:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d0f6      	beq.n	800bf4a <__kernel_rem_pio2+0x28a>
 800bf5c:	4658      	mov	r0, fp
 800bf5e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800bfd8 <__kernel_rem_pio2+0x318>
 800bf62:	f000 f9fd 	bl	800c360 <scalbn>
 800bf66:	f108 0301 	add.w	r3, r8, #1
 800bf6a:	00da      	lsls	r2, r3, #3
 800bf6c:	9205      	str	r2, [sp, #20]
 800bf6e:	ec55 4b10 	vmov	r4, r5, d0
 800bf72:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bf74:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800bfec <__kernel_rem_pio2+0x32c>
 800bf78:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bf7c:	4646      	mov	r6, r8
 800bf7e:	f04f 0a00 	mov.w	sl, #0
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	f280 80d1 	bge.w	800c12a <__kernel_rem_pio2+0x46a>
 800bf88:	4644      	mov	r4, r8
 800bf8a:	2c00      	cmp	r4, #0
 800bf8c:	f2c0 80ff 	blt.w	800c18e <__kernel_rem_pio2+0x4ce>
 800bf90:	4b19      	ldr	r3, [pc, #100]	@ (800bff8 <__kernel_rem_pio2+0x338>)
 800bf92:	461f      	mov	r7, r3
 800bf94:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bf96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf9a:	9306      	str	r3, [sp, #24]
 800bf9c:	f04f 0a00 	mov.w	sl, #0
 800bfa0:	f04f 0b00 	mov.w	fp, #0
 800bfa4:	2600      	movs	r6, #0
 800bfa6:	eba8 0504 	sub.w	r5, r8, r4
 800bfaa:	e0e4      	b.n	800c176 <__kernel_rem_pio2+0x4b6>
 800bfac:	f04f 0902 	mov.w	r9, #2
 800bfb0:	e754      	b.n	800be5c <__kernel_rem_pio2+0x19c>
 800bfb2:	f854 3b04 	ldr.w	r3, [r4], #4
 800bfb6:	bb0d      	cbnz	r5, 800bffc <__kernel_rem_pio2+0x33c>
 800bfb8:	b123      	cbz	r3, 800bfc4 <__kernel_rem_pio2+0x304>
 800bfba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bfbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	3201      	adds	r2, #1
 800bfc6:	461d      	mov	r5, r3
 800bfc8:	e74f      	b.n	800be6a <__kernel_rem_pio2+0x1aa>
 800bfca:	bf00      	nop
 800bfcc:	f3af 8000 	nop.w
	...
 800bfdc:	3ff00000 	.word	0x3ff00000
 800bfe0:	0800c820 	.word	0x0800c820
 800bfe4:	40200000 	.word	0x40200000
 800bfe8:	3ff00000 	.word	0x3ff00000
 800bfec:	3e700000 	.word	0x3e700000
 800bff0:	41700000 	.word	0x41700000
 800bff4:	3fe00000 	.word	0x3fe00000
 800bff8:	0800c7e0 	.word	0x0800c7e0
 800bffc:	1acb      	subs	r3, r1, r3
 800bffe:	e7de      	b.n	800bfbe <__kernel_rem_pio2+0x2fe>
 800c000:	f108 32ff 	add.w	r2, r8, #4294967295
 800c004:	ab0c      	add	r3, sp, #48	@ 0x30
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c00e:	a90c      	add	r1, sp, #48	@ 0x30
 800c010:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c014:	e737      	b.n	800be86 <__kernel_rem_pio2+0x1c6>
 800c016:	f108 32ff 	add.w	r2, r8, #4294967295
 800c01a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c020:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c024:	e7f3      	b.n	800c00e <__kernel_rem_pio2+0x34e>
 800c026:	a90c      	add	r1, sp, #48	@ 0x30
 800c028:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c02c:	3b01      	subs	r3, #1
 800c02e:	430a      	orrs	r2, r1
 800c030:	e785      	b.n	800bf3e <__kernel_rem_pio2+0x27e>
 800c032:	3401      	adds	r4, #1
 800c034:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c038:	2a00      	cmp	r2, #0
 800c03a:	d0fa      	beq.n	800c032 <__kernel_rem_pio2+0x372>
 800c03c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c03e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c042:	eb0d 0503 	add.w	r5, sp, r3
 800c046:	9b06      	ldr	r3, [sp, #24]
 800c048:	aa20      	add	r2, sp, #128	@ 0x80
 800c04a:	4443      	add	r3, r8
 800c04c:	f108 0701 	add.w	r7, r8, #1
 800c050:	3d98      	subs	r5, #152	@ 0x98
 800c052:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c056:	4444      	add	r4, r8
 800c058:	42bc      	cmp	r4, r7
 800c05a:	da04      	bge.n	800c066 <__kernel_rem_pio2+0x3a6>
 800c05c:	46a0      	mov	r8, r4
 800c05e:	e6a2      	b.n	800bda6 <__kernel_rem_pio2+0xe6>
 800c060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c062:	2401      	movs	r4, #1
 800c064:	e7e6      	b.n	800c034 <__kernel_rem_pio2+0x374>
 800c066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c068:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c06c:	f7f4 fa52 	bl	8000514 <__aeabi_i2d>
 800c070:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800c330 <__kernel_rem_pio2+0x670>
 800c074:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c078:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c07c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c080:	46b2      	mov	sl, r6
 800c082:	f04f 0800 	mov.w	r8, #0
 800c086:	9b05      	ldr	r3, [sp, #20]
 800c088:	4598      	cmp	r8, r3
 800c08a:	dd05      	ble.n	800c098 <__kernel_rem_pio2+0x3d8>
 800c08c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c090:	3701      	adds	r7, #1
 800c092:	eca5 7b02 	vstmia	r5!, {d7}
 800c096:	e7df      	b.n	800c058 <__kernel_rem_pio2+0x398>
 800c098:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c09c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c0a0:	f7f4 faa2 	bl	80005e8 <__aeabi_dmul>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ac:	f7f4 f8e6 	bl	800027c <__adddf3>
 800c0b0:	f108 0801 	add.w	r8, r8, #1
 800c0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b8:	e7e5      	b.n	800c086 <__kernel_rem_pio2+0x3c6>
 800c0ba:	f1cb 0000 	rsb	r0, fp, #0
 800c0be:	ec47 6b10 	vmov	d0, r6, r7
 800c0c2:	f000 f94d 	bl	800c360 <scalbn>
 800c0c6:	ec55 4b10 	vmov	r4, r5, d0
 800c0ca:	4b9b      	ldr	r3, [pc, #620]	@ (800c338 <__kernel_rem_pio2+0x678>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f7f4 fd0f 	bl	8000af4 <__aeabi_dcmpge>
 800c0d6:	b300      	cbz	r0, 800c11a <__kernel_rem_pio2+0x45a>
 800c0d8:	4b98      	ldr	r3, [pc, #608]	@ (800c33c <__kernel_rem_pio2+0x67c>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	4620      	mov	r0, r4
 800c0de:	4629      	mov	r1, r5
 800c0e0:	f7f4 fa82 	bl	80005e8 <__aeabi_dmul>
 800c0e4:	f7f4 fd1a 	bl	8000b1c <__aeabi_d2iz>
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	f7f4 fa13 	bl	8000514 <__aeabi_i2d>
 800c0ee:	4b92      	ldr	r3, [pc, #584]	@ (800c338 <__kernel_rem_pio2+0x678>)
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f7f4 fa79 	bl	80005e8 <__aeabi_dmul>
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f7f4 f8bb 	bl	8000278 <__aeabi_dsub>
 800c102:	f7f4 fd0b 	bl	8000b1c <__aeabi_d2iz>
 800c106:	ab0c      	add	r3, sp, #48	@ 0x30
 800c108:	f10b 0b18 	add.w	fp, fp, #24
 800c10c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c110:	f108 0801 	add.w	r8, r8, #1
 800c114:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c118:	e720      	b.n	800bf5c <__kernel_rem_pio2+0x29c>
 800c11a:	4620      	mov	r0, r4
 800c11c:	4629      	mov	r1, r5
 800c11e:	f7f4 fcfd 	bl	8000b1c <__aeabi_d2iz>
 800c122:	ab0c      	add	r3, sp, #48	@ 0x30
 800c124:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c128:	e718      	b.n	800bf5c <__kernel_rem_pio2+0x29c>
 800c12a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c12c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c130:	f7f4 f9f0 	bl	8000514 <__aeabi_i2d>
 800c134:	4622      	mov	r2, r4
 800c136:	462b      	mov	r3, r5
 800c138:	f7f4 fa56 	bl	80005e8 <__aeabi_dmul>
 800c13c:	4652      	mov	r2, sl
 800c13e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c142:	465b      	mov	r3, fp
 800c144:	4620      	mov	r0, r4
 800c146:	4629      	mov	r1, r5
 800c148:	f7f4 fa4e 	bl	80005e8 <__aeabi_dmul>
 800c14c:	3e01      	subs	r6, #1
 800c14e:	4604      	mov	r4, r0
 800c150:	460d      	mov	r5, r1
 800c152:	e716      	b.n	800bf82 <__kernel_rem_pio2+0x2c2>
 800c154:	9906      	ldr	r1, [sp, #24]
 800c156:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c15a:	9106      	str	r1, [sp, #24]
 800c15c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c160:	f7f4 fa42 	bl	80005e8 <__aeabi_dmul>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4650      	mov	r0, sl
 800c16a:	4659      	mov	r1, fp
 800c16c:	f7f4 f886 	bl	800027c <__adddf3>
 800c170:	3601      	adds	r6, #1
 800c172:	4682      	mov	sl, r0
 800c174:	468b      	mov	fp, r1
 800c176:	9b00      	ldr	r3, [sp, #0]
 800c178:	429e      	cmp	r6, r3
 800c17a:	dc01      	bgt.n	800c180 <__kernel_rem_pio2+0x4c0>
 800c17c:	42ae      	cmp	r6, r5
 800c17e:	dde9      	ble.n	800c154 <__kernel_rem_pio2+0x494>
 800c180:	ab48      	add	r3, sp, #288	@ 0x120
 800c182:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c186:	e9c5 ab00 	strd	sl, fp, [r5]
 800c18a:	3c01      	subs	r4, #1
 800c18c:	e6fd      	b.n	800bf8a <__kernel_rem_pio2+0x2ca>
 800c18e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c190:	2b02      	cmp	r3, #2
 800c192:	dc0b      	bgt.n	800c1ac <__kernel_rem_pio2+0x4ec>
 800c194:	2b00      	cmp	r3, #0
 800c196:	dc35      	bgt.n	800c204 <__kernel_rem_pio2+0x544>
 800c198:	d059      	beq.n	800c24e <__kernel_rem_pio2+0x58e>
 800c19a:	9b02      	ldr	r3, [sp, #8]
 800c19c:	f003 0007 	and.w	r0, r3, #7
 800c1a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c1a4:	ecbd 8b02 	vpop	{d8}
 800c1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d1f3      	bne.n	800c19a <__kernel_rem_pio2+0x4da>
 800c1b2:	9b05      	ldr	r3, [sp, #20]
 800c1b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c1b8:	eb0d 0403 	add.w	r4, sp, r3
 800c1bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c1c0:	4625      	mov	r5, r4
 800c1c2:	46c2      	mov	sl, r8
 800c1c4:	f1ba 0f00 	cmp.w	sl, #0
 800c1c8:	dc69      	bgt.n	800c29e <__kernel_rem_pio2+0x5de>
 800c1ca:	4645      	mov	r5, r8
 800c1cc:	2d01      	cmp	r5, #1
 800c1ce:	f300 8087 	bgt.w	800c2e0 <__kernel_rem_pio2+0x620>
 800c1d2:	9c05      	ldr	r4, [sp, #20]
 800c1d4:	ab48      	add	r3, sp, #288	@ 0x120
 800c1d6:	441c      	add	r4, r3
 800c1d8:	2000      	movs	r0, #0
 800c1da:	2100      	movs	r1, #0
 800c1dc:	f1b8 0f01 	cmp.w	r8, #1
 800c1e0:	f300 809c 	bgt.w	800c31c <__kernel_rem_pio2+0x65c>
 800c1e4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800c1e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c1ec:	f1b9 0f00 	cmp.w	r9, #0
 800c1f0:	f040 80a6 	bne.w	800c340 <__kernel_rem_pio2+0x680>
 800c1f4:	9b04      	ldr	r3, [sp, #16]
 800c1f6:	e9c3 5600 	strd	r5, r6, [r3]
 800c1fa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c1fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c202:	e7ca      	b.n	800c19a <__kernel_rem_pio2+0x4da>
 800c204:	9d05      	ldr	r5, [sp, #20]
 800c206:	ab48      	add	r3, sp, #288	@ 0x120
 800c208:	441d      	add	r5, r3
 800c20a:	4644      	mov	r4, r8
 800c20c:	2000      	movs	r0, #0
 800c20e:	2100      	movs	r1, #0
 800c210:	2c00      	cmp	r4, #0
 800c212:	da35      	bge.n	800c280 <__kernel_rem_pio2+0x5c0>
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	d038      	beq.n	800c28c <__kernel_rem_pio2+0x5cc>
 800c21a:	4602      	mov	r2, r0
 800c21c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c220:	9c04      	ldr	r4, [sp, #16]
 800c222:	e9c4 2300 	strd	r2, r3, [r4]
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c22e:	f7f4 f823 	bl	8000278 <__aeabi_dsub>
 800c232:	ad4a      	add	r5, sp, #296	@ 0x128
 800c234:	2401      	movs	r4, #1
 800c236:	45a0      	cmp	r8, r4
 800c238:	da2b      	bge.n	800c292 <__kernel_rem_pio2+0x5d2>
 800c23a:	f1b9 0f00 	cmp.w	r9, #0
 800c23e:	d002      	beq.n	800c246 <__kernel_rem_pio2+0x586>
 800c240:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c244:	4619      	mov	r1, r3
 800c246:	9b04      	ldr	r3, [sp, #16]
 800c248:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c24c:	e7a5      	b.n	800c19a <__kernel_rem_pio2+0x4da>
 800c24e:	9c05      	ldr	r4, [sp, #20]
 800c250:	ab48      	add	r3, sp, #288	@ 0x120
 800c252:	441c      	add	r4, r3
 800c254:	2000      	movs	r0, #0
 800c256:	2100      	movs	r1, #0
 800c258:	f1b8 0f00 	cmp.w	r8, #0
 800c25c:	da09      	bge.n	800c272 <__kernel_rem_pio2+0x5b2>
 800c25e:	f1b9 0f00 	cmp.w	r9, #0
 800c262:	d002      	beq.n	800c26a <__kernel_rem_pio2+0x5aa>
 800c264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c268:	4619      	mov	r1, r3
 800c26a:	9b04      	ldr	r3, [sp, #16]
 800c26c:	e9c3 0100 	strd	r0, r1, [r3]
 800c270:	e793      	b.n	800c19a <__kernel_rem_pio2+0x4da>
 800c272:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c276:	f7f4 f801 	bl	800027c <__adddf3>
 800c27a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c27e:	e7eb      	b.n	800c258 <__kernel_rem_pio2+0x598>
 800c280:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c284:	f7f3 fffa 	bl	800027c <__adddf3>
 800c288:	3c01      	subs	r4, #1
 800c28a:	e7c1      	b.n	800c210 <__kernel_rem_pio2+0x550>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	e7c6      	b.n	800c220 <__kernel_rem_pio2+0x560>
 800c292:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c296:	f7f3 fff1 	bl	800027c <__adddf3>
 800c29a:	3401      	adds	r4, #1
 800c29c:	e7cb      	b.n	800c236 <__kernel_rem_pio2+0x576>
 800c29e:	ed35 7b02 	vldmdb	r5!, {d7}
 800c2a2:	ed8d 7b00 	vstr	d7, [sp]
 800c2a6:	ed95 7b02 	vldr	d7, [r5, #8]
 800c2aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2ae:	ec53 2b17 	vmov	r2, r3, d7
 800c2b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2b6:	f7f3 ffe1 	bl	800027c <__adddf3>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460f      	mov	r7, r1
 800c2c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c6:	f7f3 ffd7 	bl	8000278 <__aeabi_dsub>
 800c2ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ce:	f7f3 ffd5 	bl	800027c <__adddf3>
 800c2d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c2da:	e9c5 6700 	strd	r6, r7, [r5]
 800c2de:	e771      	b.n	800c1c4 <__kernel_rem_pio2+0x504>
 800c2e0:	ed34 7b02 	vldmdb	r4!, {d7}
 800c2e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c2e8:	ec51 0b17 	vmov	r0, r1, d7
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	465b      	mov	r3, fp
 800c2f0:	ed8d 7b00 	vstr	d7, [sp]
 800c2f4:	f7f3 ffc2 	bl	800027c <__adddf3>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	460f      	mov	r7, r1
 800c300:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c304:	f7f3 ffb8 	bl	8000278 <__aeabi_dsub>
 800c308:	4652      	mov	r2, sl
 800c30a:	465b      	mov	r3, fp
 800c30c:	f7f3 ffb6 	bl	800027c <__adddf3>
 800c310:	3d01      	subs	r5, #1
 800c312:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c316:	e9c4 6700 	strd	r6, r7, [r4]
 800c31a:	e757      	b.n	800c1cc <__kernel_rem_pio2+0x50c>
 800c31c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c320:	f7f3 ffac 	bl	800027c <__adddf3>
 800c324:	f108 38ff 	add.w	r8, r8, #4294967295
 800c328:	e758      	b.n	800c1dc <__kernel_rem_pio2+0x51c>
 800c32a:	bf00      	nop
 800c32c:	f3af 8000 	nop.w
	...
 800c338:	41700000 	.word	0x41700000
 800c33c:	3e700000 	.word	0x3e700000
 800c340:	9b04      	ldr	r3, [sp, #16]
 800c342:	9a04      	ldr	r2, [sp, #16]
 800c344:	601d      	str	r5, [r3, #0]
 800c346:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800c34a:	605c      	str	r4, [r3, #4]
 800c34c:	609f      	str	r7, [r3, #8]
 800c34e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800c352:	60d3      	str	r3, [r2, #12]
 800c354:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c358:	6110      	str	r0, [r2, #16]
 800c35a:	6153      	str	r3, [r2, #20]
 800c35c:	e71d      	b.n	800c19a <__kernel_rem_pio2+0x4da>
 800c35e:	bf00      	nop

0800c360 <scalbn>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	ec55 4b10 	vmov	r4, r5, d0
 800c366:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c36a:	4606      	mov	r6, r0
 800c36c:	462b      	mov	r3, r5
 800c36e:	b991      	cbnz	r1, 800c396 <scalbn+0x36>
 800c370:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c374:	4323      	orrs	r3, r4
 800c376:	d03b      	beq.n	800c3f0 <scalbn+0x90>
 800c378:	4b33      	ldr	r3, [pc, #204]	@ (800c448 <scalbn+0xe8>)
 800c37a:	4620      	mov	r0, r4
 800c37c:	4629      	mov	r1, r5
 800c37e:	2200      	movs	r2, #0
 800c380:	f7f4 f932 	bl	80005e8 <__aeabi_dmul>
 800c384:	4b31      	ldr	r3, [pc, #196]	@ (800c44c <scalbn+0xec>)
 800c386:	429e      	cmp	r6, r3
 800c388:	4604      	mov	r4, r0
 800c38a:	460d      	mov	r5, r1
 800c38c:	da0f      	bge.n	800c3ae <scalbn+0x4e>
 800c38e:	a326      	add	r3, pc, #152	@ (adr r3, 800c428 <scalbn+0xc8>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	e01e      	b.n	800c3d4 <scalbn+0x74>
 800c396:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c39a:	4291      	cmp	r1, r2
 800c39c:	d10b      	bne.n	800c3b6 <scalbn+0x56>
 800c39e:	4622      	mov	r2, r4
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	f7f3 ff6a 	bl	800027c <__adddf3>
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	e020      	b.n	800c3f0 <scalbn+0x90>
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c3b4:	3936      	subs	r1, #54	@ 0x36
 800c3b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c3ba:	4296      	cmp	r6, r2
 800c3bc:	dd0d      	ble.n	800c3da <scalbn+0x7a>
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	a11b      	add	r1, pc, #108	@ (adr r1, 800c430 <scalbn+0xd0>)
 800c3c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3c6:	da02      	bge.n	800c3ce <scalbn+0x6e>
 800c3c8:	a11b      	add	r1, pc, #108	@ (adr r1, 800c438 <scalbn+0xd8>)
 800c3ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ce:	a318      	add	r3, pc, #96	@ (adr r3, 800c430 <scalbn+0xd0>)
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	f7f4 f908 	bl	80005e8 <__aeabi_dmul>
 800c3d8:	e7e6      	b.n	800c3a8 <scalbn+0x48>
 800c3da:	1872      	adds	r2, r6, r1
 800c3dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c3e0:	428a      	cmp	r2, r1
 800c3e2:	dcec      	bgt.n	800c3be <scalbn+0x5e>
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	dd06      	ble.n	800c3f6 <scalbn+0x96>
 800c3e8:	f36f 531e 	bfc	r3, #20, #11
 800c3ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3f0:	ec45 4b10 	vmov	d0, r4, r5
 800c3f4:	bd70      	pop	{r4, r5, r6, pc}
 800c3f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c3fa:	da08      	bge.n	800c40e <scalbn+0xae>
 800c3fc:	2d00      	cmp	r5, #0
 800c3fe:	a10a      	add	r1, pc, #40	@ (adr r1, 800c428 <scalbn+0xc8>)
 800c400:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c404:	dac3      	bge.n	800c38e <scalbn+0x2e>
 800c406:	a10e      	add	r1, pc, #56	@ (adr r1, 800c440 <scalbn+0xe0>)
 800c408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c40c:	e7bf      	b.n	800c38e <scalbn+0x2e>
 800c40e:	3236      	adds	r2, #54	@ 0x36
 800c410:	f36f 531e 	bfc	r3, #20, #11
 800c414:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c418:	4620      	mov	r0, r4
 800c41a:	4b0d      	ldr	r3, [pc, #52]	@ (800c450 <scalbn+0xf0>)
 800c41c:	4629      	mov	r1, r5
 800c41e:	2200      	movs	r2, #0
 800c420:	e7d8      	b.n	800c3d4 <scalbn+0x74>
 800c422:	bf00      	nop
 800c424:	f3af 8000 	nop.w
 800c428:	c2f8f359 	.word	0xc2f8f359
 800c42c:	01a56e1f 	.word	0x01a56e1f
 800c430:	8800759c 	.word	0x8800759c
 800c434:	7e37e43c 	.word	0x7e37e43c
 800c438:	8800759c 	.word	0x8800759c
 800c43c:	fe37e43c 	.word	0xfe37e43c
 800c440:	c2f8f359 	.word	0xc2f8f359
 800c444:	81a56e1f 	.word	0x81a56e1f
 800c448:	43500000 	.word	0x43500000
 800c44c:	ffff3cb0 	.word	0xffff3cb0
 800c450:	3c900000 	.word	0x3c900000
 800c454:	00000000 	.word	0x00000000

0800c458 <floor>:
 800c458:	ec51 0b10 	vmov	r0, r1, d0
 800c45c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c468:	2e13      	cmp	r6, #19
 800c46a:	460c      	mov	r4, r1
 800c46c:	4605      	mov	r5, r0
 800c46e:	4680      	mov	r8, r0
 800c470:	dc34      	bgt.n	800c4dc <floor+0x84>
 800c472:	2e00      	cmp	r6, #0
 800c474:	da17      	bge.n	800c4a6 <floor+0x4e>
 800c476:	a332      	add	r3, pc, #200	@ (adr r3, 800c540 <floor+0xe8>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	f7f3 fefe 	bl	800027c <__adddf3>
 800c480:	2200      	movs	r2, #0
 800c482:	2300      	movs	r3, #0
 800c484:	f7f4 fb40 	bl	8000b08 <__aeabi_dcmpgt>
 800c488:	b150      	cbz	r0, 800c4a0 <floor+0x48>
 800c48a:	2c00      	cmp	r4, #0
 800c48c:	da55      	bge.n	800c53a <floor+0xe2>
 800c48e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c492:	432c      	orrs	r4, r5
 800c494:	2500      	movs	r5, #0
 800c496:	42ac      	cmp	r4, r5
 800c498:	4c2b      	ldr	r4, [pc, #172]	@ (800c548 <floor+0xf0>)
 800c49a:	bf08      	it	eq
 800c49c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	e023      	b.n	800c4ee <floor+0x96>
 800c4a6:	4f29      	ldr	r7, [pc, #164]	@ (800c54c <floor+0xf4>)
 800c4a8:	4137      	asrs	r7, r6
 800c4aa:	ea01 0307 	and.w	r3, r1, r7
 800c4ae:	4303      	orrs	r3, r0
 800c4b0:	d01d      	beq.n	800c4ee <floor+0x96>
 800c4b2:	a323      	add	r3, pc, #140	@ (adr r3, 800c540 <floor+0xe8>)
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	f7f3 fee0 	bl	800027c <__adddf3>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f7f4 fb22 	bl	8000b08 <__aeabi_dcmpgt>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d0eb      	beq.n	800c4a0 <floor+0x48>
 800c4c8:	2c00      	cmp	r4, #0
 800c4ca:	bfbe      	ittt	lt
 800c4cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c4d0:	4133      	asrlt	r3, r6
 800c4d2:	18e4      	addlt	r4, r4, r3
 800c4d4:	ea24 0407 	bic.w	r4, r4, r7
 800c4d8:	2500      	movs	r5, #0
 800c4da:	e7e1      	b.n	800c4a0 <floor+0x48>
 800c4dc:	2e33      	cmp	r6, #51	@ 0x33
 800c4de:	dd0a      	ble.n	800c4f6 <floor+0x9e>
 800c4e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c4e4:	d103      	bne.n	800c4ee <floor+0x96>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	f7f3 fec7 	bl	800027c <__adddf3>
 800c4ee:	ec41 0b10 	vmov	d0, r0, r1
 800c4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c4fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c4fe:	40df      	lsrs	r7, r3
 800c500:	4207      	tst	r7, r0
 800c502:	d0f4      	beq.n	800c4ee <floor+0x96>
 800c504:	a30e      	add	r3, pc, #56	@ (adr r3, 800c540 <floor+0xe8>)
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	f7f3 feb7 	bl	800027c <__adddf3>
 800c50e:	2200      	movs	r2, #0
 800c510:	2300      	movs	r3, #0
 800c512:	f7f4 faf9 	bl	8000b08 <__aeabi_dcmpgt>
 800c516:	2800      	cmp	r0, #0
 800c518:	d0c2      	beq.n	800c4a0 <floor+0x48>
 800c51a:	2c00      	cmp	r4, #0
 800c51c:	da0a      	bge.n	800c534 <floor+0xdc>
 800c51e:	2e14      	cmp	r6, #20
 800c520:	d101      	bne.n	800c526 <floor+0xce>
 800c522:	3401      	adds	r4, #1
 800c524:	e006      	b.n	800c534 <floor+0xdc>
 800c526:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c52a:	2301      	movs	r3, #1
 800c52c:	40b3      	lsls	r3, r6
 800c52e:	441d      	add	r5, r3
 800c530:	4545      	cmp	r5, r8
 800c532:	d3f6      	bcc.n	800c522 <floor+0xca>
 800c534:	ea25 0507 	bic.w	r5, r5, r7
 800c538:	e7b2      	b.n	800c4a0 <floor+0x48>
 800c53a:	2500      	movs	r5, #0
 800c53c:	462c      	mov	r4, r5
 800c53e:	e7af      	b.n	800c4a0 <floor+0x48>
 800c540:	8800759c 	.word	0x8800759c
 800c544:	7e37e43c 	.word	0x7e37e43c
 800c548:	bff00000 	.word	0xbff00000
 800c54c:	000fffff 	.word	0x000fffff

0800c550 <_init>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	bf00      	nop
 800c554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c556:	bc08      	pop	{r3}
 800c558:	469e      	mov	lr, r3
 800c55a:	4770      	bx	lr

0800c55c <_fini>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	bf00      	nop
 800c560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c562:	bc08      	pop	{r3}
 800c564:	469e      	mov	lr, r3
 800c566:	4770      	bx	lr
