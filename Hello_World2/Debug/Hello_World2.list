
Hello_World2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c978  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800cb08  0800cb08  0000db08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdf8  0800cdf8  0000e15c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cdf8  0800cdf8  0000ddf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce00  0800ce00  0000e15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce00  0800ce00  0000de00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce04  0800ce04  0000de04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800ce08  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e15c  2**0
                  CONTENTS
 10 .bss          000195c0  20000160  20000160  0000e160  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20019720  20019720  0000e160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e15c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a2c  00000000  00000000  0000e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003da7  00000000  00000000  00024bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00028960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4a  00000000  00000000  00029d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025470  00000000  00000000  0002acca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ada1  00000000  00000000  0005013a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdc18  00000000  00000000  0006aedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138af3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005eec  00000000  00000000  00138b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0013ea24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800caf0 	.word	0x0800caf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800caf0 	.word	0x0800caf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b988 	b.w	8000f34 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	468e      	mov	lr, r1
 8000c44:	4604      	mov	r4, r0
 8000c46:	4688      	mov	r8, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14a      	bne.n	8000ce2 <__udivmoddi4+0xa6>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d962      	bls.n	8000d18 <__udivmoddi4+0xdc>
 8000c52:	fab2 f682 	clz	r6, r2
 8000c56:	b14e      	cbz	r6, 8000c6c <__udivmoddi4+0x30>
 8000c58:	f1c6 0320 	rsb	r3, r6, #32
 8000c5c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	40b7      	lsls	r7, r6
 8000c66:	ea43 0808 	orr.w	r8, r3, r8
 8000c6a:	40b4      	lsls	r4, r6
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f fc87 	uxth.w	ip, r7
 8000c74:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c78:	0c23      	lsrs	r3, r4, #16
 8000c7a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c82:	fb01 f20c 	mul.w	r2, r1, ip
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x62>
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c90:	f080 80ea 	bcs.w	8000e68 <__udivmoddi4+0x22c>
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f240 80e7 	bls.w	8000e68 <__udivmoddi4+0x22c>
 8000c9a:	3902      	subs	r1, #2
 8000c9c:	443b      	add	r3, r7
 8000c9e:	1a9a      	subs	r2, r3, r2
 8000ca0:	b2a3      	uxth	r3, r4
 8000ca2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000caa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cae:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cb2:	459c      	cmp	ip, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x8e>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cbc:	f080 80d6 	bcs.w	8000e6c <__udivmoddi4+0x230>
 8000cc0:	459c      	cmp	ip, r3
 8000cc2:	f240 80d3 	bls.w	8000e6c <__udivmoddi4+0x230>
 8000cc6:	443b      	add	r3, r7
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cce:	eba3 030c 	sub.w	r3, r3, ip
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa2>
 8000cd6:	40f3      	lsrs	r3, r6
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xb6>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb0>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa2>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x14c>
 8000cfa:	4573      	cmp	r3, lr
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xc8>
 8000cfe:	4282      	cmp	r2, r0
 8000d00:	f200 8105 	bhi.w	8000f0e <__udivmoddi4+0x2d2>
 8000d04:	1a84      	subs	r4, r0, r2
 8000d06:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	4690      	mov	r8, r2
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	d0e5      	beq.n	8000cde <__udivmoddi4+0xa2>
 8000d12:	e9c5 4800 	strd	r4, r8, [r5]
 8000d16:	e7e2      	b.n	8000cde <__udivmoddi4+0xa2>
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f000 8090 	beq.w	8000e3e <__udivmoddi4+0x202>
 8000d1e:	fab2 f682 	clz	r6, r2
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f040 80a4 	bne.w	8000e70 <__udivmoddi4+0x234>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	b280      	uxth	r0, r0
 8000d32:	b2bc      	uxth	r4, r7
 8000d34:	2101      	movs	r1, #1
 8000d36:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d3a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d42:	fb04 f20c 	mul.w	r2, r4, ip
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x11e>
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d50:	d202      	bcs.n	8000d58 <__udivmoddi4+0x11c>
 8000d52:	429a      	cmp	r2, r3
 8000d54:	f200 80e0 	bhi.w	8000f18 <__udivmoddi4+0x2dc>
 8000d58:	46c4      	mov	ip, r8
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d60:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d64:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d68:	fb02 f404 	mul.w	r4, r2, r4
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x144>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x142>
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	f200 80ca 	bhi.w	8000f12 <__udivmoddi4+0x2d6>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x98>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa0e f401 	lsl.w	r4, lr, r1
 8000d98:	fa20 f306 	lsr.w	r3, r0, r6
 8000d9c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000da0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da4:	4323      	orrs	r3, r4
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	fa1f fc87 	uxth.w	ip, r7
 8000dae:	fbbe f0f9 	udiv	r0, lr, r9
 8000db2:	0c1c      	lsrs	r4, r3, #16
 8000db4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dbc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d909      	bls.n	8000ddc <__udivmoddi4+0x1a0>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dce:	f080 809c 	bcs.w	8000f0a <__udivmoddi4+0x2ce>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f240 8099 	bls.w	8000f0a <__udivmoddi4+0x2ce>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	eba4 040e 	sub.w	r4, r4, lr
 8000de0:	fa1f fe83 	uxth.w	lr, r3
 8000de4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000df0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df4:	45a4      	cmp	ip, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1ce>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dfe:	f080 8082 	bcs.w	8000f06 <__udivmoddi4+0x2ca>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d97f      	bls.n	8000f06 <__udivmoddi4+0x2ca>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0e:	eba4 040c 	sub.w	r4, r4, ip
 8000e12:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e16:	4564      	cmp	r4, ip
 8000e18:	4673      	mov	r3, lr
 8000e1a:	46e1      	mov	r9, ip
 8000e1c:	d362      	bcc.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e1e:	d05f      	beq.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x1fe>
 8000e22:	ebb8 0203 	subs.w	r2, r8, r3
 8000e26:	eb64 0409 	sbc.w	r4, r4, r9
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e32:	431e      	orrs	r6, r3
 8000e34:	40cc      	lsrs	r4, r1
 8000e36:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	e74f      	b.n	8000cde <__udivmoddi4+0xa2>
 8000e3e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e42:	0c01      	lsrs	r1, r0, #16
 8000e44:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4e:	463b      	mov	r3, r7
 8000e50:	4638      	mov	r0, r7
 8000e52:	463c      	mov	r4, r7
 8000e54:	46b8      	mov	r8, r7
 8000e56:	46be      	mov	lr, r7
 8000e58:	2620      	movs	r6, #32
 8000e5a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5e:	eba2 0208 	sub.w	r2, r2, r8
 8000e62:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e66:	e766      	b.n	8000d36 <__udivmoddi4+0xfa>
 8000e68:	4601      	mov	r1, r0
 8000e6a:	e718      	b.n	8000c9e <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e72c      	b.n	8000cca <__udivmoddi4+0x8e>
 8000e70:	f1c6 0220 	rsb	r2, r6, #32
 8000e74:	fa2e f302 	lsr.w	r3, lr, r2
 8000e78:	40b7      	lsls	r7, r6
 8000e7a:	40b1      	lsls	r1, r6
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e84:	430a      	orrs	r2, r1
 8000e86:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e8a:	b2bc      	uxth	r4, r7
 8000e8c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e90:	0c11      	lsrs	r1, r2, #16
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb08 f904 	mul.w	r9, r8, r4
 8000e9a:	40b0      	lsls	r0, r6
 8000e9c:	4589      	cmp	r9, r1
 8000e9e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ea2:	b280      	uxth	r0, r0
 8000ea4:	d93e      	bls.n	8000f24 <__udivmoddi4+0x2e8>
 8000ea6:	1879      	adds	r1, r7, r1
 8000ea8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eac:	d201      	bcs.n	8000eb2 <__udivmoddi4+0x276>
 8000eae:	4589      	cmp	r9, r1
 8000eb0:	d81f      	bhi.n	8000ef2 <__udivmoddi4+0x2b6>
 8000eb2:	eba1 0109 	sub.w	r1, r1, r9
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fb09 f804 	mul.w	r8, r9, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec8:	4542      	cmp	r2, r8
 8000eca:	d229      	bcs.n	8000f20 <__udivmoddi4+0x2e4>
 8000ecc:	18ba      	adds	r2, r7, r2
 8000ece:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ed2:	d2c4      	bcs.n	8000e5e <__udivmoddi4+0x222>
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d2c2      	bcs.n	8000e5e <__udivmoddi4+0x222>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443a      	add	r2, r7
 8000ede:	e7be      	b.n	8000e5e <__udivmoddi4+0x222>
 8000ee0:	45f0      	cmp	r8, lr
 8000ee2:	d29d      	bcs.n	8000e20 <__udivmoddi4+0x1e4>
 8000ee4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eec:	3801      	subs	r0, #1
 8000eee:	46e1      	mov	r9, ip
 8000ef0:	e796      	b.n	8000e20 <__udivmoddi4+0x1e4>
 8000ef2:	eba7 0909 	sub.w	r9, r7, r9
 8000ef6:	4449      	add	r1, r9
 8000ef8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000efc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f00:	fb09 f804 	mul.w	r8, r9, r4
 8000f04:	e7db      	b.n	8000ebe <__udivmoddi4+0x282>
 8000f06:	4673      	mov	r3, lr
 8000f08:	e77f      	b.n	8000e0a <__udivmoddi4+0x1ce>
 8000f0a:	4650      	mov	r0, sl
 8000f0c:	e766      	b.n	8000ddc <__udivmoddi4+0x1a0>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e6fd      	b.n	8000d0e <__udivmoddi4+0xd2>
 8000f12:	443b      	add	r3, r7
 8000f14:	3a02      	subs	r2, #2
 8000f16:	e733      	b.n	8000d80 <__udivmoddi4+0x144>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	443b      	add	r3, r7
 8000f1e:	e71c      	b.n	8000d5a <__udivmoddi4+0x11e>
 8000f20:	4649      	mov	r1, r9
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x222>
 8000f24:	eba1 0109 	sub.w	r1, r1, r9
 8000f28:	46c4      	mov	ip, r8
 8000f2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2e:	fb09 f804 	mul.w	r8, r9, r4
 8000f32:	e7c4      	b.n	8000ebe <__udivmoddi4+0x282>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f40:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00b      	beq.n	8000f78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f60:	e000      	b.n	8000f64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f9      	beq.n	8000f62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f6e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_I2S_TxHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	outBufPtr = &dacData[0];
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000f92:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <HAL_I2S_TxHalfCpltCallback+0x24>)
 8000f94:	601a      	str	r2, [r3, #0]
	dataReadyFlag = 1;
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_I2S_TxHalfCpltCallback+0x28>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	200002d0 	.word	0x200002d0
 8000fb0:	200179d0 	.word	0x200179d0

08000fb4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	outBufPtr = &dacData[BUFFER_SIZE / 2];
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <HAL_I2S_TxCpltCallback+0x20>)
 8000fbe:	4a06      	ldr	r2, [pc, #24]	@ (8000fd8 <HAL_I2S_TxCpltCallback+0x24>)
 8000fc0:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_I2S_TxCpltCallback+0x28>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	2000be50 	.word	0x2000be50
 8000fdc:	200179d0 	.word	0x200179d0

08000fe0 <processData>:

void processData() {
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000fe6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fea:	4857      	ldr	r0, [pc, #348]	@ (8001148 <processData+0x168>)
 8000fec:	f001 ffa3 	bl	8002f36 <HAL_GPIO_TogglePin>
	static float leftOut, rightOut;
	double t;
	uint16_t M = BUFFER_SIZE/4;
 8000ff0:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000ff4:	83bb      	strh	r3, [r7, #28]
	uint16_t quarter = M/4;
 8000ff6:	8bbb      	ldrh	r3, [r7, #28]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	837b      	strh	r3, [r7, #26]
	for (uint16_t n = 0; n < (BUFFER_SIZE / 2) - 1; n += 2) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	83fb      	strh	r3, [r7, #30]
 8001000:	e087      	b.n	8001112 <processData+0x132>
//		}
//		else {
//			leftOut = -4.0 + 4.0*(float)i/(float)M;
//		}
		//t = (double)(n/2)/(double)FS;
		t = (ticks)/(double)FS;
 8001002:	4b52      	ldr	r3, [pc, #328]	@ (800114c <processData+0x16c>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fab6 	bl	800057c <__aeabi_ul2d>
 8001010:	a347      	add	r3, pc, #284	@ (adr r3, 8001130 <processData+0x150>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff fc11 	bl	800083c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double f = 196.0 + 30.0*sin(1.5*TAU*t);
 8001022:	a345      	add	r3, pc, #276	@ (adr r3, 8001138 <processData+0x158>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800102c:	f7ff fadc 	bl	80005e8 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	ec43 2b17 	vmov	d7, r2, r3
 8001038:	eeb0 0a47 	vmov.f32	s0, s14
 800103c:	eef0 0a67 	vmov.f32	s1, s15
 8001040:	f00a fd32 	bl	800baa8 <sin>
 8001044:	ec51 0b10 	vmov	r0, r1, d0
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b40      	ldr	r3, [pc, #256]	@ (8001150 <processData+0x170>)
 800104e:	f7ff facb 	bl	80005e8 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <processData+0x174>)
 8001060:	f7ff f90c 	bl	800027c <__adddf3>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double phase = TAU *f* t;
 800106c:	a334      	add	r3, pc, #208	@ (adr r3, 8001140 <processData+0x160>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001076:	f7ff fab7 	bl	80005e8 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001082:	f7ff fab1 	bl	80005e8 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9c7 2300 	strd	r2, r3, [r7]
		//tglobal += 1.0/FS;
		leftOut = (float)sin(phase);
 800108e:	ed97 0b00 	vldr	d0, [r7]
 8001092:	f00a fd09 	bl	800baa8 <sin>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd65 	bl	8000b6c <__aeabi_d2f>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001158 <processData+0x178>)
 80010a6:	6013      	str	r3, [r2, #0]
		rightOut = leftOut;
 80010a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001158 <processData+0x178>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a2b      	ldr	r2, [pc, #172]	@ (800115c <processData+0x17c>)
 80010ae:	6013      	str	r3, [r2, #0]
		outBufPtr[n] = (int16_t) (FLOAT_TO_INT16 * leftOut);
 80010b0:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <processData+0x178>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001160 <processData+0x180>
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <processData+0x184>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	8bfb      	ldrh	r3, [r7, #30]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010cc:	ee17 2a90 	vmov	r2, s15
 80010d0:	b212      	sxth	r2, r2
 80010d2:	801a      	strh	r2, [r3, #0]
		outBufPtr[n + 1] = (int16_t) (FLOAT_TO_INT16 * rightOut);
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <processData+0x17c>)
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001160 <processData+0x180>
 80010de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <processData+0x184>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	8bfb      	ldrh	r3, [r7, #30]
 80010e8:	3301      	adds	r3, #1
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f2:	ee17 2a90 	vmov	r2, s15
 80010f6:	b212      	sxth	r2, r2
 80010f8:	801a      	strh	r2, [r3, #0]
		ticks++;
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <processData+0x16c>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	1c54      	adds	r4, r2, #1
 8001102:	f143 0500 	adc.w	r5, r3, #0
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <processData+0x16c>)
 8001108:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint16_t n = 0; n < (BUFFER_SIZE / 2) - 1; n += 2) {
 800110c:	8bfb      	ldrh	r3, [r7, #30]
 800110e:	3302      	adds	r3, #2
 8001110:	83fb      	strh	r3, [r7, #30]
 8001112:	8bfb      	ldrh	r3, [r7, #30]
 8001114:	f645 52be 	movw	r2, #23998	@ 0x5dbe
 8001118:	4293      	cmp	r3, r2
 800111a:	f67f af72 	bls.w	8001002 <processData+0x22>

	}
	dataReadyFlag = 0;
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <processData+0x188>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]

}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	00000000 	.word	0x00000000
 8001134:	40e77000 	.word	0x40e77000
 8001138:	7f3321d2 	.word	0x7f3321d2
 800113c:	4022d97c 	.word	0x4022d97c
 8001140:	54442d18 	.word	0x54442d18
 8001144:	401921fb 	.word	0x401921fb
 8001148:	40020c00 	.word	0x40020c00
 800114c:	200179d8 	.word	0x200179d8
 8001150:	403e0000 	.word	0x403e0000
 8001154:	40688000 	.word	0x40688000
 8001158:	200179e0 	.word	0x200179e0
 800115c:	200179e4 	.word	0x200179e4
 8001160:	47000000 	.word	0x47000000
 8001164:	20000000 	.word	0x20000000
 8001168:	200179d0 	.word	0x200179d0

0800116c <i2c_wr>:

struct cs4x_drv {
	struct cs4x_cfg cfg;
};

HAL_StatusTypeDef i2c_wr(uint8_t *buf, uint8_t Nbytes) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Transmit(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	9200      	str	r2, [sp, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	2194      	movs	r1, #148	@ 0x94
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <i2c_wr+0x30>)
 8001188:	f002 f834 	bl	80031f4 <HAL_I2C_Master_Transmit>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
	return rc;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000017c 	.word	0x2000017c

080011a0 <i2c_rd>:

HAL_StatusTypeDef i2c_rd(uint8_t *buf, uint8_t Nbytes) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef rc;
	rc = HAL_I2C_Master_Receive(&hi2c1, DACADDR, buf, Nbytes, HAL_MAX_DELAY);
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	9200      	str	r2, [sp, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	2194      	movs	r1, #148	@ 0x94
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <i2c_rd+0x30>)
 80011bc:	f002 f918 	bl	80033f0 <HAL_I2C_Master_Receive>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
	return rc;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000017c 	.word	0x2000017c

080011d4 <cs4x_rd>:
// read a dac register
static int cs4x_rd(struct cs4x_drv *dac, uint8_t reg, uint8_t *val) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	460b      	mov	r3, r1
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	72fb      	strb	r3, [r7, #11]
	uint8_t buf[1] = { reg };
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	743b      	strb	r3, [r7, #16]
	int rc;
	rc = i2c_wr(buf, 1);
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	2101      	movs	r1, #1
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ffbd 	bl	800116c <i2c_wr>
 80011f2:	4603      	mov	r3, r0
 80011f4:	617b      	str	r3, [r7, #20]
	if (rc != 0) {
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <cs4x_rd+0x2c>
		return rc;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	e010      	b.n	8001222 <cs4x_rd+0x4e>
	}
	rc = i2c_rd(buf, 1);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ffca 	bl	80011a0 <i2c_rd>
 800120c:	4603      	mov	r3, r0
 800120e:	617b      	str	r3, [r7, #20]
	if (rc != 0) {
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <cs4x_rd+0x46>
		return rc;
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	e003      	b.n	8001222 <cs4x_rd+0x4e>
	}
	*val = buf[0];
 800121a:	7c3a      	ldrb	r2, [r7, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <cs4x_wr>:

// write a dac register
static int cs4x_wr(struct cs4x_drv *dac, uint8_t reg, uint8_t val) {
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	70fb      	strb	r3, [r7, #3]
 8001236:	4613      	mov	r3, r2
 8001238:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2] = { reg, val };
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	733b      	strb	r3, [r7, #12]
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	737b      	strb	r3, [r7, #13]
	return i2c_wr(buf, 2);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2102      	movs	r1, #2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff8f 	bl	800116c <i2c_wr>
 800124e:	4603      	mov	r3, r0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <cs4x_rmw>:

// read/modify/write a register
static int cs4x_rmw(struct cs4x_drv *dac, uint8_t reg, uint8_t mask,
		uint8_t val) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4603      	mov	r3, r0
 8001268:	70fb      	strb	r3, [r7, #3]
 800126a:	460b      	mov	r3, r1
 800126c:	70bb      	strb	r3, [r7, #2]
 800126e:	4613      	mov	r3, r2
 8001270:	707b      	strb	r3, [r7, #1]
	uint8_t x;
	int rc;
	rc = cs4x_rd(dac, reg, &x);
 8001272:	f107 020b 	add.w	r2, r7, #11
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffaa 	bl	80011d4 <cs4x_rd>
 8001280:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <cs4x_rmw+0x34>
		return rc;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	e018      	b.n	80012be <cs4x_rmw+0x66>
	}
	x &= ~mask;
 800128c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001290:	43db      	mvns	r3, r3
 8001292:	b25a      	sxtb	r2, r3
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	4013      	ands	r3, r2
 800129a:	b25b      	sxtb	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	72fb      	strb	r3, [r7, #11]
	x |= val & mask;
 80012a0:	787a      	ldrb	r2, [r7, #1]
 80012a2:	78bb      	ldrb	r3, [r7, #2]
 80012a4:	4013      	ands	r3, r2
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	72fb      	strb	r3, [r7, #11]
	return cs4x_wr(dac, reg, x);
 80012b0:	7afa      	ldrb	r2, [r7, #11]
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffb7 	bl	800122a <cs4x_wr>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <cs4x_set>:

// set bits in a register
static int cs4x_set(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
 80012d2:	4613      	mov	r3, r2
 80012d4:	70bb      	strb	r3, [r7, #2]
	return cs4x_rmw(dac, reg, bits, 0xff);
 80012d6:	78ba      	ldrb	r2, [r7, #2]
 80012d8:	78f9      	ldrb	r1, [r7, #3]
 80012da:	23ff      	movs	r3, #255	@ 0xff
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffbb 	bl	8001258 <cs4x_rmw>
 80012e2:	4603      	mov	r3, r0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <cs4x_clr>:

// clear bits in a register
static int cs4x_clr(struct cs4x_drv *dac, uint8_t reg, uint8_t bits) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
 80012f8:	4613      	mov	r3, r2
 80012fa:	70bb      	strb	r3, [r7, #2]
	return cs4x_rmw(dac, reg, bits, 0);
 80012fc:	78ba      	ldrb	r2, [r7, #2]
 80012fe:	78f9      	ldrb	r1, [r7, #3]
 8001300:	2300      	movs	r3, #0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa8 	bl	8001258 <cs4x_rmw>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <cs4x_id>:

//-----------------------------------------------------------------------------

// read and verify the device id
static int cs4x_id(struct cs4x_drv *dac) {
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	uint8_t id;
	int rc;
	rc = cs4x_rd(dac, CS43L22_REG_ID, &id);
 800131a:	f107 030b 	add.w	r3, r7, #11
 800131e:	461a      	mov	r2, r3
 8001320:	2101      	movs	r1, #1
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff56 	bl	80011d4 <cs4x_rd>
 8001328:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <cs4x_id+0x22>
		return rc;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	e008      	b.n	8001346 <cs4x_id+0x34>
	}
	if ((id & 0xf8) != 0xe0) {
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800133a:	2be0      	cmp	r3, #224	@ 0xe0
 800133c:	d002      	beq.n	8001344 <cs4x_id+0x32>
		return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e000      	b.n	8001346 <cs4x_id+0x34>
	}
	return 0;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <cs4x_output>:

//-----------------------------------------------------------------------------

// set the output device
int cs4x_output(struct cs4x_drv *dac, unsigned int out) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	const uint8_t ctrl[DAC_OUTPUT_MAX] = { 0xff, 0xfa, 0xaf, 0xaa, 0x05 };
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <cs4x_output+0x54>)
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001364:	6018      	str	r0, [r3, #0]
 8001366:	3304      	adds	r3, #4
 8001368:	7019      	strb	r1, [r3, #0]
	int rc;
	if (out >= DAC_OUTPUT_MAX) {
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d901      	bls.n	8001374 <cs4x_output+0x24>
		out = DAC_OUTPUT_OFF;
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, ctrl[out]);
 8001374:	f107 020c 	add.w	r2, r7, #12
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	2104      	movs	r1, #4
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff51 	bl	800122a <cs4x_wr>
 8001388:	6178      	str	r0, [r7, #20]
	if (rc != 0) {
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <cs4x_output+0x44>
		return rc;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	e003      	b.n	800139c <cs4x_output+0x4c>
	}
	dac->cfg.out = out;
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	605a      	str	r2, [r3, #4]
	return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0800cb08 	.word	0x0800cb08

080013a8 <cs4x_master_volume>:
// volume controls
// Map 0..255 to the control value for a volume register.
// 0 is minium volume (or mute), 255 is maximum volume.

// set the master volume
int cs4x_master_volume(struct cs4x_drv *dac, uint8_t vol) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	x = (((281 - 52) << 16) / 255) * vol + (52 << 16);
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	f24e 52e5 	movw	r2, #58853	@ 0xe5e5
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	f503 1350 	add.w	r3, r3, #3407872	@ 0x340000
 80013c2:	60fb      	str	r3, [r7, #12]
	x >>= 16;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	60fb      	str	r3, [r7, #12]
	x &= 255;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	60fb      	str	r3, [r7, #12]
	rc = cs4x_wr(dac, CS43L22_REG_Master_A_Vol, x);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	2120      	movs	r1, #32
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff26 	bl	800122a <cs4x_wr>
 80013de:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Master_B_Vol, x);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	2121      	movs	r1, #33	@ 0x21
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff1e 	bl	800122a <cs4x_wr>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
	return rc;
 80013f6:	68bb      	ldr	r3, [r7, #8]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <cs4x_headphone_volume>:

// set the headphone volume
int cs4x_headphone_volume(struct cs4x_drv *dac, uint8_t vol) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <cs4x_headphone_volume+0x18>
		x = 1;		// muted
 8001412:	2301      	movs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e00e      	b.n	8001436 <cs4x_headphone_volume+0x36>
	} else {
		x = (((257 - 52) << 16) / 255) * (vol - 1) + (52 << 16);
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	3b01      	subs	r3, #1
 800141c:	f64c 52cd 	movw	r2, #52685	@ 0xcdcd
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	f503 1350 	add.w	r3, r3, #3407872	@ 0x340000
 8001428:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	60fb      	str	r3, [r7, #12]
		x &= 255;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Headphone_A_Volume, x);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	2122      	movs	r1, #34	@ 0x22
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fef3 	bl	800122a <cs4x_wr>
 8001444:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Headphone_B_Volume, x);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	2123      	movs	r1, #35	@ 0x23
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff feeb 	bl	800122a <cs4x_wr>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4313      	orrs	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
	return rc;
 800145c:	68bb      	ldr	r3, [r7, #8]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <cs4x_speaker_volume>:

// set the speaker volume
int cs4x_speaker_volume(struct cs4x_drv *dac, uint8_t vol) {
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <cs4x_speaker_volume+0x18>
		x = 1;		// muted
 8001478:	2301      	movs	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e00e      	b.n	800149c <cs4x_speaker_volume+0x36>
	} else {
		x = (((257 - 64) << 16) / 255) * (vol - 1) + (64 << 16);
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	3b01      	subs	r3, #1
 8001482:	f24c 12c1 	movw	r2, #49601	@ 0xc1c1
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	f503 0380 	add.w	r3, r3, #4194304	@ 0x400000
 800148e:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	60fb      	str	r3, [r7, #12]
		x &= 255;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_Speaker_A_Volume, x);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	2124      	movs	r1, #36	@ 0x24
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fec0 	bl	800122a <cs4x_wr>
 80014aa:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_Speaker_B_Volume, x);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	2125      	movs	r1, #37	@ 0x25
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff feb8 	bl	800122a <cs4x_wr>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
 80014c0:	60bb      	str	r3, [r7, #8]
	return rc;
 80014c2:	68bb      	ldr	r3, [r7, #8]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <cs4x_pcm_volume>:

// set the pcm volume
int cs4x_pcm_volume(struct cs4x_drv *dac, uint8_t vol) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
	uint32_t x;
	int rc;
	if (vol == 0) {
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <cs4x_pcm_volume+0x18>
		x = 0x80;	// muted
 80014de:	2380      	movs	r3, #128	@ 0x80
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e010      	b.n	8001506 <cs4x_pcm_volume+0x3a>
	} else {
		x = (((281 - 25) << 16) / (255 - 1)) * (vol - 1) + (25 << 16);
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	4613      	mov	r3, r2
 80014ea:	01db      	lsls	r3, r3, #7
 80014ec:	4413      	add	r3, r2
 80014ee:	01db      	lsls	r3, r3, #7
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	f503 13c8 	add.w	r3, r3, #1638400	@ 0x190000
 80014f8:	60fb      	str	r3, [r7, #12]
		x >>= 16;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	0c1b      	lsrs	r3, r3, #16
 80014fe:	60fb      	str	r3, [r7, #12]
		x &= 255;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	60fb      	str	r3, [r7, #12]
	}
	rc = cs4x_wr(dac, CS43L22_REG_PCMA_Vol, x);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	211a      	movs	r1, #26
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe8b 	bl	800122a <cs4x_wr>
 8001514:	60b8      	str	r0, [r7, #8]
	rc |= cs4x_wr(dac, CS43L22_REG_PCMB_Vol, x);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	211b      	movs	r1, #27
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fe83 	bl	800122a <cs4x_wr>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	4313      	orrs	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
	return rc;
 800152c:	68bb      	ldr	r3, [r7, #8]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <cs4x_mute_off>:
	int rc = cs4x_wr(dac, CS43L22_REG_Power_Ctl_2, 0xff);
	rc |= cs4x_headphone_volume(dac, 0);
	return rc;
}

static int cs4x_mute_off(struct cs4x_drv *dac) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	int rc = cs4x_headphone_volume(dac, 0xff);
 800153e:	21ff      	movs	r1, #255	@ 0xff
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff5d 	bl	8001400 <cs4x_headphone_volume>
 8001546:	60f8      	str	r0, [r7, #12]
	rc |= cs4x_output(dac, dac->cfg.out);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fefe 	bl	8001350 <cs4x_output>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
	return rc;
 800155c:	68fb      	ldr	r3, [r7, #12]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <cs4x_init>:

//-----------------------------------------------------------------------------

int cs4x_init(struct cs4x_drv *dac, struct cs4x_cfg *cfg) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	int rc;

	memset(dac, 0, sizeof(struct cs4x_drv));
 8001572:	2208      	movs	r2, #8
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f009 fd14 	bl	800afa4 <memset>
	dac->cfg = *cfg;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001584:	e883 0003 	stmia.w	r3, {r0, r1}

	// 4.9 Recommended Power-Up Sequence (1,2)
	// reset the dac
	// DAC Reset is active low, so pull the pin high.
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	2110      	movs	r1, #16
 800158c:	4856      	ldr	r0, [pc, #344]	@ (80016e8 <cs4x_init+0x180>)
 800158e:	f001 fcb9 	bl	8002f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2110      	movs	r1, #16
 8001596:	4854      	ldr	r0, [pc, #336]	@ (80016e8 <cs4x_init+0x180>)
 8001598:	f001 fcb4 	bl	8002f04 <HAL_GPIO_WritePin>

	rc = cs4x_id(dac);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff feb8 	bl	8001312 <cs4x_id>
 80015a2:	60f8      	str	r0, [r7, #12]
	if (rc != 0) {
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <cs4x_init+0x4c>
		printf("cs4x bad device id %d\r\n", rc);
 80015aa:	68f9      	ldr	r1, [r7, #12]
 80015ac:	484f      	ldr	r0, [pc, #316]	@ (80016ec <cs4x_init+0x184>)
 80015ae:	f009 fbb1 	bl	800ad14 <iprintf>
		goto exit;
 80015b2:	e094      	b.n	80016de <cs4x_init+0x176>
	}
	// 4.9 Recommended Power-Up Sequence (4)
	// 4.11 Required Initialization Settings
	rc |= cs4x_wr(dac, 0, 0x99);
 80015b4:	2299      	movs	r2, #153	@ 0x99
 80015b6:	2100      	movs	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fe36 	bl	800122a <cs4x_wr>
 80015be:	4602      	mov	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_wr(dac, 0x47, 0x80);
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	2147      	movs	r1, #71	@ 0x47
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fe2d 	bl	800122a <cs4x_wr>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_set(dac, 0x32, 1 << 7);
 80015d8:	2280      	movs	r2, #128	@ 0x80
 80015da:	2132      	movs	r1, #50	@ 0x32
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fe72 	bl	80012c6 <cs4x_set>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_clr(dac, 0x32, 1 << 7);
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	2132      	movs	r1, #50	@ 0x32
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fe7c 	bl	80012ec <cs4x_clr>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
	rc |= cs4x_wr(dac, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fe12 	bl	800122a <cs4x_wr>
 8001606:	4602      	mov	r2, r0
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]

	// set the output to AUTO
	rc |= cs4x_output(dac, DAC_OUTPUT_AUTO);
 800160e:	2104      	movs	r1, #4
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fe9d 	bl	8001350 <cs4x_output>
 8001616:	4602      	mov	r2, r0
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
	// Clock configuration: Auto detection
	rc |= cs4x_wr(dac, CS43L22_REG_Clocking_Ctl, 0x81);
 800161e:	2281      	movs	r2, #129	@ 0x81
 8001620:	2105      	movs	r1, #5
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fe01 	bl	800122a <cs4x_wr>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
	// Set the Slave Mode and the audio Standard
	rc |= cs4x_wr(dac, CS43L22_REG_Interface_Ctl_1, 0x04);
 8001630:	2204      	movs	r2, #4
 8001632:	2106      	movs	r1, #6
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fdf8 	bl	800122a <cs4x_wr>
 800163a:	4602      	mov	r2, r0
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

	// Set the Master volume
	rc |= cs4x_master_volume(dac, 169);
 8001642:	21a9      	movs	r1, #169	@ 0xa9
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff feaf 	bl	80013a8 <cs4x_master_volume>
 800164a:	4602      	mov	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]

	// If the Speaker is enabled, set the Mono mode and volume attenuation level
	if (dac->cfg.out != DAC_OUTPUT_OFF
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d014      	beq.n	8001684 <cs4x_init+0x11c>
			&& dac->cfg.out != DAC_OUTPUT_HEADPHONE) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d010      	beq.n	8001684 <cs4x_init+0x11c>
		// Set the Speaker Mono mode
		rc |= cs4x_wr(dac, CS43L22_REG_Playback_Ctl_2, 0x06);
 8001662:	2206      	movs	r2, #6
 8001664:	210f      	movs	r1, #15
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fddf 	bl	800122a <cs4x_wr>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
		rc |= cs4x_speaker_volume(dac, 0xff);
 8001674:	21ff      	movs	r1, #255	@ 0xff
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fef5 	bl	8001466 <cs4x_speaker_volume>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
	// off the I2S peripheral MCLK clock (which is the operating clock for Codec).
	// If this delay is not inserted, then the codec will not shut down properly and
	// it results in high noise after shut down.

	// Disable the analog soft ramp
	rc |= cs4x_rmw(dac, CS43L22_REG_Analog_ZC_and_SR_Settings, 0x0f, 0x00);
 8001684:	2300      	movs	r3, #0
 8001686:	220f      	movs	r2, #15
 8001688:	210a      	movs	r1, #10
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fde4 	bl	8001258 <cs4x_rmw>
 8001690:	4602      	mov	r2, r0
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
	// Disable the digital soft ramp
	rc |= cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x04);
 8001698:	2204      	movs	r2, #4
 800169a:	210e      	movs	r1, #14
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fdc4 	bl	800122a <cs4x_wr>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
	// Disable the limiter attack level
	rc |= cs4x_wr(dac, CS43L22_REG_Limit_Ctl_1_Thresholds, 0x00);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2127      	movs	r1, #39	@ 0x27
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fdbb 	bl	800122a <cs4x_wr>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
	// Adjust Bass and Treble levels
	rc |= cs4x_wr(dac, CS43L22_REG_Tone_Ctl, 0x0f);
 80016bc:	220f      	movs	r2, #15
 80016be:	211f      	movs	r1, #31
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fdb2 	bl	800122a <cs4x_wr>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
	// Adjust PCM volume level
	rc |= cs4x_pcm_volume(dac, 241);
 80016ce:	21f1      	movs	r1, #241	@ 0xf1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fefb 	bl	80014cc <cs4x_pcm_volume>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]

	exit: return rc;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	0800cb10 	.word	0x0800cb10

080016f0 <cs4x_start>:

//-----------------------------------------------------------------------------

int cs4x_start(struct cs4x_drv *dac) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	// Enable the digital soft ramp
	int rc = cs4x_wr(dac, CS43L22_REG_Misc_Ctl, 0x06);
 80016f8:	2206      	movs	r2, #6
 80016fa:	210e      	movs	r1, #14
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fd94 	bl	800122a <cs4x_wr>
 8001702:	60f8      	str	r0, [r7, #12]
	// Enable Output device
	rc |= cs4x_mute_off(dac);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff16 	bl	8001536 <cs4x_mute_off>
 800170a:	4602      	mov	r2, r0
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
	// Power on the Codec
	rc |= cs4x_wr(dac, CS43L22_REG_Power_Ctl_1, 0x9e);
 8001712:	229e      	movs	r2, #158	@ 0x9e
 8001714:	2102      	movs	r1, #2
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fd87 	bl	800122a <cs4x_wr>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
	return rc;
 8001724:	68fb      	ldr	r3, [r7, #12]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001736:	f000 fd31 	bl	800219c <HAL_Init>
	uint8_t buf[12];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173a:	f000 f859 	bl	80017f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173e:	f000 f973 	bl	8001a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001742:	f000 f951 	bl	80019e8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001746:	f000 f8bd 	bl	80018c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 800174a:	f000 f8e9 	bl	8001920 <MX_I2S3_Init>
  MX_SPI1_Init();
 800174e:	f000 f915 	bl	800197c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001752:	f008 fd1b 	bl	800a18c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	// EXT DAC INTIIALIZATION
	struct cs4x_cfg cfgdac;
	cfgdac.adr = DACADDR;
 8001756:	2394      	movs	r3, #148	@ 0x94
 8001758:	733b      	strb	r3, [r7, #12]
	cfgdac.out = DAC_OUTPUT_HEADPHONE;
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
	struct cs4x_drv dac;
	int rc = cs4x_init(&dac, &cfgdac);
 800175e:	f107 020c 	add.w	r2, r7, #12
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fefe 	bl	8001568 <cs4x_init>
 800176c:	6278      	str	r0, [r7, #36]	@ 0x24
	printf("CS4X init returned %d\r\n", rc);
 800176e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001770:	4817      	ldr	r0, [pc, #92]	@ (80017d0 <main+0xa0>)
 8001772:	f009 facf 	bl	800ad14 <iprintf>
	rc = cs4x_start(&dac);
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ffb9 	bl	80016f0 <cs4x_start>
 800177e:	6278      	str	r0, [r7, #36]	@ 0x24
	printf("CS4X start returned %d\r\n", rc);
 8001780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001782:	4814      	ldr	r0, [pc, #80]	@ (80017d4 <main+0xa4>)
 8001784:	f009 fac6 	bl	800ad14 <iprintf>

	HAL_Delay(1);
 8001788:	2001      	movs	r0, #1
 800178a:	f000 fd79 	bl	8002280 <HAL_Delay>
//		i += 2;
//	}


	// Attempt to transmit audio data to DAC
	processData();
 800178e:	f7ff fc27 	bl	8000fe0 <processData>
	outBufPtr = &dacData[BUFFER_SIZE / 2];
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <main+0xa8>)
 8001794:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <main+0xac>)
 8001796:	601a      	str	r2, [r3, #0]
	processData();
 8001798:	f7ff fc22 	bl	8000fe0 <processData>
	res = HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*) dacData, BUFFER_SIZE);
 800179c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80017a0:	490f      	ldr	r1, [pc, #60]	@ (80017e0 <main+0xb0>)
 80017a2:	4810      	ldr	r0, [pc, #64]	@ (80017e4 <main+0xb4>)
 80017a4:	f002 fd1c 	bl	80041e0 <HAL_I2S_Transmit_DMA>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	//res = HAL_I2S_Transmit(&hi2s3, (uint16_t*) signal, nsamples,HAL_MAX_DELAY);
	if (res != HAL_OK) {
 80017ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <main+0x92>
		printf("I2S - ERROR, res = %d!\r\n", res);
 80017b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017ba:	4619      	mov	r1, r3
 80017bc:	480a      	ldr	r0, [pc, #40]	@ (80017e8 <main+0xb8>)
 80017be:	f009 faa9 	bl	800ad14 <iprintf>
//		if (res != HAL_OK) {
//			printf("I2S - ERROR, res = %d!\r\n", res);
//			//break;
//		}

		if (dataReadyFlag) {
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <main+0xbc>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0fb      	beq.n	80017c2 <main+0x92>
			processData();
 80017ca:	f7ff fc09 	bl	8000fe0 <processData>
		if (dataReadyFlag) {
 80017ce:	e7f8      	b.n	80017c2 <main+0x92>
 80017d0:	0800cb28 	.word	0x0800cb28
 80017d4:	0800cb40 	.word	0x0800cb40
 80017d8:	20000000 	.word	0x20000000
 80017dc:	2000be50 	.word	0x2000be50
 80017e0:	200002d0 	.word	0x200002d0
 80017e4:	200001d0 	.word	0x200001d0
 80017e8:	0800cb5c 	.word	0x0800cb5c
 80017ec:	200179d0 	.word	0x200179d0

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b094      	sub	sp, #80	@ 0x50
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	2230      	movs	r2, #48	@ 0x30
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f009 fbd0 	bl	800afa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <SystemClock_Config+0xcc>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	4a27      	ldr	r2, [pc, #156]	@ (80018bc <SystemClock_Config+0xcc>)
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001822:	6413      	str	r3, [r2, #64]	@ 0x40
 8001824:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <SystemClock_Config+0xcc>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <SystemClock_Config+0xd0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a21      	ldr	r2, [pc, #132]	@ (80018c0 <SystemClock_Config+0xd0>)
 800183a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <SystemClock_Config+0xd0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800184c:	2301      	movs	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001850:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800185e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001860:	2308      	movs	r3, #8
 8001862:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001864:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001868:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800186e:	2307      	movs	r3, #7
 8001870:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	4618      	mov	r0, r3
 8001878:	f004 fb5e 	bl	8005f38 <HAL_RCC_OscConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001882:	f000 f9f9 	bl	8001c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001886:	230f      	movs	r3, #15
 8001888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	2302      	movs	r3, #2
 800188c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001892:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2105      	movs	r1, #5
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fdbf 	bl	8006428 <HAL_RCC_ClockConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018b0:	f000 f9e2 	bl	8001c78 <Error_Handler>
  }
}
 80018b4:	bf00      	nop
 80018b6:	3750      	adds	r7, #80	@ 0x50
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000

080018c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018ca:	4a13      	ldr	r2, [pc, #76]	@ (8001918 <MX_I2C1_Init+0x54>)
 80018cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018d0:	4a12      	ldr	r2, [pc, #72]	@ (800191c <MX_I2C1_Init+0x58>)
 80018d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_I2C1_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_I2C1_Init+0x50>)
 8001902:	f001 fb33 	bl	8002f6c <HAL_I2C_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800190c:	f000 f9b4 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000017c 	.word	0x2000017c
 8001918:	40005400 	.word	0x40005400
 800191c:	000186a0 	.word	0x000186a0

08001920 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_I2S3_Init+0x54>)
 8001926:	4a14      	ldr	r2, [pc, #80]	@ (8001978 <MX_I2S3_Init+0x58>)
 8001928:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <MX_I2S3_Init+0x54>)
 800192c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001930:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <MX_I2S3_Init+0x54>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <MX_I2S3_Init+0x54>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <MX_I2S3_Init+0x54>)
 8001940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001944:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <MX_I2S3_Init+0x54>)
 8001948:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800194c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <MX_I2S3_Init+0x54>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <MX_I2S3_Init+0x54>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <MX_I2S3_Init+0x54>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_I2S3_Init+0x54>)
 8001962:	f002 fafd 	bl	8003f60 <HAL_I2S_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800196c:	f000 f984 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200001d0 	.word	0x200001d0
 8001978:	40003c00 	.word	0x40003c00

0800197c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001980:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <MX_SPI1_Init+0x64>)
 8001982:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <MX_SPI1_Init+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <MX_SPI1_Init+0x64>)
 8001988:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800198c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <MX_SPI1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019c8:	220a      	movs	r2, #10
 80019ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <MX_SPI1_Init+0x64>)
 80019ce:	f005 f879 	bl	8006ac4 <HAL_SPI_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019d8:	f000 f94e 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000278 	.word	0x20000278
 80019e4:	40013000 	.word	0x40013000

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_DMA_Init+0x3c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a24 <MX_DMA_Init+0x3c>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_DMA_Init+0x3c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2010      	movs	r0, #16
 8001a10:	f000 fd35 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a14:	2010      	movs	r0, #16
 8001a16:	f000 fd4e 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	@ 0x30
 8001a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	4b79      	ldr	r3, [pc, #484]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a78      	ldr	r2, [pc, #480]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a48:	f043 0310 	orr.w	r3, r3, #16
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b76      	ldr	r3, [pc, #472]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	4b72      	ldr	r3, [pc, #456]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a71      	ldr	r2, [pc, #452]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a6a      	ldr	r2, [pc, #424]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b68      	ldr	r3, [pc, #416]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b64      	ldr	r3, [pc, #400]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a63      	ldr	r2, [pc, #396]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b56      	ldr	r3, [pc, #344]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a55      	ldr	r2, [pc, #340]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <MX_GPIO_Init+0x200>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2108      	movs	r1, #8
 8001aea:	4850      	ldr	r0, [pc, #320]	@ (8001c2c <MX_GPIO_Init+0x204>)
 8001aec:	f001 fa0a 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2101      	movs	r1, #1
 8001af4:	484e      	ldr	r0, [pc, #312]	@ (8001c30 <MX_GPIO_Init+0x208>)
 8001af6:	f001 fa05 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001afa:	2200      	movs	r2, #0
 8001afc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001b00:	484c      	ldr	r0, [pc, #304]	@ (8001c34 <MX_GPIO_Init+0x20c>)
 8001b02:	f001 f9ff 	bl	8002f04 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b06:	2308      	movs	r3, #8
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4843      	ldr	r0, [pc, #268]	@ (8001c2c <MX_GPIO_Init+0x204>)
 8001b1e:	f001 f855 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	483d      	ldr	r0, [pc, #244]	@ (8001c30 <MX_GPIO_Init+0x208>)
 8001b3a:	f001 f847 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b3e:	2308      	movs	r3, #8
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4835      	ldr	r0, [pc, #212]	@ (8001c30 <MX_GPIO_Init+0x208>)
 8001b5a:	f001 f837 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b62:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4831      	ldr	r0, [pc, #196]	@ (8001c38 <MX_GPIO_Init+0x210>)
 8001b74:	f001 f82a 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	482c      	ldr	r0, [pc, #176]	@ (8001c3c <MX_GPIO_Init+0x214>)
 8001b8c:	f001 f81e 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001b90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4823      	ldr	r0, [pc, #140]	@ (8001c3c <MX_GPIO_Init+0x214>)
 8001bae:	f001 f80d 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001bb2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481a      	ldr	r0, [pc, #104]	@ (8001c34 <MX_GPIO_Init+0x20c>)
 8001bcc:	f000 fffe 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	4813      	ldr	r0, [pc, #76]	@ (8001c34 <MX_GPIO_Init+0x20c>)
 8001be8:	f000 fff0 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001bec:	2320      	movs	r3, #32
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <MX_GPIO_Init+0x20c>)
 8001c00:	f000 ffe4 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c08:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <MX_GPIO_Init+0x204>)
 8001c1a:	f000 ffd7 	bl	8002bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c1e:	bf00      	nop
 8001c20:	3730      	adds	r7, #48	@ 0x30
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400

08001c40 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e009      	b.n	8001c66 <_write+0x26>
		ITM_SendChar(*ptr++);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	60ba      	str	r2, [r7, #8]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f96c 	bl	8000f38 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbf1      	blt.n	8001c52 <_write+0x12>
	}
	return len;
 8001c6e:	687b      	ldr	r3, [r7, #4]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
}
 8001c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("Error\r\n");
 8001c80:	4801      	ldr	r0, [pc, #4]	@ (8001c88 <Error_Handler+0x10>)
 8001c82:	f009 f8af 	bl	800ade4 <puts>
 8001c86:	e7fb      	b.n	8001c80 <Error_Handler+0x8>
 8001c88:	0800cb78 	.word	0x0800cb78

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	4a08      	ldr	r2, [pc, #32]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cca:	2007      	movs	r0, #7
 8001ccc:	f000 fbcc 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	@ 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	@ (8001d60 <HAL_I2C_MspInit+0x84>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12c      	bne.n	8001d58 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b18      	ldr	r3, [pc, #96]	@ (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d1a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d20:	2312      	movs	r3, #18
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <HAL_I2C_MspInit+0x8c>)
 8001d38:	f000 ff48 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_I2C_MspInit+0x88>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	@ 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40005400 	.word	0x40005400
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020400 	.word	0x40020400

08001d6c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	@ 0x38
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a4e      	ldr	r2, [pc, #312]	@ (8001ed0 <HAL_I2S_MspInit+0x164>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	f040 8094 	bne.w	8001ec6 <HAL_I2S_MspInit+0x15a>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 197;
 8001da2:	23c5      	movs	r3, #197	@ 0xc5
 8001da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fd46 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001dba:	f7ff ff5d 	bl	8001c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a43      	ldr	r2, [pc, #268]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b41      	ldr	r3, [pc, #260]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a35      	ldr	r2, [pc, #212]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <HAL_I2S_MspInit+0x168>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e12:	2310      	movs	r3, #16
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e22:	2306      	movs	r3, #6
 8001e24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	482a      	ldr	r0, [pc, #168]	@ (8001ed8 <HAL_I2S_MspInit+0x16c>)
 8001e2e:	f000 fecd 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001e32:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e44:	2306      	movs	r3, #6
 8001e46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4823      	ldr	r0, [pc, #140]	@ (8001edc <HAL_I2S_MspInit+0x170>)
 8001e50:	f000 febc 	bl	8002bcc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e56:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <HAL_I2S_MspInit+0x178>)
 8001e58:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001e5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e72:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e7a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e82:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001e84:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e8a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e8e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e92:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001e9a:	4811      	ldr	r0, [pc, #68]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001e9c:	f000 fb26 	bl	80024ec <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001ea6:	f7ff fee7 	bl	8001c78 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001eae:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee0 <HAL_I2S_MspInit+0x174>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2033      	movs	r0, #51	@ 0x33
 8001ebc:	f000 fadf 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001ec0:	2033      	movs	r0, #51	@ 0x33
 8001ec2:	f000 faf8 	bl	80024b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3738      	adds	r7, #56	@ 0x38
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40003c00 	.word	0x40003c00
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	20000218 	.word	0x20000218
 8001ee4:	40026088 	.word	0x40026088

08001ee8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	@ (8001f6c <HAL_SPI_MspInit+0x84>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12b      	bne.n	8001f62 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a17      	ldr	r2, [pc, #92]	@ (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	4a10      	ldr	r2, [pc, #64]	@ (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <HAL_SPI_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f42:	23e0      	movs	r3, #224	@ 0xe0
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f52:	2305      	movs	r3, #5
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <HAL_SPI_MspInit+0x8c>)
 8001f5e:	f000 fe35 	bl	8002bcc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	@ 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40013000 	.word	0x40013000
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <NMI_Handler+0x4>

08001f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <HardFault_Handler+0x4>

08001f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <MemManage_Handler+0x4>

08001f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <BusFault_Handler+0x4>

08001f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <UsageFault_Handler+0x4>

08001fa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fce:	f000 f937 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <DMA1_Stream5_IRQHandler+0x10>)
 8001fde:	f000 fb8b 	bl	80026f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000218 	.word	0x20000218

08001fec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <SPI3_IRQHandler+0x10>)
 8001ff2:	f002 f999 	bl	8004328 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200001d0 	.word	0x200001d0

08002000 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <OTG_FS_IRQHandler+0x10>)
 8002006:	f002 fe89 	bl	8004d1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20018ed0 	.word	0x20018ed0

08002014 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e00a      	b.n	800203c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002026:	f3af 8000 	nop.w
 800202a:	4601      	mov	r1, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbf0      	blt.n	8002026 <_read+0x12>
  }

  return len;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_close>:
  }
  return len;
}

int _close(int file)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002076:	605a      	str	r2, [r3, #4]
  return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_isatty>:

int _isatty(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	@ (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	@ (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	@ (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f008 ffaa 	bl	800b040 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	@ (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20020000 	.word	0x20020000
 8002118:	00000400 	.word	0x00000400
 800211c:	200179e8 	.word	0x200179e8
 8002120:	20019720 	.word	0x20019720

08002124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002148:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002180 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800214c:	f7ff ffea 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002150:	480c      	ldr	r0, [pc, #48]	@ (8002184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002152:	490d      	ldr	r1, [pc, #52]	@ (8002188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002168:	4c0a      	ldr	r4, [pc, #40]	@ (8002194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002176:	f008 ff69 	bl	800b04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217a:	f7ff fad9 	bl	8001730 <main>
  bx  lr    
 800217e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002188:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 800218c:	0800ce08 	.word	0x0800ce08
  ldr r2, =_sbss
 8002190:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002194:	20019720 	.word	0x20019720

08002198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC_IRQHandler>
	...

0800219c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <HAL_Init+0x40>)
 80021a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <HAL_Init+0x40>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_Init+0x40>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 f94f 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fd5c 	bl	8001c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f967 	bl	80024d2 <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f000 f92f 	bl	800247e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	@ (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000004 	.word	0x20000004
 8002238:	2000000c 	.word	0x2000000c
 800223c:	20000008 	.word	0x20000008

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000000c 	.word	0x2000000c
 8002264:	200179ec 	.word	0x200179ec

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200179ec 	.word	0x200179ec

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <__NVIC_SetPriorityGrouping>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	@ (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	@ (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	@ (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	@ (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	@ 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff8e 	bl	8002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff29 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff3e 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff8e 	bl	80023bc <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5d 	bl	8002368 <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff31 	bl	800232c <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff feb6 	bl	8002268 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e099      	b.n	800263c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002528:	e00f      	b.n	800254a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252a:	f7ff fe9d 	bl	8002268 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b05      	cmp	r3, #5
 8002536:	d908      	bls.n	800254a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2203      	movs	r2, #3
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e078      	b.n	800263c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e8      	bne.n	800252a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4b38      	ldr	r3, [pc, #224]	@ (8002644 <HAL_DMA_Init+0x158>)
 8002564:	4013      	ands	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d107      	bne.n	80025b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4313      	orrs	r3, r2
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0307 	bic.w	r3, r3, #7
 80025ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d117      	bne.n	800260e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00e      	beq.n	800260e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fa6f 	bl	8002ad4 <DMA_CheckFifoParam>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2240      	movs	r2, #64	@ 0x40
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800260a:	2301      	movs	r3, #1
 800260c:	e016      	b.n	800263c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa26 	bl	8002a68 <DMA_CalcBaseAndBitshift>
 800261c:	4603      	mov	r3, r0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	223f      	movs	r2, #63	@ 0x3f
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	f010803f 	.word	0xf010803f

08002648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_DMA_Start_IT+0x26>
 800266a:	2302      	movs	r3, #2
 800266c:	e040      	b.n	80026f0 <HAL_DMA_Start_IT+0xa8>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d12f      	bne.n	80026e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2202      	movs	r2, #2
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f9b8 	bl	8002a0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	409a      	lsls	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0216 	orr.w	r2, r2, #22
 80026b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0208 	orr.w	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e005      	b.n	80026ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002704:	4b8e      	ldr	r3, [pc, #568]	@ (8002940 <HAL_DMA_IRQHandler+0x248>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a8e      	ldr	r2, [pc, #568]	@ (8002944 <HAL_DMA_IRQHandler+0x24c>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0a9b      	lsrs	r3, r3, #10
 8002710:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002716:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	2208      	movs	r2, #8
 8002724:	409a      	lsls	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01a      	beq.n	8002764 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	2208      	movs	r2, #8
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002768:	2201      	movs	r2, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d012      	beq.n	800279a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	2201      	movs	r2, #1
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279e:	2204      	movs	r2, #4
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00b      	beq.n	80027d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	2204      	movs	r2, #4
 80027be:	409a      	lsls	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d4:	2210      	movs	r2, #16
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d043      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03c      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2210      	movs	r2, #16
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d018      	beq.n	800283a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d024      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
 8002826:	e01f      	b.n	8002868 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01b      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e016      	b.n	8002868 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0208 	bic.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	2220      	movs	r2, #32
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 808f 	beq.w	8002998 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8087 	beq.w	8002998 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	2220      	movs	r2, #32
 8002890:	409a      	lsls	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d136      	bne.n	8002910 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0216 	bic.w	r2, r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_DMA_IRQHandler+0x1da>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0208 	bic.w	r2, r2, #8
 80028e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e6:	223f      	movs	r2, #63	@ 0x3f
 80028e8:	409a      	lsls	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002902:	2b00      	cmp	r3, #0
 8002904:	d07e      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
        }
        return;
 800290e:	e079      	b.n	8002a04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01d      	beq.n	800295a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10d      	bne.n	8002948 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002930:	2b00      	cmp	r3, #0
 8002932:	d031      	beq.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
 800293c:	e02c      	b.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
 800293e:	bf00      	nop
 8002940:	20000004 	.word	0x20000004
 8002944:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d023      	beq.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
 8002958:	e01e      	b.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10f      	bne.n	8002988 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0210 	bic.w	r2, r2, #16
 8002976:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	2b00      	cmp	r3, #0
 800299e:	d032      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2205      	movs	r2, #5
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d307      	bcc.n	80029e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f2      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x2cc>
 80029de:	e000      	b.n	80029e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a04:	bf00      	nop
    }
  }
}
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b40      	cmp	r3, #64	@ 0x40
 8002a38:	d108      	bne.n	8002a4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a4a:	e007      	b.n	8002a5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3b10      	subs	r3, #16
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <DMA_CalcBaseAndBitshift+0x64>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a82:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d909      	bls.n	8002aaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	1d1a      	adds	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aa8:	e007      	b.n	8002aba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	aaaaaaab 	.word	0xaaaaaaab
 8002ad0:	0800cbe0 	.word	0x0800cbe0

08002ad4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11f      	bne.n	8002b2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d856      	bhi.n	8002ba2 <DMA_CheckFifoParam+0xce>
 8002af4:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <DMA_CheckFifoParam+0x28>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b1f 	.word	0x08002b1f
 8002b04:	08002b0d 	.word	0x08002b0d
 8002b08:	08002ba3 	.word	0x08002ba3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d046      	beq.n	8002ba6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e043      	b.n	8002ba6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b26:	d140      	bne.n	8002baa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e03d      	b.n	8002baa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b36:	d121      	bne.n	8002b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d837      	bhi.n	8002bae <DMA_CheckFifoParam+0xda>
 8002b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <DMA_CheckFifoParam+0x70>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b5b 	.word	0x08002b5b
 8002b4c:	08002b55 	.word	0x08002b55
 8002b50:	08002b6d 	.word	0x08002b6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e030      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d025      	beq.n	8002bb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e022      	b.n	8002bb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b74:	d11f      	bne.n	8002bb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7a:	e01c      	b.n	8002bb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d903      	bls.n	8002b8a <DMA_CheckFifoParam+0xb6>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d003      	beq.n	8002b90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b88:	e018      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8e:	e015      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e00b      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e00a      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e008      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e006      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e004      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bba:	bf00      	nop
    }
  } 
  
  return status; 
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	e16b      	b.n	8002ec0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 815a 	bne.w	8002eba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d005      	beq.n	8002c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d130      	bne.n	8002c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c54:	2201      	movs	r2, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 0201 	and.w	r2, r3, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d017      	beq.n	8002cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d123      	bne.n	8002d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80b4 	beq.w	8002eba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b60      	ldr	r3, [pc, #384]	@ (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d62:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002edc <HAL_GPIO_Init+0x310>)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_GPIO_Init+0x314>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a51      	ldr	r2, [pc, #324]	@ (8002ee4 <HAL_GPIO_Init+0x318>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d025      	beq.n	8002dee <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <HAL_GPIO_Init+0x31c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4f      	ldr	r2, [pc, #316]	@ (8002eec <HAL_GPIO_Init+0x320>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0x21a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ef0 <HAL_GPIO_Init+0x324>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_GPIO_Init+0x216>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002ef4 <HAL_GPIO_Init+0x328>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00d      	beq.n	8002dde <HAL_GPIO_Init+0x212>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ef8 <HAL_GPIO_Init+0x32c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x20e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8002efc <HAL_GPIO_Init+0x330>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_GPIO_Init+0x20a>
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	e00e      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	e00c      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dda:	2306      	movs	r3, #6
 8002ddc:	e00a      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dde:	2305      	movs	r3, #5
 8002de0:	e008      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002de2:	2304      	movs	r3, #4
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002df2:	2300      	movs	r3, #0
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e04:	4935      	ldr	r1, [pc, #212]	@ (8002edc <HAL_GPIO_Init+0x310>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e36:	4a32      	ldr	r2, [pc, #200]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e3c:	4b30      	ldr	r3, [pc, #192]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e60:	4a27      	ldr	r2, [pc, #156]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e66:	4b26      	ldr	r3, [pc, #152]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb4:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	f67f ae90 	bls.w	8002be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40021c00 	.word	0x40021c00
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	041a      	lsls	r2, r3, #16
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	400b      	ands	r3, r1
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e12b      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe fea2 	bl	8001cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	@ 0x24
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f003 fc22 	bl	8006818 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a81      	ldr	r2, [pc, #516]	@ (80031e0 <HAL_I2C_Init+0x274>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d807      	bhi.n	8002ff0 <HAL_I2C_Init+0x84>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a80      	ldr	r2, [pc, #512]	@ (80031e4 <HAL_I2C_Init+0x278>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e006      	b.n	8002ffe <HAL_I2C_Init+0x92>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a7d      	ldr	r2, [pc, #500]	@ (80031e8 <HAL_I2C_Init+0x27c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0e7      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a78      	ldr	r2, [pc, #480]	@ (80031ec <HAL_I2C_Init+0x280>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a6a      	ldr	r2, [pc, #424]	@ (80031e0 <HAL_I2C_Init+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d802      	bhi.n	8003040 <HAL_I2C_Init+0xd4>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	e009      	b.n	8003054 <HAL_I2C_Init+0xe8>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	4a69      	ldr	r2, [pc, #420]	@ (80031f0 <HAL_I2C_Init+0x284>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	3301      	adds	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003066:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	495c      	ldr	r1, [pc, #368]	@ (80031e0 <HAL_I2C_Init+0x274>)
 8003070:	428b      	cmp	r3, r1
 8003072:	d819      	bhi.n	80030a8 <HAL_I2C_Init+0x13c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003088:	400b      	ands	r3, r1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_I2C_Init+0x138>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e59      	subs	r1, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fbb1 f3f3 	udiv	r3, r1, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	e051      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e04f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_I2C_Init+0x168>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Init+0x18e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x196>
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10e      	bne.n	8003128 <HAL_I2C_Init+0x1bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e58      	subs	r0, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	440b      	add	r3, r1
 8003118:	fbb0 f3f3 	udiv	r3, r0, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003126:	e00f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6809      	ldr	r1, [r1, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003176:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6911      	ldr	r1, [r2, #16]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	000186a0 	.word	0x000186a0
 80031e4:	001e847f 	.word	0x001e847f
 80031e8:	003d08ff 	.word	0x003d08ff
 80031ec:	431bde83 	.word	0x431bde83
 80031f0:	10624dd3 	.word	0x10624dd3

080031f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	461a      	mov	r2, r3
 8003200:	460b      	mov	r3, r1
 8003202:	817b      	strh	r3, [r7, #10]
 8003204:	4613      	mov	r3, r2
 8003206:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff f82e 	bl	8002268 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	f040 80e0 	bne.w	80033dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2319      	movs	r3, #25
 8003222:	2201      	movs	r2, #1
 8003224:	4970      	ldr	r1, [pc, #448]	@ (80033e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fc64 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
 8003234:	e0d3      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_I2C_Master_Transmit+0x50>
 8003240:	2302      	movs	r3, #2
 8003242:	e0cc      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d007      	beq.n	800326a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003278:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2221      	movs	r2, #33	@ 0x21
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2210      	movs	r2, #16
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a50      	ldr	r2, [pc, #320]	@ (80033ec <HAL_I2C_Master_Transmit+0x1f8>)
 80032aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 face 	bl	8003854 <I2C_MasterRequestWrite>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e08d      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032d8:	e066      	b.n	80033a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	6a39      	ldr	r1, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fd22 	bl	8003d28 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00d      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d107      	bne.n	8003302 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e06b      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b04      	cmp	r3, #4
 8003342:	d11b      	bne.n	800337c <HAL_I2C_Master_Transmit+0x188>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d017      	beq.n	800337c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fd19 	bl	8003db8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e01a      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d194      	bne.n	80032da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	00100002 	.word	0x00100002
 80033ec:	ffff0000 	.word	0xffff0000

080033f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	@ 0x30
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
 8003400:	4613      	mov	r3, r2
 8003402:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7fe ff30 	bl	8002268 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b20      	cmp	r3, #32
 8003414:	f040 8217 	bne.w	8003846 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2319      	movs	r3, #25
 800341e:	2201      	movs	r2, #1
 8003420:	497c      	ldr	r1, [pc, #496]	@ (8003614 <HAL_I2C_Master_Receive+0x224>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fb66 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	e20a      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_I2C_Master_Receive+0x50>
 800343c:	2302      	movs	r3, #2
 800343e:	e203      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d007      	beq.n	8003466 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003474:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2222      	movs	r2, #34	@ 0x22
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2210      	movs	r2, #16
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	893a      	ldrh	r2, [r7, #8]
 8003496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a5c      	ldr	r2, [pc, #368]	@ (8003618 <HAL_I2C_Master_Receive+0x228>)
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fa52 	bl	8003958 <I2C_MasterRequestRead>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1c4      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e198      	b.n	8003820 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d11b      	bne.n	800352e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003504:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e178      	b.n	8003820 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003532:	2b02      	cmp	r3, #2
 8003534:	d11b      	bne.n	800356e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003544:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	e158      	b.n	8003820 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003594:	e144      	b.n	8003820 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	2b03      	cmp	r3, #3
 800359c:	f200 80f1 	bhi.w	8003782 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d123      	bne.n	80035f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fc4b 	bl	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e145      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035ee:	e117      	b.n	8003820 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d14e      	bne.n	8003696 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	2200      	movs	r2, #0
 8003600:	4906      	ldr	r1, [pc, #24]	@ (800361c <HAL_I2C_Master_Receive+0x22c>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa76 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e11a      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
 8003612:	bf00      	nop
 8003614:	00100002 	.word	0x00100002
 8003618:	ffff0000 	.word	0xffff0000
 800361c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003694:	e0c4      	b.n	8003820 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	2200      	movs	r2, #0
 800369e:	496c      	ldr	r1, [pc, #432]	@ (8003850 <HAL_I2C_Master_Receive+0x460>)
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fa27 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0cb      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	2200      	movs	r2, #0
 80036fa:	4955      	ldr	r1, [pc, #340]	@ (8003850 <HAL_I2C_Master_Receive+0x460>)
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f9f9 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e09d      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003780:	e04e      	b.n	8003820 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003784:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fb5e 	bl	8003e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e058      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d124      	bne.n	8003820 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	f47f aeb6 	bne.w	8003596 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3728      	adds	r7, #40	@ 0x28
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	00010004 	.word	0x00010004

08003854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	460b      	mov	r3, r1
 8003862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d006      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d003      	beq.n	800387e <I2C_MasterRequestWrite+0x2a>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800387c:	d108      	bne.n	8003890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e00b      	b.n	80038a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	2b12      	cmp	r3, #18
 8003896:	d107      	bne.n	80038a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f91d 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ce:	d103      	bne.n	80038d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e035      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e4:	d108      	bne.n	80038f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038f4:	611a      	str	r2, [r3, #16]
 80038f6:	e01b      	b.n	8003930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	11db      	asrs	r3, r3, #7
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f003 0306 	and.w	r3, r3, #6
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f063 030f 	orn	r3, r3, #15
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	490e      	ldr	r1, [pc, #56]	@ (8003950 <I2C_MasterRequestWrite+0xfc>)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f966 	bl	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e010      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003926:	897b      	ldrh	r3, [r7, #10]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4907      	ldr	r1, [pc, #28]	@ (8003954 <I2C_MasterRequestWrite+0x100>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f956 	bl	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	00010008 	.word	0x00010008
 8003954:	00010002 	.word	0x00010002

08003958 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	460b      	mov	r3, r1
 8003966:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800397c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d006      	beq.n	8003992 <I2C_MasterRequestRead+0x3a>
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d003      	beq.n	8003992 <I2C_MasterRequestRead+0x3a>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003990:	d108      	bne.n	80039a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	e00b      	b.n	80039bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	2b11      	cmp	r3, #17
 80039aa:	d107      	bne.n	80039bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f893 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e2:	d103      	bne.n	80039ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e079      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f8:	d108      	bne.n	8003a0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]
 8003a0a:	e05f      	b.n	8003acc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	11db      	asrs	r3, r3, #7
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f003 0306 	and.w	r3, r3, #6
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	f063 030f 	orn	r3, r3, #15
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4930      	ldr	r1, [pc, #192]	@ (8003aec <I2C_MasterRequestRead+0x194>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8dc 	bl	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e054      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4929      	ldr	r1, [pc, #164]	@ (8003af0 <I2C_MasterRequestRead+0x198>)
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f8cc 	bl	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e044      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f831 	bl	8003af4 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e017      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	11db      	asrs	r3, r3, #7
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f003 0306 	and.w	r3, r3, #6
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f063 030e 	orn	r3, r3, #14
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4907      	ldr	r1, [pc, #28]	@ (8003af0 <I2C_MasterRequestRead+0x198>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f888 	bl	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	00010008 	.word	0x00010008
 8003af0:	00010002 	.word	0x00010002

08003af4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b04:	e048      	b.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d044      	beq.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe fbab 	bl	8002268 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d139      	bne.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	0c1b      	lsrs	r3, r3, #16
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d10d      	bne.n	8003b4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	43da      	mvns	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	e00c      	b.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	43da      	mvns	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d116      	bne.n	8003b98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e023      	b.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	0c1b      	lsrs	r3, r3, #16
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d10d      	bne.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4013      	ands	r3, r2
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	e00c      	b.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	43da      	mvns	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf0c      	ite	eq
 8003bd0:	2301      	moveq	r3, #1
 8003bd2:	2300      	movne	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d093      	beq.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf6:	e071      	b.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c06:	d123      	bne.n	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	f043 0204 	orr.w	r2, r3, #4
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e067      	b.n	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d041      	beq.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c58:	f7fe fb06 	bl	8002268 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d302      	bcc.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d136      	bne.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10c      	bne.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	e00b      	b.n	8003caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e021      	b.n	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10c      	bne.n	8003d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	43da      	mvns	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e00b      	b.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	43da      	mvns	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f af6d 	bne.w	8003bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d34:	e034      	b.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f8e3 	bl	8003f02 <I2C_IsAcknowledgeFailed>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e034      	b.n	8003db0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d028      	beq.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe fa8b 	bl	8002268 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11d      	bne.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6e:	2b80      	cmp	r3, #128	@ 0x80
 8003d70:	d016      	beq.n	8003da0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e007      	b.n	8003db0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003daa:	2b80      	cmp	r3, #128	@ 0x80
 8003dac:	d1c3      	bne.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc4:	e034      	b.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f89b 	bl	8003f02 <I2C_IsAcknowledgeFailed>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e034      	b.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d028      	beq.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dde:	f7fe fa43 	bl	8002268 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d302      	bcc.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11d      	bne.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d016      	beq.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e007      	b.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d1c3      	bne.n	8003dc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e54:	e049      	b.n	8003eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d119      	bne.n	8003e98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0210 	mvn.w	r2, #16
 8003e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e030      	b.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fe f9e6 	bl	8002268 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d302      	bcc.n	8003eae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11d      	bne.n	8003eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d016      	beq.n	8003eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f043 0220 	orr.w	r2, r3, #32
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e007      	b.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef4:	2b40      	cmp	r3, #64	@ 0x40
 8003ef6:	d1ae      	bne.n	8003e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f18:	d11b      	bne.n	8003f52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e128      	b.n	80041c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a90      	ldr	r2, [pc, #576]	@ (80041cc <HAL_I2S_Init+0x26c>)
 8003f8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fd feed 	bl	8001d6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003fa8:	f023 030f 	bic.w	r3, r3, #15
 8003fac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d060      	beq.n	8004080 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003fc6:	2310      	movs	r3, #16
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e001      	b.n	8003fd0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003fcc:	2320      	movs	r3, #32
 8003fce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d802      	bhi.n	8003fde <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f002 fd10 	bl	8006a04 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fe4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fee:	d125      	bne.n	800403c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	3305      	adds	r3, #5
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e01f      	b.n	800405a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	fbb2 f2f3 	udiv	r2, r2, r3
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	fbb2 f3f3 	udiv	r3, r2, r3
 8004036:	3305      	adds	r3, #5
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e00e      	b.n	800405a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fbb2 f2f3 	udiv	r2, r2, r3
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	461a      	mov	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	3305      	adds	r3, #5
 8004058:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4a5c      	ldr	r2, [pc, #368]	@ (80041d0 <HAL_I2S_Init+0x270>)
 800405e:	fba2 2303 	umull	r2, r3, r2, r3
 8004062:	08db      	lsrs	r3, r3, #3
 8004064:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	e003      	b.n	8004088 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004080:	2302      	movs	r3, #2
 8004082:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d902      	bls.n	8004094 <HAL_I2S_Init+0x134>
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2bff      	cmp	r3, #255	@ 0xff
 8004092:	d907      	bls.n	80040a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004098:	f043 0210 	orr.w	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e08f      	b.n	80041c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	ea42 0103 	orr.w	r1, r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040c2:	f023 030f 	bic.w	r3, r3, #15
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6851      	ldr	r1, [r2, #4]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6892      	ldr	r2, [r2, #8]
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68d2      	ldr	r2, [r2, #12]
 80040d4:	4311      	orrs	r1, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6992      	ldr	r2, [r2, #24]
 80040da:	430a      	orrs	r2, r1
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d161      	bne.n	80041b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a38      	ldr	r2, [pc, #224]	@ (80041d4 <HAL_I2S_Init+0x274>)
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a37      	ldr	r2, [pc, #220]	@ (80041d8 <HAL_I2S_Init+0x278>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_I2S_Init+0x1a4>
 8004100:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <HAL_I2S_Init+0x27c>)
 8004102:	e001      	b.n	8004108 <HAL_I2S_Init+0x1a8>
 8004104:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	4932      	ldr	r1, [pc, #200]	@ (80041d8 <HAL_I2S_Init+0x278>)
 8004110:	428a      	cmp	r2, r1
 8004112:	d101      	bne.n	8004118 <HAL_I2S_Init+0x1b8>
 8004114:	4a31      	ldr	r2, [pc, #196]	@ (80041dc <HAL_I2S_Init+0x27c>)
 8004116:	e001      	b.n	800411c <HAL_I2S_Init+0x1bc>
 8004118:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800411c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004120:	f023 030f 	bic.w	r3, r3, #15
 8004124:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2b      	ldr	r2, [pc, #172]	@ (80041d8 <HAL_I2S_Init+0x278>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_I2S_Init+0x1d4>
 8004130:	4b2a      	ldr	r3, [pc, #168]	@ (80041dc <HAL_I2S_Init+0x27c>)
 8004132:	e001      	b.n	8004138 <HAL_I2S_Init+0x1d8>
 8004134:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004138:	2202      	movs	r2, #2
 800413a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a25      	ldr	r2, [pc, #148]	@ (80041d8 <HAL_I2S_Init+0x278>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <HAL_I2S_Init+0x1ea>
 8004146:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <HAL_I2S_Init+0x27c>)
 8004148:	e001      	b.n	800414e <HAL_I2S_Init+0x1ee>
 800414a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800415a:	d003      	beq.n	8004164 <HAL_I2S_Init+0x204>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e001      	b.n	8004170 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800417a:	4313      	orrs	r3, r2
 800417c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004184:	4313      	orrs	r3, r2
 8004186:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800418e:	4313      	orrs	r3, r2
 8004190:	b29a      	uxth	r2, r3
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	4313      	orrs	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800419c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a0d      	ldr	r2, [pc, #52]	@ (80041d8 <HAL_I2S_Init+0x278>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d101      	bne.n	80041ac <HAL_I2S_Init+0x24c>
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <HAL_I2S_Init+0x27c>)
 80041aa:	e001      	b.n	80041b0 <HAL_I2S_Init+0x250>
 80041ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b0:	897a      	ldrh	r2, [r7, #10]
 80041b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	080044cd 	.word	0x080044cd
 80041d0:	cccccccd 	.word	0xcccccccd
 80041d4:	080045e1 	.word	0x080045e1
 80041d8:	40003800 	.word	0x40003800
 80041dc:	40003400 	.word	0x40003400

080041e0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_I2S_Transmit_DMA+0x1a>
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e08a      	b.n	8004314 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d001      	beq.n	800420e <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	e082      	b.n	8004314 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_I2S_Transmit_DMA+0x3e>
 800421a:	2302      	movs	r3, #2
 800421c:	e07a      	b.n	8004314 <HAL_I2S_Transmit_DMA+0x134>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2203      	movs	r2, #3
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d002      	beq.n	8004252 <HAL_I2S_Transmit_DMA+0x72>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d10a      	bne.n	8004268 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004266:	e005      	b.n	8004274 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004278:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_I2S_Transmit_DMA+0x13c>)
 800427a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004280:	4a27      	ldr	r2, [pc, #156]	@ (8004320 <HAL_I2S_Transmit_DMA+0x140>)
 8004282:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004288:	4a26      	ldr	r2, [pc, #152]	@ (8004324 <HAL_I2S_Transmit_DMA+0x144>)
 800428a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004294:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800429c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80042a4:	f7fe f9d0 	bl	8002648 <HAL_DMA_Start_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00f      	beq.n	80042ce <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e022      	b.n	8004314 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d107      	bne.n	80042f4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0202 	orr.w	r2, r2, #2
 80042f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004310:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	080043ab 	.word	0x080043ab
 8004320:	08004369 	.word	0x08004369
 8004324:	080043c7 	.word	0x080043c7

08004328 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
}
 8004338:	bf00      	nop
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10e      	bne.n	800439c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0202 	bic.w	r2, r2, #2
 800438c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7fc fe09 	bl	8000fb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7fc fde5 	bl	8000f88 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0203 	bic.w	r2, r2, #3
 80043e2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fc:	f043 0208 	orr.w	r2, r3, #8
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff ffa5 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	1c9a      	adds	r2, r3, #2
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10e      	bne.n	8004466 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004456:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fc fda7 	bl	8000fb4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	b292      	uxth	r2, r2
 8004482:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004488:	1c9a      	adds	r2, r3, #2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10e      	bne.n	80044c4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044b4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff ff3e 	bl	8004340 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d13a      	bne.n	800455e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d109      	bne.n	8004506 <I2S_IRQHandler+0x3a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	d102      	bne.n	8004506 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ffb4 	bl	800446e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d126      	bne.n	800455e <I2S_IRQHandler+0x92>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d11f      	bne.n	800455e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800452c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004550:	f043 0202 	orr.w	r2, r3, #2
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff fefb 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b03      	cmp	r3, #3
 8004568:	d136      	bne.n	80045d8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d109      	bne.n	8004588 <I2S_IRQHandler+0xbc>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800457e:	2b80      	cmp	r3, #128	@ 0x80
 8004580:	d102      	bne.n	8004588 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ff45 	bl	8004412 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d122      	bne.n	80045d8 <I2S_IRQHandler+0x10c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b20      	cmp	r3, #32
 800459e:	d11b      	bne.n	80045d8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045ae:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ca:	f043 0204 	orr.w	r2, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff febe 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a92      	ldr	r2, [pc, #584]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045fa:	4b92      	ldr	r3, [pc, #584]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045fc:	e001      	b.n	8004602 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a8b      	ldr	r2, [pc, #556]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004618:	4b8a      	ldr	r3, [pc, #552]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800461a:	e001      	b.n	8004620 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800461c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462c:	d004      	beq.n	8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f040 8099 	bne.w	800476a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d107      	bne.n	8004652 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f925 	bl	800489c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9c8 	bl	80049fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d13a      	bne.n	80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d035      	beq.n	80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6e      	ldr	r2, [pc, #440]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800468a:	4b6e      	ldr	r3, [pc, #440]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800468c:	e001      	b.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800468e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4969      	ldr	r1, [pc, #420]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800469a:	428b      	cmp	r3, r1
 800469c:	d101      	bne.n	80046a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800469e:	4b69      	ldr	r3, [pc, #420]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046a0:	e001      	b.n	80046a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80046a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046aa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0202 	orr.w	r2, r3, #2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff fe34 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	f040 80c3 	bne.w	800487e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80bd 	beq.w	800487e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004712:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a49      	ldr	r2, [pc, #292]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800471e:	4b49      	ldr	r3, [pc, #292]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004720:	e001      	b.n	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004722:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4944      	ldr	r1, [pc, #272]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800472e:	428b      	cmp	r3, r1
 8004730:	d101      	bne.n	8004736 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004732:	4b44      	ldr	r3, [pc, #272]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004734:	e001      	b.n	800473a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004736:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800473a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800473e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fdf6 	bl	8004354 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004768:	e089      	b.n	800487e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d107      	bne.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8be 	bl	8004900 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8fd 	bl	8004998 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d12f      	bne.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d02a      	beq.n	8004808 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047ce:	e001      	b.n	80047d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4919      	ldr	r1, [pc, #100]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047dc:	428b      	cmp	r3, r1
 80047de:	d101      	bne.n	80047e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047e0:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047e2:	e001      	b.n	80047e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	f043 0202 	orr.w	r2, r3, #2
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fda6 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b08      	cmp	r3, #8
 8004810:	d136      	bne.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d031      	beq.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004826:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004828:	e001      	b.n	800482e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800482a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4902      	ldr	r1, [pc, #8]	@ (8004840 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004836:	428b      	cmp	r3, r1
 8004838:	d106      	bne.n	8004848 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800483a:	4b02      	ldr	r3, [pc, #8]	@ (8004844 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800483c:	e006      	b.n	800484c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800483e:	bf00      	nop
 8004840:	40003800 	.word	0x40003800
 8004844:	40003400 	.word	0x40003400
 8004848:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800484c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004850:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004860:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f043 0204 	orr.w	r2, r3, #4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fd6c 	bl	8004354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800487c:	e000      	b.n	8004880 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800487e:	bf00      	nop
}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	1c99      	adds	r1, r3, #2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d113      	bne.n	80048f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffc9 	bl	8004888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	1c99      	adds	r1, r3, #2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6251      	str	r1, [r2, #36]	@ 0x24
 8004912:	8819      	ldrh	r1, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <I2SEx_TxISR_I2SExt+0x90>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d101      	bne.n	8004922 <I2SEx_TxISR_I2SExt+0x22>
 800491e:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <I2SEx_TxISR_I2SExt+0x94>)
 8004920:	e001      	b.n	8004926 <I2SEx_TxISR_I2SExt+0x26>
 8004922:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004926:	460a      	mov	r2, r1
 8004928:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d121      	bne.n	8004986 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a12      	ldr	r2, [pc, #72]	@ (8004990 <I2SEx_TxISR_I2SExt+0x90>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <I2SEx_TxISR_I2SExt+0x50>
 800494c:	4b11      	ldr	r3, [pc, #68]	@ (8004994 <I2SEx_TxISR_I2SExt+0x94>)
 800494e:	e001      	b.n	8004954 <I2SEx_TxISR_I2SExt+0x54>
 8004950:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	490d      	ldr	r1, [pc, #52]	@ (8004990 <I2SEx_TxISR_I2SExt+0x90>)
 800495c:	428b      	cmp	r3, r1
 800495e:	d101      	bne.n	8004964 <I2SEx_TxISR_I2SExt+0x64>
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <I2SEx_TxISR_I2SExt+0x94>)
 8004962:	e001      	b.n	8004968 <I2SEx_TxISR_I2SExt+0x68>
 8004964:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004968:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800496c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ff81 	bl	8004888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40003800 	.word	0x40003800
 8004994:	40003400 	.word	0x40003400

08004998 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68d8      	ldr	r0, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	1c99      	adds	r1, r3, #2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80049b0:	b282      	uxth	r2, r0
 80049b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d113      	bne.n	80049f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ff4a 	bl	8004888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a20      	ldr	r2, [pc, #128]	@ (8004a8c <I2SEx_RxISR_I2SExt+0x90>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <I2SEx_RxISR_I2SExt+0x16>
 8004a0e:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <I2SEx_RxISR_I2SExt+0x94>)
 8004a10:	e001      	b.n	8004a16 <I2SEx_RxISR_I2SExt+0x1a>
 8004a12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a16:	68d8      	ldr	r0, [r3, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	1c99      	adds	r1, r3, #2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a22:	b282      	uxth	r2, r0
 8004a24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d121      	bne.n	8004a82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <I2SEx_RxISR_I2SExt+0x90>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <I2SEx_RxISR_I2SExt+0x50>
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <I2SEx_RxISR_I2SExt+0x94>)
 8004a4a:	e001      	b.n	8004a50 <I2SEx_RxISR_I2SExt+0x54>
 8004a4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	490d      	ldr	r1, [pc, #52]	@ (8004a8c <I2SEx_RxISR_I2SExt+0x90>)
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	d101      	bne.n	8004a60 <I2SEx_RxISR_I2SExt+0x64>
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <I2SEx_RxISR_I2SExt+0x94>)
 8004a5e:	e001      	b.n	8004a64 <I2SEx_RxISR_I2SExt+0x68>
 8004a60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff03 	bl	8004888 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40003800 	.word	0x40003800
 8004a90:	40003400 	.word	0x40003400

08004a94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e101      	b.n	8004caa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f005 fd43 	bl	800a54c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2203      	movs	r2, #3
 8004aca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ad4:	d102      	bne.n	8004adc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 f990 	bl	8006e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7c1a      	ldrb	r2, [r3, #16]
 8004aee:	f88d 2000 	strb.w	r2, [sp]
 8004af2:	3304      	adds	r3, #4
 8004af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af6:	f002 f86e 	bl	8006bd6 <USB_CoreInit>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0ce      	b.n	8004caa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 f988 	bl	8006e28 <USB_SetCurrentMode>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0bf      	b.n	8004caa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
 8004b2e:	e04a      	b.n	8004bc6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b30:	7bfa      	ldrb	r2, [r7, #15]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3315      	adds	r3, #21
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	3314      	adds	r3, #20
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	b298      	uxth	r0, r3
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	332e      	adds	r3, #46	@ 0x2e
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b70:	7bfa      	ldrb	r2, [r7, #15]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	3318      	adds	r3, #24
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b84:	7bfa      	ldrb	r2, [r7, #15]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	331c      	adds	r3, #28
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3320      	adds	r3, #32
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	3324      	adds	r3, #36	@ 0x24
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	791b      	ldrb	r3, [r3, #4]
 8004bca:	7bfa      	ldrb	r2, [r7, #15]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d3af      	bcc.n	8004b30 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e044      	b.n	8004c60 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bd6:	7bfa      	ldrb	r2, [r7, #15]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c02:	7bfa      	ldrb	r2, [r7, #15]
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	791b      	ldrb	r3, [r3, #4]
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3b5      	bcc.n	8004bd6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	7c1a      	ldrb	r2, [r3, #16]
 8004c72:	f88d 2000 	strb.w	r2, [sp]
 8004c76:	3304      	adds	r3, #4
 8004c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c7a:	f002 f921 	bl	8006ec0 <USB_DevInit>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e00c      	b.n	8004caa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f003 f96b 	bl	8007f7e <USB_DevDisconnect>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_PCD_Start+0x1c>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e022      	b.n	8004d14 <HAL_PCD_Start+0x62>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f002 f872 	bl	8006de4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f003 f919 	bl	8007f3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b08d      	sub	sp, #52	@ 0x34
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f003 f9d7 	bl	80080e6 <USB_GetMode>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 848c 	bne.w	8005658 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f003 f93b 	bl	8007fc0 <USB_ReadInterrupts>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8482 	beq.w	8005656 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	0a1b      	lsrs	r3, r3, #8
 8004d5c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 f928 	bl	8007fc0 <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d107      	bne.n	8004d8a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f002 0202 	and.w	r2, r2, #2
 8004d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 f916 	bl	8007fc0 <USB_ReadInterrupts>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b10      	cmp	r3, #16
 8004d9c:	d161      	bne.n	8004e62 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0210 	bic.w	r2, r2, #16
 8004dac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f003 020f 	and.w	r2, r3, #15
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	3304      	adds	r3, #4
 8004dcc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004dd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dd8:	d124      	bne.n	8004e24 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d035      	beq.n	8004e52 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	6a38      	ldr	r0, [r7, #32]
 8004dfa:	f002 ff4d 	bl	8007c98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e0a:	441a      	add	r2, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e1c:	441a      	add	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	615a      	str	r2, [r3, #20]
 8004e22:	e016      	b.n	8004e52 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004e2a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e2e:	d110      	bne.n	8004e52 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e36:	2208      	movs	r2, #8
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6a38      	ldr	r0, [r7, #32]
 8004e3c:	f002 ff2c 	bl	8007c98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e4c:	441a      	add	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0210 	orr.w	r2, r2, #16
 8004e60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f003 f8aa 	bl	8007fc0 <USB_ReadInterrupts>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e76:	f040 80a7 	bne.w	8004fc8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 f8af 	bl	8007fe6 <USB_ReadDevAllOutEpInterrupt>
 8004e88:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e8a:	e099      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 808e 	beq.w	8004fb4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 f8d3 	bl	800804e <USB_ReadDevOutEPInterrupt>
 8004ea8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ec6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fea3 	bl	8005c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00c      	beq.n	8004ef2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004eea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 ff79 	bl	8005de4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2310      	movs	r3, #16
 8004f0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d030      	beq.n	8004f7a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f20:	2b80      	cmp	r3, #128	@ 0x80
 8004f22:	d109      	bne.n	8004f38 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f36:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	78db      	ldrb	r3, [r3, #3]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d108      	bne.n	8004f68 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f005 fc06 	bl	800a774 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f74:	461a      	mov	r2, r3
 8004f76:	2302      	movs	r3, #2
 8004f78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f90:	461a      	mov	r2, r3
 8004f92:	2320      	movs	r3, #32
 8004f94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	461a      	mov	r2, r3
 8004fae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fb2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f47f af62 	bne.w	8004e8c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 fff7 	bl	8007fc0 <USB_ReadInterrupts>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fdc:	f040 80db 	bne.w	8005196 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f003 f818 	bl	800801a <USB_ReadDevAllInEpInterrupt>
 8004fea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004ff0:	e0cd      	b.n	800518e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80c2 	beq.w	8005182 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f003 f83e 	bl	800808a <USB_ReadDevInEPInterrupt>
 800500e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d057      	beq.n	80050ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	2201      	movs	r2, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	43db      	mvns	r3, r3
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800503a:	4013      	ands	r3, r2
 800503c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800504a:	461a      	mov	r2, r3
 800504c:	2301      	movs	r3, #1
 800504e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	799b      	ldrb	r3, [r3, #6]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d132      	bne.n	80050be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	3320      	adds	r3, #32
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506e:	4613      	mov	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4403      	add	r3, r0
 8005078:	331c      	adds	r3, #28
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4419      	add	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4403      	add	r3, r0
 800508c:	3320      	adds	r3, #32
 800508e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	2b00      	cmp	r3, #0
 8005094:	d113      	bne.n	80050be <HAL_PCD_IRQHandler+0x3a2>
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509a:	4613      	mov	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3324      	adds	r3, #36	@ 0x24
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d108      	bne.n	80050be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050b6:	461a      	mov	r2, r3
 80050b8:	2101      	movs	r1, #1
 80050ba:	f003 f845 	bl	8008148 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f005 fad0 	bl	800a66a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e0:	461a      	mov	r2, r3
 80050e2:	2308      	movs	r3, #8
 80050e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0310 	and.w	r3, r3, #16
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fc:	461a      	mov	r2, r3
 80050fe:	2310      	movs	r3, #16
 8005100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005118:	461a      	mov	r2, r3
 800511a:	2340      	movs	r3, #64	@ 0x40
 800511c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005128:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800512a:	6a38      	ldr	r0, [r7, #32]
 800512c:	f002 f82c 	bl	8007188 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	3310      	adds	r3, #16
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	3304      	adds	r3, #4
 8005142:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	78db      	ldrb	r3, [r3, #3]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d108      	bne.n	800515e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2200      	movs	r2, #0
 8005150:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	b2db      	uxtb	r3, r3
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f005 fb1d 	bl	800a798 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516a:	461a      	mov	r2, r3
 800516c:	2302      	movs	r3, #2
 800516e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800517a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fcbd 	bl	8005afc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f af2e 	bne.w	8004ff2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f002 ff10 	bl	8007fc0 <USB_ReadInterrupts>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051aa:	d122      	bne.n	80051f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d108      	bne.n	80051dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051d2:	2100      	movs	r1, #0
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fea3 	bl	8005f20 <HAL_PCDEx_LPM_Callback>
 80051da:	e002      	b.n	80051e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f005 fabb 	bl	800a758 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80051f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f002 fee2 	bl	8007fc0 <USB_ReadInterrupts>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005206:	d112      	bne.n	800522e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d102      	bne.n	800521e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f005 fa77 	bl	800a70c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800522c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fec4 	bl	8007fc0 <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	f040 80b7 	bne.w	80053b4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2110      	movs	r1, #16
 8005260:	4618      	mov	r0, r3
 8005262:	f001 ff91 	bl	8007188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005266:	2300      	movs	r3, #0
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526a:	e046      	b.n	80052fa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800526c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005278:	461a      	mov	r2, r3
 800527a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800527e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800529a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800529e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ac:	461a      	mov	r2, r3
 80052ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80052f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f6:	3301      	adds	r3, #1
 80052f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	791b      	ldrb	r3, [r3, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	4293      	cmp	r3, r2
 8005304:	d3b2      	bcc.n	800526c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005314:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005318:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7bdb      	ldrb	r3, [r3, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005332:	f043 030b 	orr.w	r3, r3, #11
 8005336:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005348:	f043 030b 	orr.w	r3, r3, #11
 800534c:	6453      	str	r3, [r2, #68]	@ 0x44
 800534e:	e015      	b.n	800537c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800535e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005362:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005366:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005376:	f043 030b 	orr.w	r3, r3, #11
 800537a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800538a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800538e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800539e:	461a      	mov	r2, r3
 80053a0:	f002 fed2 	bl	8008148 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695a      	ldr	r2, [r3, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80053b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f002 fe01 	bl	8007fc0 <USB_ReadInterrupts>
 80053be:	4603      	mov	r3, r0
 80053c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053c8:	d123      	bne.n	8005412 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f002 fe97 	bl	8008102 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 ff4e 	bl	800727a <USB_GetDevSpeed>
 80053de:	4603      	mov	r3, r0
 80053e0:	461a      	mov	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681c      	ldr	r4, [r3, #0]
 80053ea:	f001 fa09 	bl	8006800 <HAL_RCC_GetHCLKFreq>
 80053ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80053f4:	461a      	mov	r2, r3
 80053f6:	4620      	mov	r0, r4
 80053f8:	f001 fc52 	bl	8006ca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f005 f95c 	bl	800a6ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005410:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f002 fdd2 	bl	8007fc0 <USB_ReadInterrupts>
 800541c:	4603      	mov	r3, r0
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b08      	cmp	r3, #8
 8005424:	d10a      	bne.n	800543c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f005 f939 	bl	800a69e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f002 0208 	and.w	r2, r2, #8
 800543a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f002 fdbd 	bl	8007fc0 <USB_ReadInterrupts>
 8005446:	4603      	mov	r3, r0
 8005448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544c:	2b80      	cmp	r3, #128	@ 0x80
 800544e:	d123      	bne.n	8005498 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800545c:	2301      	movs	r3, #1
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005460:	e014      	b.n	800548c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005466:	4613      	mov	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d105      	bne.n	8005486 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	b2db      	uxtb	r3, r3
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb0a 	bl	8005a9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	3301      	adds	r3, #1
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	791b      	ldrb	r3, [r3, #4]
 8005490:	461a      	mov	r2, r3
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	4293      	cmp	r3, r2
 8005496:	d3e4      	bcc.n	8005462 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f002 fd8f 	bl	8007fc0 <USB_ReadInterrupts>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ac:	d13c      	bne.n	8005528 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ae:	2301      	movs	r3, #1
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054b2:	e02b      	b.n	800550c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c8:	4613      	mov	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	3318      	adds	r3, #24
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d115      	bne.n	8005506 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80054da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80054dc:	2b00      	cmp	r3, #0
 80054de:	da12      	bge.n	8005506 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e4:	4613      	mov	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	3317      	adds	r3, #23
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80054f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 faca 	bl	8005a9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	3301      	adds	r3, #1
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	791b      	ldrb	r3, [r3, #4]
 8005510:	461a      	mov	r2, r3
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	4293      	cmp	r3, r2
 8005516:	d3cd      	bcc.n	80054b4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f002 fd47 	bl	8007fc0 <USB_ReadInterrupts>
 8005532:	4603      	mov	r3, r0
 8005534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005538:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800553c:	d156      	bne.n	80055ec <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800553e:	2301      	movs	r3, #1
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
 8005542:	e045      	b.n	80055d0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d12e      	bne.n	80055ca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800556c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800556e:	2b00      	cmp	r3, #0
 8005570:	da2b      	bge.n	80055ca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800557e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005582:	429a      	cmp	r2, r3
 8005584:	d121      	bne.n	80055ca <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558a:	4613      	mov	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005598:	2201      	movs	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055c6:	6053      	str	r3, [r2, #4]
            break;
 80055c8:	e008      	b.n	80055dc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	3301      	adds	r3, #1
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	791b      	ldrb	r3, [r3, #4]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	4293      	cmp	r3, r2
 80055da:	d3b3      	bcc.n	8005544 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80055ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f002 fce5 	bl	8007fc0 <USB_ReadInterrupts>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005600:	d10a      	bne.n	8005618 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f005 f8da 	bl	800a7bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f002 fccf 	bl	8007fc0 <USB_ReadInterrupts>
 8005622:	4603      	mov	r3, r0
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d115      	bne.n	8005658 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f005 f8ca 	bl	800a7d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	e000      	b.n	8005658 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005656:	bf00      	nop
    }
  }
}
 8005658:	3734      	adds	r7, #52	@ 0x34
 800565a:	46bd      	mov	sp, r7
 800565c:	bd90      	pop	{r4, r7, pc}

0800565e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_PCD_SetAddress+0x1a>
 8005674:	2302      	movs	r3, #2
 8005676:	e012      	b.n	800569e <HAL_PCD_SetAddress+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fc2e 	bl	8007ef0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	4608      	mov	r0, r1
 80056b0:	4611      	mov	r1, r2
 80056b2:	461a      	mov	r2, r3
 80056b4:	4603      	mov	r3, r0
 80056b6:	70fb      	strb	r3, [r7, #3]
 80056b8:	460b      	mov	r3, r1
 80056ba:	803b      	strh	r3, [r7, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da0f      	bge.n	80056ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	3310      	adds	r3, #16
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	3304      	adds	r3, #4
 80056e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	705a      	strb	r2, [r3, #1]
 80056ea:	e00f      	b.n	800570c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 020f 	and.w	r2, r3, #15
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	3304      	adds	r3, #4
 8005704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	b2da      	uxtb	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005718:	883b      	ldrh	r3, [r7, #0]
 800571a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	78ba      	ldrb	r2, [r7, #2]
 8005726:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800573a:	78bb      	ldrb	r3, [r7, #2]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d102      	bne.n	8005746 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_PCD_EP_Open+0xae>
 8005750:	2302      	movs	r3, #2
 8005752:	e00e      	b.n	8005772 <HAL_PCD_EP_Open+0xcc>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68f9      	ldr	r1, [r7, #12]
 8005762:	4618      	mov	r0, r3
 8005764:	f001 fdae 	bl	80072c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005770:	7afb      	ldrb	r3, [r7, #11]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800578a:	2b00      	cmp	r3, #0
 800578c:	da0f      	bge.n	80057ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	f003 020f 	and.w	r2, r3, #15
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	3310      	adds	r3, #16
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	705a      	strb	r2, [r3, #1]
 80057ac:	e00f      	b.n	80057ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	f003 020f 	and.w	r2, r3, #15
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	3304      	adds	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_PCD_EP_Close+0x6e>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e00e      	b.n	8005806 <HAL_PCD_EP_Close+0x8c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fdec 	bl	80073d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	460b      	mov	r3, r1
 800581c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	f003 020f 	and.w	r2, r3, #15
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	3304      	adds	r3, #4
 8005836:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2200      	movs	r2, #0
 8005848:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005850:	7afb      	ldrb	r3, [r7, #11]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	b2da      	uxtb	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	799b      	ldrb	r3, [r3, #6]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d102      	bne.n	800586a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	799b      	ldrb	r3, [r3, #6]
 8005872:	461a      	mov	r2, r3
 8005874:	6979      	ldr	r1, [r7, #20]
 8005876:	f001 fe89 	bl	800758c <USB_EPStartXfer>

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	f003 020f 	and.w	r2, r3, #15
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	460b      	mov	r3, r1
 80058c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	4613      	mov	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	3310      	adds	r3, #16
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	3304      	adds	r3, #4
 80058da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2201      	movs	r2, #1
 80058f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058f4:	7afb      	ldrb	r3, [r7, #11]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	799b      	ldrb	r3, [r3, #6]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d102      	bne.n	800590e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	799b      	ldrb	r3, [r3, #6]
 8005916:	461a      	mov	r2, r3
 8005918:	6979      	ldr	r1, [r7, #20]
 800591a:	f001 fe37 	bl	800758c <USB_EPStartXfer>

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	7912      	ldrb	r2, [r2, #4]
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e04f      	b.n	80059e6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800594a:	2b00      	cmp	r3, #0
 800594c:	da0f      	bge.n	800596e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	f003 020f 	and.w	r2, r3, #15
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	3310      	adds	r3, #16
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	3304      	adds	r3, #4
 8005964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	705a      	strb	r2, [r3, #1]
 800596c:	e00d      	b.n	800598a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800596e:	78fa      	ldrb	r2, [r7, #3]
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	4413      	add	r3, r2
 8005980:	3304      	adds	r3, #4
 8005982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_PCD_EP_SetStall+0x82>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e01d      	b.n	80059e6 <HAL_PCD_EP_SetStall+0xbe>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f002 f9c5 	bl	8007d48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7999      	ldrb	r1, [r3, #6]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059d6:	461a      	mov	r2, r3
 80059d8:	f002 fbb6 	bl	8008148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b084      	sub	sp, #16
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	7912      	ldrb	r2, [r2, #4]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e042      	b.n	8005a92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	da0f      	bge.n	8005a34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	f003 020f 	and.w	r2, r3, #15
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	3310      	adds	r3, #16
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	705a      	strb	r2, [r3, #1]
 8005a32:	e00f      	b.n	8005a54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 020f 	and.w	r2, r3, #15
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_PCD_EP_ClrStall+0x86>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e00e      	b.n	8005a92 <HAL_PCD_EP_ClrStall+0xa4>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 f9ce 	bl	8007e24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da0c      	bge.n	8005ac8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	f003 020f 	and.w	r2, r3, #15
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	3310      	adds	r3, #16
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e00c      	b.n	8005ae2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 ffed 	bl	8007ac8 <USB_EPStopXfer>
 8005aee:	4603      	mov	r3, r0
 8005af0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005af2:	7afb      	ldrb	r3, [r7, #11]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	@ 0x28
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	3310      	adds	r3, #16
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d901      	bls.n	8005b34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e06b      	b.n	8005c0c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d902      	bls.n	8005b50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	3303      	adds	r3, #3
 8005b54:	089b      	lsrs	r3, r3, #2
 8005b56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b58:	e02a      	b.n	8005bb0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d902      	bls.n	8005b76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3303      	adds	r3, #3
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68d9      	ldr	r1, [r3, #12]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	4603      	mov	r3, r0
 8005b92:	6978      	ldr	r0, [r7, #20]
 8005b94:	f002 f842 	bl	8007c1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	441a      	add	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	441a      	add	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d809      	bhi.n	8005bda <PCD_WriteEmptyTxFifo+0xde>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d203      	bcs.n	8005bda <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1bf      	bne.n	8005b5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d811      	bhi.n	8005c0a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2201      	movs	r2, #1
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	6939      	ldr	r1, [r7, #16]
 8005c02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c06:	4013      	ands	r3, r2
 8005c08:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	333c      	adds	r3, #60	@ 0x3c
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	799b      	ldrb	r3, [r3, #6]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d17b      	bne.n	8005d42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4a61      	ldr	r2, [pc, #388]	@ (8005ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	f240 80b9 	bls.w	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80b3 	beq.w	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c76:	461a      	mov	r2, r3
 8005c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c7c:	6093      	str	r3, [r2, #8]
 8005c7e:	e0a7      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c96:	461a      	mov	r2, r3
 8005c98:	2320      	movs	r3, #32
 8005c9a:	6093      	str	r3, [r2, #8]
 8005c9c:	e098      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 8093 	bne.w	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4a4b      	ldr	r2, [pc, #300]	@ (8005ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d90f      	bls.n	8005cd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00a      	beq.n	8005cd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cce:	6093      	str	r3, [r2, #8]
 8005cd0:	e07e      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4413      	add	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1a      	ldr	r2, [r3, #32]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	0159      	lsls	r1, r3, #5
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d114      	bne.n	8005d34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2101      	movs	r1, #1
 8005d20:	f002 fa12 	bl	8008148 <USB_EP0_OutStart>
 8005d24:	e006      	b.n	8005d34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	441a      	add	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f004 fc7a 	bl	800a634 <HAL_PCD_DataOutStageCallback>
 8005d40:	e046      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	4a26      	ldr	r2, [pc, #152]	@ (8005de0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d124      	bne.n	8005d94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d60:	461a      	mov	r2, r3
 8005d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d66:	6093      	str	r3, [r2, #8]
 8005d68:	e032      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d80:	461a      	mov	r2, r3
 8005d82:	2320      	movs	r3, #32
 8005d84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f004 fc51 	bl	800a634 <HAL_PCD_DataOutStageCallback>
 8005d92:	e01d      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d114      	bne.n	8005dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	f002 f9c2 	bl	8008148 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f004 fc32 	bl	800a634 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	4f54300a 	.word	0x4f54300a
 8005de0:	4f54310a 	.word	0x4f54310a

08005de4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	333c      	adds	r3, #60	@ 0x3c
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a15      	ldr	r2, [pc, #84]	@ (8005e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d90e      	bls.n	8005e38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d009      	beq.n	8005e38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e30:	461a      	mov	r2, r3
 8005e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f004 fbe9 	bl	800a610 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a0a      	ldr	r2, [pc, #40]	@ (8005e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d90c      	bls.n	8005e60 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	799b      	ldrb	r3, [r3, #6]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d108      	bne.n	8005e60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	f002 f974 	bl	8008148 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	4f54300a 	.word	0x4f54300a

08005e70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	70fb      	strb	r3, [r7, #3]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e8e:	883b      	ldrh	r3, [r7, #0]
 8005e90:	0419      	lsls	r1, r3, #16
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e9c:	e028      	b.n	8005ef0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]
 8005eb0:	e00d      	b.n	8005ece <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	3340      	adds	r3, #64	@ 0x40
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
 8005ece:	7bfa      	ldrb	r2, [r7, #15]
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d3ec      	bcc.n	8005eb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ed8:	883b      	ldrh	r3, [r7, #0]
 8005eda:	0418      	lsls	r0, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	4302      	orrs	r2, r0
 8005ee8:	3340      	adds	r3, #64	@ 0x40
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	887a      	ldrh	r2, [r7, #2]
 8005f10:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e267      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d075      	beq.n	8006042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f56:	4b88      	ldr	r3, [pc, #544]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d00c      	beq.n	8005f7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f62:	4b85      	ldr	r3, [pc, #532]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d112      	bne.n	8005f94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6e:	4b82      	ldr	r3, [pc, #520]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f7a:	d10b      	bne.n	8005f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f7c:	4b7e      	ldr	r3, [pc, #504]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d05b      	beq.n	8006040 <HAL_RCC_OscConfig+0x108>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d157      	bne.n	8006040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e242      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f9c:	d106      	bne.n	8005fac <HAL_RCC_OscConfig+0x74>
 8005f9e:	4b76      	ldr	r3, [pc, #472]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a75      	ldr	r2, [pc, #468]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	e01d      	b.n	8005fe8 <HAL_RCC_OscConfig+0xb0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x98>
 8005fb6:	4b70      	ldr	r3, [pc, #448]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6f      	ldr	r2, [pc, #444]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a6c      	ldr	r2, [pc, #432]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e00b      	b.n	8005fe8 <HAL_RCC_OscConfig+0xb0>
 8005fd0:	4b69      	ldr	r3, [pc, #420]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a68      	ldr	r2, [pc, #416]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	4b66      	ldr	r3, [pc, #408]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a65      	ldr	r2, [pc, #404]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8005fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d013      	beq.n	8006018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff0:	f7fc f93a 	bl	8002268 <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ff8:	f7fc f936 	bl	8002268 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b64      	cmp	r3, #100	@ 0x64
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e207      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600a:	4b5b      	ldr	r3, [pc, #364]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f0      	beq.n	8005ff8 <HAL_RCC_OscConfig+0xc0>
 8006016:	e014      	b.n	8006042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006018:	f7fc f926 	bl	8002268 <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006020:	f7fc f922 	bl	8002268 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b64      	cmp	r3, #100	@ 0x64
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e1f3      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006032:	4b51      	ldr	r3, [pc, #324]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f0      	bne.n	8006020 <HAL_RCC_OscConfig+0xe8>
 800603e:	e000      	b.n	8006042 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d063      	beq.n	8006116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800604e:	4b4a      	ldr	r3, [pc, #296]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 030c 	and.w	r3, r3, #12
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800605a:	4b47      	ldr	r3, [pc, #284]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006062:	2b08      	cmp	r3, #8
 8006064:	d11c      	bne.n	80060a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006066:	4b44      	ldr	r3, [pc, #272]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d116      	bne.n	80060a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006072:	4b41      	ldr	r3, [pc, #260]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_RCC_OscConfig+0x152>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d001      	beq.n	800608a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e1c7      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608a:	4b3b      	ldr	r3, [pc, #236]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4937      	ldr	r1, [pc, #220]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 800609a:	4313      	orrs	r3, r2
 800609c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800609e:	e03a      	b.n	8006116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d020      	beq.n	80060ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060a8:	4b34      	ldr	r3, [pc, #208]	@ (800617c <HAL_RCC_OscConfig+0x244>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ae:	f7fc f8db 	bl	8002268 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b6:	f7fc f8d7 	bl	8002268 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e1a8      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0f0      	beq.n	80060b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d4:	4b28      	ldr	r3, [pc, #160]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4925      	ldr	r1, [pc, #148]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	600b      	str	r3, [r1, #0]
 80060e8:	e015      	b.n	8006116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ea:	4b24      	ldr	r3, [pc, #144]	@ (800617c <HAL_RCC_OscConfig+0x244>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fc f8ba 	bl	8002268 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f8:	f7fc f8b6 	bl	8002268 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e187      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800610a:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f0      	bne.n	80060f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d036      	beq.n	8006190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800612a:	4b15      	ldr	r3, [pc, #84]	@ (8006180 <HAL_RCC_OscConfig+0x248>)
 800612c:	2201      	movs	r2, #1
 800612e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fc f89a 	bl	8002268 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006138:	f7fc f896 	bl	8002268 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e167      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800614a:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <HAL_RCC_OscConfig+0x240>)
 800614c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0f0      	beq.n	8006138 <HAL_RCC_OscConfig+0x200>
 8006156:	e01b      	b.n	8006190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006158:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <HAL_RCC_OscConfig+0x248>)
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800615e:	f7fc f883 	bl	8002268 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006164:	e00e      	b.n	8006184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006166:	f7fc f87f 	bl	8002268 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d907      	bls.n	8006184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e150      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
 8006178:	40023800 	.word	0x40023800
 800617c:	42470000 	.word	0x42470000
 8006180:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006184:	4b88      	ldr	r3, [pc, #544]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1ea      	bne.n	8006166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8097 	beq.w	80062cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800619e:	2300      	movs	r3, #0
 80061a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061a2:	4b81      	ldr	r3, [pc, #516]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10f      	bne.n	80061ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	4b7d      	ldr	r3, [pc, #500]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80061b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b6:	4a7c      	ldr	r2, [pc, #496]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80061b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80061be:	4b7a      	ldr	r3, [pc, #488]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ca:	2301      	movs	r3, #1
 80061cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ce:	4b77      	ldr	r3, [pc, #476]	@ (80063ac <HAL_RCC_OscConfig+0x474>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d118      	bne.n	800620c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061da:	4b74      	ldr	r3, [pc, #464]	@ (80063ac <HAL_RCC_OscConfig+0x474>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a73      	ldr	r2, [pc, #460]	@ (80063ac <HAL_RCC_OscConfig+0x474>)
 80061e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061e6:	f7fc f83f 	bl	8002268 <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ee:	f7fc f83b 	bl	8002268 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e10c      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006200:	4b6a      	ldr	r3, [pc, #424]	@ (80063ac <HAL_RCC_OscConfig+0x474>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d106      	bne.n	8006222 <HAL_RCC_OscConfig+0x2ea>
 8006214:	4b64      	ldr	r3, [pc, #400]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006218:	4a63      	ldr	r2, [pc, #396]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006220:	e01c      	b.n	800625c <HAL_RCC_OscConfig+0x324>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b05      	cmp	r3, #5
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0x30c>
 800622a:	4b5f      	ldr	r3, [pc, #380]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622e:	4a5e      	ldr	r2, [pc, #376]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006230:	f043 0304 	orr.w	r3, r3, #4
 8006234:	6713      	str	r3, [r2, #112]	@ 0x70
 8006236:	4b5c      	ldr	r3, [pc, #368]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623a:	4a5b      	ldr	r2, [pc, #364]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	6713      	str	r3, [r2, #112]	@ 0x70
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0x324>
 8006244:	4b58      	ldr	r3, [pc, #352]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006248:	4a57      	ldr	r2, [pc, #348]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006250:	4b55      	ldr	r3, [pc, #340]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006254:	4a54      	ldr	r2, [pc, #336]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006256:	f023 0304 	bic.w	r3, r3, #4
 800625a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d015      	beq.n	8006290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006264:	f7fc f800 	bl	8002268 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800626a:	e00a      	b.n	8006282 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626c:	f7fb fffc 	bl	8002268 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e0cb      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006282:	4b49      	ldr	r3, [pc, #292]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ee      	beq.n	800626c <HAL_RCC_OscConfig+0x334>
 800628e:	e014      	b.n	80062ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006290:	f7fb ffea 	bl	8002268 <HAL_GetTick>
 8006294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006296:	e00a      	b.n	80062ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006298:	f7fb ffe6 	bl	8002268 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e0b5      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ae:	4b3e      	ldr	r3, [pc, #248]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80062b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ee      	bne.n	8006298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d105      	bne.n	80062cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c0:	4b39      	ldr	r3, [pc, #228]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80062c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c4:	4a38      	ldr	r2, [pc, #224]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80062c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80a1 	beq.w	8006418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062d6:	4b34      	ldr	r3, [pc, #208]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d05c      	beq.n	800639c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d141      	bne.n	800636e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ea:	4b31      	ldr	r3, [pc, #196]	@ (80063b0 <HAL_RCC_OscConfig+0x478>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f0:	f7fb ffba 	bl	8002268 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f8:	f7fb ffb6 	bl	8002268 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e087      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800630a:	4b27      	ldr	r3, [pc, #156]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f0      	bne.n	80062f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69da      	ldr	r2, [r3, #28]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	019b      	lsls	r3, r3, #6
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	3b01      	subs	r3, #1
 8006330:	041b      	lsls	r3, r3, #16
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	061b      	lsls	r3, r3, #24
 800633a:	491b      	ldr	r1, [pc, #108]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 800633c:	4313      	orrs	r3, r2
 800633e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006340:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <HAL_RCC_OscConfig+0x478>)
 8006342:	2201      	movs	r2, #1
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fb ff8f 	bl	8002268 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634e:	f7fb ff8b 	bl	8002268 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e05c      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006360:	4b11      	ldr	r3, [pc, #68]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <HAL_RCC_OscConfig+0x416>
 800636c:	e054      	b.n	8006418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800636e:	4b10      	ldr	r3, [pc, #64]	@ (80063b0 <HAL_RCC_OscConfig+0x478>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006374:	f7fb ff78 	bl	8002268 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637c:	f7fb ff74 	bl	8002268 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e045      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638e:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <HAL_RCC_OscConfig+0x470>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x444>
 800639a:	e03d      	b.n	8006418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d107      	bne.n	80063b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e038      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
 80063a8:	40023800 	.word	0x40023800
 80063ac:	40007000 	.word	0x40007000
 80063b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006424 <HAL_RCC_OscConfig+0x4ec>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d028      	beq.n	8006414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d121      	bne.n	8006414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063da:	429a      	cmp	r2, r3
 80063dc:	d11a      	bne.n	8006414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063e4:	4013      	ands	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d111      	bne.n	8006414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	3b01      	subs	r3, #1
 80063fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d107      	bne.n	8006414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40023800 	.word	0x40023800

08006428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e0cc      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800643c:	4b68      	ldr	r3, [pc, #416]	@ (80065e0 <HAL_RCC_ClockConfig+0x1b8>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d90c      	bls.n	8006464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644a:	4b65      	ldr	r3, [pc, #404]	@ (80065e0 <HAL_RCC_ClockConfig+0x1b8>)
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006452:	4b63      	ldr	r3, [pc, #396]	@ (80065e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d001      	beq.n	8006464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0b8      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d020      	beq.n	80064b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800647c:	4b59      	ldr	r3, [pc, #356]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	4a58      	ldr	r2, [pc, #352]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006482:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006494:	4b53      	ldr	r3, [pc, #332]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4a52      	ldr	r2, [pc, #328]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800649e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064a0:	4b50      	ldr	r3, [pc, #320]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	494d      	ldr	r1, [pc, #308]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d044      	beq.n	8006548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d107      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c6:	4b47      	ldr	r3, [pc, #284]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d119      	bne.n	8006506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e07f      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d003      	beq.n	80064e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d107      	bne.n	80064f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e6:	4b3f      	ldr	r3, [pc, #252]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e06f      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f6:	4b3b      	ldr	r3, [pc, #236]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e067      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006506:	4b37      	ldr	r3, [pc, #220]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 0203 	bic.w	r2, r3, #3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4934      	ldr	r1, [pc, #208]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006514:	4313      	orrs	r3, r2
 8006516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006518:	f7fb fea6 	bl	8002268 <HAL_GetTick>
 800651c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800651e:	e00a      	b.n	8006536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006520:	f7fb fea2 	bl	8002268 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800652e:	4293      	cmp	r3, r2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e04f      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006536:	4b2b      	ldr	r3, [pc, #172]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 020c 	and.w	r2, r3, #12
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	429a      	cmp	r2, r3
 8006546:	d1eb      	bne.n	8006520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006548:	4b25      	ldr	r3, [pc, #148]	@ (80065e0 <HAL_RCC_ClockConfig+0x1b8>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	429a      	cmp	r2, r3
 8006554:	d20c      	bcs.n	8006570 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006556:	4b22      	ldr	r3, [pc, #136]	@ (80065e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b20      	ldr	r3, [pc, #128]	@ (80065e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e032      	b.n	80065d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d008      	beq.n	800658e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800657c:	4b19      	ldr	r3, [pc, #100]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	4916      	ldr	r1, [pc, #88]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	4313      	orrs	r3, r2
 800658c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800659a:	4b12      	ldr	r3, [pc, #72]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	490e      	ldr	r1, [pc, #56]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065ae:	f000 f821 	bl	80065f4 <HAL_RCC_GetSysClockFreq>
 80065b2:	4602      	mov	r2, r0
 80065b4:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	091b      	lsrs	r3, r3, #4
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	490a      	ldr	r1, [pc, #40]	@ (80065e8 <HAL_RCC_ClockConfig+0x1c0>)
 80065c0:	5ccb      	ldrb	r3, [r1, r3]
 80065c2:	fa22 f303 	lsr.w	r3, r2, r3
 80065c6:	4a09      	ldr	r2, [pc, #36]	@ (80065ec <HAL_RCC_ClockConfig+0x1c4>)
 80065c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80065ca:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fb fe06 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40023c00 	.word	0x40023c00
 80065e4:	40023800 	.word	0x40023800
 80065e8:	0800cbc8 	.word	0x0800cbc8
 80065ec:	20000004 	.word	0x20000004
 80065f0:	20000008 	.word	0x20000008

080065f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f8:	b094      	sub	sp, #80	@ 0x50
 80065fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800660c:	4b79      	ldr	r3, [pc, #484]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b08      	cmp	r3, #8
 8006616:	d00d      	beq.n	8006634 <HAL_RCC_GetSysClockFreq+0x40>
 8006618:	2b08      	cmp	r3, #8
 800661a:	f200 80e1 	bhi.w	80067e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0x34>
 8006622:	2b04      	cmp	r3, #4
 8006624:	d003      	beq.n	800662e <HAL_RCC_GetSysClockFreq+0x3a>
 8006626:	e0db      	b.n	80067e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006628:	4b73      	ldr	r3, [pc, #460]	@ (80067f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800662a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800662c:	e0db      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800662e:	4b73      	ldr	r3, [pc, #460]	@ (80067fc <HAL_RCC_GetSysClockFreq+0x208>)
 8006630:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006632:	e0d8      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006634:	4b6f      	ldr	r3, [pc, #444]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800663c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800663e:	4b6d      	ldr	r3, [pc, #436]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d063      	beq.n	8006712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800664a:	4b6a      	ldr	r3, [pc, #424]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	099b      	lsrs	r3, r3, #6
 8006650:	2200      	movs	r2, #0
 8006652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006654:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665c:	633b      	str	r3, [r7, #48]	@ 0x30
 800665e:	2300      	movs	r3, #0
 8006660:	637b      	str	r3, [r7, #52]	@ 0x34
 8006662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006666:	4622      	mov	r2, r4
 8006668:	462b      	mov	r3, r5
 800666a:	f04f 0000 	mov.w	r0, #0
 800666e:	f04f 0100 	mov.w	r1, #0
 8006672:	0159      	lsls	r1, r3, #5
 8006674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006678:	0150      	lsls	r0, r2, #5
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4621      	mov	r1, r4
 8006680:	1a51      	subs	r1, r2, r1
 8006682:	6139      	str	r1, [r7, #16]
 8006684:	4629      	mov	r1, r5
 8006686:	eb63 0301 	sbc.w	r3, r3, r1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006698:	4659      	mov	r1, fp
 800669a:	018b      	lsls	r3, r1, #6
 800669c:	4651      	mov	r1, sl
 800669e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066a2:	4651      	mov	r1, sl
 80066a4:	018a      	lsls	r2, r1, #6
 80066a6:	4651      	mov	r1, sl
 80066a8:	ebb2 0801 	subs.w	r8, r2, r1
 80066ac:	4659      	mov	r1, fp
 80066ae:	eb63 0901 	sbc.w	r9, r3, r1
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066c6:	4690      	mov	r8, r2
 80066c8:	4699      	mov	r9, r3
 80066ca:	4623      	mov	r3, r4
 80066cc:	eb18 0303 	adds.w	r3, r8, r3
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	462b      	mov	r3, r5
 80066d4:	eb49 0303 	adc.w	r3, r9, r3
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066e6:	4629      	mov	r1, r5
 80066e8:	024b      	lsls	r3, r1, #9
 80066ea:	4621      	mov	r1, r4
 80066ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066f0:	4621      	mov	r1, r4
 80066f2:	024a      	lsls	r2, r1, #9
 80066f4:	4610      	mov	r0, r2
 80066f6:	4619      	mov	r1, r3
 80066f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066fa:	2200      	movs	r2, #0
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006704:	f7fa fa82 	bl	8000c0c <__aeabi_uldivmod>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4613      	mov	r3, r2
 800670e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006710:	e058      	b.n	80067c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006712:	4b38      	ldr	r3, [pc, #224]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	099b      	lsrs	r3, r3, #6
 8006718:	2200      	movs	r2, #0
 800671a:	4618      	mov	r0, r3
 800671c:	4611      	mov	r1, r2
 800671e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006722:	623b      	str	r3, [r7, #32]
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
 8006728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800672c:	4642      	mov	r2, r8
 800672e:	464b      	mov	r3, r9
 8006730:	f04f 0000 	mov.w	r0, #0
 8006734:	f04f 0100 	mov.w	r1, #0
 8006738:	0159      	lsls	r1, r3, #5
 800673a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800673e:	0150      	lsls	r0, r2, #5
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4641      	mov	r1, r8
 8006746:	ebb2 0a01 	subs.w	sl, r2, r1
 800674a:	4649      	mov	r1, r9
 800674c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800675c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006764:	ebb2 040a 	subs.w	r4, r2, sl
 8006768:	eb63 050b 	sbc.w	r5, r3, fp
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	00eb      	lsls	r3, r5, #3
 8006776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800677a:	00e2      	lsls	r2, r4, #3
 800677c:	4614      	mov	r4, r2
 800677e:	461d      	mov	r5, r3
 8006780:	4643      	mov	r3, r8
 8006782:	18e3      	adds	r3, r4, r3
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	464b      	mov	r3, r9
 8006788:	eb45 0303 	adc.w	r3, r5, r3
 800678c:	607b      	str	r3, [r7, #4]
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800679a:	4629      	mov	r1, r5
 800679c:	028b      	lsls	r3, r1, #10
 800679e:	4621      	mov	r1, r4
 80067a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067a4:	4621      	mov	r1, r4
 80067a6:	028a      	lsls	r2, r1, #10
 80067a8:	4610      	mov	r0, r2
 80067aa:	4619      	mov	r1, r3
 80067ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ae:	2200      	movs	r2, #0
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	61fa      	str	r2, [r7, #28]
 80067b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067b8:	f7fa fa28 	bl	8000c0c <__aeabi_uldivmod>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4613      	mov	r3, r2
 80067c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80067c4:	4b0b      	ldr	r3, [pc, #44]	@ (80067f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	3301      	adds	r3, #1
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80067d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067de:	e002      	b.n	80067e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067e0:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80067e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3750      	adds	r7, #80	@ 0x50
 80067ec:	46bd      	mov	sp, r7
 80067ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f2:	bf00      	nop
 80067f4:	40023800 	.word	0x40023800
 80067f8:	00f42400 	.word	0x00f42400
 80067fc:	007a1200 	.word	0x007a1200

08006800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006804:	4b03      	ldr	r3, [pc, #12]	@ (8006814 <HAL_RCC_GetHCLKFreq+0x14>)
 8006806:	681b      	ldr	r3, [r3, #0]
}
 8006808:	4618      	mov	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20000004 	.word	0x20000004

08006818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800681c:	f7ff fff0 	bl	8006800 <HAL_RCC_GetHCLKFreq>
 8006820:	4602      	mov	r2, r0
 8006822:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	0a9b      	lsrs	r3, r3, #10
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	4903      	ldr	r1, [pc, #12]	@ (800683c <HAL_RCC_GetPCLK1Freq+0x24>)
 800682e:	5ccb      	ldrb	r3, [r1, r3]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006834:	4618      	mov	r0, r3
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40023800 	.word	0x40023800
 800683c:	0800cbd8 	.word	0x0800cbd8

08006840 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006864:	2b00      	cmp	r3, #0
 8006866:	d035      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006868:	4b62      	ldr	r3, [pc, #392]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800686a:	2200      	movs	r2, #0
 800686c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800686e:	f7fb fcfb 	bl	8002268 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006874:	e008      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006876:	f7fb fcf7 	bl	8002268 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e0b0      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006888:	4b5b      	ldr	r3, [pc, #364]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f0      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	019a      	lsls	r2, r3, #6
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	071b      	lsls	r3, r3, #28
 80068a0:	4955      	ldr	r1, [pc, #340]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80068a8:	4b52      	ldr	r3, [pc, #328]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ae:	f7fb fcdb 	bl	8002268 <HAL_GetTick>
 80068b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068b4:	e008      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068b6:	f7fb fcd7 	bl	8002268 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e090      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068c8:	4b4b      	ldr	r3, [pc, #300]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0f0      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8083 	beq.w	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	4b44      	ldr	r3, [pc, #272]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	4a43      	ldr	r2, [pc, #268]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068f2:	4b41      	ldr	r3, [pc, #260]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068fe:	4b3f      	ldr	r3, [pc, #252]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a3e      	ldr	r2, [pc, #248]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006908:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800690a:	f7fb fcad 	bl	8002268 <HAL_GetTick>
 800690e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006910:	e008      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006912:	f7fb fca9 	bl	8002268 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e062      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006924:	4b35      	ldr	r3, [pc, #212]	@ (80069fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0f0      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006930:	4b31      	ldr	r3, [pc, #196]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006934:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006938:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d02f      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	d028      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800694e:	4b2a      	ldr	r3, [pc, #168]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006956:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006958:	4b29      	ldr	r3, [pc, #164]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800695a:	2201      	movs	r2, #1
 800695c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800695e:	4b28      	ldr	r3, [pc, #160]	@ (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006964:	4a24      	ldr	r2, [pc, #144]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800696a:	4b23      	ldr	r3, [pc, #140]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b01      	cmp	r3, #1
 8006974:	d114      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006976:	f7fb fc77 	bl	8002268 <HAL_GetTick>
 800697a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800697c:	e00a      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800697e:	f7fb fc73 	bl	8002268 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800698c:	4293      	cmp	r3, r2
 800698e:	d901      	bls.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e02a      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006994:	4b18      	ldr	r3, [pc, #96]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0ee      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ac:	d10d      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80069ae:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80069be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c2:	490d      	ldr	r1, [pc, #52]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	608b      	str	r3, [r1, #8]
 80069c8:	e005      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80069ca:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	4a0a      	ldr	r2, [pc, #40]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069d4:	6093      	str	r3, [r2, #8]
 80069d6:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e2:	4905      	ldr	r1, [pc, #20]	@ (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	42470068 	.word	0x42470068
 80069f8:	40023800 	.word	0x40023800
 80069fc:	40007000 	.word	0x40007000
 8006a00:	42470e40 	.word	0x42470e40

08006a04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d13f      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006a22:	4b24      	ldr	r3, [pc, #144]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a2a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a38:	d12f      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006a3c:	617b      	str	r3, [r7, #20]
          break;
 8006a3e:	e02f      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a40:	4b1c      	ldr	r3, [pc, #112]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a4c:	d108      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a4e:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a56:	4a19      	ldr	r2, [pc, #100]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	e007      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a60:	4b14      	ldr	r3, [pc, #80]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a68:	4a15      	ldr	r2, [pc, #84]	@ (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a70:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a84:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8a:	0f1b      	lsrs	r3, r3, #28
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a96:	617b      	str	r3, [r7, #20]
          break;
 8006a98:	e002      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
          break;
 8006a9e:	bf00      	nop
        }
      }
      break;
 8006aa0:	e000      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006aa2:	bf00      	nop
    }
  }
  return frequency;
 8006aa4:	697b      	ldr	r3, [r7, #20]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	00bb8000 	.word	0x00bb8000
 8006abc:	007a1200 	.word	0x007a1200
 8006ac0:	00f42400 	.word	0x00f42400

08006ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e07b      	b.n	8006bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d108      	bne.n	8006af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ae6:	d009      	beq.n	8006afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	61da      	str	r2, [r3, #28]
 8006aee:	e005      	b.n	8006afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fb f9e6 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b44:	431a      	orrs	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b80:	ea42 0103 	orr.w	r1, r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	f003 0104 	and.w	r1, r3, #4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	f003 0210 	and.w	r2, r3, #16
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	f107 001c 	add.w	r0, r7, #28
 8006be4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006be8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d123      	bne.n	8006c38 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d105      	bne.n	8006c2c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 fae9 	bl	8008204 <USB_CoreReset>
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	e01b      	b.n	8006c70 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fadd 	bl	8008204 <USB_CoreReset>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c62:	e005      	b.n	8006c70 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c70:	7fbb      	ldrb	r3, [r7, #30]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d10b      	bne.n	8006c8e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f043 0206 	orr.w	r2, r3, #6
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f043 0220 	orr.w	r2, r3, #32
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c9a:	b004      	add	sp, #16
 8006c9c:	4770      	bx	lr
	...

08006ca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d165      	bne.n	8006d80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4a41      	ldr	r2, [pc, #260]	@ (8006dbc <USB_SetTurnaroundTime+0x11c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d906      	bls.n	8006cca <USB_SetTurnaroundTime+0x2a>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a40      	ldr	r2, [pc, #256]	@ (8006dc0 <USB_SetTurnaroundTime+0x120>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d202      	bcs.n	8006cca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cc4:	230f      	movs	r3, #15
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e062      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc0 <USB_SetTurnaroundTime+0x120>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d306      	bcc.n	8006ce0 <USB_SetTurnaroundTime+0x40>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8006dc4 <USB_SetTurnaroundTime+0x124>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d202      	bcs.n	8006ce0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cda:	230e      	movs	r3, #14
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e057      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4a38      	ldr	r2, [pc, #224]	@ (8006dc4 <USB_SetTurnaroundTime+0x124>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d306      	bcc.n	8006cf6 <USB_SetTurnaroundTime+0x56>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4a37      	ldr	r2, [pc, #220]	@ (8006dc8 <USB_SetTurnaroundTime+0x128>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d202      	bcs.n	8006cf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cf0:	230d      	movs	r3, #13
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e04c      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4a33      	ldr	r2, [pc, #204]	@ (8006dc8 <USB_SetTurnaroundTime+0x128>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d306      	bcc.n	8006d0c <USB_SetTurnaroundTime+0x6c>
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4a32      	ldr	r2, [pc, #200]	@ (8006dcc <USB_SetTurnaroundTime+0x12c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d802      	bhi.n	8006d0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d06:	230c      	movs	r3, #12
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	e041      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8006dcc <USB_SetTurnaroundTime+0x12c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d906      	bls.n	8006d22 <USB_SetTurnaroundTime+0x82>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd0 <USB_SetTurnaroundTime+0x130>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d802      	bhi.n	8006d22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d1c:	230b      	movs	r3, #11
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e036      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd0 <USB_SetTurnaroundTime+0x130>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d906      	bls.n	8006d38 <USB_SetTurnaroundTime+0x98>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	4a29      	ldr	r2, [pc, #164]	@ (8006dd4 <USB_SetTurnaroundTime+0x134>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d802      	bhi.n	8006d38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d32:	230a      	movs	r3, #10
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e02b      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a26      	ldr	r2, [pc, #152]	@ (8006dd4 <USB_SetTurnaroundTime+0x134>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d906      	bls.n	8006d4e <USB_SetTurnaroundTime+0xae>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4a25      	ldr	r2, [pc, #148]	@ (8006dd8 <USB_SetTurnaroundTime+0x138>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d202      	bcs.n	8006d4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d48:	2309      	movs	r3, #9
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	e020      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a21      	ldr	r2, [pc, #132]	@ (8006dd8 <USB_SetTurnaroundTime+0x138>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d306      	bcc.n	8006d64 <USB_SetTurnaroundTime+0xc4>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4a20      	ldr	r2, [pc, #128]	@ (8006ddc <USB_SetTurnaroundTime+0x13c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d802      	bhi.n	8006d64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d5e:	2308      	movs	r3, #8
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e015      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a1d      	ldr	r2, [pc, #116]	@ (8006ddc <USB_SetTurnaroundTime+0x13c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d906      	bls.n	8006d7a <USB_SetTurnaroundTime+0xda>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <USB_SetTurnaroundTime+0x140>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d202      	bcs.n	8006d7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d74:	2307      	movs	r3, #7
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e00a      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d7a:	2306      	movs	r3, #6
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e007      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d86:	2309      	movs	r3, #9
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e001      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d8c:	2309      	movs	r3, #9
 8006d8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	00d8acbf 	.word	0x00d8acbf
 8006dc0:	00e4e1c0 	.word	0x00e4e1c0
 8006dc4:	00f42400 	.word	0x00f42400
 8006dc8:	01067380 	.word	0x01067380
 8006dcc:	011a499f 	.word	0x011a499f
 8006dd0:	01312cff 	.word	0x01312cff
 8006dd4:	014ca43f 	.word	0x014ca43f
 8006dd8:	016e3600 	.word	0x016e3600
 8006ddc:	01a6ab1f 	.word	0x01a6ab1f
 8006de0:	01e84800 	.word	0x01e84800

08006de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f043 0201 	orr.w	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d115      	bne.n	8006e76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e56:	200a      	movs	r0, #10
 8006e58:	f7fb fa12 	bl	8002280 <HAL_Delay>
      ms += 10U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	330a      	adds	r3, #10
 8006e60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f93f 	bl	80080e6 <USB_GetMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d01e      	beq.n	8006eac <USB_SetCurrentMode+0x84>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e72:	d9f0      	bls.n	8006e56 <USB_SetCurrentMode+0x2e>
 8006e74:	e01a      	b.n	8006eac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d115      	bne.n	8006ea8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e88:	200a      	movs	r0, #10
 8006e8a:	f7fb f9f9 	bl	8002280 <HAL_Delay>
      ms += 10U;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	330a      	adds	r3, #10
 8006e92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f926 	bl	80080e6 <USB_GetMode>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <USB_SetCurrentMode+0x84>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ea4:	d9f0      	bls.n	8006e88 <USB_SetCurrentMode+0x60>
 8006ea6:	e001      	b.n	8006eac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e005      	b.n	8006eb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2bc8      	cmp	r3, #200	@ 0xc8
 8006eb0:	d101      	bne.n	8006eb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	e009      	b.n	8006ef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3340      	adds	r3, #64	@ 0x40
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b0e      	cmp	r3, #14
 8006ef8:	d9f2      	bls.n	8006ee0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006efa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d11c      	bne.n	8006f3c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f10:	f043 0302 	orr.w	r3, r3, #2
 8006f14:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f3a:	e00b      	b.n	8006f54 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f40:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d10d      	bne.n	8006f84 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f70:	2100      	movs	r1, #0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f968 	bl	8007248 <USB_SetDevSpeed>
 8006f78:	e008      	b.n	8006f8c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f963 	bl	8007248 <USB_SetDevSpeed>
 8006f82:	e003      	b.n	8006f8c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f84:	2103      	movs	r1, #3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f95e 	bl	8007248 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f8c:	2110      	movs	r1, #16
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f8fa 	bl	8007188 <USB_FlushTxFifo>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f924 	bl	80071ec <USB_FlushRxFifo>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fcc:	461a      	mov	r2, r3
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	e043      	b.n	8007060 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fee:	d118      	bne.n	8007022 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007002:	461a      	mov	r2, r3
 8007004:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	e013      	b.n	8007034 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007018:	461a      	mov	r2, r3
 800701a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	e008      	b.n	8007034 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702e:	461a      	mov	r2, r3
 8007030:	2300      	movs	r3, #0
 8007032:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007040:	461a      	mov	r2, r3
 8007042:	2300      	movs	r3, #0
 8007044:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007052:	461a      	mov	r2, r3
 8007054:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007058:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	3301      	adds	r3, #1
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007064:	461a      	mov	r2, r3
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4293      	cmp	r3, r2
 800706a:	d3b5      	bcc.n	8006fd8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	e043      	b.n	80070fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007088:	d118      	bne.n	80070bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709c:	461a      	mov	r2, r3
 800709e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	e013      	b.n	80070ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b2:	461a      	mov	r2, r3
 80070b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	e008      	b.n	80070ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c8:	461a      	mov	r2, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070da:	461a      	mov	r2, r3
 80070dc:	2300      	movs	r3, #0
 80070de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ec:	461a      	mov	r2, r3
 80070ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	3301      	adds	r3, #1
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070fe:	461a      	mov	r2, r3
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	4293      	cmp	r3, r2
 8007104:	d3b5      	bcc.n	8007072 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007118:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007126:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f043 0210 	orr.w	r2, r3, #16
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <USB_DevInit+0x2c4>)
 8007142:	4313      	orrs	r3, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007148:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f043 0208 	orr.w	r2, r3, #8
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800715c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007160:	2b01      	cmp	r3, #1
 8007162:	d107      	bne.n	8007174 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800716c:	f043 0304 	orr.w	r3, r3, #4
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007180:	b004      	add	sp, #16
 8007182:	4770      	bx	lr
 8007184:	803c3800 	.word	0x803c3800

08007188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071a2:	d901      	bls.n	80071a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e01b      	b.n	80071e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	daf2      	bge.n	8007196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	019b      	lsls	r3, r3, #6
 80071b8:	f043 0220 	orr.w	r2, r3, #32
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071cc:	d901      	bls.n	80071d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e006      	b.n	80071e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d0f0      	beq.n	80071c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007204:	d901      	bls.n	800720a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e018      	b.n	800723c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	daf2      	bge.n	80071f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2210      	movs	r2, #16
 800721a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007228:	d901      	bls.n	800722e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e006      	b.n	800723c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b10      	cmp	r3, #16
 8007238:	d0f0      	beq.n	800721c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	68f9      	ldr	r1, [r7, #12]
 8007264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007268:	4313      	orrs	r3, r2
 800726a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800727a:	b480      	push	{r7}
 800727c:	b087      	sub	sp, #28
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 0306 	and.w	r3, r3, #6
 8007292:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e00a      	b.n	80072b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d002      	beq.n	80072ac <USB_GetDevSpeed+0x32>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b06      	cmp	r3, #6
 80072aa:	d102      	bne.n	80072b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072ac:	2302      	movs	r3, #2
 80072ae:	75fb      	strb	r3, [r7, #23]
 80072b0:	e001      	b.n	80072b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072b2:	230f      	movs	r3, #15
 80072b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	785b      	ldrb	r3, [r3, #1]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d13a      	bne.n	8007356 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	2101      	movs	r1, #1
 80072f2:	fa01 f303 	lsl.w	r3, r1, r3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	68f9      	ldr	r1, [r7, #12]
 80072fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072fe:	4313      	orrs	r3, r2
 8007300:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d155      	bne.n	80073c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	791b      	ldrb	r3, [r3, #4]
 8007332:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007334:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	059b      	lsls	r3, r3, #22
 800733a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800733c:	4313      	orrs	r3, r2
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800734a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800734e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e036      	b.n	80073c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	2101      	movs	r1, #1
 8007368:	fa01 f303 	lsl.w	r3, r1, r3
 800736c:	041b      	lsls	r3, r3, #16
 800736e:	68f9      	ldr	r1, [r7, #12]
 8007370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007374:	4313      	orrs	r3, r2
 8007376:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d11a      	bne.n	80073c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	791b      	ldrb	r3, [r3, #4]
 80073a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073aa:	430b      	orrs	r3, r1
 80073ac:	4313      	orrs	r3, r2
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
	...

080073d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	785b      	ldrb	r3, [r3, #1]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d161      	bne.n	80074b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007406:	d11f      	bne.n	8007448 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	440a      	add	r2, r1
 800741e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007422:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007426:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007442:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007446:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800744e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	2101      	movs	r1, #1
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	b29b      	uxth	r3, r3
 8007460:	43db      	mvns	r3, r3
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007468:	4013      	ands	r3, r2
 800746a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	2101      	movs	r1, #1
 800747e:	fa01 f303 	lsl.w	r3, r1, r3
 8007482:	b29b      	uxth	r3, r3
 8007484:	43db      	mvns	r3, r3
 8007486:	68f9      	ldr	r1, [r7, #12]
 8007488:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800748c:	4013      	ands	r3, r2
 800748e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	0159      	lsls	r1, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	440b      	add	r3, r1
 80074a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074aa:	4619      	mov	r1, r3
 80074ac:	4b35      	ldr	r3, [pc, #212]	@ (8007584 <USB_DeactivateEndpoint+0x1b0>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	600b      	str	r3, [r1, #0]
 80074b2:	e060      	b.n	8007576 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ca:	d11f      	bne.n	800750c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007506:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800750a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	2101      	movs	r1, #1
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	041b      	lsls	r3, r3, #16
 8007524:	43db      	mvns	r3, r3
 8007526:	68f9      	ldr	r1, [r7, #12]
 8007528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800752c:	4013      	ands	r3, r2
 800752e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	2101      	movs	r1, #1
 8007542:	fa01 f303 	lsl.w	r3, r1, r3
 8007546:	041b      	lsls	r3, r3, #16
 8007548:	43db      	mvns	r3, r3
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007550:	4013      	ands	r3, r2
 8007552:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	0159      	lsls	r1, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	440b      	add	r3, r1
 800756a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800756e:	4619      	mov	r1, r3
 8007570:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <USB_DeactivateEndpoint+0x1b4>)
 8007572:	4013      	ands	r3, r2
 8007574:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	ec337800 	.word	0xec337800
 8007588:	eff37800 	.word	0xeff37800

0800758c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b08a      	sub	sp, #40	@ 0x28
 8007590:	af02      	add	r7, sp, #8
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	f040 817f 	bne.w	80078ac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d132      	bne.n	800761c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	0151      	lsls	r1, r2, #5
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	440a      	add	r2, r1
 80075cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80075d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80075d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	0151      	lsls	r1, r2, #5
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	440a      	add	r2, r1
 80075f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007614:	0cdb      	lsrs	r3, r3, #19
 8007616:	04db      	lsls	r3, r3, #19
 8007618:	6113      	str	r3, [r2, #16]
 800761a:	e097      	b.n	800774c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	015a      	lsls	r2, r3, #5
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	4413      	add	r3, r2
 8007624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	0151      	lsls	r1, r2, #5
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	440a      	add	r2, r1
 8007632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007636:	0cdb      	lsrs	r3, r3, #19
 8007638:	04db      	lsls	r3, r3, #19
 800763a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007656:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800765a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800765e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d11a      	bne.n	800769c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	429a      	cmp	r2, r3
 8007670:	d903      	bls.n	800767a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	69fa      	ldr	r2, [r7, #28]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007694:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007698:	6113      	str	r3, [r2, #16]
 800769a:	e044      	b.n	8007726 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	4413      	add	r3, r2
 80076a6:	1e5a      	subs	r2, r3, #1
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	8afb      	ldrh	r3, [r7, #22]
 80076c2:	04d9      	lsls	r1, r3, #19
 80076c4:	4ba4      	ldr	r3, [pc, #656]	@ (8007958 <USB_EPStartXfer+0x3cc>)
 80076c6:	400b      	ands	r3, r1
 80076c8:	69b9      	ldr	r1, [r7, #24]
 80076ca:	0148      	lsls	r0, r1, #5
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	4401      	add	r1, r0
 80076d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076d4:	4313      	orrs	r3, r2
 80076d6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d122      	bne.n	8007726 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076fa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80076fe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800770c:	691a      	ldr	r2, [r3, #16]
 800770e:	8afb      	ldrh	r3, [r7, #22]
 8007710:	075b      	lsls	r3, r3, #29
 8007712:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007716:	69b9      	ldr	r1, [r7, #24]
 8007718:	0148      	lsls	r0, r1, #5
 800771a:	69f9      	ldr	r1, [r7, #28]
 800771c:	4401      	add	r1, r0
 800771e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007722:	4313      	orrs	r3, r2
 8007724:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800773c:	69b9      	ldr	r1, [r7, #24]
 800773e:	0148      	lsls	r0, r1, #5
 8007740:	69f9      	ldr	r1, [r7, #28]
 8007742:	4401      	add	r1, r0
 8007744:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007748:	4313      	orrs	r3, r2
 800774a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d14b      	bne.n	80077ea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d009      	beq.n	800776e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007766:	461a      	mov	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	791b      	ldrb	r3, [r3, #4]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d128      	bne.n	80077c8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d110      	bne.n	80077a8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	e00f      	b.n	80077c8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	69fa      	ldr	r2, [r7, #28]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077c6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	69fa      	ldr	r2, [r7, #28]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	e166      	b.n	8007ab8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007804:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007808:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	791b      	ldrb	r3, [r3, #4]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d015      	beq.n	800783e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 814e 	beq.w	8007ab8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 030f 	and.w	r3, r3, #15
 800782c:	2101      	movs	r1, #1
 800782e:	fa01 f303 	lsl.w	r3, r1, r3
 8007832:	69f9      	ldr	r1, [r7, #28]
 8007834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007838:	4313      	orrs	r3, r2
 800783a:	634b      	str	r3, [r1, #52]	@ 0x34
 800783c:	e13c      	b.n	8007ab8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d110      	bne.n	8007870 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	0151      	lsls	r1, r2, #5
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	440a      	add	r2, r1
 8007864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007868:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	e00f      	b.n	8007890 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	440a      	add	r2, r1
 8007886:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800788a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800788e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	68d9      	ldr	r1, [r3, #12]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	781a      	ldrb	r2, [r3, #0]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	b298      	uxth	r0, r3
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	4603      	mov	r3, r0
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f9b9 	bl	8007c1c <USB_WritePacket>
 80078aa:	e105      	b.n	8007ab8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c6:	0cdb      	lsrs	r3, r3, #19
 80078c8:	04db      	lsls	r3, r3, #19
 80078ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078ee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d132      	bne.n	800795c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791a:	691a      	ldr	r2, [r3, #16]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007924:	69b9      	ldr	r1, [r7, #24]
 8007926:	0148      	lsls	r0, r1, #5
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	4401      	add	r1, r0
 800792c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007930:	4313      	orrs	r3, r2
 8007932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800794e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007952:	6113      	str	r3, [r2, #16]
 8007954:	e062      	b.n	8007a1c <USB_EPStartXfer+0x490>
 8007956:	bf00      	nop
 8007958:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d123      	bne.n	80079ac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800797a:	69b9      	ldr	r1, [r7, #24]
 800797c:	0148      	lsls	r0, r1, #5
 800797e:	69f9      	ldr	r1, [r7, #28]
 8007980:	4401      	add	r1, r0
 8007982:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007986:	4313      	orrs	r3, r2
 8007988:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079a8:	6113      	str	r3, [r2, #16]
 80079aa:	e037      	b.n	8007a1c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	4413      	add	r3, r2
 80079b6:	1e5a      	subs	r2, r3, #1
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	8afa      	ldrh	r2, [r7, #22]
 80079c8:	fb03 f202 	mul.w	r2, r3, r2
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	8afb      	ldrh	r3, [r7, #22]
 80079e0:	04d9      	lsls	r1, r3, #19
 80079e2:	4b38      	ldr	r3, [pc, #224]	@ (8007ac4 <USB_EPStartXfer+0x538>)
 80079e4:	400b      	ands	r3, r1
 80079e6:	69b9      	ldr	r1, [r7, #24]
 80079e8:	0148      	lsls	r0, r1, #5
 80079ea:	69f9      	ldr	r1, [r7, #28]
 80079ec:	4401      	add	r1, r0
 80079ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079f2:	4313      	orrs	r3, r2
 80079f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a0c:	69b9      	ldr	r1, [r7, #24]
 8007a0e:	0148      	lsls	r0, r1, #5
 8007a10:	69f9      	ldr	r1, [r7, #28]
 8007a12:	4401      	add	r1, r0
 8007a14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d10d      	bne.n	8007a3e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	68d9      	ldr	r1, [r3, #12]
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	791b      	ldrb	r3, [r3, #4]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d128      	bne.n	8007a98 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d110      	bne.n	8007a78 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	0151      	lsls	r1, r2, #5
 8007a68:	69fa      	ldr	r2, [r7, #28]
 8007a6a:	440a      	add	r2, r1
 8007a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e00f      	b.n	8007a98 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ab2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	1ff80000 	.word	0x1ff80000

08007ac8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d14a      	bne.n	8007b7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007afa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007afe:	f040 8086 	bne.w	8007c0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	7812      	ldrb	r2, [r2, #0]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b20:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	7812      	ldrb	r2, [r2, #0]
 8007b3a:	0151      	lsls	r1, r2, #5
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	440a      	add	r2, r1
 8007b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d902      	bls.n	8007b60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b5e:	e056      	b.n	8007c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b78:	d0e7      	beq.n	8007b4a <USB_EPStopXfer+0x82>
 8007b7a:	e048      	b.n	8007c0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b94:	d13b      	bne.n	8007c0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007bb8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bdc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3301      	adds	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d902      	bls.n	8007bf4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8007bf2:	e00c      	b.n	8007c0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c0c:	d0e7      	beq.n	8007bde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	371c      	adds	r7, #28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b089      	sub	sp, #36	@ 0x24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	71fb      	strb	r3, [r7, #7]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d123      	bne.n	8007c8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c42:	88bb      	ldrh	r3, [r7, #4]
 8007c44:	3303      	adds	r3, #3
 8007c46:	089b      	lsrs	r3, r3, #2
 8007c48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	e018      	b.n	8007c82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	031a      	lsls	r2, r3, #12
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	3301      	adds	r3, #1
 8007c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	3301      	adds	r3, #1
 8007c74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	61bb      	str	r3, [r7, #24]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d3e2      	bcc.n	8007c50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3724      	adds	r7, #36	@ 0x24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b08b      	sub	sp, #44	@ 0x2c
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007cae:	88fb      	ldrh	r3, [r7, #6]
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	623b      	str	r3, [r7, #32]
 8007cc2:	e014      	b.n	8007cee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	3301      	adds	r3, #1
 8007cda:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	3301      	adds	r3, #1
 8007ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	3301      	adds	r3, #1
 8007cec:	623b      	str	r3, [r7, #32]
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d3e6      	bcc.n	8007cc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007cf6:	8bfb      	ldrh	r3, [r7, #30]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01e      	beq.n	8007d3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d06:	461a      	mov	r2, r3
 8007d08:	f107 0310 	add.w	r3, r7, #16
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d20:	701a      	strb	r2, [r3, #0]
      i++;
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	3301      	adds	r3, #1
 8007d26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007d2e:	8bfb      	ldrh	r3, [r7, #30]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d34:	8bfb      	ldrh	r3, [r7, #30]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1ea      	bne.n	8007d10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	372c      	adds	r7, #44	@ 0x2c
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d12c      	bne.n	8007dbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db12      	blt.n	8007d9c <USB_EPSetStall+0x54>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00f      	beq.n	8007d9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007db6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	e02b      	b.n	8007e16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	db12      	blt.n	8007df6 <USB_EPSetStall+0xae>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00f      	beq.n	8007df6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007df0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007df4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d128      	bne.n	8007e92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	791b      	ldrb	r3, [r3, #4]
 8007e64:	2b03      	cmp	r3, #3
 8007e66:	d003      	beq.n	8007e70 <USB_EPClearStall+0x4c>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	791b      	ldrb	r3, [r3, #4]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d138      	bne.n	8007ee2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	e027      	b.n	8007ee2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007eb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	791b      	ldrb	r3, [r3, #4]
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d003      	beq.n	8007ec2 <USB_EPClearStall+0x9e>
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	791b      	ldrb	r3, [r3, #4]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d10f      	bne.n	8007ee2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ee0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007f12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	011b      	lsls	r3, r3, #4
 8007f20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f6a:	f023 0302 	bic.w	r3, r3, #2
 8007f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fac:	f043 0302 	orr.w	r3, r3, #2
 8007fb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	4013      	ands	r3, r2
 8008008:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	0c1b      	lsrs	r3, r3, #16
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	b29b      	uxth	r3, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4013      	ands	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800807c:	68bb      	ldr	r3, [r7, #8]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800808a:	b480      	push	{r7}
 800808c:	b087      	sub	sp, #28
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ba:	01db      	lsls	r3, r3, #7
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	4013      	ands	r3, r2
 80080d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d8:	68bb      	ldr	r3, [r7, #8]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	f003 0301 	and.w	r3, r3, #1
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800811c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008120:	f023 0307 	bic.w	r3, r3, #7
 8008124:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008138:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	460b      	mov	r3, r1
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	333c      	adds	r3, #60	@ 0x3c
 800815e:	3304      	adds	r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4a26      	ldr	r2, [pc, #152]	@ (8008200 <USB_EP0_OutStart+0xb8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d90a      	bls.n	8008182 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800817c:	d101      	bne.n	8008182 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e037      	b.n	80081f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008188:	461a      	mov	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800819c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081b0:	f043 0318 	orr.w	r3, r3, #24
 80081b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80081c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d10f      	bne.n	80081f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80081ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	4f54300a 	.word	0x4f54300a

08008204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800821c:	d901      	bls.n	8008222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e01b      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	daf2      	bge.n	8008210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f043 0201 	orr.w	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008246:	d901      	bls.n	800824c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e006      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b01      	cmp	r3, #1
 8008256:	d0f0      	beq.n	800823a <USB_CoreReset+0x36>

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008274:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008278:	f002 fc46 	bl	800ab08 <USBD_static_malloc>
 800827c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d109      	bne.n	8008298 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	32b0      	adds	r2, #176	@ 0xb0
 800828e:	2100      	movs	r1, #0
 8008290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008294:	2302      	movs	r3, #2
 8008296:	e0d4      	b.n	8008442 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008298:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800829c:	2100      	movs	r1, #0
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f002 fe80 	bl	800afa4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	32b0      	adds	r2, #176	@ 0xb0
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	32b0      	adds	r2, #176	@ 0xb0
 80082be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7c1b      	ldrb	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d138      	bne.n	8008342 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082d0:	4b5e      	ldr	r3, [pc, #376]	@ (800844c <USBD_CDC_Init+0x1e4>)
 80082d2:	7819      	ldrb	r1, [r3, #0]
 80082d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082d8:	2202      	movs	r2, #2
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f002 faf1 	bl	800a8c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082e0:	4b5a      	ldr	r3, [pc, #360]	@ (800844c <USBD_CDC_Init+0x1e4>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 020f 	and.w	r2, r3, #15
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3324      	adds	r3, #36	@ 0x24
 80082f6:	2201      	movs	r2, #1
 80082f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082fa:	4b55      	ldr	r3, [pc, #340]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 80082fc:	7819      	ldrb	r1, [r3, #0]
 80082fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008302:	2202      	movs	r2, #2
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f002 fadc 	bl	800a8c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800830a:	4b51      	ldr	r3, [pc, #324]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	f003 020f 	and.w	r2, r3, #15
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008322:	2201      	movs	r2, #1
 8008324:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008326:	4b4b      	ldr	r3, [pc, #300]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	f003 020f 	and.w	r2, r3, #15
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	3326      	adds	r3, #38	@ 0x26
 800833c:	2210      	movs	r2, #16
 800833e:	801a      	strh	r2, [r3, #0]
 8008340:	e035      	b.n	80083ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008342:	4b42      	ldr	r3, [pc, #264]	@ (800844c <USBD_CDC_Init+0x1e4>)
 8008344:	7819      	ldrb	r1, [r3, #0]
 8008346:	2340      	movs	r3, #64	@ 0x40
 8008348:	2202      	movs	r2, #2
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f002 fab9 	bl	800a8c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008350:	4b3e      	ldr	r3, [pc, #248]	@ (800844c <USBD_CDC_Init+0x1e4>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 020f 	and.w	r2, r3, #15
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	3324      	adds	r3, #36	@ 0x24
 8008366:	2201      	movs	r2, #1
 8008368:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800836a:	4b39      	ldr	r3, [pc, #228]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800836c:	7819      	ldrb	r1, [r3, #0]
 800836e:	2340      	movs	r3, #64	@ 0x40
 8008370:	2202      	movs	r2, #2
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f002 faa5 	bl	800a8c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008378:	4b35      	ldr	r3, [pc, #212]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	f003 020f 	and.w	r2, r3, #15
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008390:	2201      	movs	r2, #1
 8008392:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008394:	4b2f      	ldr	r3, [pc, #188]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f003 020f 	and.w	r2, r3, #15
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	3326      	adds	r3, #38	@ 0x26
 80083aa:	2210      	movs	r2, #16
 80083ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083ae:	4b29      	ldr	r3, [pc, #164]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 80083b0:	7819      	ldrb	r1, [r3, #0]
 80083b2:	2308      	movs	r3, #8
 80083b4:	2203      	movs	r2, #3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f002 fa83 	bl	800a8c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80083bc:	4b25      	ldr	r3, [pc, #148]	@ (8008454 <USBD_CDC_Init+0x1ec>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 020f 	and.w	r2, r3, #15
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	440b      	add	r3, r1
 80083d0:	3324      	adds	r3, #36	@ 0x24
 80083d2:	2201      	movs	r2, #1
 80083d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	33b0      	adds	r3, #176	@ 0xb0
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800840c:	2302      	movs	r3, #2
 800840e:	e018      	b.n	8008442 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	7c1b      	ldrb	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008418:	4b0d      	ldr	r3, [pc, #52]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 800841a:	7819      	ldrb	r1, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f002 fb3a 	bl	800aaa0 <USBD_LL_PrepareReceive>
 800842c:	e008      	b.n	8008440 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800842e:	4b08      	ldr	r3, [pc, #32]	@ (8008450 <USBD_CDC_Init+0x1e8>)
 8008430:	7819      	ldrb	r1, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008438:	2340      	movs	r3, #64	@ 0x40
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f002 fb30 	bl	800aaa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000097 	.word	0x20000097
 8008450:	20000098 	.word	0x20000098
 8008454:	20000099 	.word	0x20000099

08008458 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008464:	4b3a      	ldr	r3, [pc, #232]	@ (8008550 <USBD_CDC_DeInit+0xf8>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f002 fa4f 	bl	800a90e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008470:	4b37      	ldr	r3, [pc, #220]	@ (8008550 <USBD_CDC_DeInit+0xf8>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	f003 020f 	and.w	r2, r3, #15
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	3324      	adds	r3, #36	@ 0x24
 8008486:	2200      	movs	r2, #0
 8008488:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800848a:	4b32      	ldr	r3, [pc, #200]	@ (8008554 <USBD_CDC_DeInit+0xfc>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f002 fa3c 	bl	800a90e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008496:	4b2f      	ldr	r3, [pc, #188]	@ (8008554 <USBD_CDC_DeInit+0xfc>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 020f 	and.w	r2, r3, #15
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	440b      	add	r3, r1
 80084aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084ae:	2200      	movs	r2, #0
 80084b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80084b2:	4b29      	ldr	r3, [pc, #164]	@ (8008558 <USBD_CDC_DeInit+0x100>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f002 fa28 	bl	800a90e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80084be:	4b26      	ldr	r3, [pc, #152]	@ (8008558 <USBD_CDC_DeInit+0x100>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 020f 	and.w	r2, r3, #15
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	3324      	adds	r3, #36	@ 0x24
 80084d4:	2200      	movs	r2, #0
 80084d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80084d8:	4b1f      	ldr	r3, [pc, #124]	@ (8008558 <USBD_CDC_DeInit+0x100>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f003 020f 	and.w	r2, r3, #15
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	3326      	adds	r3, #38	@ 0x26
 80084ee:	2200      	movs	r2, #0
 80084f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	32b0      	adds	r2, #176	@ 0xb0
 80084fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01f      	beq.n	8008544 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	33b0      	adds	r3, #176	@ 0xb0
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	32b0      	adds	r2, #176	@ 0xb0
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	4618      	mov	r0, r3
 8008528:	f002 fafc 	bl	800ab24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32b0      	adds	r2, #176	@ 0xb0
 8008536:	2100      	movs	r1, #0
 8008538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20000097 	.word	0x20000097
 8008554:	20000098 	.word	0x20000098
 8008558:	20000099 	.word	0x20000099

0800855c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	32b0      	adds	r2, #176	@ 0xb0
 8008570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008574:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008576:	2300      	movs	r3, #0
 8008578:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008588:	2303      	movs	r3, #3
 800858a:	e0bf      	b.n	800870c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008594:	2b00      	cmp	r3, #0
 8008596:	d050      	beq.n	800863a <USBD_CDC_Setup+0xde>
 8008598:	2b20      	cmp	r3, #32
 800859a:	f040 80af 	bne.w	80086fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	88db      	ldrh	r3, [r3, #6]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d03a      	beq.n	800861c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da1b      	bge.n	80085e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	33b0      	adds	r3, #176	@ 0xb0
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80085c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	88d2      	ldrh	r2, [r2, #6]
 80085cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	88db      	ldrh	r3, [r3, #6]
 80085d2:	2b07      	cmp	r3, #7
 80085d4:	bf28      	it	cs
 80085d6:	2307      	movcs	r3, #7
 80085d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	89fa      	ldrh	r2, [r7, #14]
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fd53 	bl	800a08c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80085e6:	e090      	b.n	800870a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	785a      	ldrb	r2, [r3, #1]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	88db      	ldrh	r3, [r3, #6]
 80085f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80085f8:	d803      	bhi.n	8008602 <USBD_CDC_Setup+0xa6>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88db      	ldrh	r3, [r3, #6]
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	e000      	b.n	8008604 <USBD_CDC_Setup+0xa8>
 8008602:	2240      	movs	r2, #64	@ 0x40
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800860a:	6939      	ldr	r1, [r7, #16]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008612:	461a      	mov	r2, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fd65 	bl	800a0e4 <USBD_CtlPrepareRx>
      break;
 800861a:	e076      	b.n	800870a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	33b0      	adds	r3, #176	@ 0xb0
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	7850      	ldrb	r0, [r2, #1]
 8008632:	2200      	movs	r2, #0
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	4798      	blx	r3
      break;
 8008638:	e067      	b.n	800870a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	2b0b      	cmp	r3, #11
 8008640:	d851      	bhi.n	80086e6 <USBD_CDC_Setup+0x18a>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <USBD_CDC_Setup+0xec>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008679 	.word	0x08008679
 800864c:	080086f5 	.word	0x080086f5
 8008650:	080086e7 	.word	0x080086e7
 8008654:	080086e7 	.word	0x080086e7
 8008658:	080086e7 	.word	0x080086e7
 800865c:	080086e7 	.word	0x080086e7
 8008660:	080086e7 	.word	0x080086e7
 8008664:	080086e7 	.word	0x080086e7
 8008668:	080086e7 	.word	0x080086e7
 800866c:	080086e7 	.word	0x080086e7
 8008670:	080086a3 	.word	0x080086a3
 8008674:	080086cd 	.word	0x080086cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b03      	cmp	r3, #3
 8008682:	d107      	bne.n	8008694 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008684:	f107 030a 	add.w	r3, r7, #10
 8008688:	2202      	movs	r2, #2
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fcfd 	bl	800a08c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008692:	e032      	b.n	80086fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fc7b 	bl	8009f92 <USBD_CtlError>
            ret = USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	75fb      	strb	r3, [r7, #23]
          break;
 80086a0:	e02b      	b.n	80086fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d107      	bne.n	80086be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80086ae:	f107 030d 	add.w	r3, r7, #13
 80086b2:	2201      	movs	r2, #1
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fce8 	bl	800a08c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086bc:	e01d      	b.n	80086fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f001 fc66 	bl	8009f92 <USBD_CtlError>
            ret = USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	75fb      	strb	r3, [r7, #23]
          break;
 80086ca:	e016      	b.n	80086fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d00f      	beq.n	80086f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f001 fc59 	bl	8009f92 <USBD_CtlError>
            ret = USBD_FAIL;
 80086e0:	2303      	movs	r3, #3
 80086e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086e4:	e008      	b.n	80086f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f001 fc52 	bl	8009f92 <USBD_CtlError>
          ret = USBD_FAIL;
 80086ee:	2303      	movs	r3, #3
 80086f0:	75fb      	strb	r3, [r7, #23]
          break;
 80086f2:	e002      	b.n	80086fa <USBD_CDC_Setup+0x19e>
          break;
 80086f4:	bf00      	nop
 80086f6:	e008      	b.n	800870a <USBD_CDC_Setup+0x1ae>
          break;
 80086f8:	bf00      	nop
      }
      break;
 80086fa:	e006      	b.n	800870a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f001 fc47 	bl	8009f92 <USBD_CtlError>
      ret = USBD_FAIL;
 8008704:	2303      	movs	r3, #3
 8008706:	75fb      	strb	r3, [r7, #23]
      break;
 8008708:	bf00      	nop
  }

  return (uint8_t)ret;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008726:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32b0      	adds	r2, #176	@ 0xb0
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	e065      	b.n	800880a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	32b0      	adds	r2, #176	@ 0xb0
 8008748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	f003 020f 	and.w	r2, r3, #15
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	3318      	adds	r3, #24
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d02f      	beq.n	80087c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	f003 020f 	and.w	r2, r3, #15
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	3318      	adds	r3, #24
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	78fb      	ldrb	r3, [r7, #3]
 8008780:	f003 010f 	and.w	r1, r3, #15
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	460b      	mov	r3, r1
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	440b      	add	r3, r1
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4403      	add	r3, r0
 8008790:	331c      	adds	r3, #28
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	fbb2 f1f3 	udiv	r1, r2, r3
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d112      	bne.n	80087c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	f003 020f 	and.w	r2, r3, #15
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	3318      	adds	r3, #24
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80087ba:	78f9      	ldrb	r1, [r7, #3]
 80087bc:	2300      	movs	r3, #0
 80087be:	2200      	movs	r2, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f002 f94c 	bl	800aa5e <USBD_LL_Transmit>
 80087c6:	e01f      	b.n	8008808 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	33b0      	adds	r3, #176	@ 0xb0
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d010      	beq.n	8008808 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	33b0      	adds	r3, #176	@ 0xb0
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008804:	78fa      	ldrb	r2, [r7, #3]
 8008806:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	32b0      	adds	r2, #176	@ 0xb0
 8008828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	@ 0xb0
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008840:	2303      	movs	r3, #3
 8008842:	e01a      	b.n	800887a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f002 f94a 	bl	800aae2 <USBD_LL_GetRxDataSize>
 800884e:	4602      	mov	r2, r0
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	33b0      	adds	r3, #176	@ 0xb0
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008874:	4611      	mov	r1, r2
 8008876:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	32b0      	adds	r2, #176	@ 0xb0
 8008894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008898:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e024      	b.n	80088ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	33b0      	adds	r3, #176	@ 0xb0
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d019      	beq.n	80088ec <USBD_CDC_EP0_RxReady+0x6a>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80088be:	2bff      	cmp	r3, #255	@ 0xff
 80088c0:	d014      	beq.n	80088ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	33b0      	adds	r3, #176	@ 0xb0
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80088da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	22ff      	movs	r2, #255	@ 0xff
 80088e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008900:	2182      	movs	r1, #130	@ 0x82
 8008902:	4818      	ldr	r0, [pc, #96]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008904:	f000 fd0f 	bl	8009326 <USBD_GetEpDesc>
 8008908:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800890a:	2101      	movs	r1, #1
 800890c:	4815      	ldr	r0, [pc, #84]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800890e:	f000 fd0a 	bl	8009326 <USBD_GetEpDesc>
 8008912:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008914:	2181      	movs	r1, #129	@ 0x81
 8008916:	4813      	ldr	r0, [pc, #76]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008918:	f000 fd05 	bl	8009326 <USBD_GetEpDesc>
 800891c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2210      	movs	r2, #16
 8008928:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d006      	beq.n	800893e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	2200      	movs	r2, #0
 8008934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008938:	711a      	strb	r2, [r3, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d006      	beq.n	8008952 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800894c:	711a      	strb	r2, [r3, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2243      	movs	r2, #67	@ 0x43
 8008956:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008958:	4b02      	ldr	r3, [pc, #8]	@ (8008964 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000054 	.word	0x20000054

08008968 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008970:	2182      	movs	r1, #130	@ 0x82
 8008972:	4818      	ldr	r0, [pc, #96]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008974:	f000 fcd7 	bl	8009326 <USBD_GetEpDesc>
 8008978:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800897a:	2101      	movs	r1, #1
 800897c:	4815      	ldr	r0, [pc, #84]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800897e:	f000 fcd2 	bl	8009326 <USBD_GetEpDesc>
 8008982:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008984:	2181      	movs	r1, #129	@ 0x81
 8008986:	4813      	ldr	r0, [pc, #76]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008988:	f000 fccd 	bl	8009326 <USBD_GetEpDesc>
 800898c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2210      	movs	r2, #16
 8008998:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d006      	beq.n	80089ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2200      	movs	r2, #0
 80089a4:	711a      	strb	r2, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f042 0202 	orr.w	r2, r2, #2
 80089ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d006      	beq.n	80089c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	711a      	strb	r2, [r3, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f042 0202 	orr.w	r2, r2, #2
 80089c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2243      	movs	r2, #67	@ 0x43
 80089c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089c8:	4b02      	ldr	r3, [pc, #8]	@ (80089d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000054 	.word	0x20000054

080089d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089e0:	2182      	movs	r1, #130	@ 0x82
 80089e2:	4818      	ldr	r0, [pc, #96]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089e4:	f000 fc9f 	bl	8009326 <USBD_GetEpDesc>
 80089e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089ea:	2101      	movs	r1, #1
 80089ec:	4815      	ldr	r0, [pc, #84]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089ee:	f000 fc9a 	bl	8009326 <USBD_GetEpDesc>
 80089f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089f4:	2181      	movs	r1, #129	@ 0x81
 80089f6:	4813      	ldr	r0, [pc, #76]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089f8:	f000 fc95 	bl	8009326 <USBD_GetEpDesc>
 80089fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2210      	movs	r2, #16
 8008a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d006      	beq.n	8008a1e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a18:	711a      	strb	r2, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a2c:	711a      	strb	r2, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2243      	movs	r2, #67	@ 0x43
 8008a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a38:	4b02      	ldr	r3, [pc, #8]	@ (8008a44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000054 	.word	0x20000054

08008a48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	220a      	movs	r2, #10
 8008a54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a56:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20000010 	.word	0x20000010

08008a68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e009      	b.n	8008a90 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	33b0      	adds	r3, #176	@ 0xb0
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	32b0      	adds	r2, #176	@ 0xb0
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e008      	b.n	8008ad4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	32b0      	adds	r2, #176	@ 0xb0
 8008af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e004      	b.n	8008b0e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
	...

08008b1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	32b0      	adds	r2, #176	@ 0xb0
 8008b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	32b0      	adds	r2, #176	@ 0xb0
 8008b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e018      	b.n	8008b7c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	7c1b      	ldrb	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b52:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <USBD_CDC_ReceivePacket+0x68>)
 8008b54:	7819      	ldrb	r1, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 ff9d 	bl	800aaa0 <USBD_LL_PrepareReceive>
 8008b66:	e008      	b.n	8008b7a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b68:	4b06      	ldr	r3, [pc, #24]	@ (8008b84 <USBD_CDC_ReceivePacket+0x68>)
 8008b6a:	7819      	ldrb	r1, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b72:	2340      	movs	r3, #64	@ 0x40
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 ff93 	bl	800aaa0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20000098 	.word	0x20000098

08008b88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e01f      	b.n	8008be0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	79fa      	ldrb	r2, [r7, #7]
 8008bd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f001 fe0d 	bl	800a7f4 <USBD_LL_Init>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e025      	b.n	8008c4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	32ae      	adds	r2, #174	@ 0xae
 8008c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00f      	beq.n	8008c3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	32ae      	adds	r2, #174	@ 0xae
 8008c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2c:	f107 020e 	add.w	r2, r7, #14
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
 8008c34:	4602      	mov	r2, r0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f001 fe15 	bl	800a88c <USBD_LL_Start>
 8008c62:	4603      	mov	r3, r0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b084      	sub	sp, #16
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d009      	beq.n	8008cb0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	78fa      	ldrb	r2, [r7, #3]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	4798      	blx	r3
 8008cac:	4603      	mov	r3, r0
 8008cae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 f90c 	bl	8009f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d14:	461a      	mov	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d22:	f003 031f 	and.w	r3, r3, #31
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d01a      	beq.n	8008d60 <USBD_LL_SetupStage+0x72>
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d822      	bhi.n	8008d74 <USBD_LL_SetupStage+0x86>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <USBD_LL_SetupStage+0x4a>
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d00a      	beq.n	8008d4c <USBD_LL_SetupStage+0x5e>
 8008d36:	e01d      	b.n	8008d74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fb63 	bl	800940c <USBD_StdDevReq>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4a:	e020      	b.n	8008d8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fbcb 	bl	80094f0 <USBD_StdItfReq>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d5e:	e016      	b.n	8008d8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fc2d 	bl	80095c8 <USBD_StdEPReq>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]
      break;
 8008d72:	e00c      	b.n	8008d8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fde2 	bl	800a94c <USBD_LL_StallEP>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8c:	bf00      	nop
  }

  return ret;
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	460b      	mov	r3, r1
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008daa:	7afb      	ldrb	r3, [r7, #11]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d16e      	bne.n	8008e8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008db6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	f040 8098 	bne.w	8008ef4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d913      	bls.n	8008df8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	1ad2      	subs	r2, r2, r3
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	4293      	cmp	r3, r2
 8008de8:	bf28      	it	cs
 8008dea:	4613      	movcs	r3, r2
 8008dec:	461a      	mov	r2, r3
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f001 f994 	bl	800a11e <USBD_CtlContinueRx>
 8008df6:	e07d      	b.n	8008ef4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dfe:	f003 031f 	and.w	r3, r3, #31
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d014      	beq.n	8008e30 <USBD_LL_DataOutStage+0x98>
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d81d      	bhi.n	8008e46 <USBD_LL_DataOutStage+0xae>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d002      	beq.n	8008e14 <USBD_LL_DataOutStage+0x7c>
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d003      	beq.n	8008e1a <USBD_LL_DataOutStage+0x82>
 8008e12:	e018      	b.n	8008e46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	75bb      	strb	r3, [r7, #22]
            break;
 8008e18:	e018      	b.n	8008e4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	4619      	mov	r1, r3
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fa64 	bl	80092f2 <USBD_CoreFindIF>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e2e:	e00d      	b.n	8008e4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	4619      	mov	r1, r3
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fa66 	bl	800930c <USBD_CoreFindEP>
 8008e40:	4603      	mov	r3, r0
 8008e42:	75bb      	strb	r3, [r7, #22]
            break;
 8008e44:	e002      	b.n	8008e4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75bb      	strb	r3, [r7, #22]
            break;
 8008e4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e4c:	7dbb      	ldrb	r3, [r7, #22]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d119      	bne.n	8008e86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d113      	bne.n	8008e86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e5e:	7dba      	ldrb	r2, [r7, #22]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	32ae      	adds	r2, #174	@ 0xae
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e6e:	7dba      	ldrb	r2, [r7, #22]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e76:	7dba      	ldrb	r2, [r7, #22]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	32ae      	adds	r2, #174	@ 0xae
 8008e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f001 f95a 	bl	800a140 <USBD_CtlSendStatus>
 8008e8c:	e032      	b.n	8008ef4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e8e:	7afb      	ldrb	r3, [r7, #11]
 8008e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	4619      	mov	r1, r3
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 fa37 	bl	800930c <USBD_CoreFindEP>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ea2:	7dbb      	ldrb	r3, [r7, #22]
 8008ea4:	2bff      	cmp	r3, #255	@ 0xff
 8008ea6:	d025      	beq.n	8008ef4 <USBD_LL_DataOutStage+0x15c>
 8008ea8:	7dbb      	ldrb	r3, [r7, #22]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d122      	bne.n	8008ef4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d117      	bne.n	8008eea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008eba:	7dba      	ldrb	r2, [r7, #22]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	32ae      	adds	r2, #174	@ 0xae
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00f      	beq.n	8008eea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008eca:	7dba      	ldrb	r2, [r7, #22]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008ed2:	7dba      	ldrb	r2, [r7, #22]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	32ae      	adds	r2, #174	@ 0xae
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	7afa      	ldrb	r2, [r7, #11]
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	e000      	b.n	8008ef6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b086      	sub	sp, #24
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	460b      	mov	r3, r1
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f0c:	7afb      	ldrb	r3, [r7, #11]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d16f      	bne.n	8008ff2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3314      	adds	r3, #20
 8008f16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d15a      	bne.n	8008fd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	689a      	ldr	r2, [r3, #8]
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d914      	bls.n	8008f58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	1ad2      	subs	r2, r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f001 f8bc 	bl	800a0c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2100      	movs	r1, #0
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f001 fda5 	bl	800aaa0 <USBD_LL_PrepareReceive>
 8008f56:	e03f      	b.n	8008fd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d11c      	bne.n	8008f9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d316      	bcc.n	8008f9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d20f      	bcs.n	8008f9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2100      	movs	r1, #0
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f001 f89d 	bl	800a0c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f90:	2300      	movs	r3, #0
 8008f92:	2200      	movs	r2, #0
 8008f94:	2100      	movs	r1, #0
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f001 fd82 	bl	800aaa0 <USBD_LL_PrepareReceive>
 8008f9c:	e01c      	b.n	8008fd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d10f      	bne.n	8008fca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d009      	beq.n	8008fca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fca:	2180      	movs	r1, #128	@ 0x80
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f001 fcbd 	bl	800a94c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f001 f8c7 	bl	800a166 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d03a      	beq.n	8009058 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f7ff fe42 	bl	8008c6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008ff0:	e032      	b.n	8009058 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f985 	bl	800930c <USBD_CoreFindEP>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2bff      	cmp	r3, #255	@ 0xff
 800900a:	d025      	beq.n	8009058 <USBD_LL_DataInStage+0x15a>
 800900c:	7dfb      	ldrb	r3, [r7, #23]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d122      	bne.n	8009058 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d11c      	bne.n	8009058 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800901e:	7dfa      	ldrb	r2, [r7, #23]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	32ae      	adds	r2, #174	@ 0xae
 8009024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d014      	beq.n	8009058 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800902e:	7dfa      	ldrb	r2, [r7, #23]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009036:	7dfa      	ldrb	r2, [r7, #23]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	32ae      	adds	r2, #174	@ 0xae
 800903c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	7afa      	ldrb	r2, [r7, #11]
 8009044:	4611      	mov	r1, r2
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	4798      	blx	r3
 800904a:	4603      	mov	r3, r0
 800904c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800904e:	7dbb      	ldrb	r3, [r7, #22]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d001      	beq.n	8009058 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009054:	7dbb      	ldrb	r3, [r7, #22]
 8009056:	e000      	b.n	800905a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d014      	beq.n	80090c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00e      	beq.n	80090c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6852      	ldr	r2, [r2, #4]
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	4611      	mov	r1, r2
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	4798      	blx	r3
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090c8:	2340      	movs	r3, #64	@ 0x40
 80090ca:	2200      	movs	r2, #0
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 fbf7 	bl	800a8c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2240      	movs	r2, #64	@ 0x40
 80090e0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090e4:	2340      	movs	r3, #64	@ 0x40
 80090e6:	2200      	movs	r2, #0
 80090e8:	2180      	movs	r1, #128	@ 0x80
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 fbe9 	bl	800a8c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2240      	movs	r2, #64	@ 0x40
 80090fa:	621a      	str	r2, [r3, #32]

  return ret;
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	78fa      	ldrb	r2, [r7, #3]
 8009116:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009118:	2300      	movs	r3, #0
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b04      	cmp	r3, #4
 8009138:	d006      	beq.n	8009148 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009140:	b2da      	uxtb	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2204      	movs	r2, #4
 800914c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b04      	cmp	r3, #4
 8009170:	d106      	bne.n	8009180 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009178:	b2da      	uxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d110      	bne.n	80091c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	32ae      	adds	r2, #174	@ 0xae
 80091e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e01c      	b.n	800922a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d115      	bne.n	8009228 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	@ 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32ae      	adds	r2, #174	@ 0xae
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	4611      	mov	r1, r2
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	32ae      	adds	r2, #174	@ 0xae
 8009248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009250:	2303      	movs	r3, #3
 8009252:	e01c      	b.n	800928e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b03      	cmp	r3, #3
 800925e:	d115      	bne.n	800928c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32ae      	adds	r2, #174	@ 0xae
 800926a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32ae      	adds	r2, #174	@ 0xae
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00e      	beq.n	80092e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	6852      	ldr	r2, [r2, #4]
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	4611      	mov	r1, r2
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80092e4:	2303      	movs	r3, #3
 80092e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009318:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b086      	sub	sp, #24
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	885b      	ldrh	r3, [r3, #2]
 8009342:	b29b      	uxth	r3, r3
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	7812      	ldrb	r2, [r2, #0]
 8009348:	4293      	cmp	r3, r2
 800934a:	d91f      	bls.n	800938c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009352:	e013      	b.n	800937c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009354:	f107 030a 	add.w	r3, r7, #10
 8009358:	4619      	mov	r1, r3
 800935a:	6978      	ldr	r0, [r7, #20]
 800935c:	f000 f81b 	bl	8009396 <USBD_GetNextDesc>
 8009360:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	785b      	ldrb	r3, [r3, #1]
 8009366:	2b05      	cmp	r3, #5
 8009368:	d108      	bne.n	800937c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	789b      	ldrb	r3, [r3, #2]
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	429a      	cmp	r2, r3
 8009376:	d008      	beq.n	800938a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009378:	2300      	movs	r3, #0
 800937a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	885b      	ldrh	r3, [r3, #2]
 8009380:	b29a      	uxth	r2, r3
 8009382:	897b      	ldrh	r3, [r7, #10]
 8009384:	429a      	cmp	r2, r3
 8009386:	d8e5      	bhi.n	8009354 <USBD_GetEpDesc+0x2e>
 8009388:	e000      	b.n	800938c <USBD_GetEpDesc+0x66>
          break;
 800938a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800938c:	693b      	ldr	r3, [r7, #16]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	7812      	ldrb	r2, [r2, #0]
 80093ac:	4413      	add	r3, r2
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093c0:	68fb      	ldr	r3, [r7, #12]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b087      	sub	sp, #28
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	3301      	adds	r3, #1
 80093e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	b21a      	sxth	r2, r3
 80093f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	b21b      	sxth	r3, r3
 80093fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093fe:	89fb      	ldrh	r3, [r7, #14]
}
 8009400:	4618      	mov	r0, r3
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009422:	2b40      	cmp	r3, #64	@ 0x40
 8009424:	d005      	beq.n	8009432 <USBD_StdDevReq+0x26>
 8009426:	2b40      	cmp	r3, #64	@ 0x40
 8009428:	d857      	bhi.n	80094da <USBD_StdDevReq+0xce>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00f      	beq.n	800944e <USBD_StdDevReq+0x42>
 800942e:	2b20      	cmp	r3, #32
 8009430:	d153      	bne.n	80094da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	32ae      	adds	r2, #174	@ 0xae
 800943c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	4798      	blx	r3
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]
      break;
 800944c:	e04a      	b.n	80094e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	2b09      	cmp	r3, #9
 8009454:	d83b      	bhi.n	80094ce <USBD_StdDevReq+0xc2>
 8009456:	a201      	add	r2, pc, #4	@ (adr r2, 800945c <USBD_StdDevReq+0x50>)
 8009458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945c:	080094b1 	.word	0x080094b1
 8009460:	080094c5 	.word	0x080094c5
 8009464:	080094cf 	.word	0x080094cf
 8009468:	080094bb 	.word	0x080094bb
 800946c:	080094cf 	.word	0x080094cf
 8009470:	0800948f 	.word	0x0800948f
 8009474:	08009485 	.word	0x08009485
 8009478:	080094cf 	.word	0x080094cf
 800947c:	080094a7 	.word	0x080094a7
 8009480:	08009499 	.word	0x08009499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fa3c 	bl	8009904 <USBD_GetDescriptor>
          break;
 800948c:	e024      	b.n	80094d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fba1 	bl	8009bd8 <USBD_SetAddress>
          break;
 8009496:	e01f      	b.n	80094d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fbe0 	bl	8009c60 <USBD_SetConfig>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]
          break;
 80094a4:	e018      	b.n	80094d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fc83 	bl	8009db4 <USBD_GetConfig>
          break;
 80094ae:	e013      	b.n	80094d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fcb4 	bl	8009e20 <USBD_GetStatus>
          break;
 80094b8:	e00e      	b.n	80094d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fce3 	bl	8009e88 <USBD_SetFeature>
          break;
 80094c2:	e009      	b.n	80094d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fd07 	bl	8009eda <USBD_ClrFeature>
          break;
 80094cc:	e004      	b.n	80094d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fd5e 	bl	8009f92 <USBD_CtlError>
          break;
 80094d6:	bf00      	nop
      }
      break;
 80094d8:	e004      	b.n	80094e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fd58 	bl	8009f92 <USBD_CtlError>
      break;
 80094e2:	bf00      	nop
  }

  return ret;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop

080094f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009506:	2b40      	cmp	r3, #64	@ 0x40
 8009508:	d005      	beq.n	8009516 <USBD_StdItfReq+0x26>
 800950a:	2b40      	cmp	r3, #64	@ 0x40
 800950c:	d852      	bhi.n	80095b4 <USBD_StdItfReq+0xc4>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <USBD_StdItfReq+0x26>
 8009512:	2b20      	cmp	r3, #32
 8009514:	d14e      	bne.n	80095b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800951c:	b2db      	uxtb	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	2b02      	cmp	r3, #2
 8009522:	d840      	bhi.n	80095a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	889b      	ldrh	r3, [r3, #4]
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b01      	cmp	r3, #1
 800952c:	d836      	bhi.n	800959c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	889b      	ldrh	r3, [r3, #4]
 8009532:	b2db      	uxtb	r3, r3
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff fedb 	bl	80092f2 <USBD_CoreFindIF>
 800953c:	4603      	mov	r3, r0
 800953e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	2bff      	cmp	r3, #255	@ 0xff
 8009544:	d01d      	beq.n	8009582 <USBD_StdItfReq+0x92>
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11a      	bne.n	8009582 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800954c:	7bba      	ldrb	r2, [r7, #14]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	32ae      	adds	r2, #174	@ 0xae
 8009552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00f      	beq.n	800957c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800955c:	7bba      	ldrb	r2, [r7, #14]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009564:	7bba      	ldrb	r2, [r7, #14]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	32ae      	adds	r2, #174	@ 0xae
 800956a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800957a:	e004      	b.n	8009586 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800957c:	2303      	movs	r3, #3
 800957e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009580:	e001      	b.n	8009586 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009582:	2303      	movs	r3, #3
 8009584:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	88db      	ldrh	r3, [r3, #6]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d110      	bne.n	80095b0 <USBD_StdItfReq+0xc0>
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10d      	bne.n	80095b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fdd3 	bl	800a140 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800959a:	e009      	b.n	80095b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fcf7 	bl	8009f92 <USBD_CtlError>
          break;
 80095a4:	e004      	b.n	80095b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fcf2 	bl	8009f92 <USBD_CtlError>
          break;
 80095ae:	e000      	b.n	80095b2 <USBD_StdItfReq+0xc2>
          break;
 80095b0:	bf00      	nop
      }
      break;
 80095b2:	e004      	b.n	80095be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fceb 	bl	8009f92 <USBD_CtlError>
      break;
 80095bc:	bf00      	nop
  }

  return ret;
 80095be:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	889b      	ldrh	r3, [r3, #4]
 80095da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095e4:	2b40      	cmp	r3, #64	@ 0x40
 80095e6:	d007      	beq.n	80095f8 <USBD_StdEPReq+0x30>
 80095e8:	2b40      	cmp	r3, #64	@ 0x40
 80095ea:	f200 817f 	bhi.w	80098ec <USBD_StdEPReq+0x324>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d02a      	beq.n	8009648 <USBD_StdEPReq+0x80>
 80095f2:	2b20      	cmp	r3, #32
 80095f4:	f040 817a 	bne.w	80098ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff fe85 	bl	800930c <USBD_CoreFindEP>
 8009602:	4603      	mov	r3, r0
 8009604:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009606:	7b7b      	ldrb	r3, [r7, #13]
 8009608:	2bff      	cmp	r3, #255	@ 0xff
 800960a:	f000 8174 	beq.w	80098f6 <USBD_StdEPReq+0x32e>
 800960e:	7b7b      	ldrb	r3, [r7, #13]
 8009610:	2b00      	cmp	r3, #0
 8009612:	f040 8170 	bne.w	80098f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009616:	7b7a      	ldrb	r2, [r7, #13]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800961e:	7b7a      	ldrb	r2, [r7, #13]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	32ae      	adds	r2, #174	@ 0xae
 8009624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8163 	beq.w	80098f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009630:	7b7a      	ldrb	r2, [r7, #13]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	32ae      	adds	r2, #174	@ 0xae
 8009636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009646:	e156      	b.n	80098f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	2b03      	cmp	r3, #3
 800964e:	d008      	beq.n	8009662 <USBD_StdEPReq+0x9a>
 8009650:	2b03      	cmp	r3, #3
 8009652:	f300 8145 	bgt.w	80098e0 <USBD_StdEPReq+0x318>
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 809b 	beq.w	8009792 <USBD_StdEPReq+0x1ca>
 800965c:	2b01      	cmp	r3, #1
 800965e:	d03c      	beq.n	80096da <USBD_StdEPReq+0x112>
 8009660:	e13e      	b.n	80098e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d002      	beq.n	8009674 <USBD_StdEPReq+0xac>
 800966e:	2b03      	cmp	r3, #3
 8009670:	d016      	beq.n	80096a0 <USBD_StdEPReq+0xd8>
 8009672:	e02c      	b.n	80096ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009674:	7bbb      	ldrb	r3, [r7, #14]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00d      	beq.n	8009696 <USBD_StdEPReq+0xce>
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b80      	cmp	r3, #128	@ 0x80
 800967e:	d00a      	beq.n	8009696 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 f961 	bl	800a94c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800968a:	2180      	movs	r1, #128	@ 0x80
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f001 f95d 	bl	800a94c <USBD_LL_StallEP>
 8009692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009694:	e020      	b.n	80096d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fc7a 	bl	8009f92 <USBD_CtlError>
              break;
 800969e:	e01b      	b.n	80096d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	885b      	ldrh	r3, [r3, #2]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10e      	bne.n	80096c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096a8:	7bbb      	ldrb	r3, [r7, #14]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <USBD_StdEPReq+0xfe>
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	2b80      	cmp	r3, #128	@ 0x80
 80096b2:	d008      	beq.n	80096c6 <USBD_StdEPReq+0xfe>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	88db      	ldrh	r3, [r3, #6]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f943 	bl	800a94c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fd3a 	bl	800a140 <USBD_CtlSendStatus>

              break;
 80096cc:	e004      	b.n	80096d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc5e 	bl	8009f92 <USBD_CtlError>
              break;
 80096d6:	bf00      	nop
          }
          break;
 80096d8:	e107      	b.n	80098ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d002      	beq.n	80096ec <USBD_StdEPReq+0x124>
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d016      	beq.n	8009718 <USBD_StdEPReq+0x150>
 80096ea:	e04b      	b.n	8009784 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00d      	beq.n	800970e <USBD_StdEPReq+0x146>
 80096f2:	7bbb      	ldrb	r3, [r7, #14]
 80096f4:	2b80      	cmp	r3, #128	@ 0x80
 80096f6:	d00a      	beq.n	800970e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 f925 	bl	800a94c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009702:	2180      	movs	r1, #128	@ 0x80
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 f921 	bl	800a94c <USBD_LL_StallEP>
 800970a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800970c:	e040      	b.n	8009790 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fc3e 	bl	8009f92 <USBD_CtlError>
              break;
 8009716:	e03b      	b.n	8009790 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	885b      	ldrh	r3, [r3, #2]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d136      	bne.n	800978e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009720:	7bbb      	ldrb	r3, [r7, #14]
 8009722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f001 f92b 	bl	800a98a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fd03 	bl	800a140 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff fde4 	bl	800930c <USBD_CoreFindEP>
 8009744:	4603      	mov	r3, r0
 8009746:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009748:	7b7b      	ldrb	r3, [r7, #13]
 800974a:	2bff      	cmp	r3, #255	@ 0xff
 800974c:	d01f      	beq.n	800978e <USBD_StdEPReq+0x1c6>
 800974e:	7b7b      	ldrb	r3, [r7, #13]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11c      	bne.n	800978e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009754:	7b7a      	ldrb	r2, [r7, #13]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800975c:	7b7a      	ldrb	r2, [r7, #13]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	32ae      	adds	r2, #174	@ 0xae
 8009762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d010      	beq.n	800978e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800976c:	7b7a      	ldrb	r2, [r7, #13]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	32ae      	adds	r2, #174	@ 0xae
 8009772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009782:	e004      	b.n	800978e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fc03 	bl	8009f92 <USBD_CtlError>
              break;
 800978c:	e000      	b.n	8009790 <USBD_StdEPReq+0x1c8>
              break;
 800978e:	bf00      	nop
          }
          break;
 8009790:	e0ab      	b.n	80098ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d002      	beq.n	80097a4 <USBD_StdEPReq+0x1dc>
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d032      	beq.n	8009808 <USBD_StdEPReq+0x240>
 80097a2:	e097      	b.n	80098d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <USBD_StdEPReq+0x1f2>
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	2b80      	cmp	r3, #128	@ 0x80
 80097ae:	d004      	beq.n	80097ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fbed 	bl	8009f92 <USBD_CtlError>
                break;
 80097b8:	e091      	b.n	80098de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	da0b      	bge.n	80097da <USBD_StdEPReq+0x212>
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097c8:	4613      	mov	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	3310      	adds	r3, #16
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	4413      	add	r3, r2
 80097d6:	3304      	adds	r3, #4
 80097d8:	e00b      	b.n	80097f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	4413      	add	r3, r2
 80097f0:	3304      	adds	r3, #4
 80097f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2200      	movs	r2, #0
 80097f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2202      	movs	r2, #2
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fc43 	bl	800a08c <USBD_CtlSendData>
              break;
 8009806:	e06a      	b.n	80098de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da11      	bge.n	8009834 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	f003 020f 	and.w	r2, r3, #15
 8009816:	6879      	ldr	r1, [r7, #4]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	3324      	adds	r3, #36	@ 0x24
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d117      	bne.n	800985a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fbb0 	bl	8009f92 <USBD_CtlError>
                  break;
 8009832:	e054      	b.n	80098de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	f003 020f 	and.w	r2, r3, #15
 800983a:	6879      	ldr	r1, [r7, #4]
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fb9d 	bl	8009f92 <USBD_CtlError>
                  break;
 8009858:	e041      	b.n	80098de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800985a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800985e:	2b00      	cmp	r3, #0
 8009860:	da0b      	bge.n	800987a <USBD_StdEPReq+0x2b2>
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	3310      	adds	r3, #16
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	4413      	add	r3, r2
 8009876:	3304      	adds	r3, #4
 8009878:	e00b      	b.n	8009892 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800987a:	7bbb      	ldrb	r3, [r7, #14]
 800987c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009880:	4613      	mov	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	4413      	add	r3, r2
 8009890:	3304      	adds	r3, #4
 8009892:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <USBD_StdEPReq+0x2d8>
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	2b80      	cmp	r3, #128	@ 0x80
 800989e:	d103      	bne.n	80098a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	e00e      	b.n	80098c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 f88b 	bl	800a9c8 <USBD_LL_IsStallEP>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d003      	beq.n	80098c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2201      	movs	r2, #1
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	e002      	b.n	80098c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2202      	movs	r2, #2
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 fbdd 	bl	800a08c <USBD_CtlSendData>
              break;
 80098d2:	e004      	b.n	80098de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80098d4:	6839      	ldr	r1, [r7, #0]
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fb5b 	bl	8009f92 <USBD_CtlError>
              break;
 80098dc:	bf00      	nop
          }
          break;
 80098de:	e004      	b.n	80098ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fb55 	bl	8009f92 <USBD_CtlError>
          break;
 80098e8:	bf00      	nop
      }
      break;
 80098ea:	e005      	b.n	80098f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fb4f 	bl	8009f92 <USBD_CtlError>
      break;
 80098f4:	e000      	b.n	80098f8 <USBD_StdEPReq+0x330>
      break;
 80098f6:	bf00      	nop
  }

  return ret;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009916:	2300      	movs	r3, #0
 8009918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	885b      	ldrh	r3, [r3, #2]
 800991e:	0a1b      	lsrs	r3, r3, #8
 8009920:	b29b      	uxth	r3, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	2b06      	cmp	r3, #6
 8009926:	f200 8128 	bhi.w	8009b7a <USBD_GetDescriptor+0x276>
 800992a:	a201      	add	r2, pc, #4	@ (adr r2, 8009930 <USBD_GetDescriptor+0x2c>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	0800994d 	.word	0x0800994d
 8009934:	08009965 	.word	0x08009965
 8009938:	080099a5 	.word	0x080099a5
 800993c:	08009b7b 	.word	0x08009b7b
 8009940:	08009b7b 	.word	0x08009b7b
 8009944:	08009b1b 	.word	0x08009b1b
 8009948:	08009b47 	.word	0x08009b47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	7c12      	ldrb	r2, [r2, #16]
 8009958:	f107 0108 	add.w	r1, r7, #8
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	60f8      	str	r0, [r7, #12]
      break;
 8009962:	e112      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	7c1b      	ldrb	r3, [r3, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10d      	bne.n	8009988 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009974:	f107 0208 	add.w	r2, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009986:	e100      	b.n	8009b8a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800998e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009990:	f107 0208 	add.w	r2, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	2202      	movs	r2, #2
 80099a0:	701a      	strb	r2, [r3, #0]
      break;
 80099a2:	e0f2      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	f200 80ac 	bhi.w	8009b08 <USBD_GetDescriptor+0x204>
 80099b0:	a201      	add	r2, pc, #4	@ (adr r2, 80099b8 <USBD_GetDescriptor+0xb4>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	080099d1 	.word	0x080099d1
 80099bc:	08009a05 	.word	0x08009a05
 80099c0:	08009a39 	.word	0x08009a39
 80099c4:	08009a6d 	.word	0x08009a6d
 80099c8:	08009aa1 	.word	0x08009aa1
 80099cc:	08009ad5 	.word	0x08009ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	7c12      	ldrb	r2, [r2, #16]
 80099e8:	f107 0108 	add.w	r1, r7, #8
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
 80099f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f2:	e091      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 facb 	bl	8009f92 <USBD_CtlError>
            err++;
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	3301      	adds	r3, #1
 8009a00:	72fb      	strb	r3, [r7, #11]
          break;
 8009a02:	e089      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	7c12      	ldrb	r2, [r2, #16]
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	4610      	mov	r0, r2
 8009a22:	4798      	blx	r3
 8009a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a26:	e077      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fab1 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	3301      	adds	r3, #1
 8009a34:	72fb      	strb	r3, [r7, #11]
          break;
 8009a36:	e06f      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
 8009a50:	f107 0108 	add.w	r1, r7, #8
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5a:	e05d      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa97 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	3301      	adds	r3, #1
 8009a68:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6a:	e055      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a8e:	e043      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fa7d 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a9e:	e03b      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac2:	e029      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa63 	bl	8009f92 <USBD_CtlError>
            err++;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad2:	e021      	b.n	8009b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e00f      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa49 	bl	8009f92 <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e007      	b.n	8009b18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa41 	bl	8009f92 <USBD_CtlError>
          err++;
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	3301      	adds	r3, #1
 8009b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b16:	bf00      	nop
      }
      break;
 8009b18:	e037      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7c1b      	ldrb	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d109      	bne.n	8009b36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b2a:	f107 0208 	add.w	r2, r7, #8
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4798      	blx	r3
 8009b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b34:	e029      	b.n	8009b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa2a 	bl	8009f92 <USBD_CtlError>
        err++;
 8009b3e:	7afb      	ldrb	r3, [r7, #11]
 8009b40:	3301      	adds	r3, #1
 8009b42:	72fb      	strb	r3, [r7, #11]
      break;
 8009b44:	e021      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	7c1b      	ldrb	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10d      	bne.n	8009b6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b56:	f107 0208 	add.w	r2, r7, #8
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4798      	blx	r3
 8009b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3301      	adds	r3, #1
 8009b64:	2207      	movs	r2, #7
 8009b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b68:	e00f      	b.n	8009b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fa10 	bl	8009f92 <USBD_CtlError>
        err++;
 8009b72:	7afb      	ldrb	r3, [r7, #11]
 8009b74:	3301      	adds	r3, #1
 8009b76:	72fb      	strb	r3, [r7, #11]
      break;
 8009b78:	e007      	b.n	8009b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fa08 	bl	8009f92 <USBD_CtlError>
      err++;
 8009b82:	7afb      	ldrb	r3, [r7, #11]
 8009b84:	3301      	adds	r3, #1
 8009b86:	72fb      	strb	r3, [r7, #11]
      break;
 8009b88:	bf00      	nop
  }

  if (err != 0U)
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d11e      	bne.n	8009bce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	88db      	ldrh	r3, [r3, #6]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d016      	beq.n	8009bc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b98:	893b      	ldrh	r3, [r7, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	88da      	ldrh	r2, [r3, #6]
 8009ba2:	893b      	ldrh	r3, [r7, #8]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf28      	it	cs
 8009ba8:	4613      	movcs	r3, r2
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bae:	893b      	ldrh	r3, [r7, #8]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa69 	bl	800a08c <USBD_CtlSendData>
 8009bba:	e009      	b.n	8009bd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9e7 	bl	8009f92 <USBD_CtlError>
 8009bc4:	e004      	b.n	8009bd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 faba 	bl	800a140 <USBD_CtlSendStatus>
 8009bcc:	e000      	b.n	8009bd0 <USBD_GetDescriptor+0x2cc>
    return;
 8009bce:	bf00      	nop
  }
}
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop

08009bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	889b      	ldrh	r3, [r3, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d131      	bne.n	8009c4e <USBD_SetAddress+0x76>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	88db      	ldrh	r3, [r3, #6]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d12d      	bne.n	8009c4e <USBD_SetAddress+0x76>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bf8:	d829      	bhi.n	8009c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	885b      	ldrh	r3, [r3, #2]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d104      	bne.n	8009c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f9bc 	bl	8009f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1a:	e01d      	b.n	8009c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7bfa      	ldrb	r2, [r7, #15]
 8009c20:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fef9 	bl	800aa20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa86 	bl	800a140 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d004      	beq.n	8009c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c42:	e009      	b.n	8009c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4c:	e004      	b.n	8009c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f99e 	bl	8009f92 <USBD_CtlError>
  }
}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	4b4e      	ldr	r3, [pc, #312]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c78:	4b4d      	ldr	r3, [pc, #308]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d905      	bls.n	8009c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f985 	bl	8009f92 <USBD_CtlError>
    return USBD_FAIL;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e08c      	b.n	8009da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d002      	beq.n	8009c9e <USBD_SetConfig+0x3e>
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d029      	beq.n	8009cf0 <USBD_SetConfig+0x90>
 8009c9c:	e075      	b.n	8009d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c9e:	4b44      	ldr	r3, [pc, #272]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d020      	beq.n	8009ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ca6:	4b42      	ldr	r3, [pc, #264]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cb0:	4b3f      	ldr	r3, [pc, #252]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fe ffe3 	bl	8008c82 <USBD_SetClassConfig>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d008      	beq.n	8009cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f962 	bl	8009f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cd6:	e065      	b.n	8009da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fa31 	bl	800a140 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2203      	movs	r2, #3
 8009ce2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009ce6:	e05d      	b.n	8009da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fa29 	bl	800a140 <USBD_CtlSendStatus>
      break;
 8009cee:	e059      	b.n	8009da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d112      	bne.n	8009d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d00:	4b2b      	ldr	r3, [pc, #172]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d0a:	4b29      	ldr	r3, [pc, #164]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7fe ffd2 	bl	8008cba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa12 	bl	800a140 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d1c:	e042      	b.n	8009da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d1e:	4b24      	ldr	r3, [pc, #144]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d02a      	beq.n	8009d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7fe ffc0 	bl	8008cba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d44:	4b1a      	ldr	r3, [pc, #104]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7fe ff99 	bl	8008c82 <USBD_SetClassConfig>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00f      	beq.n	8009d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f918 	bl	8009f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7fe ffa5 	bl	8008cba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d78:	e014      	b.n	8009da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f9e0 	bl	800a140 <USBD_CtlSendStatus>
      break;
 8009d80:	e010      	b.n	8009da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f9dc 	bl	800a140 <USBD_CtlSendStatus>
      break;
 8009d88:	e00c      	b.n	8009da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f900 	bl	8009f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d92:	4b07      	ldr	r3, [pc, #28]	@ (8009db0 <USBD_SetConfig+0x150>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7fe ff8e 	bl	8008cba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	73fb      	strb	r3, [r7, #15]
      break;
 8009da2:	bf00      	nop
  }

  return ret;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	200179f0 	.word	0x200179f0

08009db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	88db      	ldrh	r3, [r3, #6]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d004      	beq.n	8009dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f8e2 	bl	8009f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dce:	e023      	b.n	8009e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	dc02      	bgt.n	8009de2 <USBD_GetConfig+0x2e>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dc03      	bgt.n	8009de8 <USBD_GetConfig+0x34>
 8009de0:	e015      	b.n	8009e0e <USBD_GetConfig+0x5a>
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d00b      	beq.n	8009dfe <USBD_GetConfig+0x4a>
 8009de6:	e012      	b.n	8009e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3308      	adds	r3, #8
 8009df2:	2201      	movs	r2, #1
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f948 	bl	800a08c <USBD_CtlSendData>
        break;
 8009dfc:	e00c      	b.n	8009e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3304      	adds	r3, #4
 8009e02:	2201      	movs	r2, #1
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f940 	bl	800a08c <USBD_CtlSendData>
        break;
 8009e0c:	e004      	b.n	8009e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f8be 	bl	8009f92 <USBD_CtlError>
        break;
 8009e16:	bf00      	nop
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	3b01      	subs	r3, #1
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d81e      	bhi.n	8009e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	88db      	ldrh	r3, [r3, #6]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d004      	beq.n	8009e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f8a5 	bl	8009f92 <USBD_CtlError>
        break;
 8009e48:	e01a      	b.n	8009e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f043 0202 	orr.w	r2, r3, #2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f90c 	bl	800a08c <USBD_CtlSendData>
      break;
 8009e74:	e004      	b.n	8009e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f88a 	bl	8009f92 <USBD_CtlError>
      break;
 8009e7e:	bf00      	nop
  }
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d107      	bne.n	8009eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f94c 	bl	800a140 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ea8:	e013      	b.n	8009ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	885b      	ldrh	r3, [r3, #2]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d10b      	bne.n	8009eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	889b      	ldrh	r3, [r3, #4]
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f93c 	bl	800a140 <USBD_CtlSendStatus>
}
 8009ec8:	e003      	b.n	8009ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f860 	bl	8009f92 <USBD_CtlError>
}
 8009ed2:	bf00      	nop
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b082      	sub	sp, #8
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	3b01      	subs	r3, #1
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d80b      	bhi.n	8009f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d10c      	bne.n	8009f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f91c 	bl	800a140 <USBD_CtlSendStatus>
      }
      break;
 8009f08:	e004      	b.n	8009f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f840 	bl	8009f92 <USBD_CtlError>
      break;
 8009f12:	e000      	b.n	8009f16 <USBD_ClrFeature+0x3c>
      break;
 8009f14:	bf00      	nop
  }
}
 8009f16:	bf00      	nop
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	781a      	ldrb	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	781a      	ldrb	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3301      	adds	r3, #1
 8009f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7ff fa40 	bl	80093ce <SWAPBYTE>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	461a      	mov	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7ff fa33 	bl	80093ce <SWAPBYTE>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3301      	adds	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7ff fa26 	bl	80093ce <SWAPBYTE>
 8009f82:	4603      	mov	r3, r0
 8009f84:	461a      	mov	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	80da      	strh	r2, [r3, #6]
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f9c:	2180      	movs	r1, #128	@ 0x80
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fcd4 	bl	800a94c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fcd0 	bl	800a94c <USBD_LL_StallEP>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d042      	beq.n	800a050 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009fce:	6938      	ldr	r0, [r7, #16]
 8009fd0:	f000 f842 	bl	800a058 <USBD_GetLen>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fde:	d808      	bhi.n	8009ff2 <USBD_GetString+0x3e>
 8009fe0:	6938      	ldr	r0, [r7, #16]
 8009fe2:	f000 f839 	bl	800a058 <USBD_GetLen>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	3301      	adds	r3, #1
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	e001      	b.n	8009ff6 <USBD_GetString+0x42>
 8009ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	4413      	add	r3, r2
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	7812      	ldrb	r2, [r2, #0]
 800a004:	701a      	strb	r2, [r3, #0]
  idx++;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	3301      	adds	r3, #1
 800a00a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	4413      	add	r3, r2
 800a012:	2203      	movs	r2, #3
 800a014:	701a      	strb	r2, [r3, #0]
  idx++;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
 800a018:	3301      	adds	r3, #1
 800a01a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a01c:	e013      	b.n	800a046 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	4413      	add	r3, r2
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	7812      	ldrb	r2, [r2, #0]
 800a028:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	3301      	adds	r3, #1
 800a02e:	613b      	str	r3, [r7, #16]
    idx++;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	3301      	adds	r3, #1
 800a034:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	4413      	add	r3, r2
 800a03c:	2200      	movs	r2, #0
 800a03e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	3301      	adds	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e7      	bne.n	800a01e <USBD_GetString+0x6a>
 800a04e:	e000      	b.n	800a052 <USBD_GetString+0x9e>
    return;
 800a050:	bf00      	nop
  }
}
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a068:	e005      	b.n	800a076 <USBD_GetLen+0x1e>
  {
    len++;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	3301      	adds	r3, #1
 800a06e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	3301      	adds	r3, #1
 800a074:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1f5      	bne.n	800a06a <USBD_GetLen+0x12>
  }

  return len;
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fcd3 	bl	800aa5e <USBD_LL_Transmit>

  return USBD_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	60b9      	str	r1, [r7, #8]
 800a0cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fcc2 	bl	800aa5e <USBD_LL_Transmit>

  return USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	2100      	movs	r1, #0
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f000 fcc6 	bl	800aaa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	2100      	movs	r1, #0
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 fcb5 	bl	800aaa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2204      	movs	r2, #4
 800a14c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a150:	2300      	movs	r3, #0
 800a152:	2200      	movs	r2, #0
 800a154:	2100      	movs	r1, #0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fc81 	bl	800aa5e <USBD_LL_Transmit>

  return USBD_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2205      	movs	r2, #5
 800a172:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a176:	2300      	movs	r3, #0
 800a178:	2200      	movs	r2, #0
 800a17a:	2100      	movs	r1, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fc8f 	bl	800aaa0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a190:	2200      	movs	r2, #0
 800a192:	4912      	ldr	r1, [pc, #72]	@ (800a1dc <MX_USB_DEVICE_Init+0x50>)
 800a194:	4812      	ldr	r0, [pc, #72]	@ (800a1e0 <MX_USB_DEVICE_Init+0x54>)
 800a196:	f7fe fcf7 	bl	8008b88 <USBD_Init>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1a0:	f7f7 fd6a 	bl	8001c78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1a4:	490f      	ldr	r1, [pc, #60]	@ (800a1e4 <MX_USB_DEVICE_Init+0x58>)
 800a1a6:	480e      	ldr	r0, [pc, #56]	@ (800a1e0 <MX_USB_DEVICE_Init+0x54>)
 800a1a8:	f7fe fd1e 	bl	8008be8 <USBD_RegisterClass>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1b2:	f7f7 fd61 	bl	8001c78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1b6:	490c      	ldr	r1, [pc, #48]	@ (800a1e8 <MX_USB_DEVICE_Init+0x5c>)
 800a1b8:	4809      	ldr	r0, [pc, #36]	@ (800a1e0 <MX_USB_DEVICE_Init+0x54>)
 800a1ba:	f7fe fc55 	bl	8008a68 <USBD_CDC_RegisterInterface>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1c4:	f7f7 fd58 	bl	8001c78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1c8:	4805      	ldr	r0, [pc, #20]	@ (800a1e0 <MX_USB_DEVICE_Init+0x54>)
 800a1ca:	f7fe fd43 	bl	8008c54 <USBD_Start>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1d4:	f7f7 fd50 	bl	8001c78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1d8:	bf00      	nop
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	200000b0 	.word	0x200000b0
 800a1e0:	200179f4 	.word	0x200179f4
 800a1e4:	2000001c 	.word	0x2000001c
 800a1e8:	2000009c 	.word	0x2000009c

0800a1ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4905      	ldr	r1, [pc, #20]	@ (800a208 <CDC_Init_FS+0x1c>)
 800a1f4:	4805      	ldr	r0, [pc, #20]	@ (800a20c <CDC_Init_FS+0x20>)
 800a1f6:	f7fe fc51 	bl	8008a9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1fa:	4905      	ldr	r1, [pc, #20]	@ (800a210 <CDC_Init_FS+0x24>)
 800a1fc:	4803      	ldr	r0, [pc, #12]	@ (800a20c <CDC_Init_FS+0x20>)
 800a1fe:	f7fe fc6f 	bl	8008ae0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a204:	4618      	mov	r0, r3
 800a206:	bd80      	pop	{r7, pc}
 800a208:	200184d0 	.word	0x200184d0
 800a20c:	200179f4 	.word	0x200179f4
 800a210:	20017cd0 	.word	0x20017cd0

0800a214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a214:	b480      	push	{r7}
 800a216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	6039      	str	r1, [r7, #0]
 800a22e:	71fb      	strb	r3, [r7, #7]
 800a230:	4613      	mov	r3, r2
 800a232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a234:	79fb      	ldrb	r3, [r7, #7]
 800a236:	2b23      	cmp	r3, #35	@ 0x23
 800a238:	d84a      	bhi.n	800a2d0 <CDC_Control_FS+0xac>
 800a23a:	a201      	add	r2, pc, #4	@ (adr r2, 800a240 <CDC_Control_FS+0x1c>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a2d1 	.word	0x0800a2d1
 800a244:	0800a2d1 	.word	0x0800a2d1
 800a248:	0800a2d1 	.word	0x0800a2d1
 800a24c:	0800a2d1 	.word	0x0800a2d1
 800a250:	0800a2d1 	.word	0x0800a2d1
 800a254:	0800a2d1 	.word	0x0800a2d1
 800a258:	0800a2d1 	.word	0x0800a2d1
 800a25c:	0800a2d1 	.word	0x0800a2d1
 800a260:	0800a2d1 	.word	0x0800a2d1
 800a264:	0800a2d1 	.word	0x0800a2d1
 800a268:	0800a2d1 	.word	0x0800a2d1
 800a26c:	0800a2d1 	.word	0x0800a2d1
 800a270:	0800a2d1 	.word	0x0800a2d1
 800a274:	0800a2d1 	.word	0x0800a2d1
 800a278:	0800a2d1 	.word	0x0800a2d1
 800a27c:	0800a2d1 	.word	0x0800a2d1
 800a280:	0800a2d1 	.word	0x0800a2d1
 800a284:	0800a2d1 	.word	0x0800a2d1
 800a288:	0800a2d1 	.word	0x0800a2d1
 800a28c:	0800a2d1 	.word	0x0800a2d1
 800a290:	0800a2d1 	.word	0x0800a2d1
 800a294:	0800a2d1 	.word	0x0800a2d1
 800a298:	0800a2d1 	.word	0x0800a2d1
 800a29c:	0800a2d1 	.word	0x0800a2d1
 800a2a0:	0800a2d1 	.word	0x0800a2d1
 800a2a4:	0800a2d1 	.word	0x0800a2d1
 800a2a8:	0800a2d1 	.word	0x0800a2d1
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2d1 	.word	0x0800a2d1
 800a2b4:	0800a2d1 	.word	0x0800a2d1
 800a2b8:	0800a2d1 	.word	0x0800a2d1
 800a2bc:	0800a2d1 	.word	0x0800a2d1
 800a2c0:	0800a2d1 	.word	0x0800a2d1
 800a2c4:	0800a2d1 	.word	0x0800a2d1
 800a2c8:	0800a2d1 	.word	0x0800a2d1
 800a2cc:	0800a2d1 	.word	0x0800a2d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2d0:	bf00      	nop
  }

  return (USBD_OK);
 800a2d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	4805      	ldr	r0, [pc, #20]	@ (800a304 <CDC_Receive_FS+0x24>)
 800a2ee:	f7fe fbf7 	bl	8008ae0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2f2:	4804      	ldr	r0, [pc, #16]	@ (800a304 <CDC_Receive_FS+0x24>)
 800a2f4:	f7fe fc12 	bl	8008b1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200179f4 	.word	0x200179f4

0800a308 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a308:	b480      	push	{r7}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	4613      	mov	r3, r2
 800a314:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	371c      	adds	r7, #28
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
	...

0800a32c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	4603      	mov	r3, r0
 800a334:	6039      	str	r1, [r7, #0]
 800a336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2212      	movs	r2, #18
 800a33c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a33e:	4b03      	ldr	r3, [pc, #12]	@ (800a34c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	200000cc 	.word	0x200000cc

0800a350 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2204      	movs	r2, #4
 800a360:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a362:	4b03      	ldr	r3, [pc, #12]	@ (800a370 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	200000e0 	.word	0x200000e0

0800a374 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	4603      	mov	r3, r0
 800a37c:	6039      	str	r1, [r7, #0]
 800a37e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a380:	79fb      	ldrb	r3, [r7, #7]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d105      	bne.n	800a392 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	4907      	ldr	r1, [pc, #28]	@ (800a3a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a38a:	4808      	ldr	r0, [pc, #32]	@ (800a3ac <USBD_FS_ProductStrDescriptor+0x38>)
 800a38c:	f7ff fe12 	bl	8009fb4 <USBD_GetString>
 800a390:	e004      	b.n	800a39c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4904      	ldr	r1, [pc, #16]	@ (800a3a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a396:	4805      	ldr	r0, [pc, #20]	@ (800a3ac <USBD_FS_ProductStrDescriptor+0x38>)
 800a398:	f7ff fe0c 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a39c:	4b02      	ldr	r3, [pc, #8]	@ (800a3a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20018cd0 	.word	0x20018cd0
 800a3ac:	0800cb80 	.word	0x0800cb80

0800a3b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3bc:	683a      	ldr	r2, [r7, #0]
 800a3be:	4904      	ldr	r1, [pc, #16]	@ (800a3d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3c0:	4804      	ldr	r0, [pc, #16]	@ (800a3d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3c2:	f7ff fdf7 	bl	8009fb4 <USBD_GetString>
  return USBD_StrDesc;
 800a3c6:	4b02      	ldr	r3, [pc, #8]	@ (800a3d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20018cd0 	.word	0x20018cd0
 800a3d4:	0800cb98 	.word	0x0800cb98

0800a3d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	6039      	str	r1, [r7, #0]
 800a3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	221a      	movs	r2, #26
 800a3e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3ea:	f000 f843 	bl	800a474 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3ee:	4b02      	ldr	r3, [pc, #8]	@ (800a3f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	200000e4 	.word	0x200000e4

0800a3fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a408:	79fb      	ldrb	r3, [r7, #7]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d105      	bne.n	800a41a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	4907      	ldr	r1, [pc, #28]	@ (800a430 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a412:	4808      	ldr	r0, [pc, #32]	@ (800a434 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a414:	f7ff fdce 	bl	8009fb4 <USBD_GetString>
 800a418:	e004      	b.n	800a424 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	4904      	ldr	r1, [pc, #16]	@ (800a430 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a41e:	4805      	ldr	r0, [pc, #20]	@ (800a434 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a420:	f7ff fdc8 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a424:	4b02      	ldr	r3, [pc, #8]	@ (800a430 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a426:	4618      	mov	r0, r3
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20018cd0 	.word	0x20018cd0
 800a434:	0800cbac 	.word	0x0800cbac

0800a438 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d105      	bne.n	800a456 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	4907      	ldr	r1, [pc, #28]	@ (800a46c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a44e:	4808      	ldr	r0, [pc, #32]	@ (800a470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a450:	f7ff fdb0 	bl	8009fb4 <USBD_GetString>
 800a454:	e004      	b.n	800a460 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4904      	ldr	r1, [pc, #16]	@ (800a46c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a45a:	4805      	ldr	r0, [pc, #20]	@ (800a470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a45c:	f7ff fdaa 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a460:	4b02      	ldr	r3, [pc, #8]	@ (800a46c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20018cd0 	.word	0x20018cd0
 800a470:	0800cbb8 	.word	0x0800cbb8

0800a474 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a47a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b8 <Get_SerialNum+0x44>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a480:	4b0e      	ldr	r3, [pc, #56]	@ (800a4bc <Get_SerialNum+0x48>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a486:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c0 <Get_SerialNum+0x4c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4413      	add	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d009      	beq.n	800a4ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a49a:	2208      	movs	r2, #8
 800a49c:	4909      	ldr	r1, [pc, #36]	@ (800a4c4 <Get_SerialNum+0x50>)
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 f814 	bl	800a4cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	4908      	ldr	r1, [pc, #32]	@ (800a4c8 <Get_SerialNum+0x54>)
 800a4a8:	68b8      	ldr	r0, [r7, #8]
 800a4aa:	f000 f80f 	bl	800a4cc <IntToUnicode>
  }
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	1fff7a10 	.word	0x1fff7a10
 800a4bc:	1fff7a14 	.word	0x1fff7a14
 800a4c0:	1fff7a18 	.word	0x1fff7a18
 800a4c4:	200000e6 	.word	0x200000e6
 800a4c8:	200000f6 	.word	0x200000f6

0800a4cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4de:	2300      	movs	r3, #0
 800a4e0:	75fb      	strb	r3, [r7, #23]
 800a4e2:	e027      	b.n	800a534 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	0f1b      	lsrs	r3, r3, #28
 800a4e8:	2b09      	cmp	r3, #9
 800a4ea:	d80b      	bhi.n	800a504 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	0f1b      	lsrs	r3, r3, #28
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	440b      	add	r3, r1
 800a4fc:	3230      	adds	r2, #48	@ 0x30
 800a4fe:	b2d2      	uxtb	r2, r2
 800a500:	701a      	strb	r2, [r3, #0]
 800a502:	e00a      	b.n	800a51a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	0f1b      	lsrs	r3, r3, #28
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	005b      	lsls	r3, r3, #1
 800a50e:	4619      	mov	r1, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	440b      	add	r3, r1
 800a514:	3237      	adds	r2, #55	@ 0x37
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	3301      	adds	r3, #1
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	4413      	add	r3, r2
 800a52a:	2200      	movs	r2, #0
 800a52c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	3301      	adds	r3, #1
 800a532:	75fb      	strb	r3, [r7, #23]
 800a534:	7dfa      	ldrb	r2, [r7, #23]
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d3d3      	bcc.n	800a4e4 <IntToUnicode+0x18>
  }
}
 800a53c:	bf00      	nop
 800a53e:	bf00      	nop
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08a      	sub	sp, #40	@ 0x28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a554:	f107 0314 	add.w	r3, r7, #20
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	605a      	str	r2, [r3, #4]
 800a55e:	609a      	str	r2, [r3, #8]
 800a560:	60da      	str	r2, [r3, #12]
 800a562:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a56c:	d147      	bne.n	800a5fe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a56e:	2300      	movs	r3, #0
 800a570:	613b      	str	r3, [r7, #16]
 800a572:	4b25      	ldr	r3, [pc, #148]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a576:	4a24      	ldr	r2, [pc, #144]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a578:	f043 0301 	orr.w	r3, r3, #1
 800a57c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a57e:	4b22      	ldr	r3, [pc, #136]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	613b      	str	r3, [r7, #16]
 800a588:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a58a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a58e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a590:	2300      	movs	r3, #0
 800a592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a598:	f107 0314 	add.w	r3, r7, #20
 800a59c:	4619      	mov	r1, r3
 800a59e:	481b      	ldr	r0, [pc, #108]	@ (800a60c <HAL_PCD_MspInit+0xc0>)
 800a5a0:	f7f8 fb14 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a5a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a5a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5b6:	230a      	movs	r3, #10
 800a5b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5ba:	f107 0314 	add.w	r3, r7, #20
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4812      	ldr	r0, [pc, #72]	@ (800a60c <HAL_PCD_MspInit+0xc0>)
 800a5c2:	f7f8 fb03 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5c6:	4b10      	ldr	r3, [pc, #64]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a5c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5ca:	4a0f      	ldr	r2, [pc, #60]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a5cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5d0:	6353      	str	r3, [r2, #52]	@ 0x34
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
 800a5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5da:	4a0b      	ldr	r2, [pc, #44]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a5dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a5e0:	6453      	str	r3, [r2, #68]	@ 0x44
 800a5e2:	4b09      	ldr	r3, [pc, #36]	@ (800a608 <HAL_PCD_MspInit+0xbc>)
 800a5e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	2043      	movs	r0, #67	@ 0x43
 800a5f4:	f7f7 ff43 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a5f8:	2043      	movs	r0, #67	@ 0x43
 800a5fa:	f7f7 ff5c 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a5fe:	bf00      	nop
 800a600:	3728      	adds	r7, #40	@ 0x28
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	40023800 	.word	0x40023800
 800a60c:	40020000 	.word	0x40020000

0800a610 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a624:	4619      	mov	r1, r3
 800a626:	4610      	mov	r0, r2
 800a628:	f7fe fb61 	bl	8008cee <USBD_LL_SetupStage>
}
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a646:	78fa      	ldrb	r2, [r7, #3]
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	4613      	mov	r3, r2
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	440b      	add	r3, r1
 800a654:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	78fb      	ldrb	r3, [r7, #3]
 800a65c:	4619      	mov	r1, r3
 800a65e:	f7fe fb9b 	bl	8008d98 <USBD_LL_DataOutStage>
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	460b      	mov	r3, r1
 800a674:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800a67c:	78fa      	ldrb	r2, [r7, #3]
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	4613      	mov	r3, r2
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	440b      	add	r3, r1
 800a68a:	3320      	adds	r3, #32
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	78fb      	ldrb	r3, [r7, #3]
 800a690:	4619      	mov	r1, r3
 800a692:	f7fe fc34 	bl	8008efe <USBD_LL_DataInStage>
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fe fd6e 	bl	800918e <USBD_LL_SOF>
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b084      	sub	sp, #16
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	79db      	ldrb	r3, [r3, #7]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
 800a6d2:	e008      	b.n	800a6e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	79db      	ldrb	r3, [r3, #7]
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d102      	bne.n	800a6e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	73fb      	strb	r3, [r7, #15]
 800a6e0:	e001      	b.n	800a6e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a6e2:	f7f7 fac9 	bl	8001c78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6ec:	7bfa      	ldrb	r2, [r7, #15]
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe fd08 	bl	8009106 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fe fcb0 	bl	8009062 <USBD_LL_Reset>
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fe fd03 	bl	8009126 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	6812      	ldr	r2, [r2, #0]
 800a72e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a732:	f043 0301 	orr.w	r3, r3, #1
 800a736:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7adb      	ldrb	r3, [r3, #11]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a740:	4b04      	ldr	r3, [pc, #16]	@ (800a754 <HAL_PCD_SuspendCallback+0x48>)
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	4a03      	ldr	r2, [pc, #12]	@ (800a754 <HAL_PCD_SuspendCallback+0x48>)
 800a746:	f043 0306 	orr.w	r3, r3, #6
 800a74a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a74c:	bf00      	nop
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	e000ed00 	.word	0xe000ed00

0800a758 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fcf9 	bl	800915e <USBD_LL_Resume>
}
 800a76c:	bf00      	nop
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a786:	78fa      	ldrb	r2, [r7, #3]
 800a788:	4611      	mov	r1, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fd51 	bl	8009232 <USBD_LL_IsoOUTIncomplete>
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7aa:	78fa      	ldrb	r2, [r7, #3]
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fd0d 	bl	80091ce <USBD_LL_IsoINIncomplete>
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fd63 	bl	8009296 <USBD_LL_DevConnected>
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fd60 	bl	80092ac <USBD_LL_DevDisconnected>
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d13c      	bne.n	800a87e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a804:	4a20      	ldr	r2, [pc, #128]	@ (800a888 <USBD_LL_Init+0x94>)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a1e      	ldr	r2, [pc, #120]	@ (800a888 <USBD_LL_Init+0x94>)
 800a810:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a814:	4b1c      	ldr	r3, [pc, #112]	@ (800a888 <USBD_LL_Init+0x94>)
 800a816:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a81a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a81c:	4b1a      	ldr	r3, [pc, #104]	@ (800a888 <USBD_LL_Init+0x94>)
 800a81e:	2204      	movs	r2, #4
 800a820:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a822:	4b19      	ldr	r3, [pc, #100]	@ (800a888 <USBD_LL_Init+0x94>)
 800a824:	2202      	movs	r2, #2
 800a826:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a828:	4b17      	ldr	r3, [pc, #92]	@ (800a888 <USBD_LL_Init+0x94>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a82e:	4b16      	ldr	r3, [pc, #88]	@ (800a888 <USBD_LL_Init+0x94>)
 800a830:	2202      	movs	r2, #2
 800a832:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a834:	4b14      	ldr	r3, [pc, #80]	@ (800a888 <USBD_LL_Init+0x94>)
 800a836:	2200      	movs	r2, #0
 800a838:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a83a:	4b13      	ldr	r3, [pc, #76]	@ (800a888 <USBD_LL_Init+0x94>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a840:	4b11      	ldr	r3, [pc, #68]	@ (800a888 <USBD_LL_Init+0x94>)
 800a842:	2200      	movs	r2, #0
 800a844:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a846:	4b10      	ldr	r3, [pc, #64]	@ (800a888 <USBD_LL_Init+0x94>)
 800a848:	2201      	movs	r2, #1
 800a84a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a84c:	4b0e      	ldr	r3, [pc, #56]	@ (800a888 <USBD_LL_Init+0x94>)
 800a84e:	2200      	movs	r2, #0
 800a850:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a852:	480d      	ldr	r0, [pc, #52]	@ (800a888 <USBD_LL_Init+0x94>)
 800a854:	f7fa f91e 	bl	8004a94 <HAL_PCD_Init>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a85e:	f7f7 fa0b 	bl	8001c78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a862:	2180      	movs	r1, #128	@ 0x80
 800a864:	4808      	ldr	r0, [pc, #32]	@ (800a888 <USBD_LL_Init+0x94>)
 800a866:	f7fb fb4a 	bl	8005efe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a86a:	2240      	movs	r2, #64	@ 0x40
 800a86c:	2100      	movs	r1, #0
 800a86e:	4806      	ldr	r0, [pc, #24]	@ (800a888 <USBD_LL_Init+0x94>)
 800a870:	f7fb fafe 	bl	8005e70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a874:	2280      	movs	r2, #128	@ 0x80
 800a876:	2101      	movs	r1, #1
 800a878:	4803      	ldr	r0, [pc, #12]	@ (800a888 <USBD_LL_Init+0x94>)
 800a87a:	f7fb faf9 	bl	8005e70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20018ed0 	.word	0x20018ed0

0800a88c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fa fa05 	bl	8004cb2 <HAL_PCD_Start>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 f942 	bl	800ab38 <USBD_Get_USB_Status>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	4608      	mov	r0, r1
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	70fb      	strb	r3, [r7, #3]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	70bb      	strb	r3, [r7, #2]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a8ea:	78bb      	ldrb	r3, [r7, #2]
 800a8ec:	883a      	ldrh	r2, [r7, #0]
 800a8ee:	78f9      	ldrb	r1, [r7, #3]
 800a8f0:	f7fa fed9 	bl	80056a6 <HAL_PCD_EP_Open>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 f91c 	bl	800ab38 <USBD_Get_USB_Status>
 800a900:	4603      	mov	r3, r0
 800a902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a904:	7bbb      	ldrb	r3, [r7, #14]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a91e:	2300      	movs	r3, #0
 800a920:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a928:	78fa      	ldrb	r2, [r7, #3]
 800a92a:	4611      	mov	r1, r2
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fa ff24 	bl	800577a <HAL_PCD_EP_Close>
 800a932:	4603      	mov	r3, r0
 800a934:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 f8fd 	bl	800ab38 <USBD_Get_USB_Status>
 800a93e:	4603      	mov	r3, r0
 800a940:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a942:	7bbb      	ldrb	r3, [r7, #14]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a966:	78fa      	ldrb	r2, [r7, #3]
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fa ffdc 	bl	8005928 <HAL_PCD_EP_SetStall>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f8de 	bl	800ab38 <USBD_Get_USB_Status>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a980:	7bbb      	ldrb	r3, [r7, #14]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9a4:	78fa      	ldrb	r2, [r7, #3]
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fb f820 	bl	80059ee <HAL_PCD_EP_ClrStall>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 f8bf 	bl	800ab38 <USBD_Get_USB_Status>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a9da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	da0b      	bge.n	800a9fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9ea:	68f9      	ldr	r1, [r7, #12]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3316      	adds	r3, #22
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	e00b      	b.n	800aa14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9fc:	78fb      	ldrb	r3, [r7, #3]
 800a9fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa02:	68f9      	ldr	r1, [r7, #12]
 800aa04:	4613      	mov	r3, r2
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	440b      	add	r3, r1
 800aa0e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800aa12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa3a:	78fa      	ldrb	r2, [r7, #3]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fa fe0d 	bl	800565e <HAL_PCD_SetAddress>
 800aa44:	4603      	mov	r3, r0
 800aa46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 f874 	bl	800ab38 <USBD_Get_USB_Status>
 800aa50:	4603      	mov	r3, r0
 800aa52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	607a      	str	r2, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa72:	2300      	movs	r3, #0
 800aa74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa7c:	7af9      	ldrb	r1, [r7, #11]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	f7fa ff17 	bl	80058b4 <HAL_PCD_EP_Transmit>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 f853 	bl	800ab38 <USBD_Get_USB_Status>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa96:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	603b      	str	r3, [r7, #0]
 800aaac:	460b      	mov	r3, r1
 800aaae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aabe:	7af9      	ldrb	r1, [r7, #11]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	f7fa fea3 	bl	800580e <HAL_PCD_EP_Receive>
 800aac8:	4603      	mov	r3, r0
 800aaca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f832 	bl	800ab38 <USBD_Get_USB_Status>
 800aad4:	4603      	mov	r3, r0
 800aad6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aad8:	7dbb      	ldrb	r3, [r7, #22]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	460b      	mov	r3, r1
 800aaec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaf4:	78fa      	ldrb	r2, [r7, #3]
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fa fec3 	bl	8005884 <HAL_PCD_EP_GetRxCount>
 800aafe:	4603      	mov	r3, r0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab10:	4b03      	ldr	r3, [pc, #12]	@ (800ab20 <USBD_static_malloc+0x18>)
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	200193b4 	.word	0x200193b4

0800ab24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]

}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	4603      	mov	r3, r0
 800ab40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab46:	79fb      	ldrb	r3, [r7, #7]
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d817      	bhi.n	800ab7c <USBD_Get_USB_Status+0x44>
 800ab4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab54 <USBD_Get_USB_Status+0x1c>)
 800ab4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab52:	bf00      	nop
 800ab54:	0800ab65 	.word	0x0800ab65
 800ab58:	0800ab6b 	.word	0x0800ab6b
 800ab5c:	0800ab71 	.word	0x0800ab71
 800ab60:	0800ab77 	.word	0x0800ab77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
    break;
 800ab68:	e00b      	b.n	800ab82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab6e:	e008      	b.n	800ab82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab70:	2301      	movs	r3, #1
 800ab72:	73fb      	strb	r3, [r7, #15]
    break;
 800ab74:	e005      	b.n	800ab82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab76:	2303      	movs	r3, #3
 800ab78:	73fb      	strb	r3, [r7, #15]
    break;
 800ab7a:	e002      	b.n	800ab82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab80:	bf00      	nop
  }
  return usb_status;
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3714      	adds	r7, #20
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <std>:
 800ab90:	2300      	movs	r3, #0
 800ab92:	b510      	push	{r4, lr}
 800ab94:	4604      	mov	r4, r0
 800ab96:	e9c0 3300 	strd	r3, r3, [r0]
 800ab9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab9e:	6083      	str	r3, [r0, #8]
 800aba0:	8181      	strh	r1, [r0, #12]
 800aba2:	6643      	str	r3, [r0, #100]	@ 0x64
 800aba4:	81c2      	strh	r2, [r0, #14]
 800aba6:	6183      	str	r3, [r0, #24]
 800aba8:	4619      	mov	r1, r3
 800abaa:	2208      	movs	r2, #8
 800abac:	305c      	adds	r0, #92	@ 0x5c
 800abae:	f000 f9f9 	bl	800afa4 <memset>
 800abb2:	4b0d      	ldr	r3, [pc, #52]	@ (800abe8 <std+0x58>)
 800abb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800abb6:	4b0d      	ldr	r3, [pc, #52]	@ (800abec <std+0x5c>)
 800abb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abba:	4b0d      	ldr	r3, [pc, #52]	@ (800abf0 <std+0x60>)
 800abbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abbe:	4b0d      	ldr	r3, [pc, #52]	@ (800abf4 <std+0x64>)
 800abc0:	6323      	str	r3, [r4, #48]	@ 0x30
 800abc2:	4b0d      	ldr	r3, [pc, #52]	@ (800abf8 <std+0x68>)
 800abc4:	6224      	str	r4, [r4, #32]
 800abc6:	429c      	cmp	r4, r3
 800abc8:	d006      	beq.n	800abd8 <std+0x48>
 800abca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abce:	4294      	cmp	r4, r2
 800abd0:	d002      	beq.n	800abd8 <std+0x48>
 800abd2:	33d0      	adds	r3, #208	@ 0xd0
 800abd4:	429c      	cmp	r4, r3
 800abd6:	d105      	bne.n	800abe4 <std+0x54>
 800abd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abe0:	f000 ba58 	b.w	800b094 <__retarget_lock_init_recursive>
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	0800adf5 	.word	0x0800adf5
 800abec:	0800ae17 	.word	0x0800ae17
 800abf0:	0800ae4f 	.word	0x0800ae4f
 800abf4:	0800ae73 	.word	0x0800ae73
 800abf8:	200195d4 	.word	0x200195d4

0800abfc <stdio_exit_handler>:
 800abfc:	4a02      	ldr	r2, [pc, #8]	@ (800ac08 <stdio_exit_handler+0xc>)
 800abfe:	4903      	ldr	r1, [pc, #12]	@ (800ac0c <stdio_exit_handler+0x10>)
 800ac00:	4803      	ldr	r0, [pc, #12]	@ (800ac10 <stdio_exit_handler+0x14>)
 800ac02:	f000 b869 	b.w	800acd8 <_fwalk_sglue>
 800ac06:	bf00      	nop
 800ac08:	20000100 	.word	0x20000100
 800ac0c:	0800b931 	.word	0x0800b931
 800ac10:	20000110 	.word	0x20000110

0800ac14 <cleanup_stdio>:
 800ac14:	6841      	ldr	r1, [r0, #4]
 800ac16:	4b0c      	ldr	r3, [pc, #48]	@ (800ac48 <cleanup_stdio+0x34>)
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	d001      	beq.n	800ac24 <cleanup_stdio+0x10>
 800ac20:	f000 fe86 	bl	800b930 <_fflush_r>
 800ac24:	68a1      	ldr	r1, [r4, #8]
 800ac26:	4b09      	ldr	r3, [pc, #36]	@ (800ac4c <cleanup_stdio+0x38>)
 800ac28:	4299      	cmp	r1, r3
 800ac2a:	d002      	beq.n	800ac32 <cleanup_stdio+0x1e>
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f000 fe7f 	bl	800b930 <_fflush_r>
 800ac32:	68e1      	ldr	r1, [r4, #12]
 800ac34:	4b06      	ldr	r3, [pc, #24]	@ (800ac50 <cleanup_stdio+0x3c>)
 800ac36:	4299      	cmp	r1, r3
 800ac38:	d004      	beq.n	800ac44 <cleanup_stdio+0x30>
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac40:	f000 be76 	b.w	800b930 <_fflush_r>
 800ac44:	bd10      	pop	{r4, pc}
 800ac46:	bf00      	nop
 800ac48:	200195d4 	.word	0x200195d4
 800ac4c:	2001963c 	.word	0x2001963c
 800ac50:	200196a4 	.word	0x200196a4

0800ac54 <global_stdio_init.part.0>:
 800ac54:	b510      	push	{r4, lr}
 800ac56:	4b0b      	ldr	r3, [pc, #44]	@ (800ac84 <global_stdio_init.part.0+0x30>)
 800ac58:	4c0b      	ldr	r4, [pc, #44]	@ (800ac88 <global_stdio_init.part.0+0x34>)
 800ac5a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac8c <global_stdio_init.part.0+0x38>)
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	2200      	movs	r2, #0
 800ac62:	2104      	movs	r1, #4
 800ac64:	f7ff ff94 	bl	800ab90 <std>
 800ac68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	2109      	movs	r1, #9
 800ac70:	f7ff ff8e 	bl	800ab90 <std>
 800ac74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac78:	2202      	movs	r2, #2
 800ac7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac7e:	2112      	movs	r1, #18
 800ac80:	f7ff bf86 	b.w	800ab90 <std>
 800ac84:	2001970c 	.word	0x2001970c
 800ac88:	200195d4 	.word	0x200195d4
 800ac8c:	0800abfd 	.word	0x0800abfd

0800ac90 <__sfp_lock_acquire>:
 800ac90:	4801      	ldr	r0, [pc, #4]	@ (800ac98 <__sfp_lock_acquire+0x8>)
 800ac92:	f000 ba00 	b.w	800b096 <__retarget_lock_acquire_recursive>
 800ac96:	bf00      	nop
 800ac98:	20019715 	.word	0x20019715

0800ac9c <__sfp_lock_release>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	@ (800aca4 <__sfp_lock_release+0x8>)
 800ac9e:	f000 b9fb 	b.w	800b098 <__retarget_lock_release_recursive>
 800aca2:	bf00      	nop
 800aca4:	20019715 	.word	0x20019715

0800aca8 <__sinit>:
 800aca8:	b510      	push	{r4, lr}
 800acaa:	4604      	mov	r4, r0
 800acac:	f7ff fff0 	bl	800ac90 <__sfp_lock_acquire>
 800acb0:	6a23      	ldr	r3, [r4, #32]
 800acb2:	b11b      	cbz	r3, 800acbc <__sinit+0x14>
 800acb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb8:	f7ff bff0 	b.w	800ac9c <__sfp_lock_release>
 800acbc:	4b04      	ldr	r3, [pc, #16]	@ (800acd0 <__sinit+0x28>)
 800acbe:	6223      	str	r3, [r4, #32]
 800acc0:	4b04      	ldr	r3, [pc, #16]	@ (800acd4 <__sinit+0x2c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1f5      	bne.n	800acb4 <__sinit+0xc>
 800acc8:	f7ff ffc4 	bl	800ac54 <global_stdio_init.part.0>
 800accc:	e7f2      	b.n	800acb4 <__sinit+0xc>
 800acce:	bf00      	nop
 800acd0:	0800ac15 	.word	0x0800ac15
 800acd4:	2001970c 	.word	0x2001970c

0800acd8 <_fwalk_sglue>:
 800acd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acdc:	4607      	mov	r7, r0
 800acde:	4688      	mov	r8, r1
 800ace0:	4614      	mov	r4, r2
 800ace2:	2600      	movs	r6, #0
 800ace4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ace8:	f1b9 0901 	subs.w	r9, r9, #1
 800acec:	d505      	bpl.n	800acfa <_fwalk_sglue+0x22>
 800acee:	6824      	ldr	r4, [r4, #0]
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	d1f7      	bne.n	800ace4 <_fwalk_sglue+0xc>
 800acf4:	4630      	mov	r0, r6
 800acf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d907      	bls.n	800ad10 <_fwalk_sglue+0x38>
 800ad00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad04:	3301      	adds	r3, #1
 800ad06:	d003      	beq.n	800ad10 <_fwalk_sglue+0x38>
 800ad08:	4629      	mov	r1, r5
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	47c0      	blx	r8
 800ad0e:	4306      	orrs	r6, r0
 800ad10:	3568      	adds	r5, #104	@ 0x68
 800ad12:	e7e9      	b.n	800ace8 <_fwalk_sglue+0x10>

0800ad14 <iprintf>:
 800ad14:	b40f      	push	{r0, r1, r2, r3}
 800ad16:	b507      	push	{r0, r1, r2, lr}
 800ad18:	4906      	ldr	r1, [pc, #24]	@ (800ad34 <iprintf+0x20>)
 800ad1a:	ab04      	add	r3, sp, #16
 800ad1c:	6808      	ldr	r0, [r1, #0]
 800ad1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad22:	6881      	ldr	r1, [r0, #8]
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	f000 fadb 	bl	800b2e0 <_vfiprintf_r>
 800ad2a:	b003      	add	sp, #12
 800ad2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad30:	b004      	add	sp, #16
 800ad32:	4770      	bx	lr
 800ad34:	2000010c 	.word	0x2000010c

0800ad38 <_puts_r>:
 800ad38:	6a03      	ldr	r3, [r0, #32]
 800ad3a:	b570      	push	{r4, r5, r6, lr}
 800ad3c:	6884      	ldr	r4, [r0, #8]
 800ad3e:	4605      	mov	r5, r0
 800ad40:	460e      	mov	r6, r1
 800ad42:	b90b      	cbnz	r3, 800ad48 <_puts_r+0x10>
 800ad44:	f7ff ffb0 	bl	800aca8 <__sinit>
 800ad48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad4a:	07db      	lsls	r3, r3, #31
 800ad4c:	d405      	bmi.n	800ad5a <_puts_r+0x22>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	0598      	lsls	r0, r3, #22
 800ad52:	d402      	bmi.n	800ad5a <_puts_r+0x22>
 800ad54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad56:	f000 f99e 	bl	800b096 <__retarget_lock_acquire_recursive>
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	0719      	lsls	r1, r3, #28
 800ad5e:	d502      	bpl.n	800ad66 <_puts_r+0x2e>
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d135      	bne.n	800add2 <_puts_r+0x9a>
 800ad66:	4621      	mov	r1, r4
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f000 f8c5 	bl	800aef8 <__swsetup_r>
 800ad6e:	b380      	cbz	r0, 800add2 <_puts_r+0x9a>
 800ad70:	f04f 35ff 	mov.w	r5, #4294967295
 800ad74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad76:	07da      	lsls	r2, r3, #31
 800ad78:	d405      	bmi.n	800ad86 <_puts_r+0x4e>
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	059b      	lsls	r3, r3, #22
 800ad7e:	d402      	bmi.n	800ad86 <_puts_r+0x4e>
 800ad80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad82:	f000 f989 	bl	800b098 <__retarget_lock_release_recursive>
 800ad86:	4628      	mov	r0, r5
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da04      	bge.n	800ad98 <_puts_r+0x60>
 800ad8e:	69a2      	ldr	r2, [r4, #24]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	dc17      	bgt.n	800adc4 <_puts_r+0x8c>
 800ad94:	290a      	cmp	r1, #10
 800ad96:	d015      	beq.n	800adc4 <_puts_r+0x8c>
 800ad98:	6823      	ldr	r3, [r4, #0]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	6022      	str	r2, [r4, #0]
 800ad9e:	7019      	strb	r1, [r3, #0]
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ada6:	3b01      	subs	r3, #1
 800ada8:	60a3      	str	r3, [r4, #8]
 800adaa:	2900      	cmp	r1, #0
 800adac:	d1ed      	bne.n	800ad8a <_puts_r+0x52>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	da11      	bge.n	800add6 <_puts_r+0x9e>
 800adb2:	4622      	mov	r2, r4
 800adb4:	210a      	movs	r1, #10
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 f85f 	bl	800ae7a <__swbuf_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	d0d7      	beq.n	800ad70 <_puts_r+0x38>
 800adc0:	250a      	movs	r5, #10
 800adc2:	e7d7      	b.n	800ad74 <_puts_r+0x3c>
 800adc4:	4622      	mov	r2, r4
 800adc6:	4628      	mov	r0, r5
 800adc8:	f000 f857 	bl	800ae7a <__swbuf_r>
 800adcc:	3001      	adds	r0, #1
 800adce:	d1e7      	bne.n	800ada0 <_puts_r+0x68>
 800add0:	e7ce      	b.n	800ad70 <_puts_r+0x38>
 800add2:	3e01      	subs	r6, #1
 800add4:	e7e4      	b.n	800ada0 <_puts_r+0x68>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	6022      	str	r2, [r4, #0]
 800addc:	220a      	movs	r2, #10
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	e7ee      	b.n	800adc0 <_puts_r+0x88>
	...

0800ade4 <puts>:
 800ade4:	4b02      	ldr	r3, [pc, #8]	@ (800adf0 <puts+0xc>)
 800ade6:	4601      	mov	r1, r0
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	f7ff bfa5 	b.w	800ad38 <_puts_r>
 800adee:	bf00      	nop
 800adf0:	2000010c 	.word	0x2000010c

0800adf4 <__sread>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	460c      	mov	r4, r1
 800adf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfc:	f000 f8fc 	bl	800aff8 <_read_r>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	bfab      	itete	ge
 800ae04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae06:	89a3      	ldrhlt	r3, [r4, #12]
 800ae08:	181b      	addge	r3, r3, r0
 800ae0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae0e:	bfac      	ite	ge
 800ae10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae12:	81a3      	strhlt	r3, [r4, #12]
 800ae14:	bd10      	pop	{r4, pc}

0800ae16 <__swrite>:
 800ae16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1a:	461f      	mov	r7, r3
 800ae1c:	898b      	ldrh	r3, [r1, #12]
 800ae1e:	05db      	lsls	r3, r3, #23
 800ae20:	4605      	mov	r5, r0
 800ae22:	460c      	mov	r4, r1
 800ae24:	4616      	mov	r6, r2
 800ae26:	d505      	bpl.n	800ae34 <__swrite+0x1e>
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f000 f8d0 	bl	800afd4 <_lseek_r>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	4632      	mov	r2, r6
 800ae42:	463b      	mov	r3, r7
 800ae44:	4628      	mov	r0, r5
 800ae46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	f000 b8e7 	b.w	800b01c <_write_r>

0800ae4e <__sseek>:
 800ae4e:	b510      	push	{r4, lr}
 800ae50:	460c      	mov	r4, r1
 800ae52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae56:	f000 f8bd 	bl	800afd4 <_lseek_r>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	bf15      	itete	ne
 800ae60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae6a:	81a3      	strheq	r3, [r4, #12]
 800ae6c:	bf18      	it	ne
 800ae6e:	81a3      	strhne	r3, [r4, #12]
 800ae70:	bd10      	pop	{r4, pc}

0800ae72 <__sclose>:
 800ae72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae76:	f000 b89d 	b.w	800afb4 <_close_r>

0800ae7a <__swbuf_r>:
 800ae7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7c:	460e      	mov	r6, r1
 800ae7e:	4614      	mov	r4, r2
 800ae80:	4605      	mov	r5, r0
 800ae82:	b118      	cbz	r0, 800ae8c <__swbuf_r+0x12>
 800ae84:	6a03      	ldr	r3, [r0, #32]
 800ae86:	b90b      	cbnz	r3, 800ae8c <__swbuf_r+0x12>
 800ae88:	f7ff ff0e 	bl	800aca8 <__sinit>
 800ae8c:	69a3      	ldr	r3, [r4, #24]
 800ae8e:	60a3      	str	r3, [r4, #8]
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	071a      	lsls	r2, r3, #28
 800ae94:	d501      	bpl.n	800ae9a <__swbuf_r+0x20>
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	b943      	cbnz	r3, 800aeac <__swbuf_r+0x32>
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 f82b 	bl	800aef8 <__swsetup_r>
 800aea2:	b118      	cbz	r0, 800aeac <__swbuf_r+0x32>
 800aea4:	f04f 37ff 	mov.w	r7, #4294967295
 800aea8:	4638      	mov	r0, r7
 800aeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	6922      	ldr	r2, [r4, #16]
 800aeb0:	1a98      	subs	r0, r3, r2
 800aeb2:	6963      	ldr	r3, [r4, #20]
 800aeb4:	b2f6      	uxtb	r6, r6
 800aeb6:	4283      	cmp	r3, r0
 800aeb8:	4637      	mov	r7, r6
 800aeba:	dc05      	bgt.n	800aec8 <__swbuf_r+0x4e>
 800aebc:	4621      	mov	r1, r4
 800aebe:	4628      	mov	r0, r5
 800aec0:	f000 fd36 	bl	800b930 <_fflush_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d1ed      	bne.n	800aea4 <__swbuf_r+0x2a>
 800aec8:	68a3      	ldr	r3, [r4, #8]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	60a3      	str	r3, [r4, #8]
 800aece:	6823      	ldr	r3, [r4, #0]
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	6022      	str	r2, [r4, #0]
 800aed4:	701e      	strb	r6, [r3, #0]
 800aed6:	6962      	ldr	r2, [r4, #20]
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d004      	beq.n	800aee8 <__swbuf_r+0x6e>
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	07db      	lsls	r3, r3, #31
 800aee2:	d5e1      	bpl.n	800aea8 <__swbuf_r+0x2e>
 800aee4:	2e0a      	cmp	r6, #10
 800aee6:	d1df      	bne.n	800aea8 <__swbuf_r+0x2e>
 800aee8:	4621      	mov	r1, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 fd20 	bl	800b930 <_fflush_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d0d9      	beq.n	800aea8 <__swbuf_r+0x2e>
 800aef4:	e7d6      	b.n	800aea4 <__swbuf_r+0x2a>
	...

0800aef8 <__swsetup_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4b29      	ldr	r3, [pc, #164]	@ (800afa0 <__swsetup_r+0xa8>)
 800aefc:	4605      	mov	r5, r0
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	460c      	mov	r4, r1
 800af02:	b118      	cbz	r0, 800af0c <__swsetup_r+0x14>
 800af04:	6a03      	ldr	r3, [r0, #32]
 800af06:	b90b      	cbnz	r3, 800af0c <__swsetup_r+0x14>
 800af08:	f7ff fece 	bl	800aca8 <__sinit>
 800af0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af10:	0719      	lsls	r1, r3, #28
 800af12:	d422      	bmi.n	800af5a <__swsetup_r+0x62>
 800af14:	06da      	lsls	r2, r3, #27
 800af16:	d407      	bmi.n	800af28 <__swsetup_r+0x30>
 800af18:	2209      	movs	r2, #9
 800af1a:	602a      	str	r2, [r5, #0]
 800af1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	e033      	b.n	800af90 <__swsetup_r+0x98>
 800af28:	0758      	lsls	r0, r3, #29
 800af2a:	d512      	bpl.n	800af52 <__swsetup_r+0x5a>
 800af2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af2e:	b141      	cbz	r1, 800af42 <__swsetup_r+0x4a>
 800af30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af34:	4299      	cmp	r1, r3
 800af36:	d002      	beq.n	800af3e <__swsetup_r+0x46>
 800af38:	4628      	mov	r0, r5
 800af3a:	f000 f8af 	bl	800b09c <_free_r>
 800af3e:	2300      	movs	r3, #0
 800af40:	6363      	str	r3, [r4, #52]	@ 0x34
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	2300      	movs	r3, #0
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	f043 0308 	orr.w	r3, r3, #8
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	b94b      	cbnz	r3, 800af72 <__swsetup_r+0x7a>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af68:	d003      	beq.n	800af72 <__swsetup_r+0x7a>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4628      	mov	r0, r5
 800af6e:	f000 fd2d 	bl	800b9cc <__smakebuf_r>
 800af72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af76:	f013 0201 	ands.w	r2, r3, #1
 800af7a:	d00a      	beq.n	800af92 <__swsetup_r+0x9a>
 800af7c:	2200      	movs	r2, #0
 800af7e:	60a2      	str	r2, [r4, #8]
 800af80:	6962      	ldr	r2, [r4, #20]
 800af82:	4252      	negs	r2, r2
 800af84:	61a2      	str	r2, [r4, #24]
 800af86:	6922      	ldr	r2, [r4, #16]
 800af88:	b942      	cbnz	r2, 800af9c <__swsetup_r+0xa4>
 800af8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af8e:	d1c5      	bne.n	800af1c <__swsetup_r+0x24>
 800af90:	bd38      	pop	{r3, r4, r5, pc}
 800af92:	0799      	lsls	r1, r3, #30
 800af94:	bf58      	it	pl
 800af96:	6962      	ldrpl	r2, [r4, #20]
 800af98:	60a2      	str	r2, [r4, #8]
 800af9a:	e7f4      	b.n	800af86 <__swsetup_r+0x8e>
 800af9c:	2000      	movs	r0, #0
 800af9e:	e7f7      	b.n	800af90 <__swsetup_r+0x98>
 800afa0:	2000010c 	.word	0x2000010c

0800afa4 <memset>:
 800afa4:	4402      	add	r2, r0
 800afa6:	4603      	mov	r3, r0
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d100      	bne.n	800afae <memset+0xa>
 800afac:	4770      	bx	lr
 800afae:	f803 1b01 	strb.w	r1, [r3], #1
 800afb2:	e7f9      	b.n	800afa8 <memset+0x4>

0800afb4 <_close_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d06      	ldr	r5, [pc, #24]	@ (800afd0 <_close_r+0x1c>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	f7f7 f845 	bl	800204e <_close>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_close_r+0x1a>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_close_r+0x1a>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	20019710 	.word	0x20019710

0800afd4 <_lseek_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d07      	ldr	r5, [pc, #28]	@ (800aff4 <_lseek_r+0x20>)
 800afd8:	4604      	mov	r4, r0
 800afda:	4608      	mov	r0, r1
 800afdc:	4611      	mov	r1, r2
 800afde:	2200      	movs	r2, #0
 800afe0:	602a      	str	r2, [r5, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	f7f7 f85a 	bl	800209c <_lseek>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_lseek_r+0x1e>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_lseek_r+0x1e>
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	20019710 	.word	0x20019710

0800aff8 <_read_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d07      	ldr	r5, [pc, #28]	@ (800b018 <_read_r+0x20>)
 800affc:	4604      	mov	r4, r0
 800affe:	4608      	mov	r0, r1
 800b000:	4611      	mov	r1, r2
 800b002:	2200      	movs	r2, #0
 800b004:	602a      	str	r2, [r5, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	f7f7 f804 	bl	8002014 <_read>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_read_r+0x1e>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_read_r+0x1e>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	20019710 	.word	0x20019710

0800b01c <_write_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d07      	ldr	r5, [pc, #28]	@ (800b03c <_write_r+0x20>)
 800b020:	4604      	mov	r4, r0
 800b022:	4608      	mov	r0, r1
 800b024:	4611      	mov	r1, r2
 800b026:	2200      	movs	r2, #0
 800b028:	602a      	str	r2, [r5, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f7f6 fe08 	bl	8001c40 <_write>
 800b030:	1c43      	adds	r3, r0, #1
 800b032:	d102      	bne.n	800b03a <_write_r+0x1e>
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	b103      	cbz	r3, 800b03a <_write_r+0x1e>
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	20019710 	.word	0x20019710

0800b040 <__errno>:
 800b040:	4b01      	ldr	r3, [pc, #4]	@ (800b048 <__errno+0x8>)
 800b042:	6818      	ldr	r0, [r3, #0]
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	2000010c 	.word	0x2000010c

0800b04c <__libc_init_array>:
 800b04c:	b570      	push	{r4, r5, r6, lr}
 800b04e:	4d0d      	ldr	r5, [pc, #52]	@ (800b084 <__libc_init_array+0x38>)
 800b050:	4c0d      	ldr	r4, [pc, #52]	@ (800b088 <__libc_init_array+0x3c>)
 800b052:	1b64      	subs	r4, r4, r5
 800b054:	10a4      	asrs	r4, r4, #2
 800b056:	2600      	movs	r6, #0
 800b058:	42a6      	cmp	r6, r4
 800b05a:	d109      	bne.n	800b070 <__libc_init_array+0x24>
 800b05c:	4d0b      	ldr	r5, [pc, #44]	@ (800b08c <__libc_init_array+0x40>)
 800b05e:	4c0c      	ldr	r4, [pc, #48]	@ (800b090 <__libc_init_array+0x44>)
 800b060:	f001 fd46 	bl	800caf0 <_init>
 800b064:	1b64      	subs	r4, r4, r5
 800b066:	10a4      	asrs	r4, r4, #2
 800b068:	2600      	movs	r6, #0
 800b06a:	42a6      	cmp	r6, r4
 800b06c:	d105      	bne.n	800b07a <__libc_init_array+0x2e>
 800b06e:	bd70      	pop	{r4, r5, r6, pc}
 800b070:	f855 3b04 	ldr.w	r3, [r5], #4
 800b074:	4798      	blx	r3
 800b076:	3601      	adds	r6, #1
 800b078:	e7ee      	b.n	800b058 <__libc_init_array+0xc>
 800b07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b07e:	4798      	blx	r3
 800b080:	3601      	adds	r6, #1
 800b082:	e7f2      	b.n	800b06a <__libc_init_array+0x1e>
 800b084:	0800ce00 	.word	0x0800ce00
 800b088:	0800ce00 	.word	0x0800ce00
 800b08c:	0800ce00 	.word	0x0800ce00
 800b090:	0800ce04 	.word	0x0800ce04

0800b094 <__retarget_lock_init_recursive>:
 800b094:	4770      	bx	lr

0800b096 <__retarget_lock_acquire_recursive>:
 800b096:	4770      	bx	lr

0800b098 <__retarget_lock_release_recursive>:
 800b098:	4770      	bx	lr
	...

0800b09c <_free_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4605      	mov	r5, r0
 800b0a0:	2900      	cmp	r1, #0
 800b0a2:	d041      	beq.n	800b128 <_free_r+0x8c>
 800b0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a8:	1f0c      	subs	r4, r1, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bfb8      	it	lt
 800b0ae:	18e4      	addlt	r4, r4, r3
 800b0b0:	f000 f8e0 	bl	800b274 <__malloc_lock>
 800b0b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b12c <_free_r+0x90>)
 800b0b6:	6813      	ldr	r3, [r2, #0]
 800b0b8:	b933      	cbnz	r3, 800b0c8 <_free_r+0x2c>
 800b0ba:	6063      	str	r3, [r4, #4]
 800b0bc:	6014      	str	r4, [r2, #0]
 800b0be:	4628      	mov	r0, r5
 800b0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c4:	f000 b8dc 	b.w	800b280 <__malloc_unlock>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d908      	bls.n	800b0de <_free_r+0x42>
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	1821      	adds	r1, r4, r0
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	bf01      	itttt	eq
 800b0d4:	6819      	ldreq	r1, [r3, #0]
 800b0d6:	685b      	ldreq	r3, [r3, #4]
 800b0d8:	1809      	addeq	r1, r1, r0
 800b0da:	6021      	streq	r1, [r4, #0]
 800b0dc:	e7ed      	b.n	800b0ba <_free_r+0x1e>
 800b0de:	461a      	mov	r2, r3
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	b10b      	cbz	r3, 800b0e8 <_free_r+0x4c>
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	d9fa      	bls.n	800b0de <_free_r+0x42>
 800b0e8:	6811      	ldr	r1, [r2, #0]
 800b0ea:	1850      	adds	r0, r2, r1
 800b0ec:	42a0      	cmp	r0, r4
 800b0ee:	d10b      	bne.n	800b108 <_free_r+0x6c>
 800b0f0:	6820      	ldr	r0, [r4, #0]
 800b0f2:	4401      	add	r1, r0
 800b0f4:	1850      	adds	r0, r2, r1
 800b0f6:	4283      	cmp	r3, r0
 800b0f8:	6011      	str	r1, [r2, #0]
 800b0fa:	d1e0      	bne.n	800b0be <_free_r+0x22>
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	6053      	str	r3, [r2, #4]
 800b102:	4408      	add	r0, r1
 800b104:	6010      	str	r0, [r2, #0]
 800b106:	e7da      	b.n	800b0be <_free_r+0x22>
 800b108:	d902      	bls.n	800b110 <_free_r+0x74>
 800b10a:	230c      	movs	r3, #12
 800b10c:	602b      	str	r3, [r5, #0]
 800b10e:	e7d6      	b.n	800b0be <_free_r+0x22>
 800b110:	6820      	ldr	r0, [r4, #0]
 800b112:	1821      	adds	r1, r4, r0
 800b114:	428b      	cmp	r3, r1
 800b116:	bf04      	itt	eq
 800b118:	6819      	ldreq	r1, [r3, #0]
 800b11a:	685b      	ldreq	r3, [r3, #4]
 800b11c:	6063      	str	r3, [r4, #4]
 800b11e:	bf04      	itt	eq
 800b120:	1809      	addeq	r1, r1, r0
 800b122:	6021      	streq	r1, [r4, #0]
 800b124:	6054      	str	r4, [r2, #4]
 800b126:	e7ca      	b.n	800b0be <_free_r+0x22>
 800b128:	bd38      	pop	{r3, r4, r5, pc}
 800b12a:	bf00      	nop
 800b12c:	2001971c 	.word	0x2001971c

0800b130 <sbrk_aligned>:
 800b130:	b570      	push	{r4, r5, r6, lr}
 800b132:	4e0f      	ldr	r6, [pc, #60]	@ (800b170 <sbrk_aligned+0x40>)
 800b134:	460c      	mov	r4, r1
 800b136:	6831      	ldr	r1, [r6, #0]
 800b138:	4605      	mov	r5, r0
 800b13a:	b911      	cbnz	r1, 800b142 <sbrk_aligned+0x12>
 800b13c:	f000 fca4 	bl	800ba88 <_sbrk_r>
 800b140:	6030      	str	r0, [r6, #0]
 800b142:	4621      	mov	r1, r4
 800b144:	4628      	mov	r0, r5
 800b146:	f000 fc9f 	bl	800ba88 <_sbrk_r>
 800b14a:	1c43      	adds	r3, r0, #1
 800b14c:	d103      	bne.n	800b156 <sbrk_aligned+0x26>
 800b14e:	f04f 34ff 	mov.w	r4, #4294967295
 800b152:	4620      	mov	r0, r4
 800b154:	bd70      	pop	{r4, r5, r6, pc}
 800b156:	1cc4      	adds	r4, r0, #3
 800b158:	f024 0403 	bic.w	r4, r4, #3
 800b15c:	42a0      	cmp	r0, r4
 800b15e:	d0f8      	beq.n	800b152 <sbrk_aligned+0x22>
 800b160:	1a21      	subs	r1, r4, r0
 800b162:	4628      	mov	r0, r5
 800b164:	f000 fc90 	bl	800ba88 <_sbrk_r>
 800b168:	3001      	adds	r0, #1
 800b16a:	d1f2      	bne.n	800b152 <sbrk_aligned+0x22>
 800b16c:	e7ef      	b.n	800b14e <sbrk_aligned+0x1e>
 800b16e:	bf00      	nop
 800b170:	20019718 	.word	0x20019718

0800b174 <_malloc_r>:
 800b174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b178:	1ccd      	adds	r5, r1, #3
 800b17a:	f025 0503 	bic.w	r5, r5, #3
 800b17e:	3508      	adds	r5, #8
 800b180:	2d0c      	cmp	r5, #12
 800b182:	bf38      	it	cc
 800b184:	250c      	movcc	r5, #12
 800b186:	2d00      	cmp	r5, #0
 800b188:	4606      	mov	r6, r0
 800b18a:	db01      	blt.n	800b190 <_malloc_r+0x1c>
 800b18c:	42a9      	cmp	r1, r5
 800b18e:	d904      	bls.n	800b19a <_malloc_r+0x26>
 800b190:	230c      	movs	r3, #12
 800b192:	6033      	str	r3, [r6, #0]
 800b194:	2000      	movs	r0, #0
 800b196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b19a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b270 <_malloc_r+0xfc>
 800b19e:	f000 f869 	bl	800b274 <__malloc_lock>
 800b1a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1a6:	461c      	mov	r4, r3
 800b1a8:	bb44      	cbnz	r4, 800b1fc <_malloc_r+0x88>
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7ff ffbf 	bl	800b130 <sbrk_aligned>
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	d158      	bne.n	800b26a <_malloc_r+0xf6>
 800b1b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b1bc:	4627      	mov	r7, r4
 800b1be:	2f00      	cmp	r7, #0
 800b1c0:	d143      	bne.n	800b24a <_malloc_r+0xd6>
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	d04b      	beq.n	800b25e <_malloc_r+0xea>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	eb04 0903 	add.w	r9, r4, r3
 800b1d0:	f000 fc5a 	bl	800ba88 <_sbrk_r>
 800b1d4:	4581      	cmp	r9, r0
 800b1d6:	d142      	bne.n	800b25e <_malloc_r+0xea>
 800b1d8:	6821      	ldr	r1, [r4, #0]
 800b1da:	1a6d      	subs	r5, r5, r1
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ffa6 	bl	800b130 <sbrk_aligned>
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d03a      	beq.n	800b25e <_malloc_r+0xea>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	442b      	add	r3, r5
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	bb62      	cbnz	r2, 800b250 <_malloc_r+0xdc>
 800b1f6:	f8c8 7000 	str.w	r7, [r8]
 800b1fa:	e00f      	b.n	800b21c <_malloc_r+0xa8>
 800b1fc:	6822      	ldr	r2, [r4, #0]
 800b1fe:	1b52      	subs	r2, r2, r5
 800b200:	d420      	bmi.n	800b244 <_malloc_r+0xd0>
 800b202:	2a0b      	cmp	r2, #11
 800b204:	d917      	bls.n	800b236 <_malloc_r+0xc2>
 800b206:	1961      	adds	r1, r4, r5
 800b208:	42a3      	cmp	r3, r4
 800b20a:	6025      	str	r5, [r4, #0]
 800b20c:	bf18      	it	ne
 800b20e:	6059      	strne	r1, [r3, #4]
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	bf08      	it	eq
 800b214:	f8c8 1000 	streq.w	r1, [r8]
 800b218:	5162      	str	r2, [r4, r5]
 800b21a:	604b      	str	r3, [r1, #4]
 800b21c:	4630      	mov	r0, r6
 800b21e:	f000 f82f 	bl	800b280 <__malloc_unlock>
 800b222:	f104 000b 	add.w	r0, r4, #11
 800b226:	1d23      	adds	r3, r4, #4
 800b228:	f020 0007 	bic.w	r0, r0, #7
 800b22c:	1ac2      	subs	r2, r0, r3
 800b22e:	bf1c      	itt	ne
 800b230:	1a1b      	subne	r3, r3, r0
 800b232:	50a3      	strne	r3, [r4, r2]
 800b234:	e7af      	b.n	800b196 <_malloc_r+0x22>
 800b236:	6862      	ldr	r2, [r4, #4]
 800b238:	42a3      	cmp	r3, r4
 800b23a:	bf0c      	ite	eq
 800b23c:	f8c8 2000 	streq.w	r2, [r8]
 800b240:	605a      	strne	r2, [r3, #4]
 800b242:	e7eb      	b.n	800b21c <_malloc_r+0xa8>
 800b244:	4623      	mov	r3, r4
 800b246:	6864      	ldr	r4, [r4, #4]
 800b248:	e7ae      	b.n	800b1a8 <_malloc_r+0x34>
 800b24a:	463c      	mov	r4, r7
 800b24c:	687f      	ldr	r7, [r7, #4]
 800b24e:	e7b6      	b.n	800b1be <_malloc_r+0x4a>
 800b250:	461a      	mov	r2, r3
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	42a3      	cmp	r3, r4
 800b256:	d1fb      	bne.n	800b250 <_malloc_r+0xdc>
 800b258:	2300      	movs	r3, #0
 800b25a:	6053      	str	r3, [r2, #4]
 800b25c:	e7de      	b.n	800b21c <_malloc_r+0xa8>
 800b25e:	230c      	movs	r3, #12
 800b260:	6033      	str	r3, [r6, #0]
 800b262:	4630      	mov	r0, r6
 800b264:	f000 f80c 	bl	800b280 <__malloc_unlock>
 800b268:	e794      	b.n	800b194 <_malloc_r+0x20>
 800b26a:	6005      	str	r5, [r0, #0]
 800b26c:	e7d6      	b.n	800b21c <_malloc_r+0xa8>
 800b26e:	bf00      	nop
 800b270:	2001971c 	.word	0x2001971c

0800b274 <__malloc_lock>:
 800b274:	4801      	ldr	r0, [pc, #4]	@ (800b27c <__malloc_lock+0x8>)
 800b276:	f7ff bf0e 	b.w	800b096 <__retarget_lock_acquire_recursive>
 800b27a:	bf00      	nop
 800b27c:	20019714 	.word	0x20019714

0800b280 <__malloc_unlock>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__malloc_unlock+0x8>)
 800b282:	f7ff bf09 	b.w	800b098 <__retarget_lock_release_recursive>
 800b286:	bf00      	nop
 800b288:	20019714 	.word	0x20019714

0800b28c <__sfputc_r>:
 800b28c:	6893      	ldr	r3, [r2, #8]
 800b28e:	3b01      	subs	r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	b410      	push	{r4}
 800b294:	6093      	str	r3, [r2, #8]
 800b296:	da08      	bge.n	800b2aa <__sfputc_r+0x1e>
 800b298:	6994      	ldr	r4, [r2, #24]
 800b29a:	42a3      	cmp	r3, r4
 800b29c:	db01      	blt.n	800b2a2 <__sfputc_r+0x16>
 800b29e:	290a      	cmp	r1, #10
 800b2a0:	d103      	bne.n	800b2aa <__sfputc_r+0x1e>
 800b2a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a6:	f7ff bde8 	b.w	800ae7a <__swbuf_r>
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	1c58      	adds	r0, r3, #1
 800b2ae:	6010      	str	r0, [r2, #0]
 800b2b0:	7019      	strb	r1, [r3, #0]
 800b2b2:	4608      	mov	r0, r1
 800b2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <__sfputs_r>:
 800b2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460f      	mov	r7, r1
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	18d5      	adds	r5, r2, r3
 800b2c4:	42ac      	cmp	r4, r5
 800b2c6:	d101      	bne.n	800b2cc <__sfputs_r+0x12>
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	e007      	b.n	800b2dc <__sfputs_r+0x22>
 800b2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d0:	463a      	mov	r2, r7
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7ff ffda 	bl	800b28c <__sfputc_r>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d1f3      	bne.n	800b2c4 <__sfputs_r+0xa>
 800b2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b2e0 <_vfiprintf_r>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	b09d      	sub	sp, #116	@ 0x74
 800b2e8:	4614      	mov	r4, r2
 800b2ea:	4698      	mov	r8, r3
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	b118      	cbz	r0, 800b2f8 <_vfiprintf_r+0x18>
 800b2f0:	6a03      	ldr	r3, [r0, #32]
 800b2f2:	b90b      	cbnz	r3, 800b2f8 <_vfiprintf_r+0x18>
 800b2f4:	f7ff fcd8 	bl	800aca8 <__sinit>
 800b2f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2fa:	07d9      	lsls	r1, r3, #31
 800b2fc:	d405      	bmi.n	800b30a <_vfiprintf_r+0x2a>
 800b2fe:	89ab      	ldrh	r3, [r5, #12]
 800b300:	059a      	lsls	r2, r3, #22
 800b302:	d402      	bmi.n	800b30a <_vfiprintf_r+0x2a>
 800b304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b306:	f7ff fec6 	bl	800b096 <__retarget_lock_acquire_recursive>
 800b30a:	89ab      	ldrh	r3, [r5, #12]
 800b30c:	071b      	lsls	r3, r3, #28
 800b30e:	d501      	bpl.n	800b314 <_vfiprintf_r+0x34>
 800b310:	692b      	ldr	r3, [r5, #16]
 800b312:	b99b      	cbnz	r3, 800b33c <_vfiprintf_r+0x5c>
 800b314:	4629      	mov	r1, r5
 800b316:	4630      	mov	r0, r6
 800b318:	f7ff fdee 	bl	800aef8 <__swsetup_r>
 800b31c:	b170      	cbz	r0, 800b33c <_vfiprintf_r+0x5c>
 800b31e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b320:	07dc      	lsls	r4, r3, #31
 800b322:	d504      	bpl.n	800b32e <_vfiprintf_r+0x4e>
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	b01d      	add	sp, #116	@ 0x74
 800b32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32e:	89ab      	ldrh	r3, [r5, #12]
 800b330:	0598      	lsls	r0, r3, #22
 800b332:	d4f7      	bmi.n	800b324 <_vfiprintf_r+0x44>
 800b334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b336:	f7ff feaf 	bl	800b098 <__retarget_lock_release_recursive>
 800b33a:	e7f3      	b.n	800b324 <_vfiprintf_r+0x44>
 800b33c:	2300      	movs	r3, #0
 800b33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b340:	2320      	movs	r3, #32
 800b342:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b346:	f8cd 800c 	str.w	r8, [sp, #12]
 800b34a:	2330      	movs	r3, #48	@ 0x30
 800b34c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4fc <_vfiprintf_r+0x21c>
 800b350:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b354:	f04f 0901 	mov.w	r9, #1
 800b358:	4623      	mov	r3, r4
 800b35a:	469a      	mov	sl, r3
 800b35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b360:	b10a      	cbz	r2, 800b366 <_vfiprintf_r+0x86>
 800b362:	2a25      	cmp	r2, #37	@ 0x25
 800b364:	d1f9      	bne.n	800b35a <_vfiprintf_r+0x7a>
 800b366:	ebba 0b04 	subs.w	fp, sl, r4
 800b36a:	d00b      	beq.n	800b384 <_vfiprintf_r+0xa4>
 800b36c:	465b      	mov	r3, fp
 800b36e:	4622      	mov	r2, r4
 800b370:	4629      	mov	r1, r5
 800b372:	4630      	mov	r0, r6
 800b374:	f7ff ffa1 	bl	800b2ba <__sfputs_r>
 800b378:	3001      	adds	r0, #1
 800b37a:	f000 80a7 	beq.w	800b4cc <_vfiprintf_r+0x1ec>
 800b37e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b380:	445a      	add	r2, fp
 800b382:	9209      	str	r2, [sp, #36]	@ 0x24
 800b384:	f89a 3000 	ldrb.w	r3, [sl]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 809f 	beq.w	800b4cc <_vfiprintf_r+0x1ec>
 800b38e:	2300      	movs	r3, #0
 800b390:	f04f 32ff 	mov.w	r2, #4294967295
 800b394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b398:	f10a 0a01 	add.w	sl, sl, #1
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	9307      	str	r3, [sp, #28]
 800b3a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3a6:	4654      	mov	r4, sl
 800b3a8:	2205      	movs	r2, #5
 800b3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ae:	4853      	ldr	r0, [pc, #332]	@ (800b4fc <_vfiprintf_r+0x21c>)
 800b3b0:	f7f4 ff0e 	bl	80001d0 <memchr>
 800b3b4:	9a04      	ldr	r2, [sp, #16]
 800b3b6:	b9d8      	cbnz	r0, 800b3f0 <_vfiprintf_r+0x110>
 800b3b8:	06d1      	lsls	r1, r2, #27
 800b3ba:	bf44      	itt	mi
 800b3bc:	2320      	movmi	r3, #32
 800b3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3c2:	0713      	lsls	r3, r2, #28
 800b3c4:	bf44      	itt	mi
 800b3c6:	232b      	movmi	r3, #43	@ 0x2b
 800b3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3d2:	d015      	beq.n	800b400 <_vfiprintf_r+0x120>
 800b3d4:	9a07      	ldr	r2, [sp, #28]
 800b3d6:	4654      	mov	r4, sl
 800b3d8:	2000      	movs	r0, #0
 800b3da:	f04f 0c0a 	mov.w	ip, #10
 800b3de:	4621      	mov	r1, r4
 800b3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3e4:	3b30      	subs	r3, #48	@ 0x30
 800b3e6:	2b09      	cmp	r3, #9
 800b3e8:	d94b      	bls.n	800b482 <_vfiprintf_r+0x1a2>
 800b3ea:	b1b0      	cbz	r0, 800b41a <_vfiprintf_r+0x13a>
 800b3ec:	9207      	str	r2, [sp, #28]
 800b3ee:	e014      	b.n	800b41a <_vfiprintf_r+0x13a>
 800b3f0:	eba0 0308 	sub.w	r3, r0, r8
 800b3f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	46a2      	mov	sl, r4
 800b3fe:	e7d2      	b.n	800b3a6 <_vfiprintf_r+0xc6>
 800b400:	9b03      	ldr	r3, [sp, #12]
 800b402:	1d19      	adds	r1, r3, #4
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	9103      	str	r1, [sp, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bfbb      	ittet	lt
 800b40c:	425b      	neglt	r3, r3
 800b40e:	f042 0202 	orrlt.w	r2, r2, #2
 800b412:	9307      	strge	r3, [sp, #28]
 800b414:	9307      	strlt	r3, [sp, #28]
 800b416:	bfb8      	it	lt
 800b418:	9204      	strlt	r2, [sp, #16]
 800b41a:	7823      	ldrb	r3, [r4, #0]
 800b41c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b41e:	d10a      	bne.n	800b436 <_vfiprintf_r+0x156>
 800b420:	7863      	ldrb	r3, [r4, #1]
 800b422:	2b2a      	cmp	r3, #42	@ 0x2a
 800b424:	d132      	bne.n	800b48c <_vfiprintf_r+0x1ac>
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	1d1a      	adds	r2, r3, #4
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	9203      	str	r2, [sp, #12]
 800b42e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b432:	3402      	adds	r4, #2
 800b434:	9305      	str	r3, [sp, #20]
 800b436:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b50c <_vfiprintf_r+0x22c>
 800b43a:	7821      	ldrb	r1, [r4, #0]
 800b43c:	2203      	movs	r2, #3
 800b43e:	4650      	mov	r0, sl
 800b440:	f7f4 fec6 	bl	80001d0 <memchr>
 800b444:	b138      	cbz	r0, 800b456 <_vfiprintf_r+0x176>
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	eba0 000a 	sub.w	r0, r0, sl
 800b44c:	2240      	movs	r2, #64	@ 0x40
 800b44e:	4082      	lsls	r2, r0
 800b450:	4313      	orrs	r3, r2
 800b452:	3401      	adds	r4, #1
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45a:	4829      	ldr	r0, [pc, #164]	@ (800b500 <_vfiprintf_r+0x220>)
 800b45c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b460:	2206      	movs	r2, #6
 800b462:	f7f4 feb5 	bl	80001d0 <memchr>
 800b466:	2800      	cmp	r0, #0
 800b468:	d03f      	beq.n	800b4ea <_vfiprintf_r+0x20a>
 800b46a:	4b26      	ldr	r3, [pc, #152]	@ (800b504 <_vfiprintf_r+0x224>)
 800b46c:	bb1b      	cbnz	r3, 800b4b6 <_vfiprintf_r+0x1d6>
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	3307      	adds	r3, #7
 800b472:	f023 0307 	bic.w	r3, r3, #7
 800b476:	3308      	adds	r3, #8
 800b478:	9303      	str	r3, [sp, #12]
 800b47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b47c:	443b      	add	r3, r7
 800b47e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b480:	e76a      	b.n	800b358 <_vfiprintf_r+0x78>
 800b482:	fb0c 3202 	mla	r2, ip, r2, r3
 800b486:	460c      	mov	r4, r1
 800b488:	2001      	movs	r0, #1
 800b48a:	e7a8      	b.n	800b3de <_vfiprintf_r+0xfe>
 800b48c:	2300      	movs	r3, #0
 800b48e:	3401      	adds	r4, #1
 800b490:	9305      	str	r3, [sp, #20]
 800b492:	4619      	mov	r1, r3
 800b494:	f04f 0c0a 	mov.w	ip, #10
 800b498:	4620      	mov	r0, r4
 800b49a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b49e:	3a30      	subs	r2, #48	@ 0x30
 800b4a0:	2a09      	cmp	r2, #9
 800b4a2:	d903      	bls.n	800b4ac <_vfiprintf_r+0x1cc>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0c6      	beq.n	800b436 <_vfiprintf_r+0x156>
 800b4a8:	9105      	str	r1, [sp, #20]
 800b4aa:	e7c4      	b.n	800b436 <_vfiprintf_r+0x156>
 800b4ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e7f0      	b.n	800b498 <_vfiprintf_r+0x1b8>
 800b4b6:	ab03      	add	r3, sp, #12
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	462a      	mov	r2, r5
 800b4bc:	4b12      	ldr	r3, [pc, #72]	@ (800b508 <_vfiprintf_r+0x228>)
 800b4be:	a904      	add	r1, sp, #16
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f3af 8000 	nop.w
 800b4c6:	4607      	mov	r7, r0
 800b4c8:	1c78      	adds	r0, r7, #1
 800b4ca:	d1d6      	bne.n	800b47a <_vfiprintf_r+0x19a>
 800b4cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ce:	07d9      	lsls	r1, r3, #31
 800b4d0:	d405      	bmi.n	800b4de <_vfiprintf_r+0x1fe>
 800b4d2:	89ab      	ldrh	r3, [r5, #12]
 800b4d4:	059a      	lsls	r2, r3, #22
 800b4d6:	d402      	bmi.n	800b4de <_vfiprintf_r+0x1fe>
 800b4d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4da:	f7ff fddd 	bl	800b098 <__retarget_lock_release_recursive>
 800b4de:	89ab      	ldrh	r3, [r5, #12]
 800b4e0:	065b      	lsls	r3, r3, #25
 800b4e2:	f53f af1f 	bmi.w	800b324 <_vfiprintf_r+0x44>
 800b4e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4e8:	e71e      	b.n	800b328 <_vfiprintf_r+0x48>
 800b4ea:	ab03      	add	r3, sp, #12
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	462a      	mov	r2, r5
 800b4f0:	4b05      	ldr	r3, [pc, #20]	@ (800b508 <_vfiprintf_r+0x228>)
 800b4f2:	a904      	add	r1, sp, #16
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f000 f879 	bl	800b5ec <_printf_i>
 800b4fa:	e7e4      	b.n	800b4c6 <_vfiprintf_r+0x1e6>
 800b4fc:	0800cbe8 	.word	0x0800cbe8
 800b500:	0800cbf2 	.word	0x0800cbf2
 800b504:	00000000 	.word	0x00000000
 800b508:	0800b2bb 	.word	0x0800b2bb
 800b50c:	0800cbee 	.word	0x0800cbee

0800b510 <_printf_common>:
 800b510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b514:	4616      	mov	r6, r2
 800b516:	4698      	mov	r8, r3
 800b518:	688a      	ldr	r2, [r1, #8]
 800b51a:	690b      	ldr	r3, [r1, #16]
 800b51c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b520:	4293      	cmp	r3, r2
 800b522:	bfb8      	it	lt
 800b524:	4613      	movlt	r3, r2
 800b526:	6033      	str	r3, [r6, #0]
 800b528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b52c:	4607      	mov	r7, r0
 800b52e:	460c      	mov	r4, r1
 800b530:	b10a      	cbz	r2, 800b536 <_printf_common+0x26>
 800b532:	3301      	adds	r3, #1
 800b534:	6033      	str	r3, [r6, #0]
 800b536:	6823      	ldr	r3, [r4, #0]
 800b538:	0699      	lsls	r1, r3, #26
 800b53a:	bf42      	ittt	mi
 800b53c:	6833      	ldrmi	r3, [r6, #0]
 800b53e:	3302      	addmi	r3, #2
 800b540:	6033      	strmi	r3, [r6, #0]
 800b542:	6825      	ldr	r5, [r4, #0]
 800b544:	f015 0506 	ands.w	r5, r5, #6
 800b548:	d106      	bne.n	800b558 <_printf_common+0x48>
 800b54a:	f104 0a19 	add.w	sl, r4, #25
 800b54e:	68e3      	ldr	r3, [r4, #12]
 800b550:	6832      	ldr	r2, [r6, #0]
 800b552:	1a9b      	subs	r3, r3, r2
 800b554:	42ab      	cmp	r3, r5
 800b556:	dc26      	bgt.n	800b5a6 <_printf_common+0x96>
 800b558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b55c:	6822      	ldr	r2, [r4, #0]
 800b55e:	3b00      	subs	r3, #0
 800b560:	bf18      	it	ne
 800b562:	2301      	movne	r3, #1
 800b564:	0692      	lsls	r2, r2, #26
 800b566:	d42b      	bmi.n	800b5c0 <_printf_common+0xb0>
 800b568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b56c:	4641      	mov	r1, r8
 800b56e:	4638      	mov	r0, r7
 800b570:	47c8      	blx	r9
 800b572:	3001      	adds	r0, #1
 800b574:	d01e      	beq.n	800b5b4 <_printf_common+0xa4>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	6922      	ldr	r2, [r4, #16]
 800b57a:	f003 0306 	and.w	r3, r3, #6
 800b57e:	2b04      	cmp	r3, #4
 800b580:	bf02      	ittt	eq
 800b582:	68e5      	ldreq	r5, [r4, #12]
 800b584:	6833      	ldreq	r3, [r6, #0]
 800b586:	1aed      	subeq	r5, r5, r3
 800b588:	68a3      	ldr	r3, [r4, #8]
 800b58a:	bf0c      	ite	eq
 800b58c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b590:	2500      	movne	r5, #0
 800b592:	4293      	cmp	r3, r2
 800b594:	bfc4      	itt	gt
 800b596:	1a9b      	subgt	r3, r3, r2
 800b598:	18ed      	addgt	r5, r5, r3
 800b59a:	2600      	movs	r6, #0
 800b59c:	341a      	adds	r4, #26
 800b59e:	42b5      	cmp	r5, r6
 800b5a0:	d11a      	bne.n	800b5d8 <_printf_common+0xc8>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	e008      	b.n	800b5b8 <_printf_common+0xa8>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	4652      	mov	r2, sl
 800b5aa:	4641      	mov	r1, r8
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	47c8      	blx	r9
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d103      	bne.n	800b5bc <_printf_common+0xac>
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5bc:	3501      	adds	r5, #1
 800b5be:	e7c6      	b.n	800b54e <_printf_common+0x3e>
 800b5c0:	18e1      	adds	r1, r4, r3
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	2030      	movs	r0, #48	@ 0x30
 800b5c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5ca:	4422      	add	r2, r4
 800b5cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5d4:	3302      	adds	r3, #2
 800b5d6:	e7c7      	b.n	800b568 <_printf_common+0x58>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	4622      	mov	r2, r4
 800b5dc:	4641      	mov	r1, r8
 800b5de:	4638      	mov	r0, r7
 800b5e0:	47c8      	blx	r9
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	d0e6      	beq.n	800b5b4 <_printf_common+0xa4>
 800b5e6:	3601      	adds	r6, #1
 800b5e8:	e7d9      	b.n	800b59e <_printf_common+0x8e>
	...

0800b5ec <_printf_i>:
 800b5ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f0:	7e0f      	ldrb	r7, [r1, #24]
 800b5f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f4:	2f78      	cmp	r7, #120	@ 0x78
 800b5f6:	4691      	mov	r9, r2
 800b5f8:	4680      	mov	r8, r0
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	469a      	mov	sl, r3
 800b5fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b602:	d807      	bhi.n	800b614 <_printf_i+0x28>
 800b604:	2f62      	cmp	r7, #98	@ 0x62
 800b606:	d80a      	bhi.n	800b61e <_printf_i+0x32>
 800b608:	2f00      	cmp	r7, #0
 800b60a:	f000 80d1 	beq.w	800b7b0 <_printf_i+0x1c4>
 800b60e:	2f58      	cmp	r7, #88	@ 0x58
 800b610:	f000 80b8 	beq.w	800b784 <_printf_i+0x198>
 800b614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b61c:	e03a      	b.n	800b694 <_printf_i+0xa8>
 800b61e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b622:	2b15      	cmp	r3, #21
 800b624:	d8f6      	bhi.n	800b614 <_printf_i+0x28>
 800b626:	a101      	add	r1, pc, #4	@ (adr r1, 800b62c <_printf_i+0x40>)
 800b628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b62c:	0800b685 	.word	0x0800b685
 800b630:	0800b699 	.word	0x0800b699
 800b634:	0800b615 	.word	0x0800b615
 800b638:	0800b615 	.word	0x0800b615
 800b63c:	0800b615 	.word	0x0800b615
 800b640:	0800b615 	.word	0x0800b615
 800b644:	0800b699 	.word	0x0800b699
 800b648:	0800b615 	.word	0x0800b615
 800b64c:	0800b615 	.word	0x0800b615
 800b650:	0800b615 	.word	0x0800b615
 800b654:	0800b615 	.word	0x0800b615
 800b658:	0800b797 	.word	0x0800b797
 800b65c:	0800b6c3 	.word	0x0800b6c3
 800b660:	0800b751 	.word	0x0800b751
 800b664:	0800b615 	.word	0x0800b615
 800b668:	0800b615 	.word	0x0800b615
 800b66c:	0800b7b9 	.word	0x0800b7b9
 800b670:	0800b615 	.word	0x0800b615
 800b674:	0800b6c3 	.word	0x0800b6c3
 800b678:	0800b615 	.word	0x0800b615
 800b67c:	0800b615 	.word	0x0800b615
 800b680:	0800b759 	.word	0x0800b759
 800b684:	6833      	ldr	r3, [r6, #0]
 800b686:	1d1a      	adds	r2, r3, #4
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6032      	str	r2, [r6, #0]
 800b68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b694:	2301      	movs	r3, #1
 800b696:	e09c      	b.n	800b7d2 <_printf_i+0x1e6>
 800b698:	6833      	ldr	r3, [r6, #0]
 800b69a:	6820      	ldr	r0, [r4, #0]
 800b69c:	1d19      	adds	r1, r3, #4
 800b69e:	6031      	str	r1, [r6, #0]
 800b6a0:	0606      	lsls	r6, r0, #24
 800b6a2:	d501      	bpl.n	800b6a8 <_printf_i+0xbc>
 800b6a4:	681d      	ldr	r5, [r3, #0]
 800b6a6:	e003      	b.n	800b6b0 <_printf_i+0xc4>
 800b6a8:	0645      	lsls	r5, r0, #25
 800b6aa:	d5fb      	bpl.n	800b6a4 <_printf_i+0xb8>
 800b6ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6b0:	2d00      	cmp	r5, #0
 800b6b2:	da03      	bge.n	800b6bc <_printf_i+0xd0>
 800b6b4:	232d      	movs	r3, #45	@ 0x2d
 800b6b6:	426d      	negs	r5, r5
 800b6b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6bc:	4858      	ldr	r0, [pc, #352]	@ (800b820 <_printf_i+0x234>)
 800b6be:	230a      	movs	r3, #10
 800b6c0:	e011      	b.n	800b6e6 <_printf_i+0xfa>
 800b6c2:	6821      	ldr	r1, [r4, #0]
 800b6c4:	6833      	ldr	r3, [r6, #0]
 800b6c6:	0608      	lsls	r0, r1, #24
 800b6c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6cc:	d402      	bmi.n	800b6d4 <_printf_i+0xe8>
 800b6ce:	0649      	lsls	r1, r1, #25
 800b6d0:	bf48      	it	mi
 800b6d2:	b2ad      	uxthmi	r5, r5
 800b6d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6d6:	4852      	ldr	r0, [pc, #328]	@ (800b820 <_printf_i+0x234>)
 800b6d8:	6033      	str	r3, [r6, #0]
 800b6da:	bf14      	ite	ne
 800b6dc:	230a      	movne	r3, #10
 800b6de:	2308      	moveq	r3, #8
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6e6:	6866      	ldr	r6, [r4, #4]
 800b6e8:	60a6      	str	r6, [r4, #8]
 800b6ea:	2e00      	cmp	r6, #0
 800b6ec:	db05      	blt.n	800b6fa <_printf_i+0x10e>
 800b6ee:	6821      	ldr	r1, [r4, #0]
 800b6f0:	432e      	orrs	r6, r5
 800b6f2:	f021 0104 	bic.w	r1, r1, #4
 800b6f6:	6021      	str	r1, [r4, #0]
 800b6f8:	d04b      	beq.n	800b792 <_printf_i+0x1a6>
 800b6fa:	4616      	mov	r6, r2
 800b6fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800b700:	fb03 5711 	mls	r7, r3, r1, r5
 800b704:	5dc7      	ldrb	r7, [r0, r7]
 800b706:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b70a:	462f      	mov	r7, r5
 800b70c:	42bb      	cmp	r3, r7
 800b70e:	460d      	mov	r5, r1
 800b710:	d9f4      	bls.n	800b6fc <_printf_i+0x110>
 800b712:	2b08      	cmp	r3, #8
 800b714:	d10b      	bne.n	800b72e <_printf_i+0x142>
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	07df      	lsls	r7, r3, #31
 800b71a:	d508      	bpl.n	800b72e <_printf_i+0x142>
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	6861      	ldr	r1, [r4, #4]
 800b720:	4299      	cmp	r1, r3
 800b722:	bfde      	ittt	le
 800b724:	2330      	movle	r3, #48	@ 0x30
 800b726:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b72a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b72e:	1b92      	subs	r2, r2, r6
 800b730:	6122      	str	r2, [r4, #16]
 800b732:	f8cd a000 	str.w	sl, [sp]
 800b736:	464b      	mov	r3, r9
 800b738:	aa03      	add	r2, sp, #12
 800b73a:	4621      	mov	r1, r4
 800b73c:	4640      	mov	r0, r8
 800b73e:	f7ff fee7 	bl	800b510 <_printf_common>
 800b742:	3001      	adds	r0, #1
 800b744:	d14a      	bne.n	800b7dc <_printf_i+0x1f0>
 800b746:	f04f 30ff 	mov.w	r0, #4294967295
 800b74a:	b004      	add	sp, #16
 800b74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	f043 0320 	orr.w	r3, r3, #32
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	4832      	ldr	r0, [pc, #200]	@ (800b824 <_printf_i+0x238>)
 800b75a:	2778      	movs	r7, #120	@ 0x78
 800b75c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	6831      	ldr	r1, [r6, #0]
 800b764:	061f      	lsls	r7, r3, #24
 800b766:	f851 5b04 	ldr.w	r5, [r1], #4
 800b76a:	d402      	bmi.n	800b772 <_printf_i+0x186>
 800b76c:	065f      	lsls	r7, r3, #25
 800b76e:	bf48      	it	mi
 800b770:	b2ad      	uxthmi	r5, r5
 800b772:	6031      	str	r1, [r6, #0]
 800b774:	07d9      	lsls	r1, r3, #31
 800b776:	bf44      	itt	mi
 800b778:	f043 0320 	orrmi.w	r3, r3, #32
 800b77c:	6023      	strmi	r3, [r4, #0]
 800b77e:	b11d      	cbz	r5, 800b788 <_printf_i+0x19c>
 800b780:	2310      	movs	r3, #16
 800b782:	e7ad      	b.n	800b6e0 <_printf_i+0xf4>
 800b784:	4826      	ldr	r0, [pc, #152]	@ (800b820 <_printf_i+0x234>)
 800b786:	e7e9      	b.n	800b75c <_printf_i+0x170>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	f023 0320 	bic.w	r3, r3, #32
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	e7f6      	b.n	800b780 <_printf_i+0x194>
 800b792:	4616      	mov	r6, r2
 800b794:	e7bd      	b.n	800b712 <_printf_i+0x126>
 800b796:	6833      	ldr	r3, [r6, #0]
 800b798:	6825      	ldr	r5, [r4, #0]
 800b79a:	6961      	ldr	r1, [r4, #20]
 800b79c:	1d18      	adds	r0, r3, #4
 800b79e:	6030      	str	r0, [r6, #0]
 800b7a0:	062e      	lsls	r6, r5, #24
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	d501      	bpl.n	800b7aa <_printf_i+0x1be>
 800b7a6:	6019      	str	r1, [r3, #0]
 800b7a8:	e002      	b.n	800b7b0 <_printf_i+0x1c4>
 800b7aa:	0668      	lsls	r0, r5, #25
 800b7ac:	d5fb      	bpl.n	800b7a6 <_printf_i+0x1ba>
 800b7ae:	8019      	strh	r1, [r3, #0]
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	6123      	str	r3, [r4, #16]
 800b7b4:	4616      	mov	r6, r2
 800b7b6:	e7bc      	b.n	800b732 <_printf_i+0x146>
 800b7b8:	6833      	ldr	r3, [r6, #0]
 800b7ba:	1d1a      	adds	r2, r3, #4
 800b7bc:	6032      	str	r2, [r6, #0]
 800b7be:	681e      	ldr	r6, [r3, #0]
 800b7c0:	6862      	ldr	r2, [r4, #4]
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7f4 fd03 	bl	80001d0 <memchr>
 800b7ca:	b108      	cbz	r0, 800b7d0 <_printf_i+0x1e4>
 800b7cc:	1b80      	subs	r0, r0, r6
 800b7ce:	6060      	str	r0, [r4, #4]
 800b7d0:	6863      	ldr	r3, [r4, #4]
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7da:	e7aa      	b.n	800b732 <_printf_i+0x146>
 800b7dc:	6923      	ldr	r3, [r4, #16]
 800b7de:	4632      	mov	r2, r6
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	47d0      	blx	sl
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	d0ad      	beq.n	800b746 <_printf_i+0x15a>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	079b      	lsls	r3, r3, #30
 800b7ee:	d413      	bmi.n	800b818 <_printf_i+0x22c>
 800b7f0:	68e0      	ldr	r0, [r4, #12]
 800b7f2:	9b03      	ldr	r3, [sp, #12]
 800b7f4:	4298      	cmp	r0, r3
 800b7f6:	bfb8      	it	lt
 800b7f8:	4618      	movlt	r0, r3
 800b7fa:	e7a6      	b.n	800b74a <_printf_i+0x15e>
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	4632      	mov	r2, r6
 800b800:	4649      	mov	r1, r9
 800b802:	4640      	mov	r0, r8
 800b804:	47d0      	blx	sl
 800b806:	3001      	adds	r0, #1
 800b808:	d09d      	beq.n	800b746 <_printf_i+0x15a>
 800b80a:	3501      	adds	r5, #1
 800b80c:	68e3      	ldr	r3, [r4, #12]
 800b80e:	9903      	ldr	r1, [sp, #12]
 800b810:	1a5b      	subs	r3, r3, r1
 800b812:	42ab      	cmp	r3, r5
 800b814:	dcf2      	bgt.n	800b7fc <_printf_i+0x210>
 800b816:	e7eb      	b.n	800b7f0 <_printf_i+0x204>
 800b818:	2500      	movs	r5, #0
 800b81a:	f104 0619 	add.w	r6, r4, #25
 800b81e:	e7f5      	b.n	800b80c <_printf_i+0x220>
 800b820:	0800cbf9 	.word	0x0800cbf9
 800b824:	0800cc0a 	.word	0x0800cc0a

0800b828 <__sflush_r>:
 800b828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b830:	0716      	lsls	r6, r2, #28
 800b832:	4605      	mov	r5, r0
 800b834:	460c      	mov	r4, r1
 800b836:	d454      	bmi.n	800b8e2 <__sflush_r+0xba>
 800b838:	684b      	ldr	r3, [r1, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	dc02      	bgt.n	800b844 <__sflush_r+0x1c>
 800b83e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	dd48      	ble.n	800b8d6 <__sflush_r+0xae>
 800b844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b846:	2e00      	cmp	r6, #0
 800b848:	d045      	beq.n	800b8d6 <__sflush_r+0xae>
 800b84a:	2300      	movs	r3, #0
 800b84c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b850:	682f      	ldr	r7, [r5, #0]
 800b852:	6a21      	ldr	r1, [r4, #32]
 800b854:	602b      	str	r3, [r5, #0]
 800b856:	d030      	beq.n	800b8ba <__sflush_r+0x92>
 800b858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	0759      	lsls	r1, r3, #29
 800b85e:	d505      	bpl.n	800b86c <__sflush_r+0x44>
 800b860:	6863      	ldr	r3, [r4, #4]
 800b862:	1ad2      	subs	r2, r2, r3
 800b864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b866:	b10b      	cbz	r3, 800b86c <__sflush_r+0x44>
 800b868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	2300      	movs	r3, #0
 800b86e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b870:	6a21      	ldr	r1, [r4, #32]
 800b872:	4628      	mov	r0, r5
 800b874:	47b0      	blx	r6
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	d106      	bne.n	800b88a <__sflush_r+0x62>
 800b87c:	6829      	ldr	r1, [r5, #0]
 800b87e:	291d      	cmp	r1, #29
 800b880:	d82b      	bhi.n	800b8da <__sflush_r+0xb2>
 800b882:	4a2a      	ldr	r2, [pc, #168]	@ (800b92c <__sflush_r+0x104>)
 800b884:	40ca      	lsrs	r2, r1
 800b886:	07d6      	lsls	r6, r2, #31
 800b888:	d527      	bpl.n	800b8da <__sflush_r+0xb2>
 800b88a:	2200      	movs	r2, #0
 800b88c:	6062      	str	r2, [r4, #4]
 800b88e:	04d9      	lsls	r1, r3, #19
 800b890:	6922      	ldr	r2, [r4, #16]
 800b892:	6022      	str	r2, [r4, #0]
 800b894:	d504      	bpl.n	800b8a0 <__sflush_r+0x78>
 800b896:	1c42      	adds	r2, r0, #1
 800b898:	d101      	bne.n	800b89e <__sflush_r+0x76>
 800b89a:	682b      	ldr	r3, [r5, #0]
 800b89c:	b903      	cbnz	r3, 800b8a0 <__sflush_r+0x78>
 800b89e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8a2:	602f      	str	r7, [r5, #0]
 800b8a4:	b1b9      	cbz	r1, 800b8d6 <__sflush_r+0xae>
 800b8a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8aa:	4299      	cmp	r1, r3
 800b8ac:	d002      	beq.n	800b8b4 <__sflush_r+0x8c>
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7ff fbf4 	bl	800b09c <_free_r>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8b8:	e00d      	b.n	800b8d6 <__sflush_r+0xae>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b0      	blx	r6
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	1c50      	adds	r0, r2, #1
 800b8c4:	d1c9      	bne.n	800b85a <__sflush_r+0x32>
 800b8c6:	682b      	ldr	r3, [r5, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0c6      	beq.n	800b85a <__sflush_r+0x32>
 800b8cc:	2b1d      	cmp	r3, #29
 800b8ce:	d001      	beq.n	800b8d4 <__sflush_r+0xac>
 800b8d0:	2b16      	cmp	r3, #22
 800b8d2:	d11e      	bne.n	800b912 <__sflush_r+0xea>
 800b8d4:	602f      	str	r7, [r5, #0]
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e022      	b.n	800b920 <__sflush_r+0xf8>
 800b8da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8de:	b21b      	sxth	r3, r3
 800b8e0:	e01b      	b.n	800b91a <__sflush_r+0xf2>
 800b8e2:	690f      	ldr	r7, [r1, #16]
 800b8e4:	2f00      	cmp	r7, #0
 800b8e6:	d0f6      	beq.n	800b8d6 <__sflush_r+0xae>
 800b8e8:	0793      	lsls	r3, r2, #30
 800b8ea:	680e      	ldr	r6, [r1, #0]
 800b8ec:	bf08      	it	eq
 800b8ee:	694b      	ldreq	r3, [r1, #20]
 800b8f0:	600f      	str	r7, [r1, #0]
 800b8f2:	bf18      	it	ne
 800b8f4:	2300      	movne	r3, #0
 800b8f6:	eba6 0807 	sub.w	r8, r6, r7
 800b8fa:	608b      	str	r3, [r1, #8]
 800b8fc:	f1b8 0f00 	cmp.w	r8, #0
 800b900:	dde9      	ble.n	800b8d6 <__sflush_r+0xae>
 800b902:	6a21      	ldr	r1, [r4, #32]
 800b904:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b906:	4643      	mov	r3, r8
 800b908:	463a      	mov	r2, r7
 800b90a:	4628      	mov	r0, r5
 800b90c:	47b0      	blx	r6
 800b90e:	2800      	cmp	r0, #0
 800b910:	dc08      	bgt.n	800b924 <__sflush_r+0xfc>
 800b912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b924:	4407      	add	r7, r0
 800b926:	eba8 0800 	sub.w	r8, r8, r0
 800b92a:	e7e7      	b.n	800b8fc <__sflush_r+0xd4>
 800b92c:	20400001 	.word	0x20400001

0800b930 <_fflush_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	690b      	ldr	r3, [r1, #16]
 800b934:	4605      	mov	r5, r0
 800b936:	460c      	mov	r4, r1
 800b938:	b913      	cbnz	r3, 800b940 <_fflush_r+0x10>
 800b93a:	2500      	movs	r5, #0
 800b93c:	4628      	mov	r0, r5
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	b118      	cbz	r0, 800b94a <_fflush_r+0x1a>
 800b942:	6a03      	ldr	r3, [r0, #32]
 800b944:	b90b      	cbnz	r3, 800b94a <_fflush_r+0x1a>
 800b946:	f7ff f9af 	bl	800aca8 <__sinit>
 800b94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0f3      	beq.n	800b93a <_fflush_r+0xa>
 800b952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b954:	07d0      	lsls	r0, r2, #31
 800b956:	d404      	bmi.n	800b962 <_fflush_r+0x32>
 800b958:	0599      	lsls	r1, r3, #22
 800b95a:	d402      	bmi.n	800b962 <_fflush_r+0x32>
 800b95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b95e:	f7ff fb9a 	bl	800b096 <__retarget_lock_acquire_recursive>
 800b962:	4628      	mov	r0, r5
 800b964:	4621      	mov	r1, r4
 800b966:	f7ff ff5f 	bl	800b828 <__sflush_r>
 800b96a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b96c:	07da      	lsls	r2, r3, #31
 800b96e:	4605      	mov	r5, r0
 800b970:	d4e4      	bmi.n	800b93c <_fflush_r+0xc>
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	059b      	lsls	r3, r3, #22
 800b976:	d4e1      	bmi.n	800b93c <_fflush_r+0xc>
 800b978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b97a:	f7ff fb8d 	bl	800b098 <__retarget_lock_release_recursive>
 800b97e:	e7dd      	b.n	800b93c <_fflush_r+0xc>

0800b980 <__swhatbuf_r>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	460c      	mov	r4, r1
 800b984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b988:	2900      	cmp	r1, #0
 800b98a:	b096      	sub	sp, #88	@ 0x58
 800b98c:	4615      	mov	r5, r2
 800b98e:	461e      	mov	r6, r3
 800b990:	da0d      	bge.n	800b9ae <__swhatbuf_r+0x2e>
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b998:	f04f 0100 	mov.w	r1, #0
 800b99c:	bf14      	ite	ne
 800b99e:	2340      	movne	r3, #64	@ 0x40
 800b9a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	6031      	str	r1, [r6, #0]
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	b016      	add	sp, #88	@ 0x58
 800b9ac:	bd70      	pop	{r4, r5, r6, pc}
 800b9ae:	466a      	mov	r2, sp
 800b9b0:	f000 f848 	bl	800ba44 <_fstat_r>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	dbec      	blt.n	800b992 <__swhatbuf_r+0x12>
 800b9b8:	9901      	ldr	r1, [sp, #4]
 800b9ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9c2:	4259      	negs	r1, r3
 800b9c4:	4159      	adcs	r1, r3
 800b9c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9ca:	e7eb      	b.n	800b9a4 <__swhatbuf_r+0x24>

0800b9cc <__smakebuf_r>:
 800b9cc:	898b      	ldrh	r3, [r1, #12]
 800b9ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9d0:	079d      	lsls	r5, r3, #30
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	d507      	bpl.n	800b9e8 <__smakebuf_r+0x1c>
 800b9d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	6123      	str	r3, [r4, #16]
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	6163      	str	r3, [r4, #20]
 800b9e4:	b003      	add	sp, #12
 800b9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e8:	ab01      	add	r3, sp, #4
 800b9ea:	466a      	mov	r2, sp
 800b9ec:	f7ff ffc8 	bl	800b980 <__swhatbuf_r>
 800b9f0:	9f00      	ldr	r7, [sp, #0]
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f7ff fbbc 	bl	800b174 <_malloc_r>
 800b9fc:	b948      	cbnz	r0, 800ba12 <__smakebuf_r+0x46>
 800b9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba02:	059a      	lsls	r2, r3, #22
 800ba04:	d4ee      	bmi.n	800b9e4 <__smakebuf_r+0x18>
 800ba06:	f023 0303 	bic.w	r3, r3, #3
 800ba0a:	f043 0302 	orr.w	r3, r3, #2
 800ba0e:	81a3      	strh	r3, [r4, #12]
 800ba10:	e7e2      	b.n	800b9d8 <__smakebuf_r+0xc>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	6020      	str	r0, [r4, #0]
 800ba16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	9b01      	ldr	r3, [sp, #4]
 800ba1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba22:	b15b      	cbz	r3, 800ba3c <__smakebuf_r+0x70>
 800ba24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f000 f81d 	bl	800ba68 <_isatty_r>
 800ba2e:	b128      	cbz	r0, 800ba3c <__smakebuf_r+0x70>
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	f023 0303 	bic.w	r3, r3, #3
 800ba36:	f043 0301 	orr.w	r3, r3, #1
 800ba3a:	81a3      	strh	r3, [r4, #12]
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	431d      	orrs	r5, r3
 800ba40:	81a5      	strh	r5, [r4, #12]
 800ba42:	e7cf      	b.n	800b9e4 <__smakebuf_r+0x18>

0800ba44 <_fstat_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d07      	ldr	r5, [pc, #28]	@ (800ba64 <_fstat_r+0x20>)
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	4611      	mov	r1, r2
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	f7f6 fb08 	bl	8002066 <_fstat>
 800ba56:	1c43      	adds	r3, r0, #1
 800ba58:	d102      	bne.n	800ba60 <_fstat_r+0x1c>
 800ba5a:	682b      	ldr	r3, [r5, #0]
 800ba5c:	b103      	cbz	r3, 800ba60 <_fstat_r+0x1c>
 800ba5e:	6023      	str	r3, [r4, #0]
 800ba60:	bd38      	pop	{r3, r4, r5, pc}
 800ba62:	bf00      	nop
 800ba64:	20019710 	.word	0x20019710

0800ba68 <_isatty_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	@ (800ba84 <_isatty_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f6 fb07 	bl	8002086 <_isatty>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_isatty_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_isatty_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	20019710 	.word	0x20019710

0800ba88 <_sbrk_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d06      	ldr	r5, [pc, #24]	@ (800baa4 <_sbrk_r+0x1c>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f6 fb10 	bl	80020b8 <_sbrk>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_sbrk_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_sbrk_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	20019710 	.word	0x20019710

0800baa8 <sin>:
 800baa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baaa:	ec53 2b10 	vmov	r2, r3, d0
 800baae:	4826      	ldr	r0, [pc, #152]	@ (800bb48 <sin+0xa0>)
 800bab0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bab4:	4281      	cmp	r1, r0
 800bab6:	d807      	bhi.n	800bac8 <sin+0x20>
 800bab8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bb40 <sin+0x98>
 800babc:	2000      	movs	r0, #0
 800babe:	b005      	add	sp, #20
 800bac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bac4:	f000 b90c 	b.w	800bce0 <__kernel_sin>
 800bac8:	4820      	ldr	r0, [pc, #128]	@ (800bb4c <sin+0xa4>)
 800baca:	4281      	cmp	r1, r0
 800bacc:	d908      	bls.n	800bae0 <sin+0x38>
 800bace:	4610      	mov	r0, r2
 800bad0:	4619      	mov	r1, r3
 800bad2:	f7f4 fbd1 	bl	8000278 <__aeabi_dsub>
 800bad6:	ec41 0b10 	vmov	d0, r0, r1
 800bada:	b005      	add	sp, #20
 800badc:	f85d fb04 	ldr.w	pc, [sp], #4
 800bae0:	4668      	mov	r0, sp
 800bae2:	f000 f9b9 	bl	800be58 <__ieee754_rem_pio2>
 800bae6:	f000 0003 	and.w	r0, r0, #3
 800baea:	2801      	cmp	r0, #1
 800baec:	d00c      	beq.n	800bb08 <sin+0x60>
 800baee:	2802      	cmp	r0, #2
 800baf0:	d011      	beq.n	800bb16 <sin+0x6e>
 800baf2:	b9e8      	cbnz	r0, 800bb30 <sin+0x88>
 800baf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800baf8:	ed9d 0b00 	vldr	d0, [sp]
 800bafc:	2001      	movs	r0, #1
 800bafe:	f000 f8ef 	bl	800bce0 <__kernel_sin>
 800bb02:	ec51 0b10 	vmov	r0, r1, d0
 800bb06:	e7e6      	b.n	800bad6 <sin+0x2e>
 800bb08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb0c:	ed9d 0b00 	vldr	d0, [sp]
 800bb10:	f000 f81e 	bl	800bb50 <__kernel_cos>
 800bb14:	e7f5      	b.n	800bb02 <sin+0x5a>
 800bb16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb1a:	ed9d 0b00 	vldr	d0, [sp]
 800bb1e:	2001      	movs	r0, #1
 800bb20:	f000 f8de 	bl	800bce0 <__kernel_sin>
 800bb24:	ec53 2b10 	vmov	r2, r3, d0
 800bb28:	4610      	mov	r0, r2
 800bb2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb2e:	e7d2      	b.n	800bad6 <sin+0x2e>
 800bb30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb34:	ed9d 0b00 	vldr	d0, [sp]
 800bb38:	f000 f80a 	bl	800bb50 <__kernel_cos>
 800bb3c:	e7f2      	b.n	800bb24 <sin+0x7c>
 800bb3e:	bf00      	nop
	...
 800bb48:	3fe921fb 	.word	0x3fe921fb
 800bb4c:	7fefffff 	.word	0x7fefffff

0800bb50 <__kernel_cos>:
 800bb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	ec57 6b10 	vmov	r6, r7, d0
 800bb58:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bb5c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800bb60:	ed8d 1b00 	vstr	d1, [sp]
 800bb64:	d206      	bcs.n	800bb74 <__kernel_cos+0x24>
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 ffd7 	bl	8000b1c <__aeabi_d2iz>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f000 8088 	beq.w	800bc84 <__kernel_cos+0x134>
 800bb74:	4632      	mov	r2, r6
 800bb76:	463b      	mov	r3, r7
 800bb78:	4630      	mov	r0, r6
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	f7f4 fd34 	bl	80005e8 <__aeabi_dmul>
 800bb80:	4b51      	ldr	r3, [pc, #324]	@ (800bcc8 <__kernel_cos+0x178>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	f7f4 fd2e 	bl	80005e8 <__aeabi_dmul>
 800bb8c:	a340      	add	r3, pc, #256	@ (adr r3, 800bc90 <__kernel_cos+0x140>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	4682      	mov	sl, r0
 800bb94:	468b      	mov	fp, r1
 800bb96:	4620      	mov	r0, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	f7f4 fd25 	bl	80005e8 <__aeabi_dmul>
 800bb9e:	a33e      	add	r3, pc, #248	@ (adr r3, 800bc98 <__kernel_cos+0x148>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f7f4 fb6a 	bl	800027c <__adddf3>
 800bba8:	4622      	mov	r2, r4
 800bbaa:	462b      	mov	r3, r5
 800bbac:	f7f4 fd1c 	bl	80005e8 <__aeabi_dmul>
 800bbb0:	a33b      	add	r3, pc, #236	@ (adr r3, 800bca0 <__kernel_cos+0x150>)
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f7f4 fb5f 	bl	8000278 <__aeabi_dsub>
 800bbba:	4622      	mov	r2, r4
 800bbbc:	462b      	mov	r3, r5
 800bbbe:	f7f4 fd13 	bl	80005e8 <__aeabi_dmul>
 800bbc2:	a339      	add	r3, pc, #228	@ (adr r3, 800bca8 <__kernel_cos+0x158>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 fb58 	bl	800027c <__adddf3>
 800bbcc:	4622      	mov	r2, r4
 800bbce:	462b      	mov	r3, r5
 800bbd0:	f7f4 fd0a 	bl	80005e8 <__aeabi_dmul>
 800bbd4:	a336      	add	r3, pc, #216	@ (adr r3, 800bcb0 <__kernel_cos+0x160>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 fb4d 	bl	8000278 <__aeabi_dsub>
 800bbde:	4622      	mov	r2, r4
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	f7f4 fd01 	bl	80005e8 <__aeabi_dmul>
 800bbe6:	a334      	add	r3, pc, #208	@ (adr r3, 800bcb8 <__kernel_cos+0x168>)
 800bbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbec:	f7f4 fb46 	bl	800027c <__adddf3>
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	462b      	mov	r3, r5
 800bbf4:	f7f4 fcf8 	bl	80005e8 <__aeabi_dmul>
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	462b      	mov	r3, r5
 800bbfc:	f7f4 fcf4 	bl	80005e8 <__aeabi_dmul>
 800bc00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc04:	4604      	mov	r4, r0
 800bc06:	460d      	mov	r5, r1
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 fcec 	bl	80005e8 <__aeabi_dmul>
 800bc10:	460b      	mov	r3, r1
 800bc12:	4602      	mov	r2, r0
 800bc14:	4629      	mov	r1, r5
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7f4 fb2e 	bl	8000278 <__aeabi_dsub>
 800bc1c:	4b2b      	ldr	r3, [pc, #172]	@ (800bccc <__kernel_cos+0x17c>)
 800bc1e:	4598      	cmp	r8, r3
 800bc20:	4606      	mov	r6, r0
 800bc22:	460f      	mov	r7, r1
 800bc24:	d810      	bhi.n	800bc48 <__kernel_cos+0xf8>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4650      	mov	r0, sl
 800bc2c:	4659      	mov	r1, fp
 800bc2e:	f7f4 fb23 	bl	8000278 <__aeabi_dsub>
 800bc32:	460b      	mov	r3, r1
 800bc34:	4926      	ldr	r1, [pc, #152]	@ (800bcd0 <__kernel_cos+0x180>)
 800bc36:	4602      	mov	r2, r0
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f7f4 fb1d 	bl	8000278 <__aeabi_dsub>
 800bc3e:	ec41 0b10 	vmov	d0, r0, r1
 800bc42:	b003      	add	sp, #12
 800bc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc48:	4b22      	ldr	r3, [pc, #136]	@ (800bcd4 <__kernel_cos+0x184>)
 800bc4a:	4921      	ldr	r1, [pc, #132]	@ (800bcd0 <__kernel_cos+0x180>)
 800bc4c:	4598      	cmp	r8, r3
 800bc4e:	bf8c      	ite	hi
 800bc50:	4d21      	ldrhi	r5, [pc, #132]	@ (800bcd8 <__kernel_cos+0x188>)
 800bc52:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800bc56:	2400      	movs	r4, #0
 800bc58:	4622      	mov	r2, r4
 800bc5a:	462b      	mov	r3, r5
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f7f4 fb0b 	bl	8000278 <__aeabi_dsub>
 800bc62:	4622      	mov	r2, r4
 800bc64:	4680      	mov	r8, r0
 800bc66:	4689      	mov	r9, r1
 800bc68:	462b      	mov	r3, r5
 800bc6a:	4650      	mov	r0, sl
 800bc6c:	4659      	mov	r1, fp
 800bc6e:	f7f4 fb03 	bl	8000278 <__aeabi_dsub>
 800bc72:	4632      	mov	r2, r6
 800bc74:	463b      	mov	r3, r7
 800bc76:	f7f4 faff 	bl	8000278 <__aeabi_dsub>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4640      	mov	r0, r8
 800bc80:	4649      	mov	r1, r9
 800bc82:	e7da      	b.n	800bc3a <__kernel_cos+0xea>
 800bc84:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800bcc0 <__kernel_cos+0x170>
 800bc88:	e7db      	b.n	800bc42 <__kernel_cos+0xf2>
 800bc8a:	bf00      	nop
 800bc8c:	f3af 8000 	nop.w
 800bc90:	be8838d4 	.word	0xbe8838d4
 800bc94:	bda8fae9 	.word	0xbda8fae9
 800bc98:	bdb4b1c4 	.word	0xbdb4b1c4
 800bc9c:	3e21ee9e 	.word	0x3e21ee9e
 800bca0:	809c52ad 	.word	0x809c52ad
 800bca4:	3e927e4f 	.word	0x3e927e4f
 800bca8:	19cb1590 	.word	0x19cb1590
 800bcac:	3efa01a0 	.word	0x3efa01a0
 800bcb0:	16c15177 	.word	0x16c15177
 800bcb4:	3f56c16c 	.word	0x3f56c16c
 800bcb8:	5555554c 	.word	0x5555554c
 800bcbc:	3fa55555 	.word	0x3fa55555
 800bcc0:	00000000 	.word	0x00000000
 800bcc4:	3ff00000 	.word	0x3ff00000
 800bcc8:	3fe00000 	.word	0x3fe00000
 800bccc:	3fd33332 	.word	0x3fd33332
 800bcd0:	3ff00000 	.word	0x3ff00000
 800bcd4:	3fe90000 	.word	0x3fe90000
 800bcd8:	3fd20000 	.word	0x3fd20000
 800bcdc:	00000000 	.word	0x00000000

0800bce0 <__kernel_sin>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	ec55 4b10 	vmov	r4, r5, d0
 800bce8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bcec:	b085      	sub	sp, #20
 800bcee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800bcf2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bcf6:	4680      	mov	r8, r0
 800bcf8:	d205      	bcs.n	800bd06 <__kernel_sin+0x26>
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7f4 ff0d 	bl	8000b1c <__aeabi_d2iz>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d052      	beq.n	800bdac <__kernel_sin+0xcc>
 800bd06:	4622      	mov	r2, r4
 800bd08:	462b      	mov	r3, r5
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	f7f4 fc6b 	bl	80005e8 <__aeabi_dmul>
 800bd12:	4682      	mov	sl, r0
 800bd14:	468b      	mov	fp, r1
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	f7f4 fc63 	bl	80005e8 <__aeabi_dmul>
 800bd22:	a342      	add	r3, pc, #264	@ (adr r3, 800be2c <__kernel_sin+0x14c>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	e9cd 0100 	strd	r0, r1, [sp]
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	4659      	mov	r1, fp
 800bd30:	f7f4 fc5a 	bl	80005e8 <__aeabi_dmul>
 800bd34:	a33f      	add	r3, pc, #252	@ (adr r3, 800be34 <__kernel_sin+0x154>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 fa9d 	bl	8000278 <__aeabi_dsub>
 800bd3e:	4652      	mov	r2, sl
 800bd40:	465b      	mov	r3, fp
 800bd42:	f7f4 fc51 	bl	80005e8 <__aeabi_dmul>
 800bd46:	a33d      	add	r3, pc, #244	@ (adr r3, 800be3c <__kernel_sin+0x15c>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	f7f4 fa96 	bl	800027c <__adddf3>
 800bd50:	4652      	mov	r2, sl
 800bd52:	465b      	mov	r3, fp
 800bd54:	f7f4 fc48 	bl	80005e8 <__aeabi_dmul>
 800bd58:	a33a      	add	r3, pc, #232	@ (adr r3, 800be44 <__kernel_sin+0x164>)
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	f7f4 fa8b 	bl	8000278 <__aeabi_dsub>
 800bd62:	4652      	mov	r2, sl
 800bd64:	465b      	mov	r3, fp
 800bd66:	f7f4 fc3f 	bl	80005e8 <__aeabi_dmul>
 800bd6a:	a338      	add	r3, pc, #224	@ (adr r3, 800be4c <__kernel_sin+0x16c>)
 800bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd70:	f7f4 fa84 	bl	800027c <__adddf3>
 800bd74:	4606      	mov	r6, r0
 800bd76:	460f      	mov	r7, r1
 800bd78:	f1b8 0f00 	cmp.w	r8, #0
 800bd7c:	d11b      	bne.n	800bdb6 <__kernel_sin+0xd6>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4650      	mov	r0, sl
 800bd84:	4659      	mov	r1, fp
 800bd86:	f7f4 fc2f 	bl	80005e8 <__aeabi_dmul>
 800bd8a:	a325      	add	r3, pc, #148	@ (adr r3, 800be20 <__kernel_sin+0x140>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 fa72 	bl	8000278 <__aeabi_dsub>
 800bd94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd98:	f7f4 fc26 	bl	80005e8 <__aeabi_dmul>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4620      	mov	r0, r4
 800bda2:	4629      	mov	r1, r5
 800bda4:	f7f4 fa6a 	bl	800027c <__adddf3>
 800bda8:	4604      	mov	r4, r0
 800bdaa:	460d      	mov	r5, r1
 800bdac:	ec45 4b10 	vmov	d0, r4, r5
 800bdb0:	b005      	add	sp, #20
 800bdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdba:	4b1b      	ldr	r3, [pc, #108]	@ (800be28 <__kernel_sin+0x148>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f7f4 fc13 	bl	80005e8 <__aeabi_dmul>
 800bdc2:	4632      	mov	r2, r6
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	4689      	mov	r9, r1
 800bdc8:	463b      	mov	r3, r7
 800bdca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdce:	f7f4 fc0b 	bl	80005e8 <__aeabi_dmul>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	4649      	mov	r1, r9
 800bdda:	f7f4 fa4d 	bl	8000278 <__aeabi_dsub>
 800bdde:	4652      	mov	r2, sl
 800bde0:	465b      	mov	r3, fp
 800bde2:	f7f4 fc01 	bl	80005e8 <__aeabi_dmul>
 800bde6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdea:	f7f4 fa45 	bl	8000278 <__aeabi_dsub>
 800bdee:	a30c      	add	r3, pc, #48	@ (adr r3, 800be20 <__kernel_sin+0x140>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	460f      	mov	r7, r1
 800bdf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdfc:	f7f4 fbf4 	bl	80005e8 <__aeabi_dmul>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fa38 	bl	800027c <__adddf3>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4620      	mov	r0, r4
 800be12:	4629      	mov	r1, r5
 800be14:	f7f4 fa30 	bl	8000278 <__aeabi_dsub>
 800be18:	e7c6      	b.n	800bda8 <__kernel_sin+0xc8>
 800be1a:	bf00      	nop
 800be1c:	f3af 8000 	nop.w
 800be20:	55555549 	.word	0x55555549
 800be24:	3fc55555 	.word	0x3fc55555
 800be28:	3fe00000 	.word	0x3fe00000
 800be2c:	5acfd57c 	.word	0x5acfd57c
 800be30:	3de5d93a 	.word	0x3de5d93a
 800be34:	8a2b9ceb 	.word	0x8a2b9ceb
 800be38:	3e5ae5e6 	.word	0x3e5ae5e6
 800be3c:	57b1fe7d 	.word	0x57b1fe7d
 800be40:	3ec71de3 	.word	0x3ec71de3
 800be44:	19c161d5 	.word	0x19c161d5
 800be48:	3f2a01a0 	.word	0x3f2a01a0
 800be4c:	1110f8a6 	.word	0x1110f8a6
 800be50:	3f811111 	.word	0x3f811111
 800be54:	00000000 	.word	0x00000000

0800be58 <__ieee754_rem_pio2>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	ec57 6b10 	vmov	r6, r7, d0
 800be60:	4bc5      	ldr	r3, [pc, #788]	@ (800c178 <__ieee754_rem_pio2+0x320>)
 800be62:	b08d      	sub	sp, #52	@ 0x34
 800be64:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800be68:	4598      	cmp	r8, r3
 800be6a:	4604      	mov	r4, r0
 800be6c:	9704      	str	r7, [sp, #16]
 800be6e:	d807      	bhi.n	800be80 <__ieee754_rem_pio2+0x28>
 800be70:	2200      	movs	r2, #0
 800be72:	2300      	movs	r3, #0
 800be74:	ed80 0b00 	vstr	d0, [r0]
 800be78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be7c:	2500      	movs	r5, #0
 800be7e:	e028      	b.n	800bed2 <__ieee754_rem_pio2+0x7a>
 800be80:	4bbe      	ldr	r3, [pc, #760]	@ (800c17c <__ieee754_rem_pio2+0x324>)
 800be82:	4598      	cmp	r8, r3
 800be84:	d878      	bhi.n	800bf78 <__ieee754_rem_pio2+0x120>
 800be86:	9b04      	ldr	r3, [sp, #16]
 800be88:	4dbd      	ldr	r5, [pc, #756]	@ (800c180 <__ieee754_rem_pio2+0x328>)
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	4630      	mov	r0, r6
 800be8e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c140 <__ieee754_rem_pio2+0x2e8>)
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	4639      	mov	r1, r7
 800be96:	dd38      	ble.n	800bf0a <__ieee754_rem_pio2+0xb2>
 800be98:	f7f4 f9ee 	bl	8000278 <__aeabi_dsub>
 800be9c:	45a8      	cmp	r8, r5
 800be9e:	4606      	mov	r6, r0
 800bea0:	460f      	mov	r7, r1
 800bea2:	d01a      	beq.n	800beda <__ieee754_rem_pio2+0x82>
 800bea4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c148 <__ieee754_rem_pio2+0x2f0>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	f7f4 f9e5 	bl	8000278 <__aeabi_dsub>
 800beae:	4602      	mov	r2, r0
 800beb0:	460b      	mov	r3, r1
 800beb2:	4680      	mov	r8, r0
 800beb4:	4689      	mov	r9, r1
 800beb6:	4630      	mov	r0, r6
 800beb8:	4639      	mov	r1, r7
 800beba:	f7f4 f9dd 	bl	8000278 <__aeabi_dsub>
 800bebe:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c148 <__ieee754_rem_pio2+0x2f0>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 f9d8 	bl	8000278 <__aeabi_dsub>
 800bec8:	e9c4 8900 	strd	r8, r9, [r4]
 800becc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bed0:	2501      	movs	r5, #1
 800bed2:	4628      	mov	r0, r5
 800bed4:	b00d      	add	sp, #52	@ 0x34
 800bed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beda:	a39d      	add	r3, pc, #628	@ (adr r3, 800c150 <__ieee754_rem_pio2+0x2f8>)
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f7f4 f9ca 	bl	8000278 <__aeabi_dsub>
 800bee4:	a39c      	add	r3, pc, #624	@ (adr r3, 800c158 <__ieee754_rem_pio2+0x300>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	4606      	mov	r6, r0
 800beec:	460f      	mov	r7, r1
 800beee:	f7f4 f9c3 	bl	8000278 <__aeabi_dsub>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4680      	mov	r8, r0
 800bef8:	4689      	mov	r9, r1
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 f9bb 	bl	8000278 <__aeabi_dsub>
 800bf02:	a395      	add	r3, pc, #596	@ (adr r3, 800c158 <__ieee754_rem_pio2+0x300>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	e7dc      	b.n	800bec4 <__ieee754_rem_pio2+0x6c>
 800bf0a:	f7f4 f9b7 	bl	800027c <__adddf3>
 800bf0e:	45a8      	cmp	r8, r5
 800bf10:	4606      	mov	r6, r0
 800bf12:	460f      	mov	r7, r1
 800bf14:	d018      	beq.n	800bf48 <__ieee754_rem_pio2+0xf0>
 800bf16:	a38c      	add	r3, pc, #560	@ (adr r3, 800c148 <__ieee754_rem_pio2+0x2f0>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f7f4 f9ae 	bl	800027c <__adddf3>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4680      	mov	r8, r0
 800bf26:	4689      	mov	r9, r1
 800bf28:	4630      	mov	r0, r6
 800bf2a:	4639      	mov	r1, r7
 800bf2c:	f7f4 f9a4 	bl	8000278 <__aeabi_dsub>
 800bf30:	a385      	add	r3, pc, #532	@ (adr r3, 800c148 <__ieee754_rem_pio2+0x2f0>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	f7f4 f9a1 	bl	800027c <__adddf3>
 800bf3a:	f04f 35ff 	mov.w	r5, #4294967295
 800bf3e:	e9c4 8900 	strd	r8, r9, [r4]
 800bf42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf46:	e7c4      	b.n	800bed2 <__ieee754_rem_pio2+0x7a>
 800bf48:	a381      	add	r3, pc, #516	@ (adr r3, 800c150 <__ieee754_rem_pio2+0x2f8>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 f995 	bl	800027c <__adddf3>
 800bf52:	a381      	add	r3, pc, #516	@ (adr r3, 800c158 <__ieee754_rem_pio2+0x300>)
 800bf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf58:	4606      	mov	r6, r0
 800bf5a:	460f      	mov	r7, r1
 800bf5c:	f7f4 f98e 	bl	800027c <__adddf3>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4680      	mov	r8, r0
 800bf66:	4689      	mov	r9, r1
 800bf68:	4630      	mov	r0, r6
 800bf6a:	4639      	mov	r1, r7
 800bf6c:	f7f4 f984 	bl	8000278 <__aeabi_dsub>
 800bf70:	a379      	add	r3, pc, #484	@ (adr r3, 800c158 <__ieee754_rem_pio2+0x300>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	e7de      	b.n	800bf36 <__ieee754_rem_pio2+0xde>
 800bf78:	4b82      	ldr	r3, [pc, #520]	@ (800c184 <__ieee754_rem_pio2+0x32c>)
 800bf7a:	4598      	cmp	r8, r3
 800bf7c:	f200 80d1 	bhi.w	800c122 <__ieee754_rem_pio2+0x2ca>
 800bf80:	f000 f966 	bl	800c250 <fabs>
 800bf84:	ec57 6b10 	vmov	r6, r7, d0
 800bf88:	a375      	add	r3, pc, #468	@ (adr r3, 800c160 <__ieee754_rem_pio2+0x308>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4639      	mov	r1, r7
 800bf92:	f7f4 fb29 	bl	80005e8 <__aeabi_dmul>
 800bf96:	4b7c      	ldr	r3, [pc, #496]	@ (800c188 <__ieee754_rem_pio2+0x330>)
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f7f4 f96f 	bl	800027c <__adddf3>
 800bf9e:	f7f4 fdbd 	bl	8000b1c <__aeabi_d2iz>
 800bfa2:	4605      	mov	r5, r0
 800bfa4:	f7f4 fab6 	bl	8000514 <__aeabi_i2d>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bfb0:	a363      	add	r3, pc, #396	@ (adr r3, 800c140 <__ieee754_rem_pio2+0x2e8>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 fb17 	bl	80005e8 <__aeabi_dmul>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	f7f4 f959 	bl	8000278 <__aeabi_dsub>
 800bfc6:	a360      	add	r3, pc, #384	@ (adr r3, 800c148 <__ieee754_rem_pio2+0x2f0>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	4682      	mov	sl, r0
 800bfce:	468b      	mov	fp, r1
 800bfd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfd4:	f7f4 fb08 	bl	80005e8 <__aeabi_dmul>
 800bfd8:	2d1f      	cmp	r5, #31
 800bfda:	4606      	mov	r6, r0
 800bfdc:	460f      	mov	r7, r1
 800bfde:	dc0c      	bgt.n	800bffa <__ieee754_rem_pio2+0x1a2>
 800bfe0:	4b6a      	ldr	r3, [pc, #424]	@ (800c18c <__ieee754_rem_pio2+0x334>)
 800bfe2:	1e6a      	subs	r2, r5, #1
 800bfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe8:	4543      	cmp	r3, r8
 800bfea:	d006      	beq.n	800bffa <__ieee754_rem_pio2+0x1a2>
 800bfec:	4632      	mov	r2, r6
 800bfee:	463b      	mov	r3, r7
 800bff0:	4650      	mov	r0, sl
 800bff2:	4659      	mov	r1, fp
 800bff4:	f7f4 f940 	bl	8000278 <__aeabi_dsub>
 800bff8:	e00e      	b.n	800c018 <__ieee754_rem_pio2+0x1c0>
 800bffa:	463b      	mov	r3, r7
 800bffc:	4632      	mov	r2, r6
 800bffe:	4650      	mov	r0, sl
 800c000:	4659      	mov	r1, fp
 800c002:	f7f4 f939 	bl	8000278 <__aeabi_dsub>
 800c006:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c00a:	9305      	str	r3, [sp, #20]
 800c00c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c010:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c014:	2b10      	cmp	r3, #16
 800c016:	dc02      	bgt.n	800c01e <__ieee754_rem_pio2+0x1c6>
 800c018:	e9c4 0100 	strd	r0, r1, [r4]
 800c01c:	e039      	b.n	800c092 <__ieee754_rem_pio2+0x23a>
 800c01e:	a34c      	add	r3, pc, #304	@ (adr r3, 800c150 <__ieee754_rem_pio2+0x2f8>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c028:	f7f4 fade 	bl	80005e8 <__aeabi_dmul>
 800c02c:	4606      	mov	r6, r0
 800c02e:	460f      	mov	r7, r1
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4650      	mov	r0, sl
 800c036:	4659      	mov	r1, fp
 800c038:	f7f4 f91e 	bl	8000278 <__aeabi_dsub>
 800c03c:	4602      	mov	r2, r0
 800c03e:	460b      	mov	r3, r1
 800c040:	4680      	mov	r8, r0
 800c042:	4689      	mov	r9, r1
 800c044:	4650      	mov	r0, sl
 800c046:	4659      	mov	r1, fp
 800c048:	f7f4 f916 	bl	8000278 <__aeabi_dsub>
 800c04c:	4632      	mov	r2, r6
 800c04e:	463b      	mov	r3, r7
 800c050:	f7f4 f912 	bl	8000278 <__aeabi_dsub>
 800c054:	a340      	add	r3, pc, #256	@ (adr r3, 800c158 <__ieee754_rem_pio2+0x300>)
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	4606      	mov	r6, r0
 800c05c:	460f      	mov	r7, r1
 800c05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c062:	f7f4 fac1 	bl	80005e8 <__aeabi_dmul>
 800c066:	4632      	mov	r2, r6
 800c068:	463b      	mov	r3, r7
 800c06a:	f7f4 f905 	bl	8000278 <__aeabi_dsub>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	4606      	mov	r6, r0
 800c074:	460f      	mov	r7, r1
 800c076:	4640      	mov	r0, r8
 800c078:	4649      	mov	r1, r9
 800c07a:	f7f4 f8fd 	bl	8000278 <__aeabi_dsub>
 800c07e:	9a05      	ldr	r2, [sp, #20]
 800c080:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	2b31      	cmp	r3, #49	@ 0x31
 800c088:	dc20      	bgt.n	800c0cc <__ieee754_rem_pio2+0x274>
 800c08a:	e9c4 0100 	strd	r0, r1, [r4]
 800c08e:	46c2      	mov	sl, r8
 800c090:	46cb      	mov	fp, r9
 800c092:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c096:	4650      	mov	r0, sl
 800c098:	4642      	mov	r2, r8
 800c09a:	464b      	mov	r3, r9
 800c09c:	4659      	mov	r1, fp
 800c09e:	f7f4 f8eb 	bl	8000278 <__aeabi_dsub>
 800c0a2:	463b      	mov	r3, r7
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	f7f4 f8e7 	bl	8000278 <__aeabi_dsub>
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0b2:	f6bf af0e 	bge.w	800bed2 <__ieee754_rem_pio2+0x7a>
 800c0b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c0ba:	6063      	str	r3, [r4, #4]
 800c0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c0c0:	f8c4 8000 	str.w	r8, [r4]
 800c0c4:	60a0      	str	r0, [r4, #8]
 800c0c6:	60e3      	str	r3, [r4, #12]
 800c0c8:	426d      	negs	r5, r5
 800c0ca:	e702      	b.n	800bed2 <__ieee754_rem_pio2+0x7a>
 800c0cc:	a326      	add	r3, pc, #152	@ (adr r3, 800c168 <__ieee754_rem_pio2+0x310>)
 800c0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0d6:	f7f4 fa87 	bl	80005e8 <__aeabi_dmul>
 800c0da:	4606      	mov	r6, r0
 800c0dc:	460f      	mov	r7, r1
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	f7f4 f8c7 	bl	8000278 <__aeabi_dsub>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4682      	mov	sl, r0
 800c0f0:	468b      	mov	fp, r1
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	f7f4 f8bf 	bl	8000278 <__aeabi_dsub>
 800c0fa:	4632      	mov	r2, r6
 800c0fc:	463b      	mov	r3, r7
 800c0fe:	f7f4 f8bb 	bl	8000278 <__aeabi_dsub>
 800c102:	a31b      	add	r3, pc, #108	@ (adr r3, 800c170 <__ieee754_rem_pio2+0x318>)
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	4606      	mov	r6, r0
 800c10a:	460f      	mov	r7, r1
 800c10c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c110:	f7f4 fa6a 	bl	80005e8 <__aeabi_dmul>
 800c114:	4632      	mov	r2, r6
 800c116:	463b      	mov	r3, r7
 800c118:	f7f4 f8ae 	bl	8000278 <__aeabi_dsub>
 800c11c:	4606      	mov	r6, r0
 800c11e:	460f      	mov	r7, r1
 800c120:	e764      	b.n	800bfec <__ieee754_rem_pio2+0x194>
 800c122:	4b1b      	ldr	r3, [pc, #108]	@ (800c190 <__ieee754_rem_pio2+0x338>)
 800c124:	4598      	cmp	r8, r3
 800c126:	d935      	bls.n	800c194 <__ieee754_rem_pio2+0x33c>
 800c128:	4632      	mov	r2, r6
 800c12a:	463b      	mov	r3, r7
 800c12c:	4630      	mov	r0, r6
 800c12e:	4639      	mov	r1, r7
 800c130:	f7f4 f8a2 	bl	8000278 <__aeabi_dsub>
 800c134:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c138:	e9c4 0100 	strd	r0, r1, [r4]
 800c13c:	e69e      	b.n	800be7c <__ieee754_rem_pio2+0x24>
 800c13e:	bf00      	nop
 800c140:	54400000 	.word	0x54400000
 800c144:	3ff921fb 	.word	0x3ff921fb
 800c148:	1a626331 	.word	0x1a626331
 800c14c:	3dd0b461 	.word	0x3dd0b461
 800c150:	1a600000 	.word	0x1a600000
 800c154:	3dd0b461 	.word	0x3dd0b461
 800c158:	2e037073 	.word	0x2e037073
 800c15c:	3ba3198a 	.word	0x3ba3198a
 800c160:	6dc9c883 	.word	0x6dc9c883
 800c164:	3fe45f30 	.word	0x3fe45f30
 800c168:	2e000000 	.word	0x2e000000
 800c16c:	3ba3198a 	.word	0x3ba3198a
 800c170:	252049c1 	.word	0x252049c1
 800c174:	397b839a 	.word	0x397b839a
 800c178:	3fe921fb 	.word	0x3fe921fb
 800c17c:	4002d97b 	.word	0x4002d97b
 800c180:	3ff921fb 	.word	0x3ff921fb
 800c184:	413921fb 	.word	0x413921fb
 800c188:	3fe00000 	.word	0x3fe00000
 800c18c:	0800cc1c 	.word	0x0800cc1c
 800c190:	7fefffff 	.word	0x7fefffff
 800c194:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c198:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c19c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	460f      	mov	r7, r1
 800c1a4:	f7f4 fcba 	bl	8000b1c <__aeabi_d2iz>
 800c1a8:	f7f4 f9b4 	bl	8000514 <__aeabi_i2d>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1b8:	f7f4 f85e 	bl	8000278 <__aeabi_dsub>
 800c1bc:	4b22      	ldr	r3, [pc, #136]	@ (800c248 <__ieee754_rem_pio2+0x3f0>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f7f4 fa12 	bl	80005e8 <__aeabi_dmul>
 800c1c4:	460f      	mov	r7, r1
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	f7f4 fca8 	bl	8000b1c <__aeabi_d2iz>
 800c1cc:	f7f4 f9a2 	bl	8000514 <__aeabi_i2d>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1dc:	f7f4 f84c 	bl	8000278 <__aeabi_dsub>
 800c1e0:	4b19      	ldr	r3, [pc, #100]	@ (800c248 <__ieee754_rem_pio2+0x3f0>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f7f4 fa00 	bl	80005e8 <__aeabi_dmul>
 800c1e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c1ec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c1f0:	f04f 0803 	mov.w	r8, #3
 800c1f4:	2600      	movs	r6, #0
 800c1f6:	2700      	movs	r7, #0
 800c1f8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	46c2      	mov	sl, r8
 800c202:	f108 38ff 	add.w	r8, r8, #4294967295
 800c206:	f7f4 fc57 	bl	8000ab8 <__aeabi_dcmpeq>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d1f4      	bne.n	800c1f8 <__ieee754_rem_pio2+0x3a0>
 800c20e:	4b0f      	ldr	r3, [pc, #60]	@ (800c24c <__ieee754_rem_pio2+0x3f4>)
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	2302      	movs	r3, #2
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	462a      	mov	r2, r5
 800c218:	4653      	mov	r3, sl
 800c21a:	4621      	mov	r1, r4
 800c21c:	a806      	add	r0, sp, #24
 800c21e:	f000 f81f 	bl	800c260 <__kernel_rem_pio2>
 800c222:	9b04      	ldr	r3, [sp, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	4605      	mov	r5, r0
 800c228:	f6bf ae53 	bge.w	800bed2 <__ieee754_rem_pio2+0x7a>
 800c22c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c230:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c234:	e9c4 2300 	strd	r2, r3, [r4]
 800c238:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c23c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c240:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c244:	e740      	b.n	800c0c8 <__ieee754_rem_pio2+0x270>
 800c246:	bf00      	nop
 800c248:	41700000 	.word	0x41700000
 800c24c:	0800cc9c 	.word	0x0800cc9c

0800c250 <fabs>:
 800c250:	ec51 0b10 	vmov	r0, r1, d0
 800c254:	4602      	mov	r2, r0
 800c256:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c25a:	ec43 2b10 	vmov	d0, r2, r3
 800c25e:	4770      	bx	lr

0800c260 <__kernel_rem_pio2>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	ed2d 8b02 	vpush	{d8}
 800c268:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c26c:	f112 0f14 	cmn.w	r2, #20
 800c270:	9306      	str	r3, [sp, #24]
 800c272:	9104      	str	r1, [sp, #16]
 800c274:	4bc2      	ldr	r3, [pc, #776]	@ (800c580 <__kernel_rem_pio2+0x320>)
 800c276:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c278:	9008      	str	r0, [sp, #32]
 800c27a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	9b06      	ldr	r3, [sp, #24]
 800c282:	f103 33ff 	add.w	r3, r3, #4294967295
 800c286:	bfa8      	it	ge
 800c288:	1ed4      	subge	r4, r2, #3
 800c28a:	9305      	str	r3, [sp, #20]
 800c28c:	bfb2      	itee	lt
 800c28e:	2400      	movlt	r4, #0
 800c290:	2318      	movge	r3, #24
 800c292:	fb94 f4f3 	sdivge	r4, r4, r3
 800c296:	f06f 0317 	mvn.w	r3, #23
 800c29a:	fb04 3303 	mla	r3, r4, r3, r3
 800c29e:	eb03 0b02 	add.w	fp, r3, r2
 800c2a2:	9b00      	ldr	r3, [sp, #0]
 800c2a4:	9a05      	ldr	r2, [sp, #20]
 800c2a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800c570 <__kernel_rem_pio2+0x310>
 800c2aa:	eb03 0802 	add.w	r8, r3, r2
 800c2ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c2b0:	1aa7      	subs	r7, r4, r2
 800c2b2:	ae20      	add	r6, sp, #128	@ 0x80
 800c2b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c2b8:	2500      	movs	r5, #0
 800c2ba:	4545      	cmp	r5, r8
 800c2bc:	dd12      	ble.n	800c2e4 <__kernel_rem_pio2+0x84>
 800c2be:	9b06      	ldr	r3, [sp, #24]
 800c2c0:	aa20      	add	r2, sp, #128	@ 0x80
 800c2c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c2c6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c2ca:	2700      	movs	r7, #0
 800c2cc:	9b00      	ldr	r3, [sp, #0]
 800c2ce:	429f      	cmp	r7, r3
 800c2d0:	dc2e      	bgt.n	800c330 <__kernel_rem_pio2+0xd0>
 800c2d2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800c570 <__kernel_rem_pio2+0x310>
 800c2d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2da:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c2de:	46a8      	mov	r8, r5
 800c2e0:	2600      	movs	r6, #0
 800c2e2:	e01b      	b.n	800c31c <__kernel_rem_pio2+0xbc>
 800c2e4:	42ef      	cmn	r7, r5
 800c2e6:	d407      	bmi.n	800c2f8 <__kernel_rem_pio2+0x98>
 800c2e8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c2ec:	f7f4 f912 	bl	8000514 <__aeabi_i2d>
 800c2f0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c2f4:	3501      	adds	r5, #1
 800c2f6:	e7e0      	b.n	800c2ba <__kernel_rem_pio2+0x5a>
 800c2f8:	ec51 0b18 	vmov	r0, r1, d8
 800c2fc:	e7f8      	b.n	800c2f0 <__kernel_rem_pio2+0x90>
 800c2fe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800c302:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c306:	f7f4 f96f 	bl	80005e8 <__aeabi_dmul>
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c312:	f7f3 ffb3 	bl	800027c <__adddf3>
 800c316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c31a:	3601      	adds	r6, #1
 800c31c:	9b05      	ldr	r3, [sp, #20]
 800c31e:	429e      	cmp	r6, r3
 800c320:	dded      	ble.n	800c2fe <__kernel_rem_pio2+0x9e>
 800c322:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c326:	3701      	adds	r7, #1
 800c328:	ecaa 7b02 	vstmia	sl!, {d7}
 800c32c:	3508      	adds	r5, #8
 800c32e:	e7cd      	b.n	800c2cc <__kernel_rem_pio2+0x6c>
 800c330:	9b00      	ldr	r3, [sp, #0]
 800c332:	f8dd 8000 	ldr.w	r8, [sp]
 800c336:	aa0c      	add	r2, sp, #48	@ 0x30
 800c338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c33c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c33e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c340:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c344:	9309      	str	r3, [sp, #36]	@ 0x24
 800c346:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c34a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c34c:	ab98      	add	r3, sp, #608	@ 0x260
 800c34e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c352:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c356:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c35a:	ac0c      	add	r4, sp, #48	@ 0x30
 800c35c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c35e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c362:	46a1      	mov	r9, r4
 800c364:	46c2      	mov	sl, r8
 800c366:	f1ba 0f00 	cmp.w	sl, #0
 800c36a:	dc77      	bgt.n	800c45c <__kernel_rem_pio2+0x1fc>
 800c36c:	4658      	mov	r0, fp
 800c36e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c372:	f000 fac5 	bl	800c900 <scalbn>
 800c376:	ec57 6b10 	vmov	r6, r7, d0
 800c37a:	2200      	movs	r2, #0
 800c37c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c380:	4630      	mov	r0, r6
 800c382:	4639      	mov	r1, r7
 800c384:	f7f4 f930 	bl	80005e8 <__aeabi_dmul>
 800c388:	ec41 0b10 	vmov	d0, r0, r1
 800c38c:	f000 fb34 	bl	800c9f8 <floor>
 800c390:	4b7c      	ldr	r3, [pc, #496]	@ (800c584 <__kernel_rem_pio2+0x324>)
 800c392:	ec51 0b10 	vmov	r0, r1, d0
 800c396:	2200      	movs	r2, #0
 800c398:	f7f4 f926 	bl	80005e8 <__aeabi_dmul>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	4639      	mov	r1, r7
 800c3a4:	f7f3 ff68 	bl	8000278 <__aeabi_dsub>
 800c3a8:	460f      	mov	r7, r1
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	f7f4 fbb6 	bl	8000b1c <__aeabi_d2iz>
 800c3b0:	9002      	str	r0, [sp, #8]
 800c3b2:	f7f4 f8af 	bl	8000514 <__aeabi_i2d>
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	4639      	mov	r1, r7
 800c3be:	f7f3 ff5b 	bl	8000278 <__aeabi_dsub>
 800c3c2:	f1bb 0f00 	cmp.w	fp, #0
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	dd6c      	ble.n	800c4a6 <__kernel_rem_pio2+0x246>
 800c3cc:	f108 31ff 	add.w	r1, r8, #4294967295
 800c3d0:	ab0c      	add	r3, sp, #48	@ 0x30
 800c3d2:	9d02      	ldr	r5, [sp, #8]
 800c3d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c3d8:	f1cb 0018 	rsb	r0, fp, #24
 800c3dc:	fa43 f200 	asr.w	r2, r3, r0
 800c3e0:	4415      	add	r5, r2
 800c3e2:	4082      	lsls	r2, r0
 800c3e4:	1a9b      	subs	r3, r3, r2
 800c3e6:	aa0c      	add	r2, sp, #48	@ 0x30
 800c3e8:	9502      	str	r5, [sp, #8]
 800c3ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c3ee:	f1cb 0217 	rsb	r2, fp, #23
 800c3f2:	fa43 f902 	asr.w	r9, r3, r2
 800c3f6:	f1b9 0f00 	cmp.w	r9, #0
 800c3fa:	dd64      	ble.n	800c4c6 <__kernel_rem_pio2+0x266>
 800c3fc:	9b02      	ldr	r3, [sp, #8]
 800c3fe:	2200      	movs	r2, #0
 800c400:	3301      	adds	r3, #1
 800c402:	9302      	str	r3, [sp, #8]
 800c404:	4615      	mov	r5, r2
 800c406:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c40a:	4590      	cmp	r8, r2
 800c40c:	f300 80a1 	bgt.w	800c552 <__kernel_rem_pio2+0x2f2>
 800c410:	f1bb 0f00 	cmp.w	fp, #0
 800c414:	dd07      	ble.n	800c426 <__kernel_rem_pio2+0x1c6>
 800c416:	f1bb 0f01 	cmp.w	fp, #1
 800c41a:	f000 80c1 	beq.w	800c5a0 <__kernel_rem_pio2+0x340>
 800c41e:	f1bb 0f02 	cmp.w	fp, #2
 800c422:	f000 80c8 	beq.w	800c5b6 <__kernel_rem_pio2+0x356>
 800c426:	f1b9 0f02 	cmp.w	r9, #2
 800c42a:	d14c      	bne.n	800c4c6 <__kernel_rem_pio2+0x266>
 800c42c:	4632      	mov	r2, r6
 800c42e:	463b      	mov	r3, r7
 800c430:	4955      	ldr	r1, [pc, #340]	@ (800c588 <__kernel_rem_pio2+0x328>)
 800c432:	2000      	movs	r0, #0
 800c434:	f7f3 ff20 	bl	8000278 <__aeabi_dsub>
 800c438:	4606      	mov	r6, r0
 800c43a:	460f      	mov	r7, r1
 800c43c:	2d00      	cmp	r5, #0
 800c43e:	d042      	beq.n	800c4c6 <__kernel_rem_pio2+0x266>
 800c440:	4658      	mov	r0, fp
 800c442:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800c578 <__kernel_rem_pio2+0x318>
 800c446:	f000 fa5b 	bl	800c900 <scalbn>
 800c44a:	4630      	mov	r0, r6
 800c44c:	4639      	mov	r1, r7
 800c44e:	ec53 2b10 	vmov	r2, r3, d0
 800c452:	f7f3 ff11 	bl	8000278 <__aeabi_dsub>
 800c456:	4606      	mov	r6, r0
 800c458:	460f      	mov	r7, r1
 800c45a:	e034      	b.n	800c4c6 <__kernel_rem_pio2+0x266>
 800c45c:	4b4b      	ldr	r3, [pc, #300]	@ (800c58c <__kernel_rem_pio2+0x32c>)
 800c45e:	2200      	movs	r2, #0
 800c460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c464:	f7f4 f8c0 	bl	80005e8 <__aeabi_dmul>
 800c468:	f7f4 fb58 	bl	8000b1c <__aeabi_d2iz>
 800c46c:	f7f4 f852 	bl	8000514 <__aeabi_i2d>
 800c470:	4b47      	ldr	r3, [pc, #284]	@ (800c590 <__kernel_rem_pio2+0x330>)
 800c472:	2200      	movs	r2, #0
 800c474:	4606      	mov	r6, r0
 800c476:	460f      	mov	r7, r1
 800c478:	f7f4 f8b6 	bl	80005e8 <__aeabi_dmul>
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c484:	f7f3 fef8 	bl	8000278 <__aeabi_dsub>
 800c488:	f7f4 fb48 	bl	8000b1c <__aeabi_d2iz>
 800c48c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c490:	f849 0b04 	str.w	r0, [r9], #4
 800c494:	4639      	mov	r1, r7
 800c496:	4630      	mov	r0, r6
 800c498:	f7f3 fef0 	bl	800027c <__adddf3>
 800c49c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4a4:	e75f      	b.n	800c366 <__kernel_rem_pio2+0x106>
 800c4a6:	d107      	bne.n	800c4b8 <__kernel_rem_pio2+0x258>
 800c4a8:	f108 33ff 	add.w	r3, r8, #4294967295
 800c4ac:	aa0c      	add	r2, sp, #48	@ 0x30
 800c4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c4b6:	e79e      	b.n	800c3f6 <__kernel_rem_pio2+0x196>
 800c4b8:	4b36      	ldr	r3, [pc, #216]	@ (800c594 <__kernel_rem_pio2+0x334>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f7f4 fb1a 	bl	8000af4 <__aeabi_dcmpge>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d143      	bne.n	800c54c <__kernel_rem_pio2+0x2ec>
 800c4c4:	4681      	mov	r9, r0
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f4 faf3 	bl	8000ab8 <__aeabi_dcmpeq>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f000 80c1 	beq.w	800c65a <__kernel_rem_pio2+0x3fa>
 800c4d8:	f108 33ff 	add.w	r3, r8, #4294967295
 800c4dc:	2200      	movs	r2, #0
 800c4de:	9900      	ldr	r1, [sp, #0]
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	da70      	bge.n	800c5c6 <__kernel_rem_pio2+0x366>
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	f000 808b 	beq.w	800c600 <__kernel_rem_pio2+0x3a0>
 800c4ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800c4f0:	f1ab 0b18 	sub.w	fp, fp, #24
 800c4f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d0f6      	beq.n	800c4ea <__kernel_rem_pio2+0x28a>
 800c4fc:	4658      	mov	r0, fp
 800c4fe:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800c578 <__kernel_rem_pio2+0x318>
 800c502:	f000 f9fd 	bl	800c900 <scalbn>
 800c506:	f108 0301 	add.w	r3, r8, #1
 800c50a:	00da      	lsls	r2, r3, #3
 800c50c:	9205      	str	r2, [sp, #20]
 800c50e:	ec55 4b10 	vmov	r4, r5, d0
 800c512:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c514:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800c58c <__kernel_rem_pio2+0x32c>
 800c518:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c51c:	4646      	mov	r6, r8
 800c51e:	f04f 0a00 	mov.w	sl, #0
 800c522:	2e00      	cmp	r6, #0
 800c524:	f280 80d1 	bge.w	800c6ca <__kernel_rem_pio2+0x46a>
 800c528:	4644      	mov	r4, r8
 800c52a:	2c00      	cmp	r4, #0
 800c52c:	f2c0 80ff 	blt.w	800c72e <__kernel_rem_pio2+0x4ce>
 800c530:	4b19      	ldr	r3, [pc, #100]	@ (800c598 <__kernel_rem_pio2+0x338>)
 800c532:	461f      	mov	r7, r3
 800c534:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c536:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c53a:	9306      	str	r3, [sp, #24]
 800c53c:	f04f 0a00 	mov.w	sl, #0
 800c540:	f04f 0b00 	mov.w	fp, #0
 800c544:	2600      	movs	r6, #0
 800c546:	eba8 0504 	sub.w	r5, r8, r4
 800c54a:	e0e4      	b.n	800c716 <__kernel_rem_pio2+0x4b6>
 800c54c:	f04f 0902 	mov.w	r9, #2
 800c550:	e754      	b.n	800c3fc <__kernel_rem_pio2+0x19c>
 800c552:	f854 3b04 	ldr.w	r3, [r4], #4
 800c556:	bb0d      	cbnz	r5, 800c59c <__kernel_rem_pio2+0x33c>
 800c558:	b123      	cbz	r3, 800c564 <__kernel_rem_pio2+0x304>
 800c55a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c55e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c562:	2301      	movs	r3, #1
 800c564:	3201      	adds	r2, #1
 800c566:	461d      	mov	r5, r3
 800c568:	e74f      	b.n	800c40a <__kernel_rem_pio2+0x1aa>
 800c56a:	bf00      	nop
 800c56c:	f3af 8000 	nop.w
	...
 800c57c:	3ff00000 	.word	0x3ff00000
 800c580:	0800cde8 	.word	0x0800cde8
 800c584:	40200000 	.word	0x40200000
 800c588:	3ff00000 	.word	0x3ff00000
 800c58c:	3e700000 	.word	0x3e700000
 800c590:	41700000 	.word	0x41700000
 800c594:	3fe00000 	.word	0x3fe00000
 800c598:	0800cda8 	.word	0x0800cda8
 800c59c:	1acb      	subs	r3, r1, r3
 800c59e:	e7de      	b.n	800c55e <__kernel_rem_pio2+0x2fe>
 800c5a0:	f108 32ff 	add.w	r2, r8, #4294967295
 800c5a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800c5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c5ae:	a90c      	add	r1, sp, #48	@ 0x30
 800c5b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c5b4:	e737      	b.n	800c426 <__kernel_rem_pio2+0x1c6>
 800c5b6:	f108 32ff 	add.w	r2, r8, #4294967295
 800c5ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800c5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c5c4:	e7f3      	b.n	800c5ae <__kernel_rem_pio2+0x34e>
 800c5c6:	a90c      	add	r1, sp, #48	@ 0x30
 800c5c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	e785      	b.n	800c4de <__kernel_rem_pio2+0x27e>
 800c5d2:	3401      	adds	r4, #1
 800c5d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	d0fa      	beq.n	800c5d2 <__kernel_rem_pio2+0x372>
 800c5dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c5e2:	eb0d 0503 	add.w	r5, sp, r3
 800c5e6:	9b06      	ldr	r3, [sp, #24]
 800c5e8:	aa20      	add	r2, sp, #128	@ 0x80
 800c5ea:	4443      	add	r3, r8
 800c5ec:	f108 0701 	add.w	r7, r8, #1
 800c5f0:	3d98      	subs	r5, #152	@ 0x98
 800c5f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c5f6:	4444      	add	r4, r8
 800c5f8:	42bc      	cmp	r4, r7
 800c5fa:	da04      	bge.n	800c606 <__kernel_rem_pio2+0x3a6>
 800c5fc:	46a0      	mov	r8, r4
 800c5fe:	e6a2      	b.n	800c346 <__kernel_rem_pio2+0xe6>
 800c600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c602:	2401      	movs	r4, #1
 800c604:	e7e6      	b.n	800c5d4 <__kernel_rem_pio2+0x374>
 800c606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c608:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c60c:	f7f3 ff82 	bl	8000514 <__aeabi_i2d>
 800c610:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800c8d0 <__kernel_rem_pio2+0x670>
 800c614:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c618:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c61c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c620:	46b2      	mov	sl, r6
 800c622:	f04f 0800 	mov.w	r8, #0
 800c626:	9b05      	ldr	r3, [sp, #20]
 800c628:	4598      	cmp	r8, r3
 800c62a:	dd05      	ble.n	800c638 <__kernel_rem_pio2+0x3d8>
 800c62c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c630:	3701      	adds	r7, #1
 800c632:	eca5 7b02 	vstmia	r5!, {d7}
 800c636:	e7df      	b.n	800c5f8 <__kernel_rem_pio2+0x398>
 800c638:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c63c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c640:	f7f3 ffd2 	bl	80005e8 <__aeabi_dmul>
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c64c:	f7f3 fe16 	bl	800027c <__adddf3>
 800c650:	f108 0801 	add.w	r8, r8, #1
 800c654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c658:	e7e5      	b.n	800c626 <__kernel_rem_pio2+0x3c6>
 800c65a:	f1cb 0000 	rsb	r0, fp, #0
 800c65e:	ec47 6b10 	vmov	d0, r6, r7
 800c662:	f000 f94d 	bl	800c900 <scalbn>
 800c666:	ec55 4b10 	vmov	r4, r5, d0
 800c66a:	4b9b      	ldr	r3, [pc, #620]	@ (800c8d8 <__kernel_rem_pio2+0x678>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	4620      	mov	r0, r4
 800c670:	4629      	mov	r1, r5
 800c672:	f7f4 fa3f 	bl	8000af4 <__aeabi_dcmpge>
 800c676:	b300      	cbz	r0, 800c6ba <__kernel_rem_pio2+0x45a>
 800c678:	4b98      	ldr	r3, [pc, #608]	@ (800c8dc <__kernel_rem_pio2+0x67c>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 ffb2 	bl	80005e8 <__aeabi_dmul>
 800c684:	f7f4 fa4a 	bl	8000b1c <__aeabi_d2iz>
 800c688:	4606      	mov	r6, r0
 800c68a:	f7f3 ff43 	bl	8000514 <__aeabi_i2d>
 800c68e:	4b92      	ldr	r3, [pc, #584]	@ (800c8d8 <__kernel_rem_pio2+0x678>)
 800c690:	2200      	movs	r2, #0
 800c692:	f7f3 ffa9 	bl	80005e8 <__aeabi_dmul>
 800c696:	460b      	mov	r3, r1
 800c698:	4602      	mov	r2, r0
 800c69a:	4629      	mov	r1, r5
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7f3 fdeb 	bl	8000278 <__aeabi_dsub>
 800c6a2:	f7f4 fa3b 	bl	8000b1c <__aeabi_d2iz>
 800c6a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6a8:	f10b 0b18 	add.w	fp, fp, #24
 800c6ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c6b0:	f108 0801 	add.w	r8, r8, #1
 800c6b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c6b8:	e720      	b.n	800c4fc <__kernel_rem_pio2+0x29c>
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	4629      	mov	r1, r5
 800c6be:	f7f4 fa2d 	bl	8000b1c <__aeabi_d2iz>
 800c6c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c6c8:	e718      	b.n	800c4fc <__kernel_rem_pio2+0x29c>
 800c6ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800c6cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c6d0:	f7f3 ff20 	bl	8000514 <__aeabi_i2d>
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	462b      	mov	r3, r5
 800c6d8:	f7f3 ff86 	bl	80005e8 <__aeabi_dmul>
 800c6dc:	4652      	mov	r2, sl
 800c6de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c6e2:	465b      	mov	r3, fp
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f7f3 ff7e 	bl	80005e8 <__aeabi_dmul>
 800c6ec:	3e01      	subs	r6, #1
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	460d      	mov	r5, r1
 800c6f2:	e716      	b.n	800c522 <__kernel_rem_pio2+0x2c2>
 800c6f4:	9906      	ldr	r1, [sp, #24]
 800c6f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c6fa:	9106      	str	r1, [sp, #24]
 800c6fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c700:	f7f3 ff72 	bl	80005e8 <__aeabi_dmul>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4650      	mov	r0, sl
 800c70a:	4659      	mov	r1, fp
 800c70c:	f7f3 fdb6 	bl	800027c <__adddf3>
 800c710:	3601      	adds	r6, #1
 800c712:	4682      	mov	sl, r0
 800c714:	468b      	mov	fp, r1
 800c716:	9b00      	ldr	r3, [sp, #0]
 800c718:	429e      	cmp	r6, r3
 800c71a:	dc01      	bgt.n	800c720 <__kernel_rem_pio2+0x4c0>
 800c71c:	42ae      	cmp	r6, r5
 800c71e:	dde9      	ble.n	800c6f4 <__kernel_rem_pio2+0x494>
 800c720:	ab48      	add	r3, sp, #288	@ 0x120
 800c722:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c726:	e9c5 ab00 	strd	sl, fp, [r5]
 800c72a:	3c01      	subs	r4, #1
 800c72c:	e6fd      	b.n	800c52a <__kernel_rem_pio2+0x2ca>
 800c72e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c730:	2b02      	cmp	r3, #2
 800c732:	dc0b      	bgt.n	800c74c <__kernel_rem_pio2+0x4ec>
 800c734:	2b00      	cmp	r3, #0
 800c736:	dc35      	bgt.n	800c7a4 <__kernel_rem_pio2+0x544>
 800c738:	d059      	beq.n	800c7ee <__kernel_rem_pio2+0x58e>
 800c73a:	9b02      	ldr	r3, [sp, #8]
 800c73c:	f003 0007 	and.w	r0, r3, #7
 800c740:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c744:	ecbd 8b02 	vpop	{d8}
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d1f3      	bne.n	800c73a <__kernel_rem_pio2+0x4da>
 800c752:	9b05      	ldr	r3, [sp, #20]
 800c754:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c758:	eb0d 0403 	add.w	r4, sp, r3
 800c75c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c760:	4625      	mov	r5, r4
 800c762:	46c2      	mov	sl, r8
 800c764:	f1ba 0f00 	cmp.w	sl, #0
 800c768:	dc69      	bgt.n	800c83e <__kernel_rem_pio2+0x5de>
 800c76a:	4645      	mov	r5, r8
 800c76c:	2d01      	cmp	r5, #1
 800c76e:	f300 8087 	bgt.w	800c880 <__kernel_rem_pio2+0x620>
 800c772:	9c05      	ldr	r4, [sp, #20]
 800c774:	ab48      	add	r3, sp, #288	@ 0x120
 800c776:	441c      	add	r4, r3
 800c778:	2000      	movs	r0, #0
 800c77a:	2100      	movs	r1, #0
 800c77c:	f1b8 0f01 	cmp.w	r8, #1
 800c780:	f300 809c 	bgt.w	800c8bc <__kernel_rem_pio2+0x65c>
 800c784:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800c788:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c78c:	f1b9 0f00 	cmp.w	r9, #0
 800c790:	f040 80a6 	bne.w	800c8e0 <__kernel_rem_pio2+0x680>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	e9c3 5600 	strd	r5, r6, [r3]
 800c79a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c79e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c7a2:	e7ca      	b.n	800c73a <__kernel_rem_pio2+0x4da>
 800c7a4:	9d05      	ldr	r5, [sp, #20]
 800c7a6:	ab48      	add	r3, sp, #288	@ 0x120
 800c7a8:	441d      	add	r5, r3
 800c7aa:	4644      	mov	r4, r8
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	2c00      	cmp	r4, #0
 800c7b2:	da35      	bge.n	800c820 <__kernel_rem_pio2+0x5c0>
 800c7b4:	f1b9 0f00 	cmp.w	r9, #0
 800c7b8:	d038      	beq.n	800c82c <__kernel_rem_pio2+0x5cc>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7c0:	9c04      	ldr	r4, [sp, #16]
 800c7c2:	e9c4 2300 	strd	r2, r3, [r4]
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c7ce:	f7f3 fd53 	bl	8000278 <__aeabi_dsub>
 800c7d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800c7d4:	2401      	movs	r4, #1
 800c7d6:	45a0      	cmp	r8, r4
 800c7d8:	da2b      	bge.n	800c832 <__kernel_rem_pio2+0x5d2>
 800c7da:	f1b9 0f00 	cmp.w	r9, #0
 800c7de:	d002      	beq.n	800c7e6 <__kernel_rem_pio2+0x586>
 800c7e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	9b04      	ldr	r3, [sp, #16]
 800c7e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c7ec:	e7a5      	b.n	800c73a <__kernel_rem_pio2+0x4da>
 800c7ee:	9c05      	ldr	r4, [sp, #20]
 800c7f0:	ab48      	add	r3, sp, #288	@ 0x120
 800c7f2:	441c      	add	r4, r3
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	f1b8 0f00 	cmp.w	r8, #0
 800c7fc:	da09      	bge.n	800c812 <__kernel_rem_pio2+0x5b2>
 800c7fe:	f1b9 0f00 	cmp.w	r9, #0
 800c802:	d002      	beq.n	800c80a <__kernel_rem_pio2+0x5aa>
 800c804:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c808:	4619      	mov	r1, r3
 800c80a:	9b04      	ldr	r3, [sp, #16]
 800c80c:	e9c3 0100 	strd	r0, r1, [r3]
 800c810:	e793      	b.n	800c73a <__kernel_rem_pio2+0x4da>
 800c812:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c816:	f7f3 fd31 	bl	800027c <__adddf3>
 800c81a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c81e:	e7eb      	b.n	800c7f8 <__kernel_rem_pio2+0x598>
 800c820:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c824:	f7f3 fd2a 	bl	800027c <__adddf3>
 800c828:	3c01      	subs	r4, #1
 800c82a:	e7c1      	b.n	800c7b0 <__kernel_rem_pio2+0x550>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	e7c6      	b.n	800c7c0 <__kernel_rem_pio2+0x560>
 800c832:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c836:	f7f3 fd21 	bl	800027c <__adddf3>
 800c83a:	3401      	adds	r4, #1
 800c83c:	e7cb      	b.n	800c7d6 <__kernel_rem_pio2+0x576>
 800c83e:	ed35 7b02 	vldmdb	r5!, {d7}
 800c842:	ed8d 7b00 	vstr	d7, [sp]
 800c846:	ed95 7b02 	vldr	d7, [r5, #8]
 800c84a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c84e:	ec53 2b17 	vmov	r2, r3, d7
 800c852:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c856:	f7f3 fd11 	bl	800027c <__adddf3>
 800c85a:	4602      	mov	r2, r0
 800c85c:	460b      	mov	r3, r1
 800c85e:	4606      	mov	r6, r0
 800c860:	460f      	mov	r7, r1
 800c862:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c866:	f7f3 fd07 	bl	8000278 <__aeabi_dsub>
 800c86a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c86e:	f7f3 fd05 	bl	800027c <__adddf3>
 800c872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c876:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c87a:	e9c5 6700 	strd	r6, r7, [r5]
 800c87e:	e771      	b.n	800c764 <__kernel_rem_pio2+0x504>
 800c880:	ed34 7b02 	vldmdb	r4!, {d7}
 800c884:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c888:	ec51 0b17 	vmov	r0, r1, d7
 800c88c:	4652      	mov	r2, sl
 800c88e:	465b      	mov	r3, fp
 800c890:	ed8d 7b00 	vstr	d7, [sp]
 800c894:	f7f3 fcf2 	bl	800027c <__adddf3>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4606      	mov	r6, r0
 800c89e:	460f      	mov	r7, r1
 800c8a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8a4:	f7f3 fce8 	bl	8000278 <__aeabi_dsub>
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	465b      	mov	r3, fp
 800c8ac:	f7f3 fce6 	bl	800027c <__adddf3>
 800c8b0:	3d01      	subs	r5, #1
 800c8b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8b6:	e9c4 6700 	strd	r6, r7, [r4]
 800c8ba:	e757      	b.n	800c76c <__kernel_rem_pio2+0x50c>
 800c8bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c8c0:	f7f3 fcdc 	bl	800027c <__adddf3>
 800c8c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8c8:	e758      	b.n	800c77c <__kernel_rem_pio2+0x51c>
 800c8ca:	bf00      	nop
 800c8cc:	f3af 8000 	nop.w
	...
 800c8d8:	41700000 	.word	0x41700000
 800c8dc:	3e700000 	.word	0x3e700000
 800c8e0:	9b04      	ldr	r3, [sp, #16]
 800c8e2:	9a04      	ldr	r2, [sp, #16]
 800c8e4:	601d      	str	r5, [r3, #0]
 800c8e6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800c8ea:	605c      	str	r4, [r3, #4]
 800c8ec:	609f      	str	r7, [r3, #8]
 800c8ee:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800c8f2:	60d3      	str	r3, [r2, #12]
 800c8f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8f8:	6110      	str	r0, [r2, #16]
 800c8fa:	6153      	str	r3, [r2, #20]
 800c8fc:	e71d      	b.n	800c73a <__kernel_rem_pio2+0x4da>
 800c8fe:	bf00      	nop

0800c900 <scalbn>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	ec55 4b10 	vmov	r4, r5, d0
 800c906:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c90a:	4606      	mov	r6, r0
 800c90c:	462b      	mov	r3, r5
 800c90e:	b991      	cbnz	r1, 800c936 <scalbn+0x36>
 800c910:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c914:	4323      	orrs	r3, r4
 800c916:	d03b      	beq.n	800c990 <scalbn+0x90>
 800c918:	4b33      	ldr	r3, [pc, #204]	@ (800c9e8 <scalbn+0xe8>)
 800c91a:	4620      	mov	r0, r4
 800c91c:	4629      	mov	r1, r5
 800c91e:	2200      	movs	r2, #0
 800c920:	f7f3 fe62 	bl	80005e8 <__aeabi_dmul>
 800c924:	4b31      	ldr	r3, [pc, #196]	@ (800c9ec <scalbn+0xec>)
 800c926:	429e      	cmp	r6, r3
 800c928:	4604      	mov	r4, r0
 800c92a:	460d      	mov	r5, r1
 800c92c:	da0f      	bge.n	800c94e <scalbn+0x4e>
 800c92e:	a326      	add	r3, pc, #152	@ (adr r3, 800c9c8 <scalbn+0xc8>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	e01e      	b.n	800c974 <scalbn+0x74>
 800c936:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c93a:	4291      	cmp	r1, r2
 800c93c:	d10b      	bne.n	800c956 <scalbn+0x56>
 800c93e:	4622      	mov	r2, r4
 800c940:	4620      	mov	r0, r4
 800c942:	4629      	mov	r1, r5
 800c944:	f7f3 fc9a 	bl	800027c <__adddf3>
 800c948:	4604      	mov	r4, r0
 800c94a:	460d      	mov	r5, r1
 800c94c:	e020      	b.n	800c990 <scalbn+0x90>
 800c94e:	460b      	mov	r3, r1
 800c950:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c954:	3936      	subs	r1, #54	@ 0x36
 800c956:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c95a:	4296      	cmp	r6, r2
 800c95c:	dd0d      	ble.n	800c97a <scalbn+0x7a>
 800c95e:	2d00      	cmp	r5, #0
 800c960:	a11b      	add	r1, pc, #108	@ (adr r1, 800c9d0 <scalbn+0xd0>)
 800c962:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c966:	da02      	bge.n	800c96e <scalbn+0x6e>
 800c968:	a11b      	add	r1, pc, #108	@ (adr r1, 800c9d8 <scalbn+0xd8>)
 800c96a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96e:	a318      	add	r3, pc, #96	@ (adr r3, 800c9d0 <scalbn+0xd0>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	f7f3 fe38 	bl	80005e8 <__aeabi_dmul>
 800c978:	e7e6      	b.n	800c948 <scalbn+0x48>
 800c97a:	1872      	adds	r2, r6, r1
 800c97c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c980:	428a      	cmp	r2, r1
 800c982:	dcec      	bgt.n	800c95e <scalbn+0x5e>
 800c984:	2a00      	cmp	r2, #0
 800c986:	dd06      	ble.n	800c996 <scalbn+0x96>
 800c988:	f36f 531e 	bfc	r3, #20, #11
 800c98c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c990:	ec45 4b10 	vmov	d0, r4, r5
 800c994:	bd70      	pop	{r4, r5, r6, pc}
 800c996:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c99a:	da08      	bge.n	800c9ae <scalbn+0xae>
 800c99c:	2d00      	cmp	r5, #0
 800c99e:	a10a      	add	r1, pc, #40	@ (adr r1, 800c9c8 <scalbn+0xc8>)
 800c9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a4:	dac3      	bge.n	800c92e <scalbn+0x2e>
 800c9a6:	a10e      	add	r1, pc, #56	@ (adr r1, 800c9e0 <scalbn+0xe0>)
 800c9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ac:	e7bf      	b.n	800c92e <scalbn+0x2e>
 800c9ae:	3236      	adds	r2, #54	@ 0x36
 800c9b0:	f36f 531e 	bfc	r3, #20, #11
 800c9b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c9f0 <scalbn+0xf0>)
 800c9bc:	4629      	mov	r1, r5
 800c9be:	2200      	movs	r2, #0
 800c9c0:	e7d8      	b.n	800c974 <scalbn+0x74>
 800c9c2:	bf00      	nop
 800c9c4:	f3af 8000 	nop.w
 800c9c8:	c2f8f359 	.word	0xc2f8f359
 800c9cc:	01a56e1f 	.word	0x01a56e1f
 800c9d0:	8800759c 	.word	0x8800759c
 800c9d4:	7e37e43c 	.word	0x7e37e43c
 800c9d8:	8800759c 	.word	0x8800759c
 800c9dc:	fe37e43c 	.word	0xfe37e43c
 800c9e0:	c2f8f359 	.word	0xc2f8f359
 800c9e4:	81a56e1f 	.word	0x81a56e1f
 800c9e8:	43500000 	.word	0x43500000
 800c9ec:	ffff3cb0 	.word	0xffff3cb0
 800c9f0:	3c900000 	.word	0x3c900000
 800c9f4:	00000000 	.word	0x00000000

0800c9f8 <floor>:
 800c9f8:	ec51 0b10 	vmov	r0, r1, d0
 800c9fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ca08:	2e13      	cmp	r6, #19
 800ca0a:	460c      	mov	r4, r1
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	4680      	mov	r8, r0
 800ca10:	dc34      	bgt.n	800ca7c <floor+0x84>
 800ca12:	2e00      	cmp	r6, #0
 800ca14:	da17      	bge.n	800ca46 <floor+0x4e>
 800ca16:	a332      	add	r3, pc, #200	@ (adr r3, 800cae0 <floor+0xe8>)
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	f7f3 fc2e 	bl	800027c <__adddf3>
 800ca20:	2200      	movs	r2, #0
 800ca22:	2300      	movs	r3, #0
 800ca24:	f7f4 f870 	bl	8000b08 <__aeabi_dcmpgt>
 800ca28:	b150      	cbz	r0, 800ca40 <floor+0x48>
 800ca2a:	2c00      	cmp	r4, #0
 800ca2c:	da55      	bge.n	800cada <floor+0xe2>
 800ca2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ca32:	432c      	orrs	r4, r5
 800ca34:	2500      	movs	r5, #0
 800ca36:	42ac      	cmp	r4, r5
 800ca38:	4c2b      	ldr	r4, [pc, #172]	@ (800cae8 <floor+0xf0>)
 800ca3a:	bf08      	it	eq
 800ca3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800ca40:	4621      	mov	r1, r4
 800ca42:	4628      	mov	r0, r5
 800ca44:	e023      	b.n	800ca8e <floor+0x96>
 800ca46:	4f29      	ldr	r7, [pc, #164]	@ (800caec <floor+0xf4>)
 800ca48:	4137      	asrs	r7, r6
 800ca4a:	ea01 0307 	and.w	r3, r1, r7
 800ca4e:	4303      	orrs	r3, r0
 800ca50:	d01d      	beq.n	800ca8e <floor+0x96>
 800ca52:	a323      	add	r3, pc, #140	@ (adr r3, 800cae0 <floor+0xe8>)
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	f7f3 fc10 	bl	800027c <__adddf3>
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f7f4 f852 	bl	8000b08 <__aeabi_dcmpgt>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d0eb      	beq.n	800ca40 <floor+0x48>
 800ca68:	2c00      	cmp	r4, #0
 800ca6a:	bfbe      	ittt	lt
 800ca6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ca70:	4133      	asrlt	r3, r6
 800ca72:	18e4      	addlt	r4, r4, r3
 800ca74:	ea24 0407 	bic.w	r4, r4, r7
 800ca78:	2500      	movs	r5, #0
 800ca7a:	e7e1      	b.n	800ca40 <floor+0x48>
 800ca7c:	2e33      	cmp	r6, #51	@ 0x33
 800ca7e:	dd0a      	ble.n	800ca96 <floor+0x9e>
 800ca80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ca84:	d103      	bne.n	800ca8e <floor+0x96>
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	f7f3 fbf7 	bl	800027c <__adddf3>
 800ca8e:	ec41 0b10 	vmov	d0, r0, r1
 800ca92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ca9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ca9e:	40df      	lsrs	r7, r3
 800caa0:	4207      	tst	r7, r0
 800caa2:	d0f4      	beq.n	800ca8e <floor+0x96>
 800caa4:	a30e      	add	r3, pc, #56	@ (adr r3, 800cae0 <floor+0xe8>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	f7f3 fbe7 	bl	800027c <__adddf3>
 800caae:	2200      	movs	r2, #0
 800cab0:	2300      	movs	r3, #0
 800cab2:	f7f4 f829 	bl	8000b08 <__aeabi_dcmpgt>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d0c2      	beq.n	800ca40 <floor+0x48>
 800caba:	2c00      	cmp	r4, #0
 800cabc:	da0a      	bge.n	800cad4 <floor+0xdc>
 800cabe:	2e14      	cmp	r6, #20
 800cac0:	d101      	bne.n	800cac6 <floor+0xce>
 800cac2:	3401      	adds	r4, #1
 800cac4:	e006      	b.n	800cad4 <floor+0xdc>
 800cac6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800caca:	2301      	movs	r3, #1
 800cacc:	40b3      	lsls	r3, r6
 800cace:	441d      	add	r5, r3
 800cad0:	4545      	cmp	r5, r8
 800cad2:	d3f6      	bcc.n	800cac2 <floor+0xca>
 800cad4:	ea25 0507 	bic.w	r5, r5, r7
 800cad8:	e7b2      	b.n	800ca40 <floor+0x48>
 800cada:	2500      	movs	r5, #0
 800cadc:	462c      	mov	r4, r5
 800cade:	e7af      	b.n	800ca40 <floor+0x48>
 800cae0:	8800759c 	.word	0x8800759c
 800cae4:	7e37e43c 	.word	0x7e37e43c
 800cae8:	bff00000 	.word	0xbff00000
 800caec:	000fffff 	.word	0x000fffff

0800caf0 <_init>:
 800caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf2:	bf00      	nop
 800caf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf6:	bc08      	pop	{r3}
 800caf8:	469e      	mov	lr, r3
 800cafa:	4770      	bx	lr

0800cafc <_fini>:
 800cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafe:	bf00      	nop
 800cb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb02:	bc08      	pop	{r3}
 800cb04:	469e      	mov	lr, r3
 800cb06:	4770      	bx	lr
